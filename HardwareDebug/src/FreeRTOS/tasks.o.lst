   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"tasks.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  17              		.align	2
  18              		.arch armv7-a
  19              		.arch_extension mp
  20              		.arch_extension sec
  21              		.syntax unified
  22              		.arm
  23              		.fpu neon
  25              	prvTaskCheckFreeStackSpace:
  26              	.LVL0:
  27              	.LFB48:
  28              		.file 1 "../src/FreeRTOS/tasks.c"
   1:../src/FreeRTOS/tasks.c **** /*
   2:../src/FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.4.3 LTS Patch 1
   3:../src/FreeRTOS/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../src/FreeRTOS/tasks.c ****  *
   5:../src/FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../src/FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../src/FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../src/FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../src/FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../src/FreeRTOS/tasks.c ****  * subject to the following conditions:
  11:../src/FreeRTOS/tasks.c ****  *
  12:../src/FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../src/FreeRTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:../src/FreeRTOS/tasks.c ****  *
  15:../src/FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../src/FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../src/FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../src/FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../src/FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../src/FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../src/FreeRTOS/tasks.c ****  *
  22:../src/FreeRTOS/tasks.c ****  * https://www.FreeRTOS.org
  23:../src/FreeRTOS/tasks.c ****  * https://github.com/FreeRTOS
  24:../src/FreeRTOS/tasks.c ****  *
  25:../src/FreeRTOS/tasks.c ****  */
  26:../src/FreeRTOS/tasks.c **** 
  27:../src/FreeRTOS/tasks.c **** /* Standard includes. */
  28:../src/FreeRTOS/tasks.c **** #include <stdlib.h>
  29:../src/FreeRTOS/tasks.c **** #include <string.h>
  30:../src/FreeRTOS/tasks.c **** 
  31:../src/FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../src/FreeRTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  33:../src/FreeRTOS/tasks.c ****  * task.h is included from an application file. */
  34:../src/FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../src/FreeRTOS/tasks.c **** 
  36:../src/FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  37:../src/FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  38:../src/FreeRTOS/tasks.c **** #include "task.h"
  39:../src/FreeRTOS/tasks.c **** #include "timers.h"
  40:../src/FreeRTOS/tasks.c **** #include "stack_macros.h"
  41:../src/FreeRTOS/tasks.c **** 
  42:../src/FreeRTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  43:../src/FreeRTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:../src/FreeRTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  45:../src/FreeRTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  46:../src/FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  47:../src/FreeRTOS/tasks.c **** 
  48:../src/FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  49:../src/FreeRTOS/tasks.c ****  * functions but without including stdio.h here. */
  50:../src/FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  51:../src/FreeRTOS/tasks.c **** 
  52:../src/FreeRTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  53:../src/FreeRTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  54:../src/FreeRTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../src/FreeRTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  56:../src/FreeRTOS/tasks.c ****     #include <stdio.h>
  57:../src/FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../src/FreeRTOS/tasks.c **** 
  59:../src/FreeRTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  60:../src/FreeRTOS/tasks.c **** 
  61:../src/FreeRTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  62:../src/FreeRTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  63:../src/FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  64:../src/FreeRTOS/tasks.c **** #else
  65:../src/FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  66:../src/FreeRTOS/tasks.c **** #endif
  67:../src/FreeRTOS/tasks.c **** 
  68:../src/FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:../src/FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  70:../src/FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  71:../src/FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  72:../src/FreeRTOS/tasks.c **** 
  73:../src/FreeRTOS/tasks.c **** /*
  74:../src/FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:../src/FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:../src/FreeRTOS/tasks.c ****  */
  77:../src/FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  78:../src/FreeRTOS/tasks.c **** 
  79:../src/FreeRTOS/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  80:../src/FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  81:../src/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  82:../src/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  83:../src/FreeRTOS/tasks.c **** 
  84:../src/FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  85:../src/FreeRTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  86:../src/FreeRTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  87:../src/FreeRTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  88:../src/FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  89:../src/FreeRTOS/tasks.c **** #else
  90:../src/FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  91:../src/FreeRTOS/tasks.c **** #endif
  92:../src/FreeRTOS/tasks.c **** 
  93:../src/FreeRTOS/tasks.c **** /*
  94:../src/FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  95:../src/FreeRTOS/tasks.c ****  */
  96:../src/FreeRTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  97:../src/FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
  98:../src/FreeRTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
  99:../src/FreeRTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 100:../src/FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 101:../src/FreeRTOS/tasks.c **** 
 102:../src/FreeRTOS/tasks.c **** /*
 103:../src/FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 104:../src/FreeRTOS/tasks.c ****  * global, rather than file scope.
 105:../src/FreeRTOS/tasks.c ****  */
 106:../src/FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 107:../src/FreeRTOS/tasks.c ****     #define static
 108:../src/FreeRTOS/tasks.c **** #endif
 109:../src/FreeRTOS/tasks.c **** 
 110:../src/FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 111:../src/FreeRTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 112:../src/FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 113:../src/FreeRTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 114:../src/FreeRTOS/tasks.c **** #endif
 115:../src/FreeRTOS/tasks.c **** 
 116:../src/FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 117:../src/FreeRTOS/tasks.c **** 
 118:../src/FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 119:../src/FreeRTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 120:../src/FreeRTOS/tasks.c ****  * microcontroller architecture. */
 121:../src/FreeRTOS/tasks.c **** 
 122:../src/FreeRTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 123:../src/FreeRTOS/tasks.c ****  * state task. */
 124:../src/FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 125:../src/FreeRTOS/tasks.c ****     {                                               \
 126:../src/FreeRTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 127:../src/FreeRTOS/tasks.c ****         {                                           \
 128:../src/FreeRTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 129:../src/FreeRTOS/tasks.c ****         }                                           \
 130:../src/FreeRTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 131:../src/FreeRTOS/tasks.c **** 
 132:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 133:../src/FreeRTOS/tasks.c **** 
 134:../src/FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 135:../src/FreeRTOS/tasks.c ****     {                                                                         \
 136:../src/FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 137:../src/FreeRTOS/tasks.c ****                                                                               \
 138:../src/FreeRTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 139:../src/FreeRTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 140:../src/FreeRTOS/tasks.c ****         {                                                                     \
 141:../src/FreeRTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 142:../src/FreeRTOS/tasks.c ****             --uxTopPriority;                                                  \
 143:../src/FreeRTOS/tasks.c ****         }                                                                     \
 144:../src/FreeRTOS/tasks.c ****                                                                               \
 145:../src/FreeRTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 146:../src/FreeRTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 147:../src/FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 148:../src/FreeRTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 149:../src/FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 150:../src/FreeRTOS/tasks.c **** 
 151:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 152:../src/FreeRTOS/tasks.c **** 
 153:../src/FreeRTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 154:../src/FreeRTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 155:../src/FreeRTOS/tasks.c ****  * being used. */
 156:../src/FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 157:../src/FreeRTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 158:../src/FreeRTOS/tasks.c **** 
 159:../src/FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 160:../src/FreeRTOS/tasks.c **** 
 161:../src/FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 162:../src/FreeRTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 163:../src/FreeRTOS/tasks.c ****  * architecture being used. */
 164:../src/FreeRTOS/tasks.c **** 
 165:../src/FreeRTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 166:../src/FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 167:../src/FreeRTOS/tasks.c **** 
 168:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 169:../src/FreeRTOS/tasks.c **** 
 170:../src/FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 171:../src/FreeRTOS/tasks.c ****     {                                                                                           \
 172:../src/FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 173:../src/FreeRTOS/tasks.c ****                                                                                                 \
 174:../src/FreeRTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 175:../src/FreeRTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 176:../src/FreeRTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 177:../src/FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 178:../src/FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 179:../src/FreeRTOS/tasks.c **** 
 180:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 181:../src/FreeRTOS/tasks.c **** 
 182:../src/FreeRTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 183:../src/FreeRTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 184:../src/FreeRTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 185:../src/FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 186:../src/FreeRTOS/tasks.c ****     {                                                                                              
 187:../src/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 188:../src/FreeRTOS/tasks.c ****         {                                                                                          
 189:../src/FreeRTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 190:../src/FreeRTOS/tasks.c ****         }                                                                                          
 191:../src/FreeRTOS/tasks.c ****     }
 192:../src/FreeRTOS/tasks.c **** 
 193:../src/FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../src/FreeRTOS/tasks.c **** 
 195:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 196:../src/FreeRTOS/tasks.c **** 
 197:../src/FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 198:../src/FreeRTOS/tasks.c ****  * count overflows. */
 199:../src/FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 200:../src/FreeRTOS/tasks.c ****     {                                                                             \
 201:../src/FreeRTOS/tasks.c ****         List_t * pxTemp;                                                          \
 202:../src/FreeRTOS/tasks.c ****                                                                                   \
 203:../src/FreeRTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 204:../src/FreeRTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 205:../src/FreeRTOS/tasks.c ****                                                                                   \
 206:../src/FreeRTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 207:../src/FreeRTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 208:../src/FreeRTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 209:../src/FreeRTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 210:../src/FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 211:../src/FreeRTOS/tasks.c ****     }
 212:../src/FreeRTOS/tasks.c **** 
 213:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 214:../src/FreeRTOS/tasks.c **** 
 215:../src/FreeRTOS/tasks.c **** /*
 216:../src/FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 217:../src/FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 218:../src/FreeRTOS/tasks.c ****  */
 219:../src/FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 220:../src/FreeRTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 221:../src/FreeRTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 222:../src/FreeRTOS/tasks.c ****     vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 223:../src/FreeRTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 224:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 225:../src/FreeRTOS/tasks.c **** 
 226:../src/FreeRTOS/tasks.c **** /*
 227:../src/FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 228:../src/FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 229:../src/FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 230:../src/FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 231:../src/FreeRTOS/tasks.c ****  */
 232:../src/FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 233:../src/FreeRTOS/tasks.c **** 
 234:../src/FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 235:../src/FreeRTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 236:../src/FreeRTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 237:../src/FreeRTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 238:../src/FreeRTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 239:../src/FreeRTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 240:../src/FreeRTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 241:../src/FreeRTOS/tasks.c ****  * to its original value when it is released. */
 242:../src/FreeRTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 243:../src/FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 244:../src/FreeRTOS/tasks.c **** #else
 245:../src/FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 246:../src/FreeRTOS/tasks.c **** #endif
 247:../src/FreeRTOS/tasks.c **** 
 248:../src/FreeRTOS/tasks.c **** /*
 249:../src/FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 250:../src/FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 251:../src/FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 252:../src/FreeRTOS/tasks.c ****  */
 253:../src/FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 254:../src/FreeRTOS/tasks.c **** {
 255:../src/FreeRTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 256:../src/FreeRTOS/tasks.c **** 
 257:../src/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 258:../src/FreeRTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 259:../src/FreeRTOS/tasks.c ****     #endif
 260:../src/FreeRTOS/tasks.c **** 
 261:../src/FreeRTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 262:../src/FreeRTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 263:../src/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 264:../src/FreeRTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 265:../src/FreeRTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 266:../src/FreeRTOS/tasks.c **** 
 267:../src/FreeRTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 268:../src/FreeRTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 269:../src/FreeRTOS/tasks.c ****     #endif
 270:../src/FreeRTOS/tasks.c **** 
 271:../src/FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 272:../src/FreeRTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 273:../src/FreeRTOS/tasks.c ****     #endif
 274:../src/FreeRTOS/tasks.c **** 
 275:../src/FreeRTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 276:../src/FreeRTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 277:../src/FreeRTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 278:../src/FreeRTOS/tasks.c ****     #endif
 279:../src/FreeRTOS/tasks.c **** 
 280:../src/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 281:../src/FreeRTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 282:../src/FreeRTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 283:../src/FreeRTOS/tasks.c ****     #endif
 284:../src/FreeRTOS/tasks.c **** 
 285:../src/FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 286:../src/FreeRTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 287:../src/FreeRTOS/tasks.c ****     #endif
 288:../src/FreeRTOS/tasks.c **** 
 289:../src/FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 290:../src/FreeRTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 291:../src/FreeRTOS/tasks.c ****     #endif
 292:../src/FreeRTOS/tasks.c **** 
 293:../src/FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 294:../src/FreeRTOS/tasks.c ****         uint32_t ulRunTimeCounter; /*< Stores the amount of time the task has spent in the Running 
 295:../src/FreeRTOS/tasks.c ****     #endif
 296:../src/FreeRTOS/tasks.c **** 
 297:../src/FreeRTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 298:../src/FreeRTOS/tasks.c **** 
 299:../src/FreeRTOS/tasks.c ****         /* Allocate a Newlib reent structure that is specific to this task.
 300:../src/FreeRTOS/tasks.c ****          * Note Newlib support has been included by popular demand, but is not
 301:../src/FreeRTOS/tasks.c ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 302:../src/FreeRTOS/tasks.c ****          * responsible for resulting newlib operation.  User must be familiar with
 303:../src/FreeRTOS/tasks.c ****          * newlib and must provide system-wide implementations of the necessary
 304:../src/FreeRTOS/tasks.c ****          * stubs. Be warned that (at the time of writing) the current newlib design
 305:../src/FreeRTOS/tasks.c ****          * implements a system-wide malloc() that must be provided with locks.
 306:../src/FreeRTOS/tasks.c ****          *
 307:../src/FreeRTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 308:../src/FreeRTOS/tasks.c ****          * for additional information. */
 309:../src/FreeRTOS/tasks.c ****         struct  _reent xNewLib_reent;
 310:../src/FreeRTOS/tasks.c ****     #endif
 311:../src/FreeRTOS/tasks.c **** 
 312:../src/FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 313:../src/FreeRTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 314:../src/FreeRTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 315:../src/FreeRTOS/tasks.c ****     #endif
 316:../src/FreeRTOS/tasks.c **** 
 317:../src/FreeRTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 318:../src/FreeRTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 319:../src/FreeRTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 320:../src/FreeRTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 321:../src/FreeRTOS/tasks.c ****     #endif
 322:../src/FreeRTOS/tasks.c **** 
 323:../src/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 324:../src/FreeRTOS/tasks.c ****         uint8_t ucDelayAborted;
 325:../src/FreeRTOS/tasks.c ****     #endif
 326:../src/FreeRTOS/tasks.c **** 
 327:../src/FreeRTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 328:../src/FreeRTOS/tasks.c ****         int iTaskErrno;
 329:../src/FreeRTOS/tasks.c ****     #endif
 330:../src/FreeRTOS/tasks.c **** } tskTCB;
 331:../src/FreeRTOS/tasks.c **** 
 332:../src/FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 333:../src/FreeRTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 334:../src/FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 335:../src/FreeRTOS/tasks.c **** 
 336:../src/FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 337:../src/FreeRTOS/tasks.c ****  * which static variables must be declared volatile. */
 338:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 339:../src/FreeRTOS/tasks.c **** 
 340:../src/FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 341:../src/FreeRTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 342:../src/FreeRTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 343:../src/FreeRTOS/tasks.c ****  * the static qualifier. */
 344:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 345:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 346:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 347:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 348:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 349:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 350:../src/FreeRTOS/tasks.c **** 
 351:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 352:../src/FreeRTOS/tasks.c **** 
 353:../src/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 354:../src/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 355:../src/FreeRTOS/tasks.c **** 
 356:../src/FreeRTOS/tasks.c **** #endif
 357:../src/FreeRTOS/tasks.c **** 
 358:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 359:../src/FreeRTOS/tasks.c **** 
 360:../src/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 361:../src/FreeRTOS/tasks.c **** 
 362:../src/FreeRTOS/tasks.c **** #endif
 363:../src/FreeRTOS/tasks.c **** 
 364:../src/FreeRTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 365:../src/FreeRTOS/tasks.c ****  * the errno of the currently running task. */
 366:../src/FreeRTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 367:../src/FreeRTOS/tasks.c ****     int FreeRTOS_errno = 0;
 368:../src/FreeRTOS/tasks.c **** #endif
 369:../src/FreeRTOS/tasks.c **** 
 370:../src/FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 371:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 372:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 373:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 374:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 375:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 376:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 377:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 378:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 379:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 380:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 381:../src/FreeRTOS/tasks.c **** 
 382:../src/FreeRTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 383:../src/FreeRTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 384:../src/FreeRTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 385:../src/FreeRTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 386:../src/FreeRTOS/tasks.c **** 
 387:../src/FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 388:../src/FreeRTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 389:../src/FreeRTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 390:../src/FreeRTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 391:../src/FreeRTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 392:../src/FreeRTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 393:../src/FreeRTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 394:../src/FreeRTOS/tasks.c ****  * accessed from a critical section. */
 395:../src/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 396:../src/FreeRTOS/tasks.c **** 
 397:../src/FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 398:../src/FreeRTOS/tasks.c **** 
 399:../src/FreeRTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 400:../src/FreeRTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 401:../src/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;    /*< Holds the value of a timer/c
 402:../src/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile uint32_t ulTotalRunTime = 0UL; /*< Holds the total amount of ex
 403:../src/FreeRTOS/tasks.c **** 
 404:../src/FreeRTOS/tasks.c **** #endif
 405:../src/FreeRTOS/tasks.c **** 
 406:../src/FreeRTOS/tasks.c **** /*lint -restore */
 407:../src/FreeRTOS/tasks.c **** 
 408:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 409:../src/FreeRTOS/tasks.c **** 
 410:../src/FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 411:../src/FreeRTOS/tasks.c **** 
 412:../src/FreeRTOS/tasks.c **** /**
 413:../src/FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 414:../src/FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 415:../src/FreeRTOS/tasks.c ****  * is in any other state.
 416:../src/FreeRTOS/tasks.c ****  */
 417:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 418:../src/FreeRTOS/tasks.c **** 
 419:../src/FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 420:../src/FreeRTOS/tasks.c **** 
 421:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 422:../src/FreeRTOS/tasks.c **** 
 423:../src/FreeRTOS/tasks.c **** /*
 424:../src/FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 425:../src/FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 426:../src/FreeRTOS/tasks.c ****  */
 427:../src/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 428:../src/FreeRTOS/tasks.c **** 
 429:../src/FreeRTOS/tasks.c **** /*
 430:../src/FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 431:../src/FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 432:../src/FreeRTOS/tasks.c ****  * creation of the first user task.
 433:../src/FreeRTOS/tasks.c ****  *
 434:../src/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 435:../src/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 436:../src/FreeRTOS/tasks.c ****  *
 437:../src/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 438:../src/FreeRTOS/tasks.c ****  *
 439:../src/FreeRTOS/tasks.c ****  */
 440:../src/FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 441:../src/FreeRTOS/tasks.c **** 
 442:../src/FreeRTOS/tasks.c **** /*
 443:../src/FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 444:../src/FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 445:../src/FreeRTOS/tasks.c ****  *
 446:../src/FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 447:../src/FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 448:../src/FreeRTOS/tasks.c ****  */
 449:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 450:../src/FreeRTOS/tasks.c **** 
 451:../src/FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 452:../src/FreeRTOS/tasks.c **** 
 453:../src/FreeRTOS/tasks.c **** #endif
 454:../src/FreeRTOS/tasks.c **** 
 455:../src/FreeRTOS/tasks.c **** /*
 456:../src/FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 457:../src/FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 458:../src/FreeRTOS/tasks.c ****  * and its TCB deleted.
 459:../src/FreeRTOS/tasks.c ****  */
 460:../src/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 461:../src/FreeRTOS/tasks.c **** 
 462:../src/FreeRTOS/tasks.c **** /*
 463:../src/FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 464:../src/FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 465:../src/FreeRTOS/tasks.c ****  */
 466:../src/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 467:../src/FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 468:../src/FreeRTOS/tasks.c **** 
 469:../src/FreeRTOS/tasks.c **** /*
 470:../src/FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 471:../src/FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 472:../src/FreeRTOS/tasks.c ****  * a suspended list, etc.).
 473:../src/FreeRTOS/tasks.c ****  *
 474:../src/FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 475:../src/FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 476:../src/FreeRTOS/tasks.c ****  */
 477:../src/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 478:../src/FreeRTOS/tasks.c **** 
 479:../src/FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 480:../src/FreeRTOS/tasks.c ****                                                      List_t * pxList,
 481:../src/FreeRTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 482:../src/FreeRTOS/tasks.c **** 
 483:../src/FreeRTOS/tasks.c **** #endif
 484:../src/FreeRTOS/tasks.c **** 
 485:../src/FreeRTOS/tasks.c **** /*
 486:../src/FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 487:../src/FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 488:../src/FreeRTOS/tasks.c ****  */
 489:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 490:../src/FreeRTOS/tasks.c **** 
 491:../src/FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 492:../src/FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 493:../src/FreeRTOS/tasks.c **** 
 494:../src/FreeRTOS/tasks.c **** #endif
 495:../src/FreeRTOS/tasks.c **** 
 496:../src/FreeRTOS/tasks.c **** /*
 497:../src/FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 498:../src/FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 499:../src/FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 500:../src/FreeRTOS/tasks.c ****  */
 501:../src/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 502:../src/FreeRTOS/tasks.c **** 
 503:../src/FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 504:../src/FreeRTOS/tasks.c **** 
 505:../src/FreeRTOS/tasks.c **** #endif
 506:../src/FreeRTOS/tasks.c **** 
 507:../src/FreeRTOS/tasks.c **** /*
 508:../src/FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 509:../src/FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 510:../src/FreeRTOS/tasks.c ****  *
 511:../src/FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 512:../src/FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 513:../src/FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 514:../src/FreeRTOS/tasks.c ****  * set to a value other than 1.
 515:../src/FreeRTOS/tasks.c ****  */
 516:../src/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 517:../src/FreeRTOS/tasks.c **** 
 518:../src/FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 519:../src/FreeRTOS/tasks.c **** 
 520:../src/FreeRTOS/tasks.c **** #endif
 521:../src/FreeRTOS/tasks.c **** 
 522:../src/FreeRTOS/tasks.c **** /*
 523:../src/FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 524:../src/FreeRTOS/tasks.c ****  * will exit the Blocked state.
 525:../src/FreeRTOS/tasks.c ****  */
 526:../src/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 527:../src/FreeRTOS/tasks.c **** 
 528:../src/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 529:../src/FreeRTOS/tasks.c **** 
 530:../src/FreeRTOS/tasks.c **** /*
 531:../src/FreeRTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 532:../src/FreeRTOS/tasks.c ****  * human readable tables of task information.
 533:../src/FreeRTOS/tasks.c ****  */
 534:../src/FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 535:../src/FreeRTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 536:../src/FreeRTOS/tasks.c **** 
 537:../src/FreeRTOS/tasks.c **** #endif
 538:../src/FreeRTOS/tasks.c **** 
 539:../src/FreeRTOS/tasks.c **** /*
 540:../src/FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 541:../src/FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 542:../src/FreeRTOS/tasks.c ****  */
 543:../src/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 544:../src/FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 545:../src/FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 546:../src/FreeRTOS/tasks.c ****                                   void * const pvParameters,
 547:../src/FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 548:../src/FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 549:../src/FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 550:../src/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 551:../src/FreeRTOS/tasks.c **** 
 552:../src/FreeRTOS/tasks.c **** /*
 553:../src/FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 554:../src/FreeRTOS/tasks.c ****  * under the control of the scheduler.
 555:../src/FreeRTOS/tasks.c ****  */
 556:../src/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 557:../src/FreeRTOS/tasks.c **** 
 558:../src/FreeRTOS/tasks.c **** /*
 559:../src/FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 560:../src/FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 561:../src/FreeRTOS/tasks.c ****  * called by the function.
 562:../src/FreeRTOS/tasks.c ****  */
 563:../src/FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 564:../src/FreeRTOS/tasks.c **** 
 565:../src/FreeRTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 566:../src/FreeRTOS/tasks.c **** 
 567:../src/FreeRTOS/tasks.c **** #endif
 568:../src/FreeRTOS/tasks.c **** 
 569:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 570:../src/FreeRTOS/tasks.c **** 
 571:../src/FreeRTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 572:../src/FreeRTOS/tasks.c **** 
 573:../src/FreeRTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 574:../src/FreeRTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 575:../src/FreeRTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 576:../src/FreeRTOS/tasks.c ****                                     void * const pvParameters,
 577:../src/FreeRTOS/tasks.c ****                                     UBaseType_t uxPriority,
 578:../src/FreeRTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 579:../src/FreeRTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 580:../src/FreeRTOS/tasks.c ****     {
 581:../src/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 582:../src/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 583:../src/FreeRTOS/tasks.c **** 
 584:../src/FreeRTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 585:../src/FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 586:../src/FreeRTOS/tasks.c **** 
 587:../src/FreeRTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 588:../src/FreeRTOS/tasks.c ****             {
 589:../src/FreeRTOS/tasks.c ****                 /* Sanity check that the size of the structure used to declare a
 590:../src/FreeRTOS/tasks.c ****                  * variable of type StaticTask_t equals the size of the real task
 591:../src/FreeRTOS/tasks.c ****                  * structure. */
 592:../src/FreeRTOS/tasks.c ****                 volatile size_t xSize = sizeof( StaticTask_t );
 593:../src/FreeRTOS/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 594:../src/FreeRTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 595:../src/FreeRTOS/tasks.c ****             }
 596:../src/FreeRTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 597:../src/FreeRTOS/tasks.c **** 
 598:../src/FreeRTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 599:../src/FreeRTOS/tasks.c ****         {
 600:../src/FreeRTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 601:../src/FreeRTOS/tasks.c ****              * function - use them. */
 602:../src/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 603:../src/FreeRTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 604:../src/FreeRTOS/tasks.c **** 
 605:../src/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 606:../src/FreeRTOS/tasks.c ****                 {
 607:../src/FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 608:../src/FreeRTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 609:../src/FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 610:../src/FreeRTOS/tasks.c ****                 }
 611:../src/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 612:../src/FreeRTOS/tasks.c **** 
 613:../src/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 614:../src/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 615:../src/FreeRTOS/tasks.c ****         }
 616:../src/FreeRTOS/tasks.c ****         else
 617:../src/FreeRTOS/tasks.c ****         {
 618:../src/FreeRTOS/tasks.c ****             xReturn = NULL;
 619:../src/FreeRTOS/tasks.c ****         }
 620:../src/FreeRTOS/tasks.c **** 
 621:../src/FreeRTOS/tasks.c ****         return xReturn;
 622:../src/FreeRTOS/tasks.c ****     }
 623:../src/FreeRTOS/tasks.c **** 
 624:../src/FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 625:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 626:../src/FreeRTOS/tasks.c **** 
 627:../src/FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 628:../src/FreeRTOS/tasks.c **** 
 629:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 630:../src/FreeRTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 631:../src/FreeRTOS/tasks.c ****     {
 632:../src/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 633:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 634:../src/FreeRTOS/tasks.c **** 
 635:../src/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 636:../src/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 637:../src/FreeRTOS/tasks.c **** 
 638:../src/FreeRTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 639:../src/FreeRTOS/tasks.c ****         {
 640:../src/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 641:../src/FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 642:../src/FreeRTOS/tasks.c ****              * not static allocation is being used. */
 643:../src/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 644:../src/FreeRTOS/tasks.c **** 
 645:../src/FreeRTOS/tasks.c ****             /* Store the stack location in the TCB. */
 646:../src/FreeRTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 647:../src/FreeRTOS/tasks.c **** 
 648:../src/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 649:../src/FreeRTOS/tasks.c ****                 {
 650:../src/FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 651:../src/FreeRTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 652:../src/FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 653:../src/FreeRTOS/tasks.c ****                 }
 654:../src/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 655:../src/FreeRTOS/tasks.c **** 
 656:../src/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 657:../src/FreeRTOS/tasks.c ****                                   pxTaskDefinition->pcName,
 658:../src/FreeRTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 659:../src/FreeRTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 660:../src/FreeRTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 661:../src/FreeRTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 662:../src/FreeRTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 663:../src/FreeRTOS/tasks.c **** 
 664:../src/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 665:../src/FreeRTOS/tasks.c ****             xReturn = pdPASS;
 666:../src/FreeRTOS/tasks.c ****         }
 667:../src/FreeRTOS/tasks.c **** 
 668:../src/FreeRTOS/tasks.c ****         return xReturn;
 669:../src/FreeRTOS/tasks.c ****     }
 670:../src/FreeRTOS/tasks.c **** 
 671:../src/FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 672:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 673:../src/FreeRTOS/tasks.c **** 
 674:../src/FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 675:../src/FreeRTOS/tasks.c **** 
 676:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 677:../src/FreeRTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 678:../src/FreeRTOS/tasks.c ****     {
 679:../src/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 680:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:../src/FreeRTOS/tasks.c **** 
 682:../src/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 683:../src/FreeRTOS/tasks.c **** 
 684:../src/FreeRTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 685:../src/FreeRTOS/tasks.c ****         {
 686:../src/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 687:../src/FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 688:../src/FreeRTOS/tasks.c ****              * not static allocation is being used. */
 689:../src/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:../src/FreeRTOS/tasks.c **** 
 691:../src/FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 692:../src/FreeRTOS/tasks.c ****             {
 693:../src/FreeRTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 694:../src/FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:../src/FreeRTOS/tasks.c **** 
 696:../src/FreeRTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 697:../src/FreeRTOS/tasks.c ****                     {
 698:../src/FreeRTOS/tasks.c ****                         /* Tasks can be created statically or dynamically, so note
 699:../src/FreeRTOS/tasks.c ****                          * this task had a statically allocated stack in case it is
 700:../src/FreeRTOS/tasks.c ****                          * later deleted.  The TCB was allocated dynamically. */
 701:../src/FreeRTOS/tasks.c ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:../src/FreeRTOS/tasks.c ****                     }
 703:../src/FreeRTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 704:../src/FreeRTOS/tasks.c **** 
 705:../src/FreeRTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 706:../src/FreeRTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 707:../src/FreeRTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 708:../src/FreeRTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 709:../src/FreeRTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 710:../src/FreeRTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 711:../src/FreeRTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 712:../src/FreeRTOS/tasks.c **** 
 713:../src/FreeRTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 714:../src/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 715:../src/FreeRTOS/tasks.c ****             }
 716:../src/FreeRTOS/tasks.c ****         }
 717:../src/FreeRTOS/tasks.c **** 
 718:../src/FreeRTOS/tasks.c ****         return xReturn;
 719:../src/FreeRTOS/tasks.c ****     }
 720:../src/FreeRTOS/tasks.c **** 
 721:../src/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 723:../src/FreeRTOS/tasks.c **** 
 724:../src/FreeRTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:../src/FreeRTOS/tasks.c **** 
 726:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 727:../src/FreeRTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 728:../src/FreeRTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 729:../src/FreeRTOS/tasks.c ****                             void * const pvParameters,
 730:../src/FreeRTOS/tasks.c ****                             UBaseType_t uxPriority,
 731:../src/FreeRTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 732:../src/FreeRTOS/tasks.c ****     {
 733:../src/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 734:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 735:../src/FreeRTOS/tasks.c **** 
 736:../src/FreeRTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 737:../src/FreeRTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:../src/FreeRTOS/tasks.c ****          * the TCB then the stack. */
 739:../src/FreeRTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 740:../src/FreeRTOS/tasks.c ****             {
 741:../src/FreeRTOS/tasks.c ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 742:../src/FreeRTOS/tasks.c ****                  * the implementation of the port malloc function and whether or not static
 743:../src/FreeRTOS/tasks.c ****                  * allocation is being used. */
 744:../src/FreeRTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:../src/FreeRTOS/tasks.c **** 
 746:../src/FreeRTOS/tasks.c ****                 if( pxNewTCB != NULL )
 747:../src/FreeRTOS/tasks.c ****                 {
 748:../src/FreeRTOS/tasks.c ****                     /* Allocate space for the stack used by the task being created.
 749:../src/FreeRTOS/tasks.c ****                      * The base of the stack memory stored in the TCB so the task can
 750:../src/FreeRTOS/tasks.c ****                      * be deleted later if required. */
 751:../src/FreeRTOS/tasks.c ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth
 752:../src/FreeRTOS/tasks.c **** 
 753:../src/FreeRTOS/tasks.c ****                     if( pxNewTCB->pxStack == NULL )
 754:../src/FreeRTOS/tasks.c ****                     {
 755:../src/FreeRTOS/tasks.c ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 756:../src/FreeRTOS/tasks.c ****                         vPortFree( pxNewTCB );
 757:../src/FreeRTOS/tasks.c ****                         pxNewTCB = NULL;
 758:../src/FreeRTOS/tasks.c ****                     }
 759:../src/FreeRTOS/tasks.c ****                 }
 760:../src/FreeRTOS/tasks.c ****             }
 761:../src/FreeRTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 762:../src/FreeRTOS/tasks.c ****             {
 763:../src/FreeRTOS/tasks.c ****                 StackType_t * pxStack;
 764:../src/FreeRTOS/tasks.c **** 
 765:../src/FreeRTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created. */
 766:../src/FreeRTOS/tasks.c ****                 pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); 
 767:../src/FreeRTOS/tasks.c **** 
 768:../src/FreeRTOS/tasks.c ****                 if( pxStack != NULL )
 769:../src/FreeRTOS/tasks.c ****                 {
 770:../src/FreeRTOS/tasks.c ****                     /* Allocate space for the TCB. */
 771:../src/FreeRTOS/tasks.c ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
 772:../src/FreeRTOS/tasks.c **** 
 773:../src/FreeRTOS/tasks.c ****                     if( pxNewTCB != NULL )
 774:../src/FreeRTOS/tasks.c ****                     {
 775:../src/FreeRTOS/tasks.c ****                         /* Store the stack location in the TCB. */
 776:../src/FreeRTOS/tasks.c ****                         pxNewTCB->pxStack = pxStack;
 777:../src/FreeRTOS/tasks.c ****                     }
 778:../src/FreeRTOS/tasks.c ****                     else
 779:../src/FreeRTOS/tasks.c ****                     {
 780:../src/FreeRTOS/tasks.c ****                         /* The stack cannot be used as the TCB was not created.  Free
 781:../src/FreeRTOS/tasks.c ****                          * it again. */
 782:../src/FreeRTOS/tasks.c ****                         vPortFree( pxStack );
 783:../src/FreeRTOS/tasks.c ****                     }
 784:../src/FreeRTOS/tasks.c ****                 }
 785:../src/FreeRTOS/tasks.c ****                 else
 786:../src/FreeRTOS/tasks.c ****                 {
 787:../src/FreeRTOS/tasks.c ****                     pxNewTCB = NULL;
 788:../src/FreeRTOS/tasks.c ****                 }
 789:../src/FreeRTOS/tasks.c ****             }
 790:../src/FreeRTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 791:../src/FreeRTOS/tasks.c **** 
 792:../src/FreeRTOS/tasks.c ****         if( pxNewTCB != NULL )
 793:../src/FreeRTOS/tasks.c ****         {
 794:../src/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 795:../src/FreeRTOS/tasks.c ****                 {
 796:../src/FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 797:../src/FreeRTOS/tasks.c ****                      * task was created dynamically in case it is later deleted. */
 798:../src/FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:../src/FreeRTOS/tasks.c ****                 }
 800:../src/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 801:../src/FreeRTOS/tasks.c **** 
 802:../src/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 803:../src/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 804:../src/FreeRTOS/tasks.c ****             xReturn = pdPASS;
 805:../src/FreeRTOS/tasks.c ****         }
 806:../src/FreeRTOS/tasks.c ****         else
 807:../src/FreeRTOS/tasks.c ****         {
 808:../src/FreeRTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:../src/FreeRTOS/tasks.c ****         }
 810:../src/FreeRTOS/tasks.c **** 
 811:../src/FreeRTOS/tasks.c ****         return xReturn;
 812:../src/FreeRTOS/tasks.c ****     }
 813:../src/FreeRTOS/tasks.c **** 
 814:../src/FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 816:../src/FreeRTOS/tasks.c **** 
 817:../src/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 818:../src/FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 819:../src/FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 820:../src/FreeRTOS/tasks.c ****                                   void * const pvParameters,
 821:../src/FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 822:../src/FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 823:../src/FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 824:../src/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 825:../src/FreeRTOS/tasks.c **** {
 826:../src/FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 827:../src/FreeRTOS/tasks.c ****     UBaseType_t x;
 828:../src/FreeRTOS/tasks.c **** 
 829:../src/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 830:../src/FreeRTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 831:../src/FreeRTOS/tasks.c ****         BaseType_t xRunPrivileged;
 832:../src/FreeRTOS/tasks.c **** 
 833:../src/FreeRTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 834:../src/FreeRTOS/tasks.c ****         {
 835:../src/FreeRTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 836:../src/FreeRTOS/tasks.c ****         }
 837:../src/FreeRTOS/tasks.c ****         else
 838:../src/FreeRTOS/tasks.c ****         {
 839:../src/FreeRTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 840:../src/FreeRTOS/tasks.c ****         }
 841:../src/FreeRTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 842:../src/FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 843:../src/FreeRTOS/tasks.c **** 
 844:../src/FreeRTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 845:../src/FreeRTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 846:../src/FreeRTOS/tasks.c ****         {
 847:../src/FreeRTOS/tasks.c ****             /* Fill the stack with a known value to assist debugging. */
 848:../src/FreeRTOS/tasks.c ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 849:../src/FreeRTOS/tasks.c ****         }
 850:../src/FreeRTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 851:../src/FreeRTOS/tasks.c **** 
 852:../src/FreeRTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 853:../src/FreeRTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 854:../src/FreeRTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 855:../src/FreeRTOS/tasks.c ****      * by the port. */
 856:../src/FreeRTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 857:../src/FreeRTOS/tasks.c ****         {
 858:../src/FreeRTOS/tasks.c ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 859:../src/FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 860:../src/FreeRTOS/tasks.c **** 
 861:../src/FreeRTOS/tasks.c ****             /* Check the alignment of the calculated top of stack is correct. */
 862:../src/FreeRTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 863:../src/FreeRTOS/tasks.c **** 
 864:../src/FreeRTOS/tasks.c ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 865:../src/FreeRTOS/tasks.c ****                 {
 866:../src/FreeRTOS/tasks.c ****                     /* Also record the stack's high address, which may assist
 867:../src/FreeRTOS/tasks.c ****                      * debugging. */
 868:../src/FreeRTOS/tasks.c ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 869:../src/FreeRTOS/tasks.c ****                 }
 870:../src/FreeRTOS/tasks.c ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 871:../src/FreeRTOS/tasks.c ****         }
 872:../src/FreeRTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 873:../src/FreeRTOS/tasks.c ****         {
 874:../src/FreeRTOS/tasks.c ****             pxTopOfStack = pxNewTCB->pxStack;
 875:../src/FreeRTOS/tasks.c **** 
 876:../src/FreeRTOS/tasks.c ****             /* Check the alignment of the stack buffer is correct. */
 877:../src/FreeRTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 878:../src/FreeRTOS/tasks.c **** 
 879:../src/FreeRTOS/tasks.c ****             /* The other extreme of the stack space is required if stack checking is
 880:../src/FreeRTOS/tasks.c ****              * performed. */
 881:../src/FreeRTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 882:../src/FreeRTOS/tasks.c ****         }
 883:../src/FreeRTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
 884:../src/FreeRTOS/tasks.c **** 
 885:../src/FreeRTOS/tasks.c ****     /* Store the task name in the TCB. */
 886:../src/FreeRTOS/tasks.c ****     if( pcName != NULL )
 887:../src/FreeRTOS/tasks.c ****     {
 888:../src/FreeRTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 889:../src/FreeRTOS/tasks.c ****         {
 890:../src/FreeRTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 891:../src/FreeRTOS/tasks.c **** 
 892:../src/FreeRTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 893:../src/FreeRTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 894:../src/FreeRTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 895:../src/FreeRTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 896:../src/FreeRTOS/tasks.c ****             {
 897:../src/FreeRTOS/tasks.c ****                 break;
 898:../src/FreeRTOS/tasks.c ****             }
 899:../src/FreeRTOS/tasks.c ****             else
 900:../src/FreeRTOS/tasks.c ****             {
 901:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 902:../src/FreeRTOS/tasks.c ****             }
 903:../src/FreeRTOS/tasks.c ****         }
 904:../src/FreeRTOS/tasks.c **** 
 905:../src/FreeRTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 906:../src/FreeRTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 907:../src/FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 908:../src/FreeRTOS/tasks.c ****     }
 909:../src/FreeRTOS/tasks.c ****     else
 910:../src/FreeRTOS/tasks.c ****     {
 911:../src/FreeRTOS/tasks.c ****         /* The task has not been given a name, so just ensure there is a NULL
 912:../src/FreeRTOS/tasks.c ****          * terminator when it is read out. */
 913:../src/FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 914:../src/FreeRTOS/tasks.c ****     }
 915:../src/FreeRTOS/tasks.c **** 
 916:../src/FreeRTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large.  First
 917:../src/FreeRTOS/tasks.c ****      * remove the privilege bit if one is present. */
 918:../src/FreeRTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 919:../src/FreeRTOS/tasks.c ****     {
 920:../src/FreeRTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 921:../src/FreeRTOS/tasks.c ****     }
 922:../src/FreeRTOS/tasks.c ****     else
 923:../src/FreeRTOS/tasks.c ****     {
 924:../src/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 925:../src/FreeRTOS/tasks.c ****     }
 926:../src/FreeRTOS/tasks.c **** 
 927:../src/FreeRTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 928:../src/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 929:../src/FreeRTOS/tasks.c ****         {
 930:../src/FreeRTOS/tasks.c ****             pxNewTCB->uxBasePriority = uxPriority;
 931:../src/FreeRTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 932:../src/FreeRTOS/tasks.c ****         }
 933:../src/FreeRTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 934:../src/FreeRTOS/tasks.c **** 
 935:../src/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 936:../src/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 937:../src/FreeRTOS/tasks.c **** 
 938:../src/FreeRTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 939:../src/FreeRTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 940:../src/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 941:../src/FreeRTOS/tasks.c **** 
 942:../src/FreeRTOS/tasks.c ****     /* Event lists are always in priority order. */
 943:../src/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 944:../src/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 945:../src/FreeRTOS/tasks.c **** 
 946:../src/FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 947:../src/FreeRTOS/tasks.c ****         {
 948:../src/FreeRTOS/tasks.c ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 949:../src/FreeRTOS/tasks.c ****         }
 950:../src/FreeRTOS/tasks.c ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 951:../src/FreeRTOS/tasks.c **** 
 952:../src/FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 953:../src/FreeRTOS/tasks.c ****         {
 954:../src/FreeRTOS/tasks.c ****             pxNewTCB->pxTaskTag = NULL;
 955:../src/FreeRTOS/tasks.c ****         }
 956:../src/FreeRTOS/tasks.c ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 957:../src/FreeRTOS/tasks.c **** 
 958:../src/FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 959:../src/FreeRTOS/tasks.c ****         {
 960:../src/FreeRTOS/tasks.c ****             pxNewTCB->ulRunTimeCounter = 0UL;
 961:../src/FreeRTOS/tasks.c ****         }
 962:../src/FreeRTOS/tasks.c ****     #endif /* configGENERATE_RUN_TIME_STATS */
 963:../src/FreeRTOS/tasks.c **** 
 964:../src/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 965:../src/FreeRTOS/tasks.c ****         {
 966:../src/FreeRTOS/tasks.c ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 967:../src/FreeRTOS/tasks.c ****         }
 968:../src/FreeRTOS/tasks.c ****     #else
 969:../src/FreeRTOS/tasks.c ****         {
 970:../src/FreeRTOS/tasks.c ****             /* Avoid compiler warning about unreferenced parameter. */
 971:../src/FreeRTOS/tasks.c ****             ( void ) xRegions;
 972:../src/FreeRTOS/tasks.c ****         }
 973:../src/FreeRTOS/tasks.c ****     #endif
 974:../src/FreeRTOS/tasks.c **** 
 975:../src/FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 976:../src/FreeRTOS/tasks.c ****         {
 977:../src/FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 978:../src/FreeRTOS/tasks.c ****         }
 979:../src/FreeRTOS/tasks.c ****     #endif
 980:../src/FreeRTOS/tasks.c **** 
 981:../src/FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 982:../src/FreeRTOS/tasks.c ****         {
 983:../src/FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 984:../src/FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 985:../src/FreeRTOS/tasks.c ****         }
 986:../src/FreeRTOS/tasks.c ****     #endif
 987:../src/FreeRTOS/tasks.c **** 
 988:../src/FreeRTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 989:../src/FreeRTOS/tasks.c ****         {
 990:../src/FreeRTOS/tasks.c ****             /* Initialise this task's Newlib reent structure.
 991:../src/FreeRTOS/tasks.c ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 992:../src/FreeRTOS/tasks.c ****              * for additional information. */
 993:../src/FreeRTOS/tasks.c ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 994:../src/FreeRTOS/tasks.c ****         }
 995:../src/FreeRTOS/tasks.c ****     #endif
 996:../src/FreeRTOS/tasks.c **** 
 997:../src/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 998:../src/FreeRTOS/tasks.c ****         {
 999:../src/FreeRTOS/tasks.c ****             pxNewTCB->ucDelayAborted = pdFALSE;
1000:../src/FreeRTOS/tasks.c ****         }
1001:../src/FreeRTOS/tasks.c ****     #endif
1002:../src/FreeRTOS/tasks.c **** 
1003:../src/FreeRTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1004:../src/FreeRTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1005:../src/FreeRTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1006:../src/FreeRTOS/tasks.c ****      * the top of stack variable is updated. */
1007:../src/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1008:../src/FreeRTOS/tasks.c ****         {
1009:../src/FreeRTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1010:../src/FreeRTOS/tasks.c ****              * pass the stack end address to the stack initialization
1011:../src/FreeRTOS/tasks.c ****              * function as well. */
1012:../src/FreeRTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1013:../src/FreeRTOS/tasks.c ****                 {
1014:../src/FreeRTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1015:../src/FreeRTOS/tasks.c ****                         {
1016:../src/FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1017:../src/FreeRTOS/tasks.c ****                         }
1018:../src/FreeRTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1019:../src/FreeRTOS/tasks.c ****                         {
1020:../src/FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1021:../src/FreeRTOS/tasks.c ****                         }
1022:../src/FreeRTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1023:../src/FreeRTOS/tasks.c ****                 }
1024:../src/FreeRTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1025:../src/FreeRTOS/tasks.c ****                 {
1026:../src/FreeRTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1027:../src/FreeRTOS/tasks.c ****                 }
1028:../src/FreeRTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1029:../src/FreeRTOS/tasks.c ****         }
1030:../src/FreeRTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1031:../src/FreeRTOS/tasks.c ****         {
1032:../src/FreeRTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1033:../src/FreeRTOS/tasks.c ****              * pass the stack end address to the stack initialization
1034:../src/FreeRTOS/tasks.c ****              * function as well. */
1035:../src/FreeRTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1036:../src/FreeRTOS/tasks.c ****                 {
1037:../src/FreeRTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1038:../src/FreeRTOS/tasks.c ****                         {
1039:../src/FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1040:../src/FreeRTOS/tasks.c ****                         }
1041:../src/FreeRTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1042:../src/FreeRTOS/tasks.c ****                         {
1043:../src/FreeRTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1044:../src/FreeRTOS/tasks.c ****                         }
1045:../src/FreeRTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1046:../src/FreeRTOS/tasks.c ****                 }
1047:../src/FreeRTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1048:../src/FreeRTOS/tasks.c ****                 {
1049:../src/FreeRTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1050:../src/FreeRTOS/tasks.c ****                 }
1051:../src/FreeRTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1052:../src/FreeRTOS/tasks.c ****         }
1053:../src/FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1054:../src/FreeRTOS/tasks.c **** 
1055:../src/FreeRTOS/tasks.c ****     if( pxCreatedTask != NULL )
1056:../src/FreeRTOS/tasks.c ****     {
1057:../src/FreeRTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1058:../src/FreeRTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1059:../src/FreeRTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1060:../src/FreeRTOS/tasks.c ****     }
1061:../src/FreeRTOS/tasks.c ****     else
1062:../src/FreeRTOS/tasks.c ****     {
1063:../src/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1064:../src/FreeRTOS/tasks.c ****     }
1065:../src/FreeRTOS/tasks.c **** }
1066:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1067:../src/FreeRTOS/tasks.c **** 
1068:../src/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1069:../src/FreeRTOS/tasks.c **** {
1070:../src/FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1071:../src/FreeRTOS/tasks.c ****      * updated. */
1072:../src/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
1073:../src/FreeRTOS/tasks.c ****     {
1074:../src/FreeRTOS/tasks.c ****         uxCurrentNumberOfTasks++;
1075:../src/FreeRTOS/tasks.c **** 
1076:../src/FreeRTOS/tasks.c ****         if( pxCurrentTCB == NULL )
1077:../src/FreeRTOS/tasks.c ****         {
1078:../src/FreeRTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1079:../src/FreeRTOS/tasks.c ****              * the suspended state - make this the current task. */
1080:../src/FreeRTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
1081:../src/FreeRTOS/tasks.c **** 
1082:../src/FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1083:../src/FreeRTOS/tasks.c ****             {
1084:../src/FreeRTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1085:../src/FreeRTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1086:../src/FreeRTOS/tasks.c ****                  * fails, but we will report the failure. */
1087:../src/FreeRTOS/tasks.c ****                 prvInitialiseTaskLists();
1088:../src/FreeRTOS/tasks.c ****             }
1089:../src/FreeRTOS/tasks.c ****             else
1090:../src/FreeRTOS/tasks.c ****             {
1091:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1092:../src/FreeRTOS/tasks.c ****             }
1093:../src/FreeRTOS/tasks.c ****         }
1094:../src/FreeRTOS/tasks.c ****         else
1095:../src/FreeRTOS/tasks.c ****         {
1096:../src/FreeRTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1097:../src/FreeRTOS/tasks.c ****              * current task if it is the highest priority task to be created
1098:../src/FreeRTOS/tasks.c ****              * so far. */
1099:../src/FreeRTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
1100:../src/FreeRTOS/tasks.c ****             {
1101:../src/FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1102:../src/FreeRTOS/tasks.c ****                 {
1103:../src/FreeRTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1104:../src/FreeRTOS/tasks.c ****                 }
1105:../src/FreeRTOS/tasks.c ****                 else
1106:../src/FreeRTOS/tasks.c ****                 {
1107:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1108:../src/FreeRTOS/tasks.c ****                 }
1109:../src/FreeRTOS/tasks.c ****             }
1110:../src/FreeRTOS/tasks.c ****             else
1111:../src/FreeRTOS/tasks.c ****             {
1112:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1113:../src/FreeRTOS/tasks.c ****             }
1114:../src/FreeRTOS/tasks.c ****         }
1115:../src/FreeRTOS/tasks.c **** 
1116:../src/FreeRTOS/tasks.c ****         uxTaskNumber++;
1117:../src/FreeRTOS/tasks.c **** 
1118:../src/FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1119:../src/FreeRTOS/tasks.c ****             {
1120:../src/FreeRTOS/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
1121:../src/FreeRTOS/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
1122:../src/FreeRTOS/tasks.c ****             }
1123:../src/FreeRTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1124:../src/FreeRTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1125:../src/FreeRTOS/tasks.c **** 
1126:../src/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1127:../src/FreeRTOS/tasks.c **** 
1128:../src/FreeRTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1129:../src/FreeRTOS/tasks.c ****     }
1130:../src/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
1131:../src/FreeRTOS/tasks.c **** 
1132:../src/FreeRTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1133:../src/FreeRTOS/tasks.c ****     {
1134:../src/FreeRTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1135:../src/FreeRTOS/tasks.c ****          * then it should run now. */
1136:../src/FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1137:../src/FreeRTOS/tasks.c ****         {
1138:../src/FreeRTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1139:../src/FreeRTOS/tasks.c ****         }
1140:../src/FreeRTOS/tasks.c ****         else
1141:../src/FreeRTOS/tasks.c ****         {
1142:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1143:../src/FreeRTOS/tasks.c ****         }
1144:../src/FreeRTOS/tasks.c ****     }
1145:../src/FreeRTOS/tasks.c ****     else
1146:../src/FreeRTOS/tasks.c ****     {
1147:../src/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1148:../src/FreeRTOS/tasks.c ****     }
1149:../src/FreeRTOS/tasks.c **** }
1150:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1151:../src/FreeRTOS/tasks.c **** 
1152:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1153:../src/FreeRTOS/tasks.c **** 
1154:../src/FreeRTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1155:../src/FreeRTOS/tasks.c ****     {
1156:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1157:../src/FreeRTOS/tasks.c **** 
1158:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1159:../src/FreeRTOS/tasks.c ****         {
1160:../src/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1161:../src/FreeRTOS/tasks.c ****              * being deleted. */
1162:../src/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1163:../src/FreeRTOS/tasks.c **** 
1164:../src/FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1165:../src/FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1166:../src/FreeRTOS/tasks.c ****             {
1167:../src/FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1168:../src/FreeRTOS/tasks.c ****             }
1169:../src/FreeRTOS/tasks.c ****             else
1170:../src/FreeRTOS/tasks.c ****             {
1171:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1172:../src/FreeRTOS/tasks.c ****             }
1173:../src/FreeRTOS/tasks.c **** 
1174:../src/FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1175:../src/FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1176:../src/FreeRTOS/tasks.c ****             {
1177:../src/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1178:../src/FreeRTOS/tasks.c ****             }
1179:../src/FreeRTOS/tasks.c ****             else
1180:../src/FreeRTOS/tasks.c ****             {
1181:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1182:../src/FreeRTOS/tasks.c ****             }
1183:../src/FreeRTOS/tasks.c **** 
1184:../src/FreeRTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1185:../src/FreeRTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1186:../src/FreeRTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1187:../src/FreeRTOS/tasks.c ****              * not return. */
1188:../src/FreeRTOS/tasks.c ****             uxTaskNumber++;
1189:../src/FreeRTOS/tasks.c **** 
1190:../src/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1191:../src/FreeRTOS/tasks.c ****             {
1192:../src/FreeRTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1193:../src/FreeRTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1194:../src/FreeRTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1195:../src/FreeRTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1196:../src/FreeRTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1197:../src/FreeRTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1198:../src/FreeRTOS/tasks.c **** 
1199:../src/FreeRTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1200:../src/FreeRTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1201:../src/FreeRTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1202:../src/FreeRTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1203:../src/FreeRTOS/tasks.c **** 
1204:../src/FreeRTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1205:../src/FreeRTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1206:../src/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1207:../src/FreeRTOS/tasks.c **** 
1208:../src/FreeRTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1209:../src/FreeRTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1210:../src/FreeRTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1211:../src/FreeRTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1212:../src/FreeRTOS/tasks.c ****                  * required. */
1213:../src/FreeRTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1214:../src/FreeRTOS/tasks.c ****             }
1215:../src/FreeRTOS/tasks.c ****             else
1216:../src/FreeRTOS/tasks.c ****             {
1217:../src/FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
1218:../src/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1219:../src/FreeRTOS/tasks.c **** 
1220:../src/FreeRTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1221:../src/FreeRTOS/tasks.c ****                  * the task that has just been deleted. */
1222:../src/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1223:../src/FreeRTOS/tasks.c ****             }
1224:../src/FreeRTOS/tasks.c ****         }
1225:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1226:../src/FreeRTOS/tasks.c **** 
1227:../src/FreeRTOS/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1228:../src/FreeRTOS/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1229:../src/FreeRTOS/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1230:../src/FreeRTOS/tasks.c ****         if( pxTCB != pxCurrentTCB )
1231:../src/FreeRTOS/tasks.c ****         {
1232:../src/FreeRTOS/tasks.c ****             prvDeleteTCB( pxTCB );
1233:../src/FreeRTOS/tasks.c ****         }
1234:../src/FreeRTOS/tasks.c **** 
1235:../src/FreeRTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1236:../src/FreeRTOS/tasks.c ****          * been deleted. */
1237:../src/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1238:../src/FreeRTOS/tasks.c ****         {
1239:../src/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1240:../src/FreeRTOS/tasks.c ****             {
1241:../src/FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1242:../src/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1243:../src/FreeRTOS/tasks.c ****             }
1244:../src/FreeRTOS/tasks.c ****             else
1245:../src/FreeRTOS/tasks.c ****             {
1246:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1247:../src/FreeRTOS/tasks.c ****             }
1248:../src/FreeRTOS/tasks.c ****         }
1249:../src/FreeRTOS/tasks.c ****     }
1250:../src/FreeRTOS/tasks.c **** 
1251:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1252:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1253:../src/FreeRTOS/tasks.c **** 
1254:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1255:../src/FreeRTOS/tasks.c **** 
1256:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1257:../src/FreeRTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1258:../src/FreeRTOS/tasks.c ****     {
1259:../src/FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
1260:../src/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:../src/FreeRTOS/tasks.c **** 
1262:../src/FreeRTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
1263:../src/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1264:../src/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
1265:../src/FreeRTOS/tasks.c **** 
1266:../src/FreeRTOS/tasks.c ****         vTaskSuspendAll();
1267:../src/FreeRTOS/tasks.c ****         {
1268:../src/FreeRTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1269:../src/FreeRTOS/tasks.c ****              * block. */
1270:../src/FreeRTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
1271:../src/FreeRTOS/tasks.c **** 
1272:../src/FreeRTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1273:../src/FreeRTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:../src/FreeRTOS/tasks.c **** 
1275:../src/FreeRTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1276:../src/FreeRTOS/tasks.c ****             {
1277:../src/FreeRTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1278:../src/FreeRTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1279:../src/FreeRTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1280:../src/FreeRTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1281:../src/FreeRTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1282:../src/FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:../src/FreeRTOS/tasks.c ****                 {
1284:../src/FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1285:../src/FreeRTOS/tasks.c ****                 }
1286:../src/FreeRTOS/tasks.c ****                 else
1287:../src/FreeRTOS/tasks.c ****                 {
1288:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1289:../src/FreeRTOS/tasks.c ****                 }
1290:../src/FreeRTOS/tasks.c ****             }
1291:../src/FreeRTOS/tasks.c ****             else
1292:../src/FreeRTOS/tasks.c ****             {
1293:../src/FreeRTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1294:../src/FreeRTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1295:../src/FreeRTOS/tasks.c ****                  * tick time is less than the wake time. */
1296:../src/FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:../src/FreeRTOS/tasks.c ****                 {
1298:../src/FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1299:../src/FreeRTOS/tasks.c ****                 }
1300:../src/FreeRTOS/tasks.c ****                 else
1301:../src/FreeRTOS/tasks.c ****                 {
1302:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1303:../src/FreeRTOS/tasks.c ****                 }
1304:../src/FreeRTOS/tasks.c ****             }
1305:../src/FreeRTOS/tasks.c **** 
1306:../src/FreeRTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1307:../src/FreeRTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1308:../src/FreeRTOS/tasks.c **** 
1309:../src/FreeRTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
1310:../src/FreeRTOS/tasks.c ****             {
1311:../src/FreeRTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1312:../src/FreeRTOS/tasks.c **** 
1313:../src/FreeRTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:../src/FreeRTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1315:../src/FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:../src/FreeRTOS/tasks.c ****             }
1317:../src/FreeRTOS/tasks.c ****             else
1318:../src/FreeRTOS/tasks.c ****             {
1319:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1320:../src/FreeRTOS/tasks.c ****             }
1321:../src/FreeRTOS/tasks.c ****         }
1322:../src/FreeRTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1323:../src/FreeRTOS/tasks.c **** 
1324:../src/FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:../src/FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1326:../src/FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1327:../src/FreeRTOS/tasks.c ****         {
1328:../src/FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
1329:../src/FreeRTOS/tasks.c ****         }
1330:../src/FreeRTOS/tasks.c ****         else
1331:../src/FreeRTOS/tasks.c ****         {
1332:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1333:../src/FreeRTOS/tasks.c ****         }
1334:../src/FreeRTOS/tasks.c **** 
1335:../src/FreeRTOS/tasks.c ****         return xShouldDelay;
1336:../src/FreeRTOS/tasks.c ****     }
1337:../src/FreeRTOS/tasks.c **** 
1338:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1339:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1340:../src/FreeRTOS/tasks.c **** 
1341:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1342:../src/FreeRTOS/tasks.c **** 
1343:../src/FreeRTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1344:../src/FreeRTOS/tasks.c ****     {
1345:../src/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1346:../src/FreeRTOS/tasks.c **** 
1347:../src/FreeRTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1348:../src/FreeRTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
1349:../src/FreeRTOS/tasks.c ****         {
1350:../src/FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
1351:../src/FreeRTOS/tasks.c ****             vTaskSuspendAll();
1352:../src/FreeRTOS/tasks.c ****             {
1353:../src/FreeRTOS/tasks.c ****                 traceTASK_DELAY();
1354:../src/FreeRTOS/tasks.c **** 
1355:../src/FreeRTOS/tasks.c ****                 /* A task that is removed from the event list while the
1356:../src/FreeRTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1357:../src/FreeRTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1358:../src/FreeRTOS/tasks.c ****                  * is resumed.
1359:../src/FreeRTOS/tasks.c ****                  *
1360:../src/FreeRTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1361:../src/FreeRTOS/tasks.c ****                  * executing task. */
1362:../src/FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1363:../src/FreeRTOS/tasks.c ****             }
1364:../src/FreeRTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1365:../src/FreeRTOS/tasks.c ****         }
1366:../src/FreeRTOS/tasks.c ****         else
1367:../src/FreeRTOS/tasks.c ****         {
1368:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1369:../src/FreeRTOS/tasks.c ****         }
1370:../src/FreeRTOS/tasks.c **** 
1371:../src/FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1372:../src/FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1373:../src/FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1374:../src/FreeRTOS/tasks.c ****         {
1375:../src/FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
1376:../src/FreeRTOS/tasks.c ****         }
1377:../src/FreeRTOS/tasks.c ****         else
1378:../src/FreeRTOS/tasks.c ****         {
1379:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1380:../src/FreeRTOS/tasks.c ****         }
1381:../src/FreeRTOS/tasks.c ****     }
1382:../src/FreeRTOS/tasks.c **** 
1383:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1384:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1385:../src/FreeRTOS/tasks.c **** 
1386:../src/FreeRTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1387:../src/FreeRTOS/tasks.c **** 
1388:../src/FreeRTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1389:../src/FreeRTOS/tasks.c ****     {
1390:../src/FreeRTOS/tasks.c ****         eTaskState eReturn;
1391:../src/FreeRTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1392:../src/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
1393:../src/FreeRTOS/tasks.c **** 
1394:../src/FreeRTOS/tasks.c ****         configASSERT( pxTCB );
1395:../src/FreeRTOS/tasks.c **** 
1396:../src/FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1397:../src/FreeRTOS/tasks.c ****         {
1398:../src/FreeRTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1399:../src/FreeRTOS/tasks.c ****             eReturn = eRunning;
1400:../src/FreeRTOS/tasks.c ****         }
1401:../src/FreeRTOS/tasks.c ****         else
1402:../src/FreeRTOS/tasks.c ****         {
1403:../src/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1404:../src/FreeRTOS/tasks.c ****             {
1405:../src/FreeRTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1406:../src/FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1407:../src/FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1408:../src/FreeRTOS/tasks.c ****             }
1409:../src/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1410:../src/FreeRTOS/tasks.c **** 
1411:../src/FreeRTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1412:../src/FreeRTOS/tasks.c ****             {
1413:../src/FreeRTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1414:../src/FreeRTOS/tasks.c ****                  * lists. */
1415:../src/FreeRTOS/tasks.c ****                 eReturn = eBlocked;
1416:../src/FreeRTOS/tasks.c ****             }
1417:../src/FreeRTOS/tasks.c **** 
1418:../src/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1419:../src/FreeRTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1420:../src/FreeRTOS/tasks.c ****                 {
1421:../src/FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1422:../src/FreeRTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1423:../src/FreeRTOS/tasks.c ****                      * indefinitely? */
1424:../src/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1425:../src/FreeRTOS/tasks.c ****                     {
1426:../src/FreeRTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1427:../src/FreeRTOS/tasks.c ****                             {
1428:../src/FreeRTOS/tasks.c ****                                 BaseType_t x;
1429:../src/FreeRTOS/tasks.c **** 
1430:../src/FreeRTOS/tasks.c ****                                 /* The task does not appear on the event list item of
1431:../src/FreeRTOS/tasks.c ****                                  * and of the RTOS objects, but could still be in the
1432:../src/FreeRTOS/tasks.c ****                                  * blocked state if it is waiting on its notification
1433:../src/FreeRTOS/tasks.c ****                                  * rather than waiting on an object.  If not, is
1434:../src/FreeRTOS/tasks.c ****                                  * suspended. */
1435:../src/FreeRTOS/tasks.c ****                                 eReturn = eSuspended;
1436:../src/FreeRTOS/tasks.c **** 
1437:../src/FreeRTOS/tasks.c ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1438:../src/FreeRTOS/tasks.c ****                                 {
1439:../src/FreeRTOS/tasks.c ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1440:../src/FreeRTOS/tasks.c ****                                     {
1441:../src/FreeRTOS/tasks.c ****                                         eReturn = eBlocked;
1442:../src/FreeRTOS/tasks.c ****                                         break;
1443:../src/FreeRTOS/tasks.c ****                                     }
1444:../src/FreeRTOS/tasks.c ****                                 }
1445:../src/FreeRTOS/tasks.c ****                             }
1446:../src/FreeRTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1447:../src/FreeRTOS/tasks.c ****                             {
1448:../src/FreeRTOS/tasks.c ****                                 eReturn = eSuspended;
1449:../src/FreeRTOS/tasks.c ****                             }
1450:../src/FreeRTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1451:../src/FreeRTOS/tasks.c ****                     }
1452:../src/FreeRTOS/tasks.c ****                     else
1453:../src/FreeRTOS/tasks.c ****                     {
1454:../src/FreeRTOS/tasks.c ****                         eReturn = eBlocked;
1455:../src/FreeRTOS/tasks.c ****                     }
1456:../src/FreeRTOS/tasks.c ****                 }
1457:../src/FreeRTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1458:../src/FreeRTOS/tasks.c **** 
1459:../src/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1460:../src/FreeRTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1461:../src/FreeRTOS/tasks.c ****                 {
1462:../src/FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
1463:../src/FreeRTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1464:../src/FreeRTOS/tasks.c ****                      * all. */
1465:../src/FreeRTOS/tasks.c ****                     eReturn = eDeleted;
1466:../src/FreeRTOS/tasks.c ****                 }
1467:../src/FreeRTOS/tasks.c ****             #endif
1468:../src/FreeRTOS/tasks.c **** 
1469:../src/FreeRTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1470:../src/FreeRTOS/tasks.c ****             {
1471:../src/FreeRTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1472:../src/FreeRTOS/tasks.c ****                  * Ready (including pending ready) state. */
1473:../src/FreeRTOS/tasks.c ****                 eReturn = eReady;
1474:../src/FreeRTOS/tasks.c ****             }
1475:../src/FreeRTOS/tasks.c ****         }
1476:../src/FreeRTOS/tasks.c **** 
1477:../src/FreeRTOS/tasks.c ****         return eReturn;
1478:../src/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1479:../src/FreeRTOS/tasks.c **** 
1480:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1481:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1482:../src/FreeRTOS/tasks.c **** 
1483:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1484:../src/FreeRTOS/tasks.c **** 
1485:../src/FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1486:../src/FreeRTOS/tasks.c ****     {
1487:../src/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1488:../src/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
1489:../src/FreeRTOS/tasks.c **** 
1490:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1491:../src/FreeRTOS/tasks.c ****         {
1492:../src/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1493:../src/FreeRTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1494:../src/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1495:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1496:../src/FreeRTOS/tasks.c ****         }
1497:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1498:../src/FreeRTOS/tasks.c **** 
1499:../src/FreeRTOS/tasks.c ****         return uxReturn;
1500:../src/FreeRTOS/tasks.c ****     }
1501:../src/FreeRTOS/tasks.c **** 
1502:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1503:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1504:../src/FreeRTOS/tasks.c **** 
1505:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1506:../src/FreeRTOS/tasks.c **** 
1507:../src/FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1508:../src/FreeRTOS/tasks.c ****     {
1509:../src/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1510:../src/FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1511:../src/FreeRTOS/tasks.c **** 
1512:../src/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1513:../src/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1514:../src/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1515:../src/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1516:../src/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1517:../src/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1518:../src/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1519:../src/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1520:../src/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1521:../src/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1522:../src/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1523:../src/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1524:../src/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1525:../src/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1526:../src/FreeRTOS/tasks.c ****          * provided on the following link:
1527:../src/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1528:../src/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1529:../src/FreeRTOS/tasks.c **** 
1530:../src/FreeRTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1531:../src/FreeRTOS/tasks.c ****         {
1532:../src/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1533:../src/FreeRTOS/tasks.c ****              * task that is being queried. */
1534:../src/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1535:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1536:../src/FreeRTOS/tasks.c ****         }
1537:../src/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1538:../src/FreeRTOS/tasks.c **** 
1539:../src/FreeRTOS/tasks.c ****         return uxReturn;
1540:../src/FreeRTOS/tasks.c ****     }
1541:../src/FreeRTOS/tasks.c **** 
1542:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1543:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1544:../src/FreeRTOS/tasks.c **** 
1545:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1546:../src/FreeRTOS/tasks.c **** 
1547:../src/FreeRTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1548:../src/FreeRTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1549:../src/FreeRTOS/tasks.c ****     {
1550:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1551:../src/FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1552:../src/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1553:../src/FreeRTOS/tasks.c **** 
1554:../src/FreeRTOS/tasks.c ****         configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1555:../src/FreeRTOS/tasks.c **** 
1556:../src/FreeRTOS/tasks.c ****         /* Ensure the new priority is valid. */
1557:../src/FreeRTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1558:../src/FreeRTOS/tasks.c ****         {
1559:../src/FreeRTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1560:../src/FreeRTOS/tasks.c ****         }
1561:../src/FreeRTOS/tasks.c ****         else
1562:../src/FreeRTOS/tasks.c ****         {
1563:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1564:../src/FreeRTOS/tasks.c ****         }
1565:../src/FreeRTOS/tasks.c **** 
1566:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1567:../src/FreeRTOS/tasks.c ****         {
1568:../src/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1569:../src/FreeRTOS/tasks.c ****              * task that is being changed. */
1570:../src/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1571:../src/FreeRTOS/tasks.c **** 
1572:../src/FreeRTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1573:../src/FreeRTOS/tasks.c **** 
1574:../src/FreeRTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1575:../src/FreeRTOS/tasks.c ****                 {
1576:../src/FreeRTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
1577:../src/FreeRTOS/tasks.c ****                 }
1578:../src/FreeRTOS/tasks.c ****             #else
1579:../src/FreeRTOS/tasks.c ****                 {
1580:../src/FreeRTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1581:../src/FreeRTOS/tasks.c ****                 }
1582:../src/FreeRTOS/tasks.c ****             #endif
1583:../src/FreeRTOS/tasks.c **** 
1584:../src/FreeRTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
1585:../src/FreeRTOS/tasks.c ****             {
1586:../src/FreeRTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1587:../src/FreeRTOS/tasks.c ****                  * priority than the calling task. */
1588:../src/FreeRTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1589:../src/FreeRTOS/tasks.c ****                 {
1590:../src/FreeRTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
1591:../src/FreeRTOS/tasks.c ****                     {
1592:../src/FreeRTOS/tasks.c ****                         /* The priority of a task other than the currently
1593:../src/FreeRTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1594:../src/FreeRTOS/tasks.c ****                          * raised above that of the running task? */
1595:../src/FreeRTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1596:../src/FreeRTOS/tasks.c ****                         {
1597:../src/FreeRTOS/tasks.c ****                             xYieldRequired = pdTRUE;
1598:../src/FreeRTOS/tasks.c ****                         }
1599:../src/FreeRTOS/tasks.c ****                         else
1600:../src/FreeRTOS/tasks.c ****                         {
1601:../src/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1602:../src/FreeRTOS/tasks.c ****                         }
1603:../src/FreeRTOS/tasks.c ****                     }
1604:../src/FreeRTOS/tasks.c ****                     else
1605:../src/FreeRTOS/tasks.c ****                     {
1606:../src/FreeRTOS/tasks.c ****                         /* The priority of the running task is being raised,
1607:../src/FreeRTOS/tasks.c ****                          * but the running task must already be the highest
1608:../src/FreeRTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1609:../src/FreeRTOS/tasks.c ****                     }
1610:../src/FreeRTOS/tasks.c ****                 }
1611:../src/FreeRTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
1612:../src/FreeRTOS/tasks.c ****                 {
1613:../src/FreeRTOS/tasks.c ****                     /* Setting the priority of the running task down means
1614:../src/FreeRTOS/tasks.c ****                      * there may now be another task of higher priority that
1615:../src/FreeRTOS/tasks.c ****                      * is ready to execute. */
1616:../src/FreeRTOS/tasks.c ****                     xYieldRequired = pdTRUE;
1617:../src/FreeRTOS/tasks.c ****                 }
1618:../src/FreeRTOS/tasks.c ****                 else
1619:../src/FreeRTOS/tasks.c ****                 {
1620:../src/FreeRTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1621:../src/FreeRTOS/tasks.c ****                      * require a yield as the running task must be above the
1622:../src/FreeRTOS/tasks.c ****                      * new priority of the task being modified. */
1623:../src/FreeRTOS/tasks.c ****                 }
1624:../src/FreeRTOS/tasks.c **** 
1625:../src/FreeRTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1626:../src/FreeRTOS/tasks.c ****                  * before its uxPriority member is changed so the
1627:../src/FreeRTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1628:../src/FreeRTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1629:../src/FreeRTOS/tasks.c **** 
1630:../src/FreeRTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1631:../src/FreeRTOS/tasks.c ****                     {
1632:../src/FreeRTOS/tasks.c ****                         /* Only change the priority being used if the task is not
1633:../src/FreeRTOS/tasks.c ****                          * currently using an inherited priority. */
1634:../src/FreeRTOS/tasks.c ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1635:../src/FreeRTOS/tasks.c ****                         {
1636:../src/FreeRTOS/tasks.c ****                             pxTCB->uxPriority = uxNewPriority;
1637:../src/FreeRTOS/tasks.c ****                         }
1638:../src/FreeRTOS/tasks.c ****                         else
1639:../src/FreeRTOS/tasks.c ****                         {
1640:../src/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1641:../src/FreeRTOS/tasks.c ****                         }
1642:../src/FreeRTOS/tasks.c **** 
1643:../src/FreeRTOS/tasks.c ****                         /* The base priority gets set whatever. */
1644:../src/FreeRTOS/tasks.c ****                         pxTCB->uxBasePriority = uxNewPriority;
1645:../src/FreeRTOS/tasks.c ****                     }
1646:../src/FreeRTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1647:../src/FreeRTOS/tasks.c ****                     {
1648:../src/FreeRTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1649:../src/FreeRTOS/tasks.c ****                     }
1650:../src/FreeRTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1651:../src/FreeRTOS/tasks.c **** 
1652:../src/FreeRTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1653:../src/FreeRTOS/tasks.c ****                  * being used for anything else. */
1654:../src/FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1655:../src/FreeRTOS/tasks.c ****                 {
1656:../src/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1657:../src/FreeRTOS/tasks.c ****                 }
1658:../src/FreeRTOS/tasks.c ****                 else
1659:../src/FreeRTOS/tasks.c ****                 {
1660:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1661:../src/FreeRTOS/tasks.c ****                 }
1662:../src/FreeRTOS/tasks.c **** 
1663:../src/FreeRTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1664:../src/FreeRTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1665:../src/FreeRTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1666:../src/FreeRTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1667:../src/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1668:../src/FreeRTOS/tasks.c ****                 {
1669:../src/FreeRTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1670:../src/FreeRTOS/tasks.c ****                      * adding it to it's new ready list.  As we are in a critical
1671:../src/FreeRTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1672:../src/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1673:../src/FreeRTOS/tasks.c ****                     {
1674:../src/FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1675:../src/FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
1676:../src/FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
1677:../src/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1678:../src/FreeRTOS/tasks.c ****                     }
1679:../src/FreeRTOS/tasks.c ****                     else
1680:../src/FreeRTOS/tasks.c ****                     {
1681:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1682:../src/FreeRTOS/tasks.c ****                     }
1683:../src/FreeRTOS/tasks.c **** 
1684:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1685:../src/FreeRTOS/tasks.c ****                 }
1686:../src/FreeRTOS/tasks.c ****                 else
1687:../src/FreeRTOS/tasks.c ****                 {
1688:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1689:../src/FreeRTOS/tasks.c ****                 }
1690:../src/FreeRTOS/tasks.c **** 
1691:../src/FreeRTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
1692:../src/FreeRTOS/tasks.c ****                 {
1693:../src/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1694:../src/FreeRTOS/tasks.c ****                 }
1695:../src/FreeRTOS/tasks.c ****                 else
1696:../src/FreeRTOS/tasks.c ****                 {
1697:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1698:../src/FreeRTOS/tasks.c ****                 }
1699:../src/FreeRTOS/tasks.c **** 
1700:../src/FreeRTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1701:../src/FreeRTOS/tasks.c ****                  * optimised task selection is not being used. */
1702:../src/FreeRTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1703:../src/FreeRTOS/tasks.c ****             }
1704:../src/FreeRTOS/tasks.c ****         }
1705:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1706:../src/FreeRTOS/tasks.c ****     }
1707:../src/FreeRTOS/tasks.c **** 
1708:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1709:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1710:../src/FreeRTOS/tasks.c **** 
1711:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1712:../src/FreeRTOS/tasks.c **** 
1713:../src/FreeRTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1714:../src/FreeRTOS/tasks.c ****     {
1715:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1716:../src/FreeRTOS/tasks.c **** 
1717:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1718:../src/FreeRTOS/tasks.c ****         {
1719:../src/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1720:../src/FreeRTOS/tasks.c ****              * being suspended. */
1721:../src/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1722:../src/FreeRTOS/tasks.c **** 
1723:../src/FreeRTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1724:../src/FreeRTOS/tasks.c **** 
1725:../src/FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1726:../src/FreeRTOS/tasks.c ****              * suspended list. */
1727:../src/FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1728:../src/FreeRTOS/tasks.c ****             {
1729:../src/FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1730:../src/FreeRTOS/tasks.c ****             }
1731:../src/FreeRTOS/tasks.c ****             else
1732:../src/FreeRTOS/tasks.c ****             {
1733:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1734:../src/FreeRTOS/tasks.c ****             }
1735:../src/FreeRTOS/tasks.c **** 
1736:../src/FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1737:../src/FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1738:../src/FreeRTOS/tasks.c ****             {
1739:../src/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1740:../src/FreeRTOS/tasks.c ****             }
1741:../src/FreeRTOS/tasks.c ****             else
1742:../src/FreeRTOS/tasks.c ****             {
1743:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1744:../src/FreeRTOS/tasks.c ****             }
1745:../src/FreeRTOS/tasks.c **** 
1746:../src/FreeRTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1747:../src/FreeRTOS/tasks.c **** 
1748:../src/FreeRTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1749:../src/FreeRTOS/tasks.c ****                 {
1750:../src/FreeRTOS/tasks.c ****                     BaseType_t x;
1751:../src/FreeRTOS/tasks.c **** 
1752:../src/FreeRTOS/tasks.c ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1753:../src/FreeRTOS/tasks.c ****                     {
1754:../src/FreeRTOS/tasks.c ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1755:../src/FreeRTOS/tasks.c ****                         {
1756:../src/FreeRTOS/tasks.c ****                             /* The task was blocked to wait for a notification, but is
1757:../src/FreeRTOS/tasks.c ****                              * now suspended, so no notification was received. */
1758:../src/FreeRTOS/tasks.c ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1759:../src/FreeRTOS/tasks.c ****                         }
1760:../src/FreeRTOS/tasks.c ****                     }
1761:../src/FreeRTOS/tasks.c ****                 }
1762:../src/FreeRTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1763:../src/FreeRTOS/tasks.c ****         }
1764:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1765:../src/FreeRTOS/tasks.c **** 
1766:../src/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1767:../src/FreeRTOS/tasks.c ****         {
1768:../src/FreeRTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1769:../src/FreeRTOS/tasks.c ****              * task that is now in the Suspended state. */
1770:../src/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1771:../src/FreeRTOS/tasks.c ****             {
1772:../src/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1773:../src/FreeRTOS/tasks.c ****             }
1774:../src/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1775:../src/FreeRTOS/tasks.c ****         }
1776:../src/FreeRTOS/tasks.c ****         else
1777:../src/FreeRTOS/tasks.c ****         {
1778:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1779:../src/FreeRTOS/tasks.c ****         }
1780:../src/FreeRTOS/tasks.c **** 
1781:../src/FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1782:../src/FreeRTOS/tasks.c ****         {
1783:../src/FreeRTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1784:../src/FreeRTOS/tasks.c ****             {
1785:../src/FreeRTOS/tasks.c ****                 /* The current task has just been suspended. */
1786:../src/FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1787:../src/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1788:../src/FreeRTOS/tasks.c ****             }
1789:../src/FreeRTOS/tasks.c ****             else
1790:../src/FreeRTOS/tasks.c ****             {
1791:../src/FreeRTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1792:../src/FreeRTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1793:../src/FreeRTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1794:../src/FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1795:../src/FreeRTOS/tasks.c ****                 {
1796:../src/FreeRTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1797:../src/FreeRTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1798:../src/FreeRTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1799:../src/FreeRTOS/tasks.c ****                      * is. */
1800:../src/FreeRTOS/tasks.c ****                     pxCurrentTCB = NULL;
1801:../src/FreeRTOS/tasks.c ****                 }
1802:../src/FreeRTOS/tasks.c ****                 else
1803:../src/FreeRTOS/tasks.c ****                 {
1804:../src/FreeRTOS/tasks.c ****                     vTaskSwitchContext();
1805:../src/FreeRTOS/tasks.c ****                 }
1806:../src/FreeRTOS/tasks.c ****             }
1807:../src/FreeRTOS/tasks.c ****         }
1808:../src/FreeRTOS/tasks.c ****         else
1809:../src/FreeRTOS/tasks.c ****         {
1810:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1811:../src/FreeRTOS/tasks.c ****         }
1812:../src/FreeRTOS/tasks.c ****     }
1813:../src/FreeRTOS/tasks.c **** 
1814:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1815:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1816:../src/FreeRTOS/tasks.c **** 
1817:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1818:../src/FreeRTOS/tasks.c **** 
1819:../src/FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1820:../src/FreeRTOS/tasks.c ****     {
1821:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
1822:../src/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
1823:../src/FreeRTOS/tasks.c **** 
1824:../src/FreeRTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1825:../src/FreeRTOS/tasks.c ****          * section. */
1826:../src/FreeRTOS/tasks.c **** 
1827:../src/FreeRTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1828:../src/FreeRTOS/tasks.c ****         configASSERT( xTask );
1829:../src/FreeRTOS/tasks.c **** 
1830:../src/FreeRTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1831:../src/FreeRTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1832:../src/FreeRTOS/tasks.c ****         {
1833:../src/FreeRTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1834:../src/FreeRTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
1835:../src/FreeRTOS/tasks.c ****             {
1836:../src/FreeRTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1837:../src/FreeRTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1838:../src/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
1839:../src/FreeRTOS/tasks.c ****                 {
1840:../src/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
1841:../src/FreeRTOS/tasks.c ****                 }
1842:../src/FreeRTOS/tasks.c ****                 else
1843:../src/FreeRTOS/tasks.c ****                 {
1844:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1845:../src/FreeRTOS/tasks.c ****                 }
1846:../src/FreeRTOS/tasks.c ****             }
1847:../src/FreeRTOS/tasks.c ****             else
1848:../src/FreeRTOS/tasks.c ****             {
1849:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1850:../src/FreeRTOS/tasks.c ****             }
1851:../src/FreeRTOS/tasks.c ****         }
1852:../src/FreeRTOS/tasks.c ****         else
1853:../src/FreeRTOS/tasks.c ****         {
1854:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1855:../src/FreeRTOS/tasks.c ****         }
1856:../src/FreeRTOS/tasks.c **** 
1857:../src/FreeRTOS/tasks.c ****         return xReturn;
1858:../src/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1859:../src/FreeRTOS/tasks.c **** 
1860:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1861:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1862:../src/FreeRTOS/tasks.c **** 
1863:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1864:../src/FreeRTOS/tasks.c **** 
1865:../src/FreeRTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1866:../src/FreeRTOS/tasks.c ****     {
1867:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1868:../src/FreeRTOS/tasks.c **** 
1869:../src/FreeRTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1870:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1871:../src/FreeRTOS/tasks.c **** 
1872:../src/FreeRTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1873:../src/FreeRTOS/tasks.c ****          * currently executing task. */
1874:../src/FreeRTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1875:../src/FreeRTOS/tasks.c ****         {
1876:../src/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1877:../src/FreeRTOS/tasks.c ****             {
1878:../src/FreeRTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1879:../src/FreeRTOS/tasks.c ****                 {
1880:../src/FreeRTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
1881:../src/FreeRTOS/tasks.c **** 
1882:../src/FreeRTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1883:../src/FreeRTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1884:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1885:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1886:../src/FreeRTOS/tasks.c **** 
1887:../src/FreeRTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
1888:../src/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1889:../src/FreeRTOS/tasks.c ****                     {
1890:../src/FreeRTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1891:../src/FreeRTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1892:../src/FreeRTOS/tasks.c ****                          * next yield. */
1893:../src/FreeRTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1894:../src/FreeRTOS/tasks.c ****                     }
1895:../src/FreeRTOS/tasks.c ****                     else
1896:../src/FreeRTOS/tasks.c ****                     {
1897:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1898:../src/FreeRTOS/tasks.c ****                     }
1899:../src/FreeRTOS/tasks.c ****                 }
1900:../src/FreeRTOS/tasks.c ****                 else
1901:../src/FreeRTOS/tasks.c ****                 {
1902:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1903:../src/FreeRTOS/tasks.c ****                 }
1904:../src/FreeRTOS/tasks.c ****             }
1905:../src/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1906:../src/FreeRTOS/tasks.c ****         }
1907:../src/FreeRTOS/tasks.c ****         else
1908:../src/FreeRTOS/tasks.c ****         {
1909:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1910:../src/FreeRTOS/tasks.c ****         }
1911:../src/FreeRTOS/tasks.c ****     }
1912:../src/FreeRTOS/tasks.c **** 
1913:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1914:../src/FreeRTOS/tasks.c **** 
1915:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1916:../src/FreeRTOS/tasks.c **** 
1917:../src/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1918:../src/FreeRTOS/tasks.c **** 
1919:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1920:../src/FreeRTOS/tasks.c ****     {
1921:../src/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1922:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1923:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1924:../src/FreeRTOS/tasks.c **** 
1925:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1926:../src/FreeRTOS/tasks.c **** 
1927:../src/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1928:../src/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1929:../src/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1930:../src/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1931:../src/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1932:../src/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1933:../src/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1934:../src/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1935:../src/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1936:../src/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1937:../src/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1938:../src/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1939:../src/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1940:../src/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1941:../src/FreeRTOS/tasks.c ****          * provided on the following link:
1942:../src/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1943:../src/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1944:../src/FreeRTOS/tasks.c **** 
1945:../src/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1946:../src/FreeRTOS/tasks.c ****         {
1947:../src/FreeRTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1948:../src/FreeRTOS/tasks.c ****             {
1949:../src/FreeRTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1950:../src/FreeRTOS/tasks.c **** 
1951:../src/FreeRTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1952:../src/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1953:../src/FreeRTOS/tasks.c ****                 {
1954:../src/FreeRTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1955:../src/FreeRTOS/tasks.c ****                      * suspended list to the ready list directly. */
1956:../src/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1957:../src/FreeRTOS/tasks.c ****                     {
1958:../src/FreeRTOS/tasks.c ****                         xYieldRequired = pdTRUE;
1959:../src/FreeRTOS/tasks.c **** 
1960:../src/FreeRTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1961:../src/FreeRTOS/tasks.c ****                          * using the return value to initiate a context switch
1962:../src/FreeRTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1963:../src/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
1964:../src/FreeRTOS/tasks.c ****                     }
1965:../src/FreeRTOS/tasks.c ****                     else
1966:../src/FreeRTOS/tasks.c ****                     {
1967:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1968:../src/FreeRTOS/tasks.c ****                     }
1969:../src/FreeRTOS/tasks.c **** 
1970:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1971:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1972:../src/FreeRTOS/tasks.c ****                 }
1973:../src/FreeRTOS/tasks.c ****                 else
1974:../src/FreeRTOS/tasks.c ****                 {
1975:../src/FreeRTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1976:../src/FreeRTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1977:../src/FreeRTOS/tasks.c ****                      * unsuspended. */
1978:../src/FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1979:../src/FreeRTOS/tasks.c ****                 }
1980:../src/FreeRTOS/tasks.c ****             }
1981:../src/FreeRTOS/tasks.c ****             else
1982:../src/FreeRTOS/tasks.c ****             {
1983:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1984:../src/FreeRTOS/tasks.c ****             }
1985:../src/FreeRTOS/tasks.c ****         }
1986:../src/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1987:../src/FreeRTOS/tasks.c **** 
1988:../src/FreeRTOS/tasks.c ****         return xYieldRequired;
1989:../src/FreeRTOS/tasks.c ****     }
1990:../src/FreeRTOS/tasks.c **** 
1991:../src/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1992:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1993:../src/FreeRTOS/tasks.c **** 
1994:../src/FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1995:../src/FreeRTOS/tasks.c **** {
1996:../src/FreeRTOS/tasks.c ****     BaseType_t xReturn;
1997:../src/FreeRTOS/tasks.c **** 
1998:../src/FreeRTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
1999:../src/FreeRTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
2000:../src/FreeRTOS/tasks.c ****         {
2001:../src/FreeRTOS/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
2002:../src/FreeRTOS/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
2003:../src/FreeRTOS/tasks.c ****             uint32_t ulIdleTaskStackSize;
2004:../src/FreeRTOS/tasks.c **** 
2005:../src/FreeRTOS/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
2006:../src/FreeRTOS/tasks.c ****              * address of the RAM then create the idle task. */
2007:../src/FreeRTOS/tasks.c ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
2008:../src/FreeRTOS/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
2009:../src/FreeRTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
2010:../src/FreeRTOS/tasks.c ****                                                  ulIdleTaskStackSize,
2011:../src/FreeRTOS/tasks.c ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2012:../src/FreeRTOS/tasks.c ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
2013:../src/FreeRTOS/tasks.c ****                                                  pxIdleTaskStackBuffer,
2014:../src/FreeRTOS/tasks.c ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2015:../src/FreeRTOS/tasks.c **** 
2016:../src/FreeRTOS/tasks.c ****             if( xIdleTaskHandle != NULL )
2017:../src/FreeRTOS/tasks.c ****             {
2018:../src/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2019:../src/FreeRTOS/tasks.c ****             }
2020:../src/FreeRTOS/tasks.c ****             else
2021:../src/FreeRTOS/tasks.c ****             {
2022:../src/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2023:../src/FreeRTOS/tasks.c ****             }
2024:../src/FreeRTOS/tasks.c ****         }
2025:../src/FreeRTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2026:../src/FreeRTOS/tasks.c ****         {
2027:../src/FreeRTOS/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
2028:../src/FreeRTOS/tasks.c ****             xReturn = xTaskCreate( prvIdleTask,
2029:../src/FreeRTOS/tasks.c ****                                    configIDLE_TASK_NAME,
2030:../src/FreeRTOS/tasks.c ****                                    configMINIMAL_STACK_SIZE,
2031:../src/FreeRTOS/tasks.c ****                                    ( void * ) NULL,
2032:../src/FreeRTOS/tasks.c ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2033:../src/FreeRTOS/tasks.c ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2034:../src/FreeRTOS/tasks.c ****         }
2035:../src/FreeRTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2036:../src/FreeRTOS/tasks.c **** 
2037:../src/FreeRTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2038:../src/FreeRTOS/tasks.c ****         {
2039:../src/FreeRTOS/tasks.c ****             if( xReturn == pdPASS )
2040:../src/FreeRTOS/tasks.c ****             {
2041:../src/FreeRTOS/tasks.c ****                 xReturn = xTimerCreateTimerTask();
2042:../src/FreeRTOS/tasks.c ****             }
2043:../src/FreeRTOS/tasks.c ****             else
2044:../src/FreeRTOS/tasks.c ****             {
2045:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2046:../src/FreeRTOS/tasks.c ****             }
2047:../src/FreeRTOS/tasks.c ****         }
2048:../src/FreeRTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2049:../src/FreeRTOS/tasks.c **** 
2050:../src/FreeRTOS/tasks.c ****     if( xReturn == pdPASS )
2051:../src/FreeRTOS/tasks.c ****     {
2052:../src/FreeRTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2053:../src/FreeRTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2054:../src/FreeRTOS/tasks.c ****          * the only macro called by the function. */
2055:../src/FreeRTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2056:../src/FreeRTOS/tasks.c ****             {
2057:../src/FreeRTOS/tasks.c ****                 freertos_tasks_c_additions_init();
2058:../src/FreeRTOS/tasks.c ****             }
2059:../src/FreeRTOS/tasks.c ****         #endif
2060:../src/FreeRTOS/tasks.c **** 
2061:../src/FreeRTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2062:../src/FreeRTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2063:../src/FreeRTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2064:../src/FreeRTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2065:../src/FreeRTOS/tasks.c ****          * starts to run. */
2066:../src/FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
2067:../src/FreeRTOS/tasks.c **** 
2068:../src/FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2069:../src/FreeRTOS/tasks.c ****             {
2070:../src/FreeRTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2071:../src/FreeRTOS/tasks.c ****                  * structure specific to the task that will run first.
2072:../src/FreeRTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2073:../src/FreeRTOS/tasks.c ****                  * for additional information. */
2074:../src/FreeRTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2075:../src/FreeRTOS/tasks.c ****             }
2076:../src/FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
2077:../src/FreeRTOS/tasks.c **** 
2078:../src/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2079:../src/FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
2080:../src/FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2081:../src/FreeRTOS/tasks.c **** 
2082:../src/FreeRTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2083:../src/FreeRTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2084:../src/FreeRTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2085:../src/FreeRTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2086:../src/FreeRTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2087:../src/FreeRTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2088:../src/FreeRTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2089:../src/FreeRTOS/tasks.c **** 
2090:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
2091:../src/FreeRTOS/tasks.c **** 
2092:../src/FreeRTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2093:../src/FreeRTOS/tasks.c ****          * portable interface. */
2094:../src/FreeRTOS/tasks.c ****         if( xPortStartScheduler() != pdFALSE )
2095:../src/FreeRTOS/tasks.c ****         {
2096:../src/FreeRTOS/tasks.c ****             /* Should not reach here as if the scheduler is running the
2097:../src/FreeRTOS/tasks.c ****              * function will not return. */
2098:../src/FreeRTOS/tasks.c ****         }
2099:../src/FreeRTOS/tasks.c ****         else
2100:../src/FreeRTOS/tasks.c ****         {
2101:../src/FreeRTOS/tasks.c ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2102:../src/FreeRTOS/tasks.c ****         }
2103:../src/FreeRTOS/tasks.c ****     }
2104:../src/FreeRTOS/tasks.c ****     else
2105:../src/FreeRTOS/tasks.c ****     {
2106:../src/FreeRTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2107:../src/FreeRTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2108:../src/FreeRTOS/tasks.c ****          * or the timer task. */
2109:../src/FreeRTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2110:../src/FreeRTOS/tasks.c ****     }
2111:../src/FreeRTOS/tasks.c **** 
2112:../src/FreeRTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2113:../src/FreeRTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2114:../src/FreeRTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2115:../src/FreeRTOS/tasks.c **** 
2116:../src/FreeRTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2117:../src/FreeRTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2118:../src/FreeRTOS/tasks.c ****     ( void ) uxTopUsedPriority;
2119:../src/FreeRTOS/tasks.c **** }
2120:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2121:../src/FreeRTOS/tasks.c **** 
2122:../src/FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2123:../src/FreeRTOS/tasks.c **** {
2124:../src/FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2125:../src/FreeRTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2126:../src/FreeRTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2127:../src/FreeRTOS/tasks.c ****     portDISABLE_INTERRUPTS();
2128:../src/FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
2129:../src/FreeRTOS/tasks.c ****     vPortEndScheduler();
2130:../src/FreeRTOS/tasks.c **** }
2131:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2132:../src/FreeRTOS/tasks.c **** 
2133:../src/FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2134:../src/FreeRTOS/tasks.c **** {
2135:../src/FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2136:../src/FreeRTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2137:../src/FreeRTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2138:../src/FreeRTOS/tasks.c ****      * https://goo.gl/wu4acr */
2139:../src/FreeRTOS/tasks.c **** 
2140:../src/FreeRTOS/tasks.c ****     /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2141:../src/FreeRTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2142:../src/FreeRTOS/tasks.c ****     portSOFTWARE_BARRIER();
2143:../src/FreeRTOS/tasks.c **** 
2144:../src/FreeRTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2145:../src/FreeRTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2146:../src/FreeRTOS/tasks.c ****     ++uxSchedulerSuspended;
2147:../src/FreeRTOS/tasks.c **** 
2148:../src/FreeRTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2149:../src/FreeRTOS/tasks.c ****      * the above increment elsewhere. */
2150:../src/FreeRTOS/tasks.c ****     portMEMORY_BARRIER();
2151:../src/FreeRTOS/tasks.c **** }
2152:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2153:../src/FreeRTOS/tasks.c **** 
2154:../src/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2155:../src/FreeRTOS/tasks.c **** 
2156:../src/FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2157:../src/FreeRTOS/tasks.c ****     {
2158:../src/FreeRTOS/tasks.c ****         TickType_t xReturn;
2159:../src/FreeRTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2160:../src/FreeRTOS/tasks.c **** 
2161:../src/FreeRTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2162:../src/FreeRTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2163:../src/FreeRTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
2164:../src/FreeRTOS/tasks.c ****          * running. */
2165:../src/FreeRTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2166:../src/FreeRTOS/tasks.c ****             {
2167:../src/FreeRTOS/tasks.c ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2168:../src/FreeRTOS/tasks.c ****                 {
2169:../src/FreeRTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2170:../src/FreeRTOS/tasks.c ****                 }
2171:../src/FreeRTOS/tasks.c ****             }
2172:../src/FreeRTOS/tasks.c ****         #else
2173:../src/FreeRTOS/tasks.c ****             {
2174:../src/FreeRTOS/tasks.c ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2175:../src/FreeRTOS/tasks.c **** 
2176:../src/FreeRTOS/tasks.c ****                 /* When port optimised task selection is used the uxTopReadyPriority
2177:../src/FreeRTOS/tasks.c ****                  * variable is used as a bit map.  If bits other than the least
2178:../src/FreeRTOS/tasks.c ****                  * significant bit are set then there are tasks that have a priority
2179:../src/FreeRTOS/tasks.c ****                  * above the idle priority that are in the Ready state.  This takes
2180:../src/FreeRTOS/tasks.c ****                  * care of the case where the co-operative scheduler is in use. */
2181:../src/FreeRTOS/tasks.c ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
2182:../src/FreeRTOS/tasks.c ****                 {
2183:../src/FreeRTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2184:../src/FreeRTOS/tasks.c ****                 }
2185:../src/FreeRTOS/tasks.c ****             }
2186:../src/FreeRTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2187:../src/FreeRTOS/tasks.c **** 
2188:../src/FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2189:../src/FreeRTOS/tasks.c ****         {
2190:../src/FreeRTOS/tasks.c ****             xReturn = 0;
2191:../src/FreeRTOS/tasks.c ****         }
2192:../src/FreeRTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2193:../src/FreeRTOS/tasks.c ****         {
2194:../src/FreeRTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2195:../src/FreeRTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2196:../src/FreeRTOS/tasks.c ****              * processed. */
2197:../src/FreeRTOS/tasks.c ****             xReturn = 0;
2198:../src/FreeRTOS/tasks.c ****         }
2199:../src/FreeRTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2200:../src/FreeRTOS/tasks.c ****         {
2201:../src/FreeRTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2202:../src/FreeRTOS/tasks.c ****              * idle priority.  This path can only be reached if
2203:../src/FreeRTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2204:../src/FreeRTOS/tasks.c ****             xReturn = 0;
2205:../src/FreeRTOS/tasks.c ****         }
2206:../src/FreeRTOS/tasks.c ****         else
2207:../src/FreeRTOS/tasks.c ****         {
2208:../src/FreeRTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2209:../src/FreeRTOS/tasks.c ****         }
2210:../src/FreeRTOS/tasks.c **** 
2211:../src/FreeRTOS/tasks.c ****         return xReturn;
2212:../src/FreeRTOS/tasks.c ****     }
2213:../src/FreeRTOS/tasks.c **** 
2214:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2215:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2216:../src/FreeRTOS/tasks.c **** 
2217:../src/FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2218:../src/FreeRTOS/tasks.c **** {
2219:../src/FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
2220:../src/FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
2221:../src/FreeRTOS/tasks.c **** 
2222:../src/FreeRTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2223:../src/FreeRTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
2224:../src/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
2225:../src/FreeRTOS/tasks.c **** 
2226:../src/FreeRTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2227:../src/FreeRTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2228:../src/FreeRTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2229:../src/FreeRTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2230:../src/FreeRTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2231:../src/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
2232:../src/FreeRTOS/tasks.c ****     {
2233:../src/FreeRTOS/tasks.c ****         --uxSchedulerSuspended;
2234:../src/FreeRTOS/tasks.c **** 
2235:../src/FreeRTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2236:../src/FreeRTOS/tasks.c ****         {
2237:../src/FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2238:../src/FreeRTOS/tasks.c ****             {
2239:../src/FreeRTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2240:../src/FreeRTOS/tasks.c ****                  * appropriate ready list. */
2241:../src/FreeRTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2242:../src/FreeRTOS/tasks.c ****                 {
2243:../src/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2244:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2245:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2246:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2247:../src/FreeRTOS/tasks.c **** 
2248:../src/FreeRTOS/tasks.c ****                     /* If the moved task has a priority higher than the current
2249:../src/FreeRTOS/tasks.c ****                      * task then a yield must be performed. */
2250:../src/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2251:../src/FreeRTOS/tasks.c ****                     {
2252:../src/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
2253:../src/FreeRTOS/tasks.c ****                     }
2254:../src/FreeRTOS/tasks.c ****                     else
2255:../src/FreeRTOS/tasks.c ****                     {
2256:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2257:../src/FreeRTOS/tasks.c ****                     }
2258:../src/FreeRTOS/tasks.c ****                 }
2259:../src/FreeRTOS/tasks.c **** 
2260:../src/FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2261:../src/FreeRTOS/tasks.c ****                 {
2262:../src/FreeRTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2263:../src/FreeRTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2264:../src/FreeRTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2265:../src/FreeRTOS/tasks.c ****                      * important for low power tickless implementations, where
2266:../src/FreeRTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2267:../src/FreeRTOS/tasks.c ****                      * state. */
2268:../src/FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
2269:../src/FreeRTOS/tasks.c ****                 }
2270:../src/FreeRTOS/tasks.c **** 
2271:../src/FreeRTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2272:../src/FreeRTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2273:../src/FreeRTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2274:../src/FreeRTOS/tasks.c ****                  * time. */
2275:../src/FreeRTOS/tasks.c ****                 {
2276:../src/FreeRTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2277:../src/FreeRTOS/tasks.c **** 
2278:../src/FreeRTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2279:../src/FreeRTOS/tasks.c ****                     {
2280:../src/FreeRTOS/tasks.c ****                         do
2281:../src/FreeRTOS/tasks.c ****                         {
2282:../src/FreeRTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2283:../src/FreeRTOS/tasks.c ****                             {
2284:../src/FreeRTOS/tasks.c ****                                 xYieldPending = pdTRUE;
2285:../src/FreeRTOS/tasks.c ****                             }
2286:../src/FreeRTOS/tasks.c ****                             else
2287:../src/FreeRTOS/tasks.c ****                             {
2288:../src/FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2289:../src/FreeRTOS/tasks.c ****                             }
2290:../src/FreeRTOS/tasks.c **** 
2291:../src/FreeRTOS/tasks.c ****                             --xPendedCounts;
2292:../src/FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2293:../src/FreeRTOS/tasks.c **** 
2294:../src/FreeRTOS/tasks.c ****                         xPendedTicks = 0;
2295:../src/FreeRTOS/tasks.c ****                     }
2296:../src/FreeRTOS/tasks.c ****                     else
2297:../src/FreeRTOS/tasks.c ****                     {
2298:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2299:../src/FreeRTOS/tasks.c ****                     }
2300:../src/FreeRTOS/tasks.c ****                 }
2301:../src/FreeRTOS/tasks.c **** 
2302:../src/FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
2303:../src/FreeRTOS/tasks.c ****                 {
2304:../src/FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2305:../src/FreeRTOS/tasks.c ****                         {
2306:../src/FreeRTOS/tasks.c ****                             xAlreadyYielded = pdTRUE;
2307:../src/FreeRTOS/tasks.c ****                         }
2308:../src/FreeRTOS/tasks.c ****                     #endif
2309:../src/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2310:../src/FreeRTOS/tasks.c ****                 }
2311:../src/FreeRTOS/tasks.c ****                 else
2312:../src/FreeRTOS/tasks.c ****                 {
2313:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2314:../src/FreeRTOS/tasks.c ****                 }
2315:../src/FreeRTOS/tasks.c ****             }
2316:../src/FreeRTOS/tasks.c ****         }
2317:../src/FreeRTOS/tasks.c ****         else
2318:../src/FreeRTOS/tasks.c ****         {
2319:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2320:../src/FreeRTOS/tasks.c ****         }
2321:../src/FreeRTOS/tasks.c ****     }
2322:../src/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
2323:../src/FreeRTOS/tasks.c **** 
2324:../src/FreeRTOS/tasks.c ****     return xAlreadyYielded;
2325:../src/FreeRTOS/tasks.c **** }
2326:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2327:../src/FreeRTOS/tasks.c **** 
2328:../src/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2329:../src/FreeRTOS/tasks.c **** {
2330:../src/FreeRTOS/tasks.c ****     TickType_t xTicks;
2331:../src/FreeRTOS/tasks.c **** 
2332:../src/FreeRTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2333:../src/FreeRTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2334:../src/FreeRTOS/tasks.c ****     {
2335:../src/FreeRTOS/tasks.c ****         xTicks = xTickCount;
2336:../src/FreeRTOS/tasks.c ****     }
2337:../src/FreeRTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2338:../src/FreeRTOS/tasks.c **** 
2339:../src/FreeRTOS/tasks.c ****     return xTicks;
2340:../src/FreeRTOS/tasks.c **** }
2341:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2342:../src/FreeRTOS/tasks.c **** 
2343:../src/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2344:../src/FreeRTOS/tasks.c **** {
2345:../src/FreeRTOS/tasks.c ****     TickType_t xReturn;
2346:../src/FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2347:../src/FreeRTOS/tasks.c **** 
2348:../src/FreeRTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2349:../src/FreeRTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2350:../src/FreeRTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2351:../src/FreeRTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2352:../src/FreeRTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2353:../src/FreeRTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2354:../src/FreeRTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2355:../src/FreeRTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2356:../src/FreeRTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2357:../src/FreeRTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2358:../src/FreeRTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2359:../src/FreeRTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2360:../src/FreeRTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2361:../src/FreeRTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2362:../src/FreeRTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2363:../src/FreeRTOS/tasks.c **** 
2364:../src/FreeRTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2365:../src/FreeRTOS/tasks.c ****     {
2366:../src/FreeRTOS/tasks.c ****         xReturn = xTickCount;
2367:../src/FreeRTOS/tasks.c ****     }
2368:../src/FreeRTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2369:../src/FreeRTOS/tasks.c **** 
2370:../src/FreeRTOS/tasks.c ****     return xReturn;
2371:../src/FreeRTOS/tasks.c **** }
2372:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2373:../src/FreeRTOS/tasks.c **** 
2374:../src/FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2375:../src/FreeRTOS/tasks.c **** {
2376:../src/FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2377:../src/FreeRTOS/tasks.c ****      * BaseType_t. */
2378:../src/FreeRTOS/tasks.c ****     return uxCurrentNumberOfTasks;
2379:../src/FreeRTOS/tasks.c **** }
2380:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2381:../src/FreeRTOS/tasks.c **** 
2382:../src/FreeRTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2383:../src/FreeRTOS/tasks.c **** {
2384:../src/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2385:../src/FreeRTOS/tasks.c **** 
2386:../src/FreeRTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2387:../src/FreeRTOS/tasks.c ****      * queried. */
2388:../src/FreeRTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2389:../src/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
2390:../src/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
2391:../src/FreeRTOS/tasks.c **** }
2392:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2393:../src/FreeRTOS/tasks.c **** 
2394:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2395:../src/FreeRTOS/tasks.c **** 
2396:../src/FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2397:../src/FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2398:../src/FreeRTOS/tasks.c ****     {
2399:../src/FreeRTOS/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
2400:../src/FreeRTOS/tasks.c ****         UBaseType_t x;
2401:../src/FreeRTOS/tasks.c ****         char cNextChar;
2402:../src/FreeRTOS/tasks.c ****         BaseType_t xBreakLoop;
2403:../src/FreeRTOS/tasks.c **** 
2404:../src/FreeRTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2405:../src/FreeRTOS/tasks.c **** 
2406:../src/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2407:../src/FreeRTOS/tasks.c ****         {
2408:../src/FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2409:../src/FreeRTOS/tasks.c **** 
2410:../src/FreeRTOS/tasks.c ****             do
2411:../src/FreeRTOS/tasks.c ****             {
2412:../src/FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2413:../src/FreeRTOS/tasks.c **** 
2414:../src/FreeRTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2415:../src/FreeRTOS/tasks.c ****                  * mismatch. */
2416:../src/FreeRTOS/tasks.c ****                 xBreakLoop = pdFALSE;
2417:../src/FreeRTOS/tasks.c **** 
2418:../src/FreeRTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2419:../src/FreeRTOS/tasks.c ****                 {
2420:../src/FreeRTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2421:../src/FreeRTOS/tasks.c **** 
2422:../src/FreeRTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2423:../src/FreeRTOS/tasks.c ****                     {
2424:../src/FreeRTOS/tasks.c ****                         /* Characters didn't match. */
2425:../src/FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2426:../src/FreeRTOS/tasks.c ****                     }
2427:../src/FreeRTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2428:../src/FreeRTOS/tasks.c ****                     {
2429:../src/FreeRTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2430:../src/FreeRTOS/tasks.c ****                          * found. */
2431:../src/FreeRTOS/tasks.c ****                         pxReturn = pxNextTCB;
2432:../src/FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2433:../src/FreeRTOS/tasks.c ****                     }
2434:../src/FreeRTOS/tasks.c ****                     else
2435:../src/FreeRTOS/tasks.c ****                     {
2436:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2437:../src/FreeRTOS/tasks.c ****                     }
2438:../src/FreeRTOS/tasks.c **** 
2439:../src/FreeRTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
2440:../src/FreeRTOS/tasks.c ****                     {
2441:../src/FreeRTOS/tasks.c ****                         break;
2442:../src/FreeRTOS/tasks.c ****                     }
2443:../src/FreeRTOS/tasks.c ****                 }
2444:../src/FreeRTOS/tasks.c **** 
2445:../src/FreeRTOS/tasks.c ****                 if( pxReturn != NULL )
2446:../src/FreeRTOS/tasks.c ****                 {
2447:../src/FreeRTOS/tasks.c ****                     /* The handle has been found. */
2448:../src/FreeRTOS/tasks.c ****                     break;
2449:../src/FreeRTOS/tasks.c ****                 }
2450:../src/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
2451:../src/FreeRTOS/tasks.c ****         }
2452:../src/FreeRTOS/tasks.c ****         else
2453:../src/FreeRTOS/tasks.c ****         {
2454:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2455:../src/FreeRTOS/tasks.c ****         }
2456:../src/FreeRTOS/tasks.c **** 
2457:../src/FreeRTOS/tasks.c ****         return pxReturn;
2458:../src/FreeRTOS/tasks.c ****     }
2459:../src/FreeRTOS/tasks.c **** 
2460:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2461:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2462:../src/FreeRTOS/tasks.c **** 
2463:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2464:../src/FreeRTOS/tasks.c **** 
2465:../src/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2466:../src/FreeRTOS/tasks.c ****     {
2467:../src/FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2468:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2469:../src/FreeRTOS/tasks.c **** 
2470:../src/FreeRTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2471:../src/FreeRTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2472:../src/FreeRTOS/tasks.c **** 
2473:../src/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2474:../src/FreeRTOS/tasks.c ****         {
2475:../src/FreeRTOS/tasks.c ****             /* Search the ready lists. */
2476:../src/FreeRTOS/tasks.c ****             do
2477:../src/FreeRTOS/tasks.c ****             {
2478:../src/FreeRTOS/tasks.c ****                 uxQueue--;
2479:../src/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2480:../src/FreeRTOS/tasks.c **** 
2481:../src/FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2482:../src/FreeRTOS/tasks.c ****                 {
2483:../src/FreeRTOS/tasks.c ****                     /* Found the handle. */
2484:../src/FreeRTOS/tasks.c ****                     break;
2485:../src/FreeRTOS/tasks.c ****                 }
2486:../src/FreeRTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2487:../src/FreeRTOS/tasks.c **** 
2488:../src/FreeRTOS/tasks.c ****             /* Search the delayed lists. */
2489:../src/FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2490:../src/FreeRTOS/tasks.c ****             {
2491:../src/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2492:../src/FreeRTOS/tasks.c ****             }
2493:../src/FreeRTOS/tasks.c **** 
2494:../src/FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2495:../src/FreeRTOS/tasks.c ****             {
2496:../src/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2497:../src/FreeRTOS/tasks.c ****             }
2498:../src/FreeRTOS/tasks.c **** 
2499:../src/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2500:../src/FreeRTOS/tasks.c ****                 {
2501:../src/FreeRTOS/tasks.c ****                     if( pxTCB == NULL )
2502:../src/FreeRTOS/tasks.c ****                     {
2503:../src/FreeRTOS/tasks.c ****                         /* Search the suspended list. */
2504:../src/FreeRTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
2505:../src/FreeRTOS/tasks.c ****                     }
2506:../src/FreeRTOS/tasks.c ****                 }
2507:../src/FreeRTOS/tasks.c ****             #endif
2508:../src/FreeRTOS/tasks.c **** 
2509:../src/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2510:../src/FreeRTOS/tasks.c ****                 {
2511:../src/FreeRTOS/tasks.c ****                     if( pxTCB == NULL )
2512:../src/FreeRTOS/tasks.c ****                     {
2513:../src/FreeRTOS/tasks.c ****                         /* Search the deleted list. */
2514:../src/FreeRTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
2515:../src/FreeRTOS/tasks.c ****                     }
2516:../src/FreeRTOS/tasks.c ****                 }
2517:../src/FreeRTOS/tasks.c ****             #endif
2518:../src/FreeRTOS/tasks.c ****         }
2519:../src/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2520:../src/FreeRTOS/tasks.c **** 
2521:../src/FreeRTOS/tasks.c ****         return pxTCB;
2522:../src/FreeRTOS/tasks.c ****     }
2523:../src/FreeRTOS/tasks.c **** 
2524:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2525:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2526:../src/FreeRTOS/tasks.c **** 
2527:../src/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2528:../src/FreeRTOS/tasks.c **** 
2529:../src/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2530:../src/FreeRTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2531:../src/FreeRTOS/tasks.c ****                                       uint32_t * const pulTotalRunTime )
2532:../src/FreeRTOS/tasks.c ****     {
2533:../src/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2534:../src/FreeRTOS/tasks.c **** 
2535:../src/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2536:../src/FreeRTOS/tasks.c ****         {
2537:../src/FreeRTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2538:../src/FreeRTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2539:../src/FreeRTOS/tasks.c ****             {
2540:../src/FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2541:../src/FreeRTOS/tasks.c ****                  * task in the Ready state. */
2542:../src/FreeRTOS/tasks.c ****                 do
2543:../src/FreeRTOS/tasks.c ****                 {
2544:../src/FreeRTOS/tasks.c ****                     uxQueue--;
2545:../src/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2546:../src/FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2547:../src/FreeRTOS/tasks.c **** 
2548:../src/FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2549:../src/FreeRTOS/tasks.c ****                  * task in the Blocked state. */
2550:../src/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2551:../src/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2552:../src/FreeRTOS/tasks.c **** 
2553:../src/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2554:../src/FreeRTOS/tasks.c ****                     {
2555:../src/FreeRTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2556:../src/FreeRTOS/tasks.c ****                          * each task that has been deleted but not yet cleaned up. */
2557:../src/FreeRTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2558:../src/FreeRTOS/tasks.c ****                     }
2559:../src/FreeRTOS/tasks.c ****                 #endif
2560:../src/FreeRTOS/tasks.c **** 
2561:../src/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2562:../src/FreeRTOS/tasks.c ****                     {
2563:../src/FreeRTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2564:../src/FreeRTOS/tasks.c ****                          * each task in the Suspended state. */
2565:../src/FreeRTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2566:../src/FreeRTOS/tasks.c ****                     }
2567:../src/FreeRTOS/tasks.c ****                 #endif
2568:../src/FreeRTOS/tasks.c **** 
2569:../src/FreeRTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2570:../src/FreeRTOS/tasks.c ****                     {
2571:../src/FreeRTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2572:../src/FreeRTOS/tasks.c ****                         {
2573:../src/FreeRTOS/tasks.c ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2574:../src/FreeRTOS/tasks.c ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2575:../src/FreeRTOS/tasks.c ****                             #else
2576:../src/FreeRTOS/tasks.c ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2577:../src/FreeRTOS/tasks.c ****                             #endif
2578:../src/FreeRTOS/tasks.c ****                         }
2579:../src/FreeRTOS/tasks.c ****                     }
2580:../src/FreeRTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2581:../src/FreeRTOS/tasks.c ****                     {
2582:../src/FreeRTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2583:../src/FreeRTOS/tasks.c ****                         {
2584:../src/FreeRTOS/tasks.c ****                             *pulTotalRunTime = 0;
2585:../src/FreeRTOS/tasks.c ****                         }
2586:../src/FreeRTOS/tasks.c ****                     }
2587:../src/FreeRTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2588:../src/FreeRTOS/tasks.c ****             }
2589:../src/FreeRTOS/tasks.c ****             else
2590:../src/FreeRTOS/tasks.c ****             {
2591:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2592:../src/FreeRTOS/tasks.c ****             }
2593:../src/FreeRTOS/tasks.c ****         }
2594:../src/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2595:../src/FreeRTOS/tasks.c **** 
2596:../src/FreeRTOS/tasks.c ****         return uxTask;
2597:../src/FreeRTOS/tasks.c ****     }
2598:../src/FreeRTOS/tasks.c **** 
2599:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2600:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2601:../src/FreeRTOS/tasks.c **** 
2602:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2603:../src/FreeRTOS/tasks.c **** 
2604:../src/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2605:../src/FreeRTOS/tasks.c ****     {
2606:../src/FreeRTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2607:../src/FreeRTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2608:../src/FreeRTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2609:../src/FreeRTOS/tasks.c ****         return xIdleTaskHandle;
2610:../src/FreeRTOS/tasks.c ****     }
2611:../src/FreeRTOS/tasks.c **** 
2612:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2613:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2614:../src/FreeRTOS/tasks.c **** 
2615:../src/FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2616:../src/FreeRTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2617:../src/FreeRTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2618:../src/FreeRTOS/tasks.c ****  * 1. */
2619:../src/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2620:../src/FreeRTOS/tasks.c **** 
2621:../src/FreeRTOS/tasks.c ****     void vTaskStepTick( const TickType_t xTicksToJump )
2622:../src/FreeRTOS/tasks.c ****     {
2623:../src/FreeRTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
2624:../src/FreeRTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2625:../src/FreeRTOS/tasks.c ****          * each stepped tick. */
2626:../src/FreeRTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2627:../src/FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
2628:../src/FreeRTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2629:../src/FreeRTOS/tasks.c ****     }
2630:../src/FreeRTOS/tasks.c **** 
2631:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2632:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2633:../src/FreeRTOS/tasks.c **** 
2634:../src/FreeRTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2635:../src/FreeRTOS/tasks.c **** {
2636:../src/FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
2637:../src/FreeRTOS/tasks.c **** 
2638:../src/FreeRTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2639:../src/FreeRTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2640:../src/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
2641:../src/FreeRTOS/tasks.c **** 
2642:../src/FreeRTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2643:../src/FreeRTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2644:../src/FreeRTOS/tasks.c ****     vTaskSuspendAll();
2645:../src/FreeRTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
2646:../src/FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2647:../src/FreeRTOS/tasks.c **** 
2648:../src/FreeRTOS/tasks.c ****     return xYieldOccurred;
2649:../src/FreeRTOS/tasks.c **** }
2650:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2651:../src/FreeRTOS/tasks.c **** 
2652:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2653:../src/FreeRTOS/tasks.c **** 
2654:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2655:../src/FreeRTOS/tasks.c ****     {
2656:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
2657:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
2658:../src/FreeRTOS/tasks.c **** 
2659:../src/FreeRTOS/tasks.c ****         configASSERT( pxTCB );
2660:../src/FreeRTOS/tasks.c **** 
2661:../src/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2662:../src/FreeRTOS/tasks.c ****         {
2663:../src/FreeRTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2664:../src/FreeRTOS/tasks.c ****              * it is actually in the Blocked state. */
2665:../src/FreeRTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2666:../src/FreeRTOS/tasks.c ****             {
2667:../src/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2668:../src/FreeRTOS/tasks.c **** 
2669:../src/FreeRTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2670:../src/FreeRTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2671:../src/FreeRTOS/tasks.c ****                  * scheduler is suspended. */
2672:../src/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2673:../src/FreeRTOS/tasks.c **** 
2674:../src/FreeRTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2675:../src/FreeRTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2676:../src/FreeRTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2677:../src/FreeRTOS/tasks.c ****                  * is used. */
2678:../src/FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
2679:../src/FreeRTOS/tasks.c ****                 {
2680:../src/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2681:../src/FreeRTOS/tasks.c ****                     {
2682:../src/FreeRTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2683:../src/FreeRTOS/tasks.c **** 
2684:../src/FreeRTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2685:../src/FreeRTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2686:../src/FreeRTOS/tasks.c ****                          * then block again. */
2687:../src/FreeRTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2688:../src/FreeRTOS/tasks.c ****                     }
2689:../src/FreeRTOS/tasks.c ****                     else
2690:../src/FreeRTOS/tasks.c ****                     {
2691:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2692:../src/FreeRTOS/tasks.c ****                     }
2693:../src/FreeRTOS/tasks.c ****                 }
2694:../src/FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
2695:../src/FreeRTOS/tasks.c **** 
2696:../src/FreeRTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2697:../src/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2698:../src/FreeRTOS/tasks.c **** 
2699:../src/FreeRTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2700:../src/FreeRTOS/tasks.c ****                  * switch if preemption is turned off. */
2701:../src/FreeRTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2702:../src/FreeRTOS/tasks.c ****                     {
2703:../src/FreeRTOS/tasks.c ****                         /* Preemption is on, but a context switch should only be
2704:../src/FreeRTOS/tasks.c ****                          *  performed if the unblocked task has a priority that is
2705:../src/FreeRTOS/tasks.c ****                          *  equal to or higher than the currently executing task. */
2706:../src/FreeRTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2707:../src/FreeRTOS/tasks.c ****                         {
2708:../src/FreeRTOS/tasks.c ****                             /* Pend the yield to be performed when the scheduler
2709:../src/FreeRTOS/tasks.c ****                              * is unsuspended. */
2710:../src/FreeRTOS/tasks.c ****                             xYieldPending = pdTRUE;
2711:../src/FreeRTOS/tasks.c ****                         }
2712:../src/FreeRTOS/tasks.c ****                         else
2713:../src/FreeRTOS/tasks.c ****                         {
2714:../src/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2715:../src/FreeRTOS/tasks.c ****                         }
2716:../src/FreeRTOS/tasks.c ****                     }
2717:../src/FreeRTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2718:../src/FreeRTOS/tasks.c ****             }
2719:../src/FreeRTOS/tasks.c ****             else
2720:../src/FreeRTOS/tasks.c ****             {
2721:../src/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2722:../src/FreeRTOS/tasks.c ****             }
2723:../src/FreeRTOS/tasks.c ****         }
2724:../src/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2725:../src/FreeRTOS/tasks.c **** 
2726:../src/FreeRTOS/tasks.c ****         return xReturn;
2727:../src/FreeRTOS/tasks.c ****     }
2728:../src/FreeRTOS/tasks.c **** 
2729:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2730:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2731:../src/FreeRTOS/tasks.c **** 
2732:../src/FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2733:../src/FreeRTOS/tasks.c **** {
2734:../src/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2735:../src/FreeRTOS/tasks.c ****     TickType_t xItemValue;
2736:../src/FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2737:../src/FreeRTOS/tasks.c **** 
2738:../src/FreeRTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2739:../src/FreeRTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2740:../src/FreeRTOS/tasks.c ****      * tasks to be unblocked. */
2741:../src/FreeRTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2742:../src/FreeRTOS/tasks.c **** 
2743:../src/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2744:../src/FreeRTOS/tasks.c ****     {
2745:../src/FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2746:../src/FreeRTOS/tasks.c ****          * block. */
2747:../src/FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2748:../src/FreeRTOS/tasks.c **** 
2749:../src/FreeRTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2750:../src/FreeRTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2751:../src/FreeRTOS/tasks.c ****         xTickCount = xConstTickCount;
2752:../src/FreeRTOS/tasks.c **** 
2753:../src/FreeRTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2754:../src/FreeRTOS/tasks.c ****         {
2755:../src/FreeRTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2756:../src/FreeRTOS/tasks.c ****         }
2757:../src/FreeRTOS/tasks.c ****         else
2758:../src/FreeRTOS/tasks.c ****         {
2759:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2760:../src/FreeRTOS/tasks.c ****         }
2761:../src/FreeRTOS/tasks.c **** 
2762:../src/FreeRTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2763:../src/FreeRTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2764:../src/FreeRTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
2765:../src/FreeRTOS/tasks.c ****          * look any further down the list. */
2766:../src/FreeRTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2767:../src/FreeRTOS/tasks.c ****         {
2768:../src/FreeRTOS/tasks.c ****             for( ; ; )
2769:../src/FreeRTOS/tasks.c ****             {
2770:../src/FreeRTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2771:../src/FreeRTOS/tasks.c ****                 {
2772:../src/FreeRTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2773:../src/FreeRTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2774:../src/FreeRTOS/tasks.c ****                      * unlikely that the
2775:../src/FreeRTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2776:../src/FreeRTOS/tasks.c ****                      * next time through. */
2777:../src/FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2778:../src/FreeRTOS/tasks.c ****                     break;
2779:../src/FreeRTOS/tasks.c ****                 }
2780:../src/FreeRTOS/tasks.c ****                 else
2781:../src/FreeRTOS/tasks.c ****                 {
2782:../src/FreeRTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2783:../src/FreeRTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2784:../src/FreeRTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2785:../src/FreeRTOS/tasks.c ****                      * be removed from the Blocked state. */
2786:../src/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2787:../src/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2788:../src/FreeRTOS/tasks.c **** 
2789:../src/FreeRTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
2790:../src/FreeRTOS/tasks.c ****                     {
2791:../src/FreeRTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2792:../src/FreeRTOS/tasks.c ****                          * item value is the time at which the task at the head
2793:../src/FreeRTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2794:../src/FreeRTOS/tasks.c ****                          * state -  so record the item value in
2795:../src/FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2796:../src/FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2797:../src/FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
2798:../src/FreeRTOS/tasks.c ****                     }
2799:../src/FreeRTOS/tasks.c ****                     else
2800:../src/FreeRTOS/tasks.c ****                     {
2801:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2802:../src/FreeRTOS/tasks.c ****                     }
2803:../src/FreeRTOS/tasks.c **** 
2804:../src/FreeRTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2805:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2806:../src/FreeRTOS/tasks.c **** 
2807:../src/FreeRTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2808:../src/FreeRTOS/tasks.c ****                      * it from the event list. */
2809:../src/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2810:../src/FreeRTOS/tasks.c ****                     {
2811:../src/FreeRTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2812:../src/FreeRTOS/tasks.c ****                     }
2813:../src/FreeRTOS/tasks.c ****                     else
2814:../src/FreeRTOS/tasks.c ****                     {
2815:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2816:../src/FreeRTOS/tasks.c ****                     }
2817:../src/FreeRTOS/tasks.c **** 
2818:../src/FreeRTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2819:../src/FreeRTOS/tasks.c ****                      * list. */
2820:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2821:../src/FreeRTOS/tasks.c **** 
2822:../src/FreeRTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2823:../src/FreeRTOS/tasks.c ****                      * context switch if preemption is turned off. */
2824:../src/FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2825:../src/FreeRTOS/tasks.c ****                         {
2826:../src/FreeRTOS/tasks.c ****                             /* Preemption is on, but a context switch should
2827:../src/FreeRTOS/tasks.c ****                              * only be performed if the unblocked task has a
2828:../src/FreeRTOS/tasks.c ****                              * priority that is equal to or higher than the
2829:../src/FreeRTOS/tasks.c ****                              * currently executing task. */
2830:../src/FreeRTOS/tasks.c ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2831:../src/FreeRTOS/tasks.c ****                             {
2832:../src/FreeRTOS/tasks.c ****                                 xSwitchRequired = pdTRUE;
2833:../src/FreeRTOS/tasks.c ****                             }
2834:../src/FreeRTOS/tasks.c ****                             else
2835:../src/FreeRTOS/tasks.c ****                             {
2836:../src/FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2837:../src/FreeRTOS/tasks.c ****                             }
2838:../src/FreeRTOS/tasks.c ****                         }
2839:../src/FreeRTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2840:../src/FreeRTOS/tasks.c ****                 }
2841:../src/FreeRTOS/tasks.c ****             }
2842:../src/FreeRTOS/tasks.c ****         }
2843:../src/FreeRTOS/tasks.c **** 
2844:../src/FreeRTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2845:../src/FreeRTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2846:../src/FreeRTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
2847:../src/FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2848:../src/FreeRTOS/tasks.c ****             {
2849:../src/FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
2850:../src/FreeRTOS/tasks.c ****                 {
2851:../src/FreeRTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
2852:../src/FreeRTOS/tasks.c ****                 }
2853:../src/FreeRTOS/tasks.c ****                 else
2854:../src/FreeRTOS/tasks.c ****                 {
2855:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2856:../src/FreeRTOS/tasks.c ****                 }
2857:../src/FreeRTOS/tasks.c ****             }
2858:../src/FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2859:../src/FreeRTOS/tasks.c **** 
2860:../src/FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2861:../src/FreeRTOS/tasks.c ****             {
2862:../src/FreeRTOS/tasks.c ****                 /* Guard against the tick hook being called when the pended tick
2863:../src/FreeRTOS/tasks.c ****                  * count is being unwound (when the scheduler is being unlocked). */
2864:../src/FreeRTOS/tasks.c ****                 if( xPendedTicks == ( TickType_t ) 0 )
2865:../src/FreeRTOS/tasks.c ****                 {
2866:../src/FreeRTOS/tasks.c ****                     vApplicationTickHook();
2867:../src/FreeRTOS/tasks.c ****                 }
2868:../src/FreeRTOS/tasks.c ****                 else
2869:../src/FreeRTOS/tasks.c ****                 {
2870:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2871:../src/FreeRTOS/tasks.c ****                 }
2872:../src/FreeRTOS/tasks.c ****             }
2873:../src/FreeRTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2874:../src/FreeRTOS/tasks.c **** 
2875:../src/FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2876:../src/FreeRTOS/tasks.c ****             {
2877:../src/FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
2878:../src/FreeRTOS/tasks.c ****                 {
2879:../src/FreeRTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
2880:../src/FreeRTOS/tasks.c ****                 }
2881:../src/FreeRTOS/tasks.c ****                 else
2882:../src/FreeRTOS/tasks.c ****                 {
2883:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2884:../src/FreeRTOS/tasks.c ****                 }
2885:../src/FreeRTOS/tasks.c ****             }
2886:../src/FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2887:../src/FreeRTOS/tasks.c ****     }
2888:../src/FreeRTOS/tasks.c ****     else
2889:../src/FreeRTOS/tasks.c ****     {
2890:../src/FreeRTOS/tasks.c ****         ++xPendedTicks;
2891:../src/FreeRTOS/tasks.c **** 
2892:../src/FreeRTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2893:../src/FreeRTOS/tasks.c ****          * scheduler is locked. */
2894:../src/FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2895:../src/FreeRTOS/tasks.c ****             {
2896:../src/FreeRTOS/tasks.c ****                 vApplicationTickHook();
2897:../src/FreeRTOS/tasks.c ****             }
2898:../src/FreeRTOS/tasks.c ****         #endif
2899:../src/FreeRTOS/tasks.c ****     }
2900:../src/FreeRTOS/tasks.c **** 
2901:../src/FreeRTOS/tasks.c ****     return xSwitchRequired;
2902:../src/FreeRTOS/tasks.c **** }
2903:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2904:../src/FreeRTOS/tasks.c **** 
2905:../src/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2906:../src/FreeRTOS/tasks.c **** 
2907:../src/FreeRTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2908:../src/FreeRTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2909:../src/FreeRTOS/tasks.c ****     {
2910:../src/FreeRTOS/tasks.c ****         TCB_t * xTCB;
2911:../src/FreeRTOS/tasks.c **** 
2912:../src/FreeRTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2913:../src/FreeRTOS/tasks.c ****          * getting set. */
2914:../src/FreeRTOS/tasks.c ****         if( xTask == NULL )
2915:../src/FreeRTOS/tasks.c ****         {
2916:../src/FreeRTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2917:../src/FreeRTOS/tasks.c ****         }
2918:../src/FreeRTOS/tasks.c ****         else
2919:../src/FreeRTOS/tasks.c ****         {
2920:../src/FreeRTOS/tasks.c ****             xTCB = xTask;
2921:../src/FreeRTOS/tasks.c ****         }
2922:../src/FreeRTOS/tasks.c **** 
2923:../src/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2924:../src/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2925:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2926:../src/FreeRTOS/tasks.c ****         {
2927:../src/FreeRTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2928:../src/FreeRTOS/tasks.c ****         }
2929:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2930:../src/FreeRTOS/tasks.c ****     }
2931:../src/FreeRTOS/tasks.c **** 
2932:../src/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2933:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2934:../src/FreeRTOS/tasks.c **** 
2935:../src/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2936:../src/FreeRTOS/tasks.c **** 
2937:../src/FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2938:../src/FreeRTOS/tasks.c ****     {
2939:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2940:../src/FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2941:../src/FreeRTOS/tasks.c **** 
2942:../src/FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2943:../src/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2944:../src/FreeRTOS/tasks.c **** 
2945:../src/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2946:../src/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2947:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2948:../src/FreeRTOS/tasks.c ****         {
2949:../src/FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2950:../src/FreeRTOS/tasks.c ****         }
2951:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2952:../src/FreeRTOS/tasks.c **** 
2953:../src/FreeRTOS/tasks.c ****         return xReturn;
2954:../src/FreeRTOS/tasks.c ****     }
2955:../src/FreeRTOS/tasks.c **** 
2956:../src/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2957:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2958:../src/FreeRTOS/tasks.c **** 
2959:../src/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2960:../src/FreeRTOS/tasks.c **** 
2961:../src/FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2962:../src/FreeRTOS/tasks.c ****     {
2963:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2964:../src/FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2965:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2966:../src/FreeRTOS/tasks.c **** 
2967:../src/FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2968:../src/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2969:../src/FreeRTOS/tasks.c **** 
2970:../src/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2971:../src/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2972:../src/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2973:../src/FreeRTOS/tasks.c ****         {
2974:../src/FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2975:../src/FreeRTOS/tasks.c ****         }
2976:../src/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2977:../src/FreeRTOS/tasks.c **** 
2978:../src/FreeRTOS/tasks.c ****         return xReturn;
2979:../src/FreeRTOS/tasks.c ****     }
2980:../src/FreeRTOS/tasks.c **** 
2981:../src/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2982:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2983:../src/FreeRTOS/tasks.c **** 
2984:../src/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2985:../src/FreeRTOS/tasks.c **** 
2986:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2987:../src/FreeRTOS/tasks.c ****                                              void * pvParameter )
2988:../src/FreeRTOS/tasks.c ****     {
2989:../src/FreeRTOS/tasks.c ****         TCB_t * xTCB;
2990:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
2991:../src/FreeRTOS/tasks.c **** 
2992:../src/FreeRTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2993:../src/FreeRTOS/tasks.c ****         if( xTask == NULL )
2994:../src/FreeRTOS/tasks.c ****         {
2995:../src/FreeRTOS/tasks.c ****             xTCB = pxCurrentTCB;
2996:../src/FreeRTOS/tasks.c ****         }
2997:../src/FreeRTOS/tasks.c ****         else
2998:../src/FreeRTOS/tasks.c ****         {
2999:../src/FreeRTOS/tasks.c ****             xTCB = xTask;
3000:../src/FreeRTOS/tasks.c ****         }
3001:../src/FreeRTOS/tasks.c **** 
3002:../src/FreeRTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
3003:../src/FreeRTOS/tasks.c ****         {
3004:../src/FreeRTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
3005:../src/FreeRTOS/tasks.c ****         }
3006:../src/FreeRTOS/tasks.c ****         else
3007:../src/FreeRTOS/tasks.c ****         {
3008:../src/FreeRTOS/tasks.c ****             xReturn = pdFAIL;
3009:../src/FreeRTOS/tasks.c ****         }
3010:../src/FreeRTOS/tasks.c **** 
3011:../src/FreeRTOS/tasks.c ****         return xReturn;
3012:../src/FreeRTOS/tasks.c ****     }
3013:../src/FreeRTOS/tasks.c **** 
3014:../src/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3015:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3016:../src/FreeRTOS/tasks.c **** 
3017:../src/FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
3018:../src/FreeRTOS/tasks.c **** {
3019:../src/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
3020:../src/FreeRTOS/tasks.c ****     {
3021:../src/FreeRTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3022:../src/FreeRTOS/tasks.c ****          * switch. */
3023:../src/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3024:../src/FreeRTOS/tasks.c ****     }
3025:../src/FreeRTOS/tasks.c ****     else
3026:../src/FreeRTOS/tasks.c ****     {
3027:../src/FreeRTOS/tasks.c ****         xYieldPending = pdFALSE;
3028:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3029:../src/FreeRTOS/tasks.c **** 
3030:../src/FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3031:../src/FreeRTOS/tasks.c ****             {
3032:../src/FreeRTOS/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3033:../src/FreeRTOS/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3034:../src/FreeRTOS/tasks.c ****                 #else
3035:../src/FreeRTOS/tasks.c ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3036:../src/FreeRTOS/tasks.c ****                 #endif
3037:../src/FreeRTOS/tasks.c **** 
3038:../src/FreeRTOS/tasks.c ****                 /* Add the amount of time the task has been running to the
3039:../src/FreeRTOS/tasks.c ****                  * accumulated time so far.  The time the task started running was
3040:../src/FreeRTOS/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3041:../src/FreeRTOS/tasks.c ****                  * protection here so count values are only valid until the timer
3042:../src/FreeRTOS/tasks.c ****                  * overflows.  The guard against negative values is to protect
3043:../src/FreeRTOS/tasks.c ****                  * against suspect run time stat counter implementations - which
3044:../src/FreeRTOS/tasks.c ****                  * are provided by the application, not the kernel. */
3045:../src/FreeRTOS/tasks.c ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3046:../src/FreeRTOS/tasks.c ****                 {
3047:../src/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3048:../src/FreeRTOS/tasks.c ****                 }
3049:../src/FreeRTOS/tasks.c ****                 else
3050:../src/FreeRTOS/tasks.c ****                 {
3051:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3052:../src/FreeRTOS/tasks.c ****                 }
3053:../src/FreeRTOS/tasks.c **** 
3054:../src/FreeRTOS/tasks.c ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3055:../src/FreeRTOS/tasks.c ****             }
3056:../src/FreeRTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3057:../src/FreeRTOS/tasks.c **** 
3058:../src/FreeRTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3059:../src/FreeRTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3060:../src/FreeRTOS/tasks.c **** 
3061:../src/FreeRTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3062:../src/FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3063:../src/FreeRTOS/tasks.c ****             {
3064:../src/FreeRTOS/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3065:../src/FreeRTOS/tasks.c ****             }
3066:../src/FreeRTOS/tasks.c ****         #endif
3067:../src/FreeRTOS/tasks.c **** 
3068:../src/FreeRTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3069:../src/FreeRTOS/tasks.c ****          * optimised asm code. */
3070:../src/FreeRTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3071:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
3072:../src/FreeRTOS/tasks.c **** 
3073:../src/FreeRTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3074:../src/FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3075:../src/FreeRTOS/tasks.c ****             {
3076:../src/FreeRTOS/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3077:../src/FreeRTOS/tasks.c ****             }
3078:../src/FreeRTOS/tasks.c ****         #endif
3079:../src/FreeRTOS/tasks.c **** 
3080:../src/FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3081:../src/FreeRTOS/tasks.c ****             {
3082:../src/FreeRTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3083:../src/FreeRTOS/tasks.c ****                  * structure specific to this task.
3084:../src/FreeRTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3085:../src/FreeRTOS/tasks.c ****                  * for additional information. */
3086:../src/FreeRTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3087:../src/FreeRTOS/tasks.c ****             }
3088:../src/FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3089:../src/FreeRTOS/tasks.c ****     }
3090:../src/FreeRTOS/tasks.c **** }
3091:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3092:../src/FreeRTOS/tasks.c **** 
3093:../src/FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3094:../src/FreeRTOS/tasks.c ****                             const TickType_t xTicksToWait )
3095:../src/FreeRTOS/tasks.c **** {
3096:../src/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3097:../src/FreeRTOS/tasks.c **** 
3098:../src/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3099:../src/FreeRTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3100:../src/FreeRTOS/tasks.c **** 
3101:../src/FreeRTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3102:../src/FreeRTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3103:../src/FreeRTOS/tasks.c ****      * is the first to be woken by the event.  The queue that contains the event
3104:../src/FreeRTOS/tasks.c ****      * list is locked, preventing simultaneous access from interrupts. */
3105:../src/FreeRTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3106:../src/FreeRTOS/tasks.c **** 
3107:../src/FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3108:../src/FreeRTOS/tasks.c **** }
3109:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3110:../src/FreeRTOS/tasks.c **** 
3111:../src/FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3112:../src/FreeRTOS/tasks.c ****                                      const TickType_t xItemValue,
3113:../src/FreeRTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3114:../src/FreeRTOS/tasks.c **** {
3115:../src/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3116:../src/FreeRTOS/tasks.c **** 
3117:../src/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3118:../src/FreeRTOS/tasks.c ****      * the event groups implementation. */
3119:../src/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
3120:../src/FreeRTOS/tasks.c **** 
3121:../src/FreeRTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3122:../src/FreeRTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3123:../src/FreeRTOS/tasks.c ****      * task that is not in the Blocked state. */
3124:../src/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3125:../src/FreeRTOS/tasks.c **** 
3126:../src/FreeRTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3127:../src/FreeRTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3128:../src/FreeRTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
3129:../src/FreeRTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3130:../src/FreeRTOS/tasks.c ****      * the task level). */
3131:../src/FreeRTOS/tasks.c ****     vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3132:../src/FreeRTOS/tasks.c **** 
3133:../src/FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3134:../src/FreeRTOS/tasks.c **** }
3135:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3136:../src/FreeRTOS/tasks.c **** 
3137:../src/FreeRTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3138:../src/FreeRTOS/tasks.c **** 
3139:../src/FreeRTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3140:../src/FreeRTOS/tasks.c ****                                           TickType_t xTicksToWait,
3141:../src/FreeRTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3142:../src/FreeRTOS/tasks.c ****     {
3143:../src/FreeRTOS/tasks.c ****         configASSERT( pxEventList );
3144:../src/FreeRTOS/tasks.c **** 
3145:../src/FreeRTOS/tasks.c ****         /* This function should not be called by application code hence the
3146:../src/FreeRTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3147:../src/FreeRTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3148:../src/FreeRTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3149:../src/FreeRTOS/tasks.c **** 
3150:../src/FreeRTOS/tasks.c **** 
3151:../src/FreeRTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3152:../src/FreeRTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
3153:../src/FreeRTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3154:../src/FreeRTOS/tasks.c ****          * can be used in place of vListInsert. */
3155:../src/FreeRTOS/tasks.c ****         vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3156:../src/FreeRTOS/tasks.c **** 
3157:../src/FreeRTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3158:../src/FreeRTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3159:../src/FreeRTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3160:../src/FreeRTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3161:../src/FreeRTOS/tasks.c ****         {
3162:../src/FreeRTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
3163:../src/FreeRTOS/tasks.c ****         }
3164:../src/FreeRTOS/tasks.c **** 
3165:../src/FreeRTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3166:../src/FreeRTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3167:../src/FreeRTOS/tasks.c ****     }
3168:../src/FreeRTOS/tasks.c **** 
3169:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
3170:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3171:../src/FreeRTOS/tasks.c **** 
3172:../src/FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3173:../src/FreeRTOS/tasks.c **** {
3174:../src/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3175:../src/FreeRTOS/tasks.c ****     BaseType_t xReturn;
3176:../src/FreeRTOS/tasks.c **** 
3177:../src/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3178:../src/FreeRTOS/tasks.c ****      * called from a critical section within an ISR. */
3179:../src/FreeRTOS/tasks.c **** 
3180:../src/FreeRTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3181:../src/FreeRTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3182:../src/FreeRTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3183:../src/FreeRTOS/tasks.c ****      *
3184:../src/FreeRTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3185:../src/FreeRTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3186:../src/FreeRTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3187:../src/FreeRTOS/tasks.c ****      *
3188:../src/FreeRTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3189:../src/FreeRTOS/tasks.c ****      * pxEventList is not empty. */
3190:../src/FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3191:../src/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3192:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3193:../src/FreeRTOS/tasks.c **** 
3194:../src/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3195:../src/FreeRTOS/tasks.c ****     {
3196:../src/FreeRTOS/tasks.c ****         ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3197:../src/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3198:../src/FreeRTOS/tasks.c **** 
3199:../src/FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3200:../src/FreeRTOS/tasks.c ****             {
3201:../src/FreeRTOS/tasks.c ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3202:../src/FreeRTOS/tasks.c ****                  * might be set to the blocked task's time out time.  If the task is
3203:../src/FreeRTOS/tasks.c ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3204:../src/FreeRTOS/tasks.c ****                  * normally left unchanged, because it is automatically reset to a new
3205:../src/FreeRTOS/tasks.c ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3206:../src/FreeRTOS/tasks.c ****                  * tickless idling is used it might be more important to enter sleep mode
3207:../src/FreeRTOS/tasks.c ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3208:../src/FreeRTOS/tasks.c ****                  * ensure it is updated at the earliest possible time. */
3209:../src/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
3210:../src/FreeRTOS/tasks.c ****             }
3211:../src/FreeRTOS/tasks.c ****         #endif
3212:../src/FreeRTOS/tasks.c ****     }
3213:../src/FreeRTOS/tasks.c ****     else
3214:../src/FreeRTOS/tasks.c ****     {
3215:../src/FreeRTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3216:../src/FreeRTOS/tasks.c ****          * pending until the scheduler is resumed. */
3217:../src/FreeRTOS/tasks.c ****         vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3218:../src/FreeRTOS/tasks.c ****     }
3219:../src/FreeRTOS/tasks.c **** 
3220:../src/FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3221:../src/FreeRTOS/tasks.c ****     {
3222:../src/FreeRTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3223:../src/FreeRTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3224:../src/FreeRTOS/tasks.c ****          * it should force a context switch now. */
3225:../src/FreeRTOS/tasks.c ****         xReturn = pdTRUE;
3226:../src/FreeRTOS/tasks.c **** 
3227:../src/FreeRTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3228:../src/FreeRTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3229:../src/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3230:../src/FreeRTOS/tasks.c ****     }
3231:../src/FreeRTOS/tasks.c ****     else
3232:../src/FreeRTOS/tasks.c ****     {
3233:../src/FreeRTOS/tasks.c ****         xReturn = pdFALSE;
3234:../src/FreeRTOS/tasks.c ****     }
3235:../src/FreeRTOS/tasks.c **** 
3236:../src/FreeRTOS/tasks.c ****     return xReturn;
3237:../src/FreeRTOS/tasks.c **** }
3238:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3239:../src/FreeRTOS/tasks.c **** 
3240:../src/FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3241:../src/FreeRTOS/tasks.c ****                                         const TickType_t xItemValue )
3242:../src/FreeRTOS/tasks.c **** {
3243:../src/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3244:../src/FreeRTOS/tasks.c **** 
3245:../src/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3246:../src/FreeRTOS/tasks.c ****      * the event flags implementation. */
3247:../src/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3248:../src/FreeRTOS/tasks.c **** 
3249:../src/FreeRTOS/tasks.c ****     /* Store the new item value in the event list. */
3250:../src/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3251:../src/FreeRTOS/tasks.c **** 
3252:../src/FreeRTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3253:../src/FreeRTOS/tasks.c ****      * event flags. */
3254:../src/FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3255:../src/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3256:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
3257:../src/FreeRTOS/tasks.c **** 
3258:../src/FreeRTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3259:../src/FreeRTOS/tasks.c ****         {
3260:../src/FreeRTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3261:../src/FreeRTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3262:../src/FreeRTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3263:../src/FreeRTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3264:../src/FreeRTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3265:../src/FreeRTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3266:../src/FreeRTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3267:../src/FreeRTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3268:../src/FreeRTOS/tasks.c ****             prvResetNextTaskUnblockTime();
3269:../src/FreeRTOS/tasks.c ****         }
3270:../src/FreeRTOS/tasks.c ****     #endif
3271:../src/FreeRTOS/tasks.c **** 
3272:../src/FreeRTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3273:../src/FreeRTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3274:../src/FreeRTOS/tasks.c ****      * lists. */
3275:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3276:../src/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3277:../src/FreeRTOS/tasks.c **** 
3278:../src/FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3279:../src/FreeRTOS/tasks.c ****     {
3280:../src/FreeRTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3281:../src/FreeRTOS/tasks.c ****          * a context switch is required.  This function is called with the
3282:../src/FreeRTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3283:../src/FreeRTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3284:../src/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3285:../src/FreeRTOS/tasks.c ****     }
3286:../src/FreeRTOS/tasks.c **** }
3287:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3288:../src/FreeRTOS/tasks.c **** 
3289:../src/FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3290:../src/FreeRTOS/tasks.c **** {
3291:../src/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3292:../src/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3293:../src/FreeRTOS/tasks.c ****     {
3294:../src/FreeRTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3295:../src/FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3296:../src/FreeRTOS/tasks.c ****     }
3297:../src/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3298:../src/FreeRTOS/tasks.c **** }
3299:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3300:../src/FreeRTOS/tasks.c **** 
3301:../src/FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3302:../src/FreeRTOS/tasks.c **** {
3303:../src/FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
3304:../src/FreeRTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3305:../src/FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
3306:../src/FreeRTOS/tasks.c **** }
3307:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3308:../src/FreeRTOS/tasks.c **** 
3309:../src/FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3310:../src/FreeRTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3311:../src/FreeRTOS/tasks.c **** {
3312:../src/FreeRTOS/tasks.c ****     BaseType_t xReturn;
3313:../src/FreeRTOS/tasks.c **** 
3314:../src/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3315:../src/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
3316:../src/FreeRTOS/tasks.c **** 
3317:../src/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3318:../src/FreeRTOS/tasks.c ****     {
3319:../src/FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3320:../src/FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
3321:../src/FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3322:../src/FreeRTOS/tasks.c **** 
3323:../src/FreeRTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3324:../src/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3325:../src/FreeRTOS/tasks.c ****             {
3326:../src/FreeRTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3327:../src/FreeRTOS/tasks.c ****                  * but has the same result. */
3328:../src/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3329:../src/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
3330:../src/FreeRTOS/tasks.c ****             }
3331:../src/FreeRTOS/tasks.c ****             else
3332:../src/FreeRTOS/tasks.c ****         #endif
3333:../src/FreeRTOS/tasks.c **** 
3334:../src/FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3335:../src/FreeRTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3336:../src/FreeRTOS/tasks.c ****             {
3337:../src/FreeRTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3338:../src/FreeRTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3339:../src/FreeRTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3340:../src/FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
3341:../src/FreeRTOS/tasks.c ****             }
3342:../src/FreeRTOS/tasks.c ****             else
3343:../src/FreeRTOS/tasks.c ****         #endif
3344:../src/FreeRTOS/tasks.c **** 
3345:../src/FreeRTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3346:../src/FreeRTOS/tasks.c ****         {
3347:../src/FreeRTOS/tasks.c ****             /* The tick count is greater than the time at which
3348:../src/FreeRTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3349:../src/FreeRTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3350:../src/FreeRTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3351:../src/FreeRTOS/tasks.c ****              * was called. */
3352:../src/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3353:../src/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3354:../src/FreeRTOS/tasks.c ****         }
3355:../src/FreeRTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3356:../src/FreeRTOS/tasks.c ****         {
3357:../src/FreeRTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3358:../src/FreeRTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3359:../src/FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3360:../src/FreeRTOS/tasks.c ****             xReturn = pdFALSE;
3361:../src/FreeRTOS/tasks.c ****         }
3362:../src/FreeRTOS/tasks.c ****         else
3363:../src/FreeRTOS/tasks.c ****         {
3364:../src/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3365:../src/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3366:../src/FreeRTOS/tasks.c ****         }
3367:../src/FreeRTOS/tasks.c ****     }
3368:../src/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3369:../src/FreeRTOS/tasks.c **** 
3370:../src/FreeRTOS/tasks.c ****     return xReturn;
3371:../src/FreeRTOS/tasks.c **** }
3372:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3373:../src/FreeRTOS/tasks.c **** 
3374:../src/FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3375:../src/FreeRTOS/tasks.c **** {
3376:../src/FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
3377:../src/FreeRTOS/tasks.c **** }
3378:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3379:../src/FreeRTOS/tasks.c **** 
3380:../src/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3381:../src/FreeRTOS/tasks.c **** 
3382:../src/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3383:../src/FreeRTOS/tasks.c ****     {
3384:../src/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3385:../src/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
3386:../src/FreeRTOS/tasks.c **** 
3387:../src/FreeRTOS/tasks.c ****         if( xTask != NULL )
3388:../src/FreeRTOS/tasks.c ****         {
3389:../src/FreeRTOS/tasks.c ****             pxTCB = xTask;
3390:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3391:../src/FreeRTOS/tasks.c ****         }
3392:../src/FreeRTOS/tasks.c ****         else
3393:../src/FreeRTOS/tasks.c ****         {
3394:../src/FreeRTOS/tasks.c ****             uxReturn = 0U;
3395:../src/FreeRTOS/tasks.c ****         }
3396:../src/FreeRTOS/tasks.c **** 
3397:../src/FreeRTOS/tasks.c ****         return uxReturn;
3398:../src/FreeRTOS/tasks.c ****     }
3399:../src/FreeRTOS/tasks.c **** 
3400:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3401:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3402:../src/FreeRTOS/tasks.c **** 
3403:../src/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3404:../src/FreeRTOS/tasks.c **** 
3405:../src/FreeRTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3406:../src/FreeRTOS/tasks.c ****                              const UBaseType_t uxHandle )
3407:../src/FreeRTOS/tasks.c ****     {
3408:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3409:../src/FreeRTOS/tasks.c **** 
3410:../src/FreeRTOS/tasks.c ****         if( xTask != NULL )
3411:../src/FreeRTOS/tasks.c ****         {
3412:../src/FreeRTOS/tasks.c ****             pxTCB = xTask;
3413:../src/FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3414:../src/FreeRTOS/tasks.c ****         }
3415:../src/FreeRTOS/tasks.c ****     }
3416:../src/FreeRTOS/tasks.c **** 
3417:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3418:../src/FreeRTOS/tasks.c **** 
3419:../src/FreeRTOS/tasks.c **** /*
3420:../src/FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3421:../src/FreeRTOS/tasks.c ****  * The Idle task.
3422:../src/FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3423:../src/FreeRTOS/tasks.c ****  *
3424:../src/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3425:../src/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3426:../src/FreeRTOS/tasks.c ****  *
3427:../src/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3428:../src/FreeRTOS/tasks.c ****  *
3429:../src/FreeRTOS/tasks.c ****  */
3430:../src/FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3431:../src/FreeRTOS/tasks.c **** {
3432:../src/FreeRTOS/tasks.c ****     /* Stop warnings. */
3433:../src/FreeRTOS/tasks.c ****     ( void ) pvParameters;
3434:../src/FreeRTOS/tasks.c **** 
3435:../src/FreeRTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3436:../src/FreeRTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3437:../src/FreeRTOS/tasks.c **** 
3438:../src/FreeRTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3439:../src/FreeRTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3440:../src/FreeRTOS/tasks.c ****      * any. */
3441:../src/FreeRTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3442:../src/FreeRTOS/tasks.c **** 
3443:../src/FreeRTOS/tasks.c ****     for( ; ; )
3444:../src/FreeRTOS/tasks.c ****     {
3445:../src/FreeRTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3446:../src/FreeRTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3447:../src/FreeRTOS/tasks.c ****         prvCheckTasksWaitingTermination();
3448:../src/FreeRTOS/tasks.c **** 
3449:../src/FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3450:../src/FreeRTOS/tasks.c ****             {
3451:../src/FreeRTOS/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
3452:../src/FreeRTOS/tasks.c ****                  * see if any other task has become available.  If we are using
3453:../src/FreeRTOS/tasks.c ****                  * preemption we don't need to do this as any task becoming available
3454:../src/FreeRTOS/tasks.c ****                  * will automatically get the processor anyway. */
3455:../src/FreeRTOS/tasks.c ****                 taskYIELD();
3456:../src/FreeRTOS/tasks.c ****             }
3457:../src/FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3458:../src/FreeRTOS/tasks.c **** 
3459:../src/FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3460:../src/FreeRTOS/tasks.c ****             {
3461:../src/FreeRTOS/tasks.c ****                 /* When using preemption tasks of equal priority will be
3462:../src/FreeRTOS/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
3463:../src/FreeRTOS/tasks.c ****                  * to run then the idle task should yield before the end of the
3464:../src/FreeRTOS/tasks.c ****                  * timeslice.
3465:../src/FreeRTOS/tasks.c ****                  *
3466:../src/FreeRTOS/tasks.c ****                  * A critical region is not required here as we are just reading from
3467:../src/FreeRTOS/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
3468:../src/FreeRTOS/tasks.c ****                  * the ready list at the idle priority contains more than one task
3469:../src/FreeRTOS/tasks.c ****                  * then a task other than the idle task is ready to execute. */
3470:../src/FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
3471:../src/FreeRTOS/tasks.c ****                 {
3472:../src/FreeRTOS/tasks.c ****                     taskYIELD();
3473:../src/FreeRTOS/tasks.c ****                 }
3474:../src/FreeRTOS/tasks.c ****                 else
3475:../src/FreeRTOS/tasks.c ****                 {
3476:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3477:../src/FreeRTOS/tasks.c ****                 }
3478:../src/FreeRTOS/tasks.c ****             }
3479:../src/FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3480:../src/FreeRTOS/tasks.c **** 
3481:../src/FreeRTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3482:../src/FreeRTOS/tasks.c ****             {
3483:../src/FreeRTOS/tasks.c ****                 extern void vApplicationIdleHook( void );
3484:../src/FreeRTOS/tasks.c **** 
3485:../src/FreeRTOS/tasks.c ****                 /* Call the user defined function from within the idle task.  This
3486:../src/FreeRTOS/tasks.c ****                  * allows the application designer to add background functionality
3487:../src/FreeRTOS/tasks.c ****                  * without the overhead of a separate task.
3488:../src/FreeRTOS/tasks.c ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3489:../src/FreeRTOS/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3490:../src/FreeRTOS/tasks.c ****                 vApplicationIdleHook();
3491:../src/FreeRTOS/tasks.c ****             }
3492:../src/FreeRTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3493:../src/FreeRTOS/tasks.c **** 
3494:../src/FreeRTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3495:../src/FreeRTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3496:../src/FreeRTOS/tasks.c ****          * user defined low power mode  implementations require
3497:../src/FreeRTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3498:../src/FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3499:../src/FreeRTOS/tasks.c ****             {
3500:../src/FreeRTOS/tasks.c ****                 TickType_t xExpectedIdleTime;
3501:../src/FreeRTOS/tasks.c **** 
3502:../src/FreeRTOS/tasks.c ****                 /* It is not desirable to suspend then resume the scheduler on
3503:../src/FreeRTOS/tasks.c ****                  * each iteration of the idle task.  Therefore, a preliminary
3504:../src/FreeRTOS/tasks.c ****                  * test of the expected idle time is performed without the
3505:../src/FreeRTOS/tasks.c ****                  * scheduler suspended.  The result here is not necessarily
3506:../src/FreeRTOS/tasks.c ****                  * valid. */
3507:../src/FreeRTOS/tasks.c ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3508:../src/FreeRTOS/tasks.c **** 
3509:../src/FreeRTOS/tasks.c ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3510:../src/FreeRTOS/tasks.c ****                 {
3511:../src/FreeRTOS/tasks.c ****                     vTaskSuspendAll();
3512:../src/FreeRTOS/tasks.c ****                     {
3513:../src/FreeRTOS/tasks.c ****                         /* Now the scheduler is suspended, the expected idle
3514:../src/FreeRTOS/tasks.c ****                          * time can be sampled again, and this time its value can
3515:../src/FreeRTOS/tasks.c ****                          * be used. */
3516:../src/FreeRTOS/tasks.c ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3517:../src/FreeRTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3518:../src/FreeRTOS/tasks.c **** 
3519:../src/FreeRTOS/tasks.c ****                         /* Define the following macro to set xExpectedIdleTime to 0
3520:../src/FreeRTOS/tasks.c ****                          * if the application does not want
3521:../src/FreeRTOS/tasks.c ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3522:../src/FreeRTOS/tasks.c ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3523:../src/FreeRTOS/tasks.c **** 
3524:../src/FreeRTOS/tasks.c ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3525:../src/FreeRTOS/tasks.c ****                         {
3526:../src/FreeRTOS/tasks.c ****                             traceLOW_POWER_IDLE_BEGIN();
3527:../src/FreeRTOS/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3528:../src/FreeRTOS/tasks.c ****                             traceLOW_POWER_IDLE_END();
3529:../src/FreeRTOS/tasks.c ****                         }
3530:../src/FreeRTOS/tasks.c ****                         else
3531:../src/FreeRTOS/tasks.c ****                         {
3532:../src/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3533:../src/FreeRTOS/tasks.c ****                         }
3534:../src/FreeRTOS/tasks.c ****                     }
3535:../src/FreeRTOS/tasks.c ****                     ( void ) xTaskResumeAll();
3536:../src/FreeRTOS/tasks.c ****                 }
3537:../src/FreeRTOS/tasks.c ****                 else
3538:../src/FreeRTOS/tasks.c ****                 {
3539:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3540:../src/FreeRTOS/tasks.c ****                 }
3541:../src/FreeRTOS/tasks.c ****             }
3542:../src/FreeRTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3543:../src/FreeRTOS/tasks.c ****     }
3544:../src/FreeRTOS/tasks.c **** }
3545:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3546:../src/FreeRTOS/tasks.c **** 
3547:../src/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3548:../src/FreeRTOS/tasks.c **** 
3549:../src/FreeRTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3550:../src/FreeRTOS/tasks.c ****     {
3551:../src/FreeRTOS/tasks.c ****         /* The idle task exists in addition to the application tasks. */
3552:../src/FreeRTOS/tasks.c ****         const UBaseType_t uxNonApplicationTasks = 1;
3553:../src/FreeRTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3554:../src/FreeRTOS/tasks.c **** 
3555:../src/FreeRTOS/tasks.c ****         /* This function must be called from a critical section. */
3556:../src/FreeRTOS/tasks.c **** 
3557:../src/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3558:../src/FreeRTOS/tasks.c ****         {
3559:../src/FreeRTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3560:../src/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3561:../src/FreeRTOS/tasks.c ****         }
3562:../src/FreeRTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3563:../src/FreeRTOS/tasks.c ****         {
3564:../src/FreeRTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3565:../src/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3566:../src/FreeRTOS/tasks.c ****         }
3567:../src/FreeRTOS/tasks.c ****         else if( xPendedTicks != 0 )
3568:../src/FreeRTOS/tasks.c ****         {
3569:../src/FreeRTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3570:../src/FreeRTOS/tasks.c ****              * because the scheduler is suspended. */
3571:../src/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3572:../src/FreeRTOS/tasks.c ****         }
3573:../src/FreeRTOS/tasks.c ****         else
3574:../src/FreeRTOS/tasks.c ****         {
3575:../src/FreeRTOS/tasks.c ****             /* If all the tasks are in the suspended list (which might mean they
3576:../src/FreeRTOS/tasks.c ****              * have an infinite block time rather than actually being suspended)
3577:../src/FreeRTOS/tasks.c ****              * then it is safe to turn all clocks off and just wait for external
3578:../src/FreeRTOS/tasks.c ****              * interrupts. */
3579:../src/FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3580:../src/FreeRTOS/tasks.c ****             {
3581:../src/FreeRTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3582:../src/FreeRTOS/tasks.c ****             }
3583:../src/FreeRTOS/tasks.c ****             else
3584:../src/FreeRTOS/tasks.c ****             {
3585:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3586:../src/FreeRTOS/tasks.c ****             }
3587:../src/FreeRTOS/tasks.c ****         }
3588:../src/FreeRTOS/tasks.c **** 
3589:../src/FreeRTOS/tasks.c ****         return eReturn;
3590:../src/FreeRTOS/tasks.c ****     }
3591:../src/FreeRTOS/tasks.c **** 
3592:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3593:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3594:../src/FreeRTOS/tasks.c **** 
3595:../src/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3596:../src/FreeRTOS/tasks.c **** 
3597:../src/FreeRTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3598:../src/FreeRTOS/tasks.c ****                                             BaseType_t xIndex,
3599:../src/FreeRTOS/tasks.c ****                                             void * pvValue )
3600:../src/FreeRTOS/tasks.c ****     {
3601:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3602:../src/FreeRTOS/tasks.c **** 
3603:../src/FreeRTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3604:../src/FreeRTOS/tasks.c ****         {
3605:../src/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3606:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
3607:../src/FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3608:../src/FreeRTOS/tasks.c ****         }
3609:../src/FreeRTOS/tasks.c ****     }
3610:../src/FreeRTOS/tasks.c **** 
3611:../src/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3612:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3613:../src/FreeRTOS/tasks.c **** 
3614:../src/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3615:../src/FreeRTOS/tasks.c **** 
3616:../src/FreeRTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3617:../src/FreeRTOS/tasks.c ****                                                BaseType_t xIndex )
3618:../src/FreeRTOS/tasks.c ****     {
3619:../src/FreeRTOS/tasks.c ****         void * pvReturn = NULL;
3620:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3621:../src/FreeRTOS/tasks.c **** 
3622:../src/FreeRTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3623:../src/FreeRTOS/tasks.c ****         {
3624:../src/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3625:../src/FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3626:../src/FreeRTOS/tasks.c ****         }
3627:../src/FreeRTOS/tasks.c ****         else
3628:../src/FreeRTOS/tasks.c ****         {
3629:../src/FreeRTOS/tasks.c ****             pvReturn = NULL;
3630:../src/FreeRTOS/tasks.c ****         }
3631:../src/FreeRTOS/tasks.c **** 
3632:../src/FreeRTOS/tasks.c ****         return pvReturn;
3633:../src/FreeRTOS/tasks.c ****     }
3634:../src/FreeRTOS/tasks.c **** 
3635:../src/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3636:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3637:../src/FreeRTOS/tasks.c **** 
3638:../src/FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3639:../src/FreeRTOS/tasks.c **** 
3640:../src/FreeRTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3641:../src/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3642:../src/FreeRTOS/tasks.c ****     {
3643:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3644:../src/FreeRTOS/tasks.c **** 
3645:../src/FreeRTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3646:../src/FreeRTOS/tasks.c ****          * the calling task. */
3647:../src/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3648:../src/FreeRTOS/tasks.c **** 
3649:../src/FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3650:../src/FreeRTOS/tasks.c ****     }
3651:../src/FreeRTOS/tasks.c **** 
3652:../src/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3653:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3654:../src/FreeRTOS/tasks.c **** 
3655:../src/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3656:../src/FreeRTOS/tasks.c **** {
3657:../src/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
3658:../src/FreeRTOS/tasks.c **** 
3659:../src/FreeRTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3660:../src/FreeRTOS/tasks.c ****     {
3661:../src/FreeRTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3662:../src/FreeRTOS/tasks.c ****     }
3663:../src/FreeRTOS/tasks.c **** 
3664:../src/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3665:../src/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3666:../src/FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
3667:../src/FreeRTOS/tasks.c **** 
3668:../src/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3669:../src/FreeRTOS/tasks.c ****         {
3670:../src/FreeRTOS/tasks.c ****             vListInitialise( &xTasksWaitingTermination );
3671:../src/FreeRTOS/tasks.c ****         }
3672:../src/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3673:../src/FreeRTOS/tasks.c **** 
3674:../src/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3675:../src/FreeRTOS/tasks.c ****         {
3676:../src/FreeRTOS/tasks.c ****             vListInitialise( &xSuspendedTaskList );
3677:../src/FreeRTOS/tasks.c ****         }
3678:../src/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3679:../src/FreeRTOS/tasks.c **** 
3680:../src/FreeRTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3681:../src/FreeRTOS/tasks.c ****      * using list2. */
3682:../src/FreeRTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3683:../src/FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3684:../src/FreeRTOS/tasks.c **** }
3685:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3686:../src/FreeRTOS/tasks.c **** 
3687:../src/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3688:../src/FreeRTOS/tasks.c **** {
3689:../src/FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3690:../src/FreeRTOS/tasks.c **** 
3691:../src/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3692:../src/FreeRTOS/tasks.c ****         {
3693:../src/FreeRTOS/tasks.c ****             TCB_t * pxTCB;
3694:../src/FreeRTOS/tasks.c **** 
3695:../src/FreeRTOS/tasks.c ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3696:../src/FreeRTOS/tasks.c ****              * being called too often in the idle task. */
3697:../src/FreeRTOS/tasks.c ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3698:../src/FreeRTOS/tasks.c ****             {
3699:../src/FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
3700:../src/FreeRTOS/tasks.c ****                 {
3701:../src/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
3702:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3703:../src/FreeRTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
3704:../src/FreeRTOS/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
3705:../src/FreeRTOS/tasks.c ****                 }
3706:../src/FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
3707:../src/FreeRTOS/tasks.c **** 
3708:../src/FreeRTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
3709:../src/FreeRTOS/tasks.c ****             }
3710:../src/FreeRTOS/tasks.c ****         }
3711:../src/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3712:../src/FreeRTOS/tasks.c **** }
3713:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3714:../src/FreeRTOS/tasks.c **** 
3715:../src/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3716:../src/FreeRTOS/tasks.c **** 
3717:../src/FreeRTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3718:../src/FreeRTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3719:../src/FreeRTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3720:../src/FreeRTOS/tasks.c ****                        eTaskState eState )
3721:../src/FreeRTOS/tasks.c ****     {
3722:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3723:../src/FreeRTOS/tasks.c **** 
3724:../src/FreeRTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3725:../src/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3726:../src/FreeRTOS/tasks.c **** 
3727:../src/FreeRTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3728:../src/FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3729:../src/FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3730:../src/FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3731:../src/FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3732:../src/FreeRTOS/tasks.c **** 
3733:../src/FreeRTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3734:../src/FreeRTOS/tasks.c ****             {
3735:../src/FreeRTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3736:../src/FreeRTOS/tasks.c ****             }
3737:../src/FreeRTOS/tasks.c ****         #else
3738:../src/FreeRTOS/tasks.c ****             {
3739:../src/FreeRTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = 0;
3740:../src/FreeRTOS/tasks.c ****             }
3741:../src/FreeRTOS/tasks.c ****         #endif
3742:../src/FreeRTOS/tasks.c **** 
3743:../src/FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3744:../src/FreeRTOS/tasks.c ****             {
3745:../src/FreeRTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3746:../src/FreeRTOS/tasks.c ****             }
3747:../src/FreeRTOS/tasks.c ****         #else
3748:../src/FreeRTOS/tasks.c ****             {
3749:../src/FreeRTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = 0;
3750:../src/FreeRTOS/tasks.c ****             }
3751:../src/FreeRTOS/tasks.c ****         #endif
3752:../src/FreeRTOS/tasks.c **** 
3753:../src/FreeRTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3754:../src/FreeRTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3755:../src/FreeRTOS/tasks.c ****          * state is just set to whatever is passed in. */
3756:../src/FreeRTOS/tasks.c ****         if( eState != eInvalid )
3757:../src/FreeRTOS/tasks.c ****         {
3758:../src/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
3759:../src/FreeRTOS/tasks.c ****             {
3760:../src/FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3761:../src/FreeRTOS/tasks.c ****             }
3762:../src/FreeRTOS/tasks.c ****             else
3763:../src/FreeRTOS/tasks.c ****             {
3764:../src/FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3765:../src/FreeRTOS/tasks.c **** 
3766:../src/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3767:../src/FreeRTOS/tasks.c ****                     {
3768:../src/FreeRTOS/tasks.c ****                         /* If the task is in the suspended list then there is a
3769:../src/FreeRTOS/tasks.c ****                          *  chance it is actually just blocked indefinitely - so really
3770:../src/FreeRTOS/tasks.c ****                          *  it should be reported as being in the Blocked state. */
3771:../src/FreeRTOS/tasks.c ****                         if( eState == eSuspended )
3772:../src/FreeRTOS/tasks.c ****                         {
3773:../src/FreeRTOS/tasks.c ****                             vTaskSuspendAll();
3774:../src/FreeRTOS/tasks.c ****                             {
3775:../src/FreeRTOS/tasks.c ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3776:../src/FreeRTOS/tasks.c ****                                 {
3777:../src/FreeRTOS/tasks.c ****                                     pxTaskStatus->eCurrentState = eBlocked;
3778:../src/FreeRTOS/tasks.c ****                                 }
3779:../src/FreeRTOS/tasks.c ****                             }
3780:../src/FreeRTOS/tasks.c ****                             ( void ) xTaskResumeAll();
3781:../src/FreeRTOS/tasks.c ****                         }
3782:../src/FreeRTOS/tasks.c ****                     }
3783:../src/FreeRTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3784:../src/FreeRTOS/tasks.c ****             }
3785:../src/FreeRTOS/tasks.c ****         }
3786:../src/FreeRTOS/tasks.c ****         else
3787:../src/FreeRTOS/tasks.c ****         {
3788:../src/FreeRTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3789:../src/FreeRTOS/tasks.c ****         }
3790:../src/FreeRTOS/tasks.c **** 
3791:../src/FreeRTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3792:../src/FreeRTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3793:../src/FreeRTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3794:../src/FreeRTOS/tasks.c ****         {
3795:../src/FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3796:../src/FreeRTOS/tasks.c ****                 {
3797:../src/FreeRTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3798:../src/FreeRTOS/tasks.c ****                 }
3799:../src/FreeRTOS/tasks.c ****             #else
3800:../src/FreeRTOS/tasks.c ****                 {
3801:../src/FreeRTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3802:../src/FreeRTOS/tasks.c ****                 }
3803:../src/FreeRTOS/tasks.c ****             #endif
3804:../src/FreeRTOS/tasks.c ****         }
3805:../src/FreeRTOS/tasks.c ****         else
3806:../src/FreeRTOS/tasks.c ****         {
3807:../src/FreeRTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3808:../src/FreeRTOS/tasks.c ****         }
3809:../src/FreeRTOS/tasks.c ****     }
3810:../src/FreeRTOS/tasks.c **** 
3811:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3812:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3813:../src/FreeRTOS/tasks.c **** 
3814:../src/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3815:../src/FreeRTOS/tasks.c **** 
3816:../src/FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3817:../src/FreeRTOS/tasks.c ****                                                      List_t * pxList,
3818:../src/FreeRTOS/tasks.c ****                                                      eTaskState eState )
3819:../src/FreeRTOS/tasks.c ****     {
3820:../src/FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3821:../src/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
3822:../src/FreeRTOS/tasks.c **** 
3823:../src/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3824:../src/FreeRTOS/tasks.c ****         {
3825:../src/FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3826:../src/FreeRTOS/tasks.c **** 
3827:../src/FreeRTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3828:../src/FreeRTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3829:../src/FreeRTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3830:../src/FreeRTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3831:../src/FreeRTOS/tasks.c ****             do
3832:../src/FreeRTOS/tasks.c ****             {
3833:../src/FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3834:../src/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3835:../src/FreeRTOS/tasks.c ****                 uxTask++;
3836:../src/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3837:../src/FreeRTOS/tasks.c ****         }
3838:../src/FreeRTOS/tasks.c ****         else
3839:../src/FreeRTOS/tasks.c ****         {
3840:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3841:../src/FreeRTOS/tasks.c ****         }
3842:../src/FreeRTOS/tasks.c **** 
3843:../src/FreeRTOS/tasks.c ****         return uxTask;
3844:../src/FreeRTOS/tasks.c ****     }
3845:../src/FreeRTOS/tasks.c **** 
3846:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3847:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3848:../src/FreeRTOS/tasks.c **** 
3849:../src/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3850:../src/FreeRTOS/tasks.c **** 
3851:../src/FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3852:../src/FreeRTOS/tasks.c ****     {
  29              		.loc 1 3852 5 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
3853:../src/FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
  34              		.loc 1 3853 9 view .LVU1
3854:../src/FreeRTOS/tasks.c **** 
3855:../src/FreeRTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  35              		.loc 1 3855 9 view .LVU2
3853:../src/FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
  36              		.loc 1 3853 18 is_stmt 0 view .LVU3
  37 0000 0030A0E3 		mov	r3, #0
  38              	.LVL1:
  39              	.L2:
  40              		.loc 1 3855 14 is_stmt 1 view .LVU4
  41              		.loc 1 3855 16 is_stmt 0 view .LVU5
  42 0004 0020D0E5 		ldrb	r2, [r0]	@ zero_extendqisi2
  43              		.loc 1 3855 14 view .LVU6
  44 0008 A50052E3 		cmp	r2, #165
3856:../src/FreeRTOS/tasks.c ****         {
3857:../src/FreeRTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
  45              		.loc 1 3857 13 is_stmt 1 view .LVU7
  46              		.loc 1 3857 26 is_stmt 0 view .LVU8
  47 000c 01008002 		addeq	r0, r0, #1
  48              	.LVL2:
3858:../src/FreeRTOS/tasks.c ****             ulCount++;
  49              		.loc 1 3858 13 is_stmt 1 view .LVU9
  50              		.loc 1 3858 20 is_stmt 0 view .LVU10
  51 0010 01308302 		addeq	r3, r3, #1
  52              	.LVL3:
  53              		.loc 1 3858 20 view .LVU11
  54 0014 FAFFFF0A 		beq	.L2
  55              	.L4:
3859:../src/FreeRTOS/tasks.c ****         }
3860:../src/FreeRTOS/tasks.c **** 
3861:../src/FreeRTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
  56              		.loc 1 3861 9 is_stmt 1 view .LVU12
  57              	.LVL4:
3862:../src/FreeRTOS/tasks.c **** 
3863:../src/FreeRTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
  58              		.loc 1 3863 9 view .LVU13
3864:../src/FreeRTOS/tasks.c ****     }
  59              		.loc 1 3864 5 is_stmt 0 view .LVU14
  60 0018 5301EFE7 		ubfx	r0, r3, #2, #16
  61              	.LVL5:
  62              		.loc 1 3864 5 view .LVU15
  63 001c 1EFF2FE1 		bx	lr
  64              		.cfi_endproc
  65              	.LFE48:
  67              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  68              		.align	2
  69              		.syntax unified
  70              		.arm
  71              		.fpu neon
  73              	prvResetNextTaskUnblockTime:
  74              	.LFB51:
3865:../src/FreeRTOS/tasks.c **** 
3866:../src/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3867:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3868:../src/FreeRTOS/tasks.c **** 
3869:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3870:../src/FreeRTOS/tasks.c **** 
3871:../src/FreeRTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3872:../src/FreeRTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3873:../src/FreeRTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3874:../src/FreeRTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3875:../src/FreeRTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3876:../src/FreeRTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3877:../src/FreeRTOS/tasks.c ****     {
3878:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3879:../src/FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3880:../src/FreeRTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3881:../src/FreeRTOS/tasks.c **** 
3882:../src/FreeRTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3883:../src/FreeRTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3884:../src/FreeRTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
3885:../src/FreeRTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3886:../src/FreeRTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3887:../src/FreeRTOS/tasks.c ****          * type. */
3888:../src/FreeRTOS/tasks.c **** 
3889:../src/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3890:../src/FreeRTOS/tasks.c **** 
3891:../src/FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3892:../src/FreeRTOS/tasks.c ****             {
3893:../src/FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3894:../src/FreeRTOS/tasks.c ****             }
3895:../src/FreeRTOS/tasks.c ****         #else
3896:../src/FreeRTOS/tasks.c ****             {
3897:../src/FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3898:../src/FreeRTOS/tasks.c ****             }
3899:../src/FreeRTOS/tasks.c ****         #endif
3900:../src/FreeRTOS/tasks.c **** 
3901:../src/FreeRTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3902:../src/FreeRTOS/tasks.c **** 
3903:../src/FreeRTOS/tasks.c ****         return uxReturn;
3904:../src/FreeRTOS/tasks.c ****     }
3905:../src/FreeRTOS/tasks.c **** 
3906:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3907:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3908:../src/FreeRTOS/tasks.c **** 
3909:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3910:../src/FreeRTOS/tasks.c **** 
3911:../src/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3912:../src/FreeRTOS/tasks.c ****     {
3913:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3914:../src/FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3915:../src/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3916:../src/FreeRTOS/tasks.c **** 
3917:../src/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3918:../src/FreeRTOS/tasks.c **** 
3919:../src/FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3920:../src/FreeRTOS/tasks.c ****             {
3921:../src/FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3922:../src/FreeRTOS/tasks.c ****             }
3923:../src/FreeRTOS/tasks.c ****         #else
3924:../src/FreeRTOS/tasks.c ****             {
3925:../src/FreeRTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3926:../src/FreeRTOS/tasks.c ****             }
3927:../src/FreeRTOS/tasks.c ****         #endif
3928:../src/FreeRTOS/tasks.c **** 
3929:../src/FreeRTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3930:../src/FreeRTOS/tasks.c **** 
3931:../src/FreeRTOS/tasks.c ****         return uxReturn;
3932:../src/FreeRTOS/tasks.c ****     }
3933:../src/FreeRTOS/tasks.c **** 
3934:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3935:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3936:../src/FreeRTOS/tasks.c **** 
3937:../src/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3938:../src/FreeRTOS/tasks.c **** 
3939:../src/FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3940:../src/FreeRTOS/tasks.c ****     {
3941:../src/FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3942:../src/FreeRTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3943:../src/FreeRTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3944:../src/FreeRTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3945:../src/FreeRTOS/tasks.c **** 
3946:../src/FreeRTOS/tasks.c ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3947:../src/FreeRTOS/tasks.c ****          * to the task to free any memory allocated at the application level.
3948:../src/FreeRTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3949:../src/FreeRTOS/tasks.c ****          * for additional information. */
3950:../src/FreeRTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3951:../src/FreeRTOS/tasks.c ****             {
3952:../src/FreeRTOS/tasks.c ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3953:../src/FreeRTOS/tasks.c ****             }
3954:../src/FreeRTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3955:../src/FreeRTOS/tasks.c **** 
3956:../src/FreeRTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3957:../src/FreeRTOS/tasks.c ****             {
3958:../src/FreeRTOS/tasks.c ****                 /* The task can only have been allocated dynamically - free both
3959:../src/FreeRTOS/tasks.c ****                  * the stack and TCB. */
3960:../src/FreeRTOS/tasks.c ****                 vPortFree( pxTCB->pxStack );
3961:../src/FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
3962:../src/FreeRTOS/tasks.c ****             }
3963:../src/FreeRTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3964:../src/FreeRTOS/tasks.c ****             {
3965:../src/FreeRTOS/tasks.c ****                 /* The task could have been allocated statically or dynamically, so
3966:../src/FreeRTOS/tasks.c ****                  * check what was statically allocated before trying to free the
3967:../src/FreeRTOS/tasks.c ****                  * memory. */
3968:../src/FreeRTOS/tasks.c ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3969:../src/FreeRTOS/tasks.c ****                 {
3970:../src/FreeRTOS/tasks.c ****                     /* Both the stack and TCB were allocated dynamically, so both
3971:../src/FreeRTOS/tasks.c ****                      * must be freed. */
3972:../src/FreeRTOS/tasks.c ****                     vPortFree( pxTCB->pxStack );
3973:../src/FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
3974:../src/FreeRTOS/tasks.c ****                 }
3975:../src/FreeRTOS/tasks.c ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3976:../src/FreeRTOS/tasks.c ****                 {
3977:../src/FreeRTOS/tasks.c ****                     /* Only the stack was statically allocated, so the TCB is the
3978:../src/FreeRTOS/tasks.c ****                      * only memory that must be freed. */
3979:../src/FreeRTOS/tasks.c ****                     vPortFree( pxTCB );
3980:../src/FreeRTOS/tasks.c ****                 }
3981:../src/FreeRTOS/tasks.c ****                 else
3982:../src/FreeRTOS/tasks.c ****                 {
3983:../src/FreeRTOS/tasks.c ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3984:../src/FreeRTOS/tasks.c ****                      * nothing needs to be freed. */
3985:../src/FreeRTOS/tasks.c ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3986:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3987:../src/FreeRTOS/tasks.c ****                 }
3988:../src/FreeRTOS/tasks.c ****             }
3989:../src/FreeRTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3990:../src/FreeRTOS/tasks.c ****     }
3991:../src/FreeRTOS/tasks.c **** 
3992:../src/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3993:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3994:../src/FreeRTOS/tasks.c **** 
3995:../src/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3996:../src/FreeRTOS/tasks.c **** {
  75              		.loc 1 3996 1 is_stmt 1 view -0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
3997:../src/FreeRTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  80              		.loc 1 3997 5 view .LVU17
  81              		.loc 1 3997 9 is_stmt 0 view .LVU18
  82 0000 003000E3 		movw	r3, #:lower16:.LANCHOR0
  83 0004 003040E3 		movt	r3, #:upper16:.LANCHOR0
  84 0008 003093E5 		ldr	r3, [r3]
  85 000c 003093E5 		ldr	r3, [r3]
  86              		.loc 1 3997 7 view .LVU19
  87 0010 000053E3 		cmp	r3, #0
  88 0014 0400001A 		bne	.L6
3998:../src/FreeRTOS/tasks.c ****     {
3999:../src/FreeRTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4000:../src/FreeRTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4001:../src/FreeRTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4002:../src/FreeRTOS/tasks.c ****          * there is an item in the delayed list. */
4003:../src/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
  89              		.loc 1 4003 9 is_stmt 1 view .LVU20
  90              		.loc 1 4003 30 is_stmt 0 view .LVU21
  91 0018 003000E3 		movw	r3, #:lower16:.LANCHOR1
  92 001c 003040E3 		movt	r3, #:upper16:.LANCHOR1
  93 0020 0020E0E3 		mvn	r2, #0
  94 0024 002083E5 		str	r2, [r3]
  95 0028 1EFF2FE1 		bx	lr
  96              	.L6:
4004:../src/FreeRTOS/tasks.c ****     }
4005:../src/FreeRTOS/tasks.c ****     else
4006:../src/FreeRTOS/tasks.c ****     {
4007:../src/FreeRTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4008:../src/FreeRTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4009:../src/FreeRTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4010:../src/FreeRTOS/tasks.c ****          * from the Blocked state. */
4011:../src/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  97              		.loc 1 4011 9 is_stmt 1 view .LVU22
  98              		.loc 1 4011 32 is_stmt 0 view .LVU23
  99 002c 003000E3 		movw	r3, #:lower16:.LANCHOR0
 100 0030 003040E3 		movt	r3, #:upper16:.LANCHOR0
 101 0034 003093E5 		ldr	r3, [r3]
 102 0038 0C3093E5 		ldr	r3, [r3, #12]
 103 003c 002093E5 		ldr	r2, [r3]
 104              		.loc 1 4011 30 view .LVU24
 105 0040 003000E3 		movw	r3, #:lower16:.LANCHOR1
 106 0044 003040E3 		movt	r3, #:upper16:.LANCHOR1
 107 0048 002083E5 		str	r2, [r3]
4012:../src/FreeRTOS/tasks.c ****     }
4013:../src/FreeRTOS/tasks.c **** }
 108              		.loc 1 4013 1 view .LVU25
 109 004c 1EFF2FE1 		bx	lr
 110              		.cfi_endproc
 111              	.LFE51:
 113              		.section	.text.prvDeleteTCB,"ax",%progbits
 114              		.align	2
 115              		.syntax unified
 116              		.arm
 117              		.fpu neon
 119              	prvDeleteTCB:
 120              	.LVL6:
 121              	.LFB50:
3940:../src/FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 122              		.loc 1 3940 5 is_stmt 1 view -0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
3940:../src/FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 126              		.loc 1 3940 5 is_stmt 0 view .LVU27
 127 0000 10402DE9 		push	{r4, lr}
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 4, -8
 130              		.cfi_offset 14, -4
 131 0004 0040A0E1 		mov	r4, r0
3944:../src/FreeRTOS/tasks.c **** 
 132              		.loc 1 3944 9 is_stmt 1 view .LVU28
3960:../src/FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
 133              		.loc 1 3960 17 view .LVU29
 134 0008 300090E5 		ldr	r0, [r0, #48]
 135              	.LVL7:
3960:../src/FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
 136              		.loc 1 3960 17 is_stmt 0 view .LVU30
 137 000c FEFFFFEB 		bl	vPortFree
 138              	.LVL8:
3961:../src/FreeRTOS/tasks.c ****             }
 139              		.loc 1 3961 17 is_stmt 1 view .LVU31
 140 0010 0400A0E1 		mov	r0, r4
 141 0014 FEFFFFEB 		bl	vPortFree
 142              	.LVL9:
3990:../src/FreeRTOS/tasks.c **** 
 143              		.loc 1 3990 5 is_stmt 0 view .LVU32
 144 0018 1080BDE8 		pop	{r4, pc}
 145              		.cfi_endproc
 146              	.LFE50:
 148              		.section	.rodata.prvTaskIsTaskSuspended.str1.4,"aMS",%progbits,1
 149              		.align	2
 150              	.LC0:
 151 0000 2E2E2F73 		.ascii	"../src/FreeRTOS/tasks.c\000"
 151      72632F46 
 151      72656552 
 151      544F532F 
 151      7461736B 
 152              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 153              		.align	2
 154              		.syntax unified
 155              		.arm
 156              		.fpu neon
 158              	prvTaskIsTaskSuspended:
 159              	.LVL10:
 160              	.LFB14:
1820:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 161              		.loc 1 1820 5 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
1820:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 165              		.loc 1 1820 5 is_stmt 0 view .LVU34
 166 0000 10402DE9 		push	{r4, lr}
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 4, -8
 169              		.cfi_offset 14, -4
1821:../src/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 170              		.loc 1 1821 9 is_stmt 1 view .LVU35
 171              	.LVL11:
1822:../src/FreeRTOS/tasks.c **** 
 172              		.loc 1 1822 9 view .LVU36
1828:../src/FreeRTOS/tasks.c **** 
 173              		.loc 1 1828 9 view .LVU37
 174 0004 004050E2 		subs	r4, r0, #0
 175 0008 0600000A 		beq	.L17
 176              	.LVL12:
 177              	.L11:
1828:../src/FreeRTOS/tasks.c **** 
 178              		.loc 1 1828 30 discriminator 3 view .LVU38
1831:../src/FreeRTOS/tasks.c ****         {
 179              		.loc 1 1831 9 discriminator 3 view .LVU39
1831:../src/FreeRTOS/tasks.c ****         {
 180              		.loc 1 1831 13 is_stmt 0 discriminator 3 view .LVU40
 181 000c 142094E5 		ldr	r2, [r4, #20]
1831:../src/FreeRTOS/tasks.c ****         {
 182              		.loc 1 1831 11 discriminator 3 view .LVU41
 183 0010 003000E3 		movw	r3, #:lower16:.LANCHOR2
 184 0014 003040E3 		movt	r3, #:upper16:.LANCHOR2
 185 0018 030052E1 		cmp	r2, r3
 186 001c 0600000A 		beq	.L18
1821:../src/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 187              		.loc 1 1821 20 view .LVU42
 188 0020 0000A0E3 		mov	r0, #0
 189 0024 1080BDE8 		pop	{r4, pc}
 190              	.LVL13:
 191              	.L17:
1828:../src/FreeRTOS/tasks.c **** 
 192              		.loc 1 1828 9 is_stmt 1 discriminator 1 view .LVU43
 193 0028 241700E3 		movw	r1, #1828
 194 002c 000000E3 		movw	r0, #:lower16:.LC0
 195              	.LVL14:
1828:../src/FreeRTOS/tasks.c **** 
 196              		.loc 1 1828 9 is_stmt 0 discriminator 1 view .LVU44
 197 0030 000040E3 		movt	r0, #:upper16:.LC0
 198 0034 FEFFFFEB 		bl	R_OS_AssertCalled
 199              	.LVL15:
 200 0038 F3FFFFEA 		b	.L11
 201              	.L18:
1834:../src/FreeRTOS/tasks.c ****             {
 202              		.loc 1 1834 13 is_stmt 1 view .LVU45
1834:../src/FreeRTOS/tasks.c ****             {
 203              		.loc 1 1834 17 is_stmt 0 view .LVU46
 204 003c 282094E5 		ldr	r2, [r4, #40]
1834:../src/FreeRTOS/tasks.c ****             {
 205              		.loc 1 1834 15 view .LVU47
 206 0040 003000E3 		movw	r3, #:lower16:.LANCHOR3
 207 0044 003040E3 		movt	r3, #:upper16:.LANCHOR3
 208 0048 030052E1 		cmp	r2, r3
 209 004c 0300000A 		beq	.L14
1838:../src/FreeRTOS/tasks.c ****                 {
 210              		.loc 1 1838 17 is_stmt 1 view .LVU48
1838:../src/FreeRTOS/tasks.c ****                 {
 211              		.loc 1 1838 19 is_stmt 0 view .LVU49
 212 0050 000052E3 		cmp	r2, #0
 213 0054 0300000A 		beq	.L15
1821:../src/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 214              		.loc 1 1821 20 view .LVU50
 215 0058 0000A0E3 		mov	r0, #0
 216 005c 1080BDE8 		pop	{r4, pc}
 217              	.L14:
 218 0060 0000A0E3 		mov	r0, #0
 219 0064 1080BDE8 		pop	{r4, pc}
 220              	.L15:
1840:../src/FreeRTOS/tasks.c ****                 }
 221              		.loc 1 1840 29 view .LVU51
 222 0068 0100A0E3 		mov	r0, #1
 223              	.LVL16:
1854:../src/FreeRTOS/tasks.c ****         }
 224              		.loc 1 1854 37 is_stmt 1 view .LVU52
1857:../src/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 225              		.loc 1 1857 9 view .LVU53
1858:../src/FreeRTOS/tasks.c **** 
 226              		.loc 1 1858 5 is_stmt 0 view .LVU54
 227 006c 1080BDE8 		pop	{r4, pc}
 228              		.cfi_endproc
 229              	.LFE14:
 231              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 232              		.align	2
 233              		.syntax unified
 234              		.arm
 235              		.fpu neon
 237              	prvInitialiseNewTask:
 238              	.LVL17:
 239              	.LFB4:
 825:../src/FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 240              		.loc 1 825 1 is_stmt 1 view -0
 241              		.cfi_startproc
 242              		@ args = 16, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 825:../src/FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 244              		.loc 1 825 1 is_stmt 0 view .LVU56
 245 0000 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 246              		.cfi_def_cfa_offset 40
 247              		.cfi_offset 3, -40
 248              		.cfi_offset 4, -36
 249              		.cfi_offset 5, -32
 250              		.cfi_offset 6, -28
 251              		.cfi_offset 7, -24
 252              		.cfi_offset 8, -20
 253              		.cfi_offset 9, -16
 254              		.cfi_offset 10, -12
 255              		.cfi_offset 11, -8
 256              		.cfi_offset 14, -4
 257 0004 0080A0E1 		mov	r8, r0
 258 0008 0150A0E1 		mov	r5, r1
 259 000c 02B0A0E1 		mov	fp, r2
 260 0010 0390A0E1 		mov	r9, r3
 261 0014 28609DE5 		ldr	r6, [sp, #40]
 262 0018 2CA09DE5 		ldr	r10, [sp, #44]
 263 001c 30409DE5 		ldr	r4, [sp, #48]
 826:../src/FreeRTOS/tasks.c ****     UBaseType_t x;
 264              		.loc 1 826 5 is_stmt 1 view .LVU57
 827:../src/FreeRTOS/tasks.c **** 
 265              		.loc 1 827 5 view .LVU58
 848:../src/FreeRTOS/tasks.c ****         }
 266              		.loc 1 848 13 view .LVU59
 848:../src/FreeRTOS/tasks.c ****         }
 267              		.loc 1 848 22 is_stmt 0 view .LVU60
 268 0020 0221A0E1 		lsl	r2, r2, #2
 269              	.LVL18:
 848:../src/FreeRTOS/tasks.c ****         }
 270              		.loc 1 848 22 view .LVU61
 271 0024 A510A0E3 		mov	r1, #165
 272              	.LVL19:
 848:../src/FreeRTOS/tasks.c ****         }
 273              		.loc 1 848 22 view .LVU62
 274 0028 300094E5 		ldr	r0, [r4, #48]
 275              	.LVL20:
 848:../src/FreeRTOS/tasks.c ****         }
 276              		.loc 1 848 22 view .LVU63
 277 002c FEFFFFEB 		bl	memset
 278              	.LVL21:
 858:../src/FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 279              		.loc 1 858 13 is_stmt 1 view .LVU64
 858:../src/FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 280              		.loc 1 858 39 is_stmt 0 view .LVU65
 281 0030 307094E5 		ldr	r7, [r4, #48]
 858:../src/FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 282              		.loc 1 858 48 view .LVU66
 283 0034 07B14BE2 		sub	fp, fp, #-1073741823
 284              	.LVL22:
 858:../src/FreeRTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 285              		.loc 1 858 26 view .LVU67
 286 0038 0BB187E0 		add	fp, r7, fp, lsl #2
 287              	.LVL23:
 859:../src/FreeRTOS/tasks.c **** 
 288              		.loc 1 859 13 is_stmt 1 view .LVU68
 859:../src/FreeRTOS/tasks.c **** 
 289              		.loc 1 859 91 is_stmt 0 view .LVU69
 290 003c 07B0CBE3 		bic	fp, fp, #7
 291              	.LVL24:
 862:../src/FreeRTOS/tasks.c **** 
 292              		.loc 1 862 13 is_stmt 1 view .LVU70
 862:../src/FreeRTOS/tasks.c **** 
 293              		.loc 1 862 134 view .LVU71
 868:../src/FreeRTOS/tasks.c ****                 }
 294              		.loc 1 868 21 view .LVU72
 868:../src/FreeRTOS/tasks.c ****                 }
 295              		.loc 1 868 44 is_stmt 0 view .LVU73
 296 0040 4CB084E5 		str	fp, [r4, #76]
 886:../src/FreeRTOS/tasks.c ****     {
 297              		.loc 1 886 5 is_stmt 1 view .LVU74
 886:../src/FreeRTOS/tasks.c ****     {
 298              		.loc 1 886 7 is_stmt 0 view .LVU75
 299 0044 000055E3 		cmp	r5, #0
 300 0048 2C00000A 		beq	.L31
 888:../src/FreeRTOS/tasks.c ****         {
 301              		.loc 1 888 16 view .LVU76
 302 004c 0020A0E3 		mov	r2, #0
 303              	.L20:
 304              	.LVL25:
 888:../src/FreeRTOS/tasks.c ****         {
 305              		.loc 1 888 37 is_stmt 1 discriminator 1 view .LVU77
 888:../src/FreeRTOS/tasks.c ****         {
 306              		.loc 1 888 9 is_stmt 0 discriminator 1 view .LVU78
 307 0050 170052E3 		cmp	r2, #23
 308 0054 0600008A 		bhi	.L22
 890:../src/FreeRTOS/tasks.c **** 
 309              		.loc 1 890 13 is_stmt 1 view .LVU79
 890:../src/FreeRTOS/tasks.c **** 
 310              		.loc 1 890 47 is_stmt 0 view .LVU80
 311 0058 0210D5E7 		ldrb	r1, [r5, r2]	@ zero_extendqisi2
 890:../src/FreeRTOS/tasks.c **** 
 312              		.loc 1 890 39 view .LVU81
 313 005c 023084E0 		add	r3, r4, r2
 314 0060 3410C3E5 		strb	r1, [r3, #52]
 895:../src/FreeRTOS/tasks.c ****             {
 315              		.loc 1 895 13 is_stmt 1 view .LVU82
 895:../src/FreeRTOS/tasks.c ****             {
 316              		.loc 1 895 23 is_stmt 0 view .LVU83
 317 0064 0230D5E7 		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 895:../src/FreeRTOS/tasks.c ****             {
 318              		.loc 1 895 15 view .LVU84
 319 0068 000053E3 		cmp	r3, #0
 901:../src/FreeRTOS/tasks.c ****             }
 320              		.loc 1 901 41 is_stmt 1 discriminator 2 view .LVU85
 888:../src/FreeRTOS/tasks.c ****         {
 321              		.loc 1 888 82 discriminator 2 view .LVU86
 888:../src/FreeRTOS/tasks.c ****         {
 322              		.loc 1 888 83 is_stmt 0 discriminator 2 view .LVU87
 323 006c 01208212 		addne	r2, r2, #1
 324              	.LVL26:
 888:../src/FreeRTOS/tasks.c ****         {
 325              		.loc 1 888 83 discriminator 2 view .LVU88
 326 0070 F6FFFF1A 		bne	.L20
 327              	.L22:
 907:../src/FreeRTOS/tasks.c ****     }
 328              		.loc 1 907 9 is_stmt 1 view .LVU89
 907:../src/FreeRTOS/tasks.c ****     }
 329              		.loc 1 907 61 is_stmt 0 view .LVU90
 330 0074 0030A0E3 		mov	r3, #0
 331 0078 4B30C4E5 		strb	r3, [r4, #75]
 332              	.LVL27:
 333              	.L24:
 918:../src/FreeRTOS/tasks.c ****     {
 334              		.loc 1 918 5 is_stmt 1 view .LVU91
 918:../src/FreeRTOS/tasks.c ****     {
 335              		.loc 1 918 7 is_stmt 0 view .LVU92
 336 007c 130056E3 		cmp	r6, #19
 920:../src/FreeRTOS/tasks.c ****     }
 337              		.loc 1 920 20 view .LVU93
 338 0080 1360A083 		movhi	r6, #19
 339              	.L25:
 340              	.LVL28:
 924:../src/FreeRTOS/tasks.c ****     }
 341              		.loc 1 924 33 is_stmt 1 view .LVU94
 927:../src/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 342              		.loc 1 927 5 view .LVU95
 927:../src/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 343              		.loc 1 927 26 is_stmt 0 view .LVU96
 344 0084 2C6084E5 		str	r6, [r4, #44]
 930:../src/FreeRTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 345              		.loc 1 930 13 is_stmt 1 view .LVU97
 930:../src/FreeRTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 346              		.loc 1 930 38 is_stmt 0 view .LVU98
 347 0088 586084E5 		str	r6, [r4, #88]
 931:../src/FreeRTOS/tasks.c ****         }
 348              		.loc 1 931 13 is_stmt 1 view .LVU99
 931:../src/FreeRTOS/tasks.c ****         }
 349              		.loc 1 931 37 is_stmt 0 view .LVU100
 350 008c 0050A0E3 		mov	r5, #0
 351              	.LVL29:
 931:../src/FreeRTOS/tasks.c ****         }
 352              		.loc 1 931 37 view .LVU101
 353 0090 5C5084E5 		str	r5, [r4, #92]
 935:../src/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 354              		.loc 1 935 5 is_stmt 1 view .LVU102
 355 0094 040084E2 		add	r0, r4, #4
 356 0098 FEFFFFEB 		bl	vListInitialiseItem
 357              	.LVL30:
 936:../src/FreeRTOS/tasks.c **** 
 358              		.loc 1 936 5 view .LVU103
 359 009c 180084E2 		add	r0, r4, #24
 360 00a0 FEFFFFEB 		bl	vListInitialiseItem
 361              	.LVL31:
 940:../src/FreeRTOS/tasks.c **** 
 362              		.loc 1 940 5 view .LVU104
 363 00a4 104084E5 		str	r4, [r4, #16]
 943:../src/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 364              		.loc 1 943 5 view .LVU105
 365 00a8 146066E2 		rsb	r6, r6, #20
 366              	.LVL32:
 943:../src/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 367              		.loc 1 943 5 is_stmt 0 view .LVU106
 368 00ac 186084E5 		str	r6, [r4, #24]
 944:../src/FreeRTOS/tasks.c **** 
 369              		.loc 1 944 5 is_stmt 1 view .LVU107
 370 00b0 244084E5 		str	r4, [r4, #36]
 960:../src/FreeRTOS/tasks.c ****         }
 371              		.loc 1 960 13 view .LVU108
 960:../src/FreeRTOS/tasks.c ****         }
 372              		.loc 1 960 40 is_stmt 0 view .LVU109
 373 00b4 6C5084E5 		str	r5, [r4, #108]
 971:../src/FreeRTOS/tasks.c ****         }
 374              		.loc 1 971 13 is_stmt 1 view .LVU110
 977:../src/FreeRTOS/tasks.c ****         }
 375              		.loc 1 977 13 view .LVU111
 376 00b8 0C20A0E3 		mov	r2, #12
 377 00bc 0510A0E1 		mov	r1, r5
 378 00c0 600084E2 		add	r0, r4, #96
 379 00c4 FEFFFFEB 		bl	memset
 380              	.LVL33:
 983:../src/FreeRTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 381              		.loc 1 983 13 view .LVU112
 382 00c8 7050C4E5 		strb	r5, [r4, #112]
 383 00cc 7150C4E5 		strb	r5, [r4, #113]
 384 00d0 7250C4E5 		strb	r5, [r4, #114]
 385 00d4 7350C4E5 		strb	r5, [r4, #115]
 984:../src/FreeRTOS/tasks.c ****         }
 386              		.loc 1 984 13 view .LVU113
 387 00d8 7450C4E5 		strb	r5, [r4, #116]
 999:../src/FreeRTOS/tasks.c ****         }
 388              		.loc 1 999 13 view .LVU114
 999:../src/FreeRTOS/tasks.c ****         }
 389              		.loc 1 999 38 is_stmt 0 view .LVU115
 390 00dc 7550C4E5 		strb	r5, [r4, #117]
1049:../src/FreeRTOS/tasks.c ****                 }
 391              		.loc 1 1049 21 is_stmt 1 view .LVU116
1049:../src/FreeRTOS/tasks.c ****                 }
 392              		.loc 1 1049 46 is_stmt 0 view .LVU117
 393 00e0 0920A0E1 		mov	r2, r9
 394 00e4 0810A0E1 		mov	r1, r8
 395 00e8 0B00A0E1 		mov	r0, fp
 396 00ec FEFFFFEB 		bl	pxPortInitialiseStack
 397              	.LVL34:
1049:../src/FreeRTOS/tasks.c ****                 }
 398              		.loc 1 1049 44 view .LVU118
 399 00f0 000084E5 		str	r0, [r4]
1055:../src/FreeRTOS/tasks.c ****     {
 400              		.loc 1 1055 5 is_stmt 1 view .LVU119
1055:../src/FreeRTOS/tasks.c ****     {
 401              		.loc 1 1055 7 is_stmt 0 view .LVU120
 402 00f4 05005AE1 		cmp	r10, r5
1059:../src/FreeRTOS/tasks.c ****     }
 403              		.loc 1 1059 9 is_stmt 1 view .LVU121
1059:../src/FreeRTOS/tasks.c ****     }
 404              		.loc 1 1059 24 is_stmt 0 view .LVU122
 405 00f8 00408A15 		strne	r4, [r10]
1063:../src/FreeRTOS/tasks.c ****     }
 406              		.loc 1 1063 33 is_stmt 1 view .LVU123
1065:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 407              		.loc 1 1065 1 is_stmt 0 view .LVU124
 408 00fc F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 409              	.LVL35:
 410              	.L31:
 913:../src/FreeRTOS/tasks.c ****     }
 411              		.loc 1 913 9 is_stmt 1 view .LVU125
 913:../src/FreeRTOS/tasks.c ****     }
 412              		.loc 1 913 35 is_stmt 0 view .LVU126
 413 0100 0030A0E3 		mov	r3, #0
 414 0104 3430C4E5 		strb	r3, [r4, #52]
 415 0108 DBFFFFEA 		b	.L24
 416              		.cfi_endproc
 417              	.LFE4:
 419              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 420              		.align	2
 421              		.syntax unified
 422              		.arm
 423              		.fpu neon
 425              	prvInitialiseTaskLists:
 426              	.LFB44:
3656:../src/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
 427              		.loc 1 3656 1 is_stmt 1 view -0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431 0000 70402DE9 		push	{r4, r5, r6, lr}
 432              		.cfi_def_cfa_offset 16
 433              		.cfi_offset 4, -16
 434              		.cfi_offset 5, -12
 435              		.cfi_offset 6, -8
 436              		.cfi_offset 14, -4
3657:../src/FreeRTOS/tasks.c **** 
 437              		.loc 1 3657 5 view .LVU128
3659:../src/FreeRTOS/tasks.c ****     {
 438              		.loc 1 3659 5 view .LVU129
 439              	.LVL36:
3659:../src/FreeRTOS/tasks.c ****     {
 440              		.loc 1 3659 21 is_stmt 0 view .LVU130
 441 0004 0040A0E3 		mov	r4, #0
3659:../src/FreeRTOS/tasks.c ****     {
 442              		.loc 1 3659 5 view .LVU131
 443 0008 060000EA 		b	.L33
 444              	.LVL37:
 445              	.L34:
3661:../src/FreeRTOS/tasks.c ****     }
 446              		.loc 1 3661 9 is_stmt 1 discriminator 3 view .LVU132
 447 000c 003000E3 		movw	r3, #:lower16:.LANCHOR4
 448 0010 003040E3 		movt	r3, #:upper16:.LANCHOR4
 449 0014 042184E0 		add	r2, r4, r4, lsl #2
 450 0018 0201A0E1 		lsl	r0, r2, #2
 451 001c 000083E0 		add	r0, r3, r0
 452 0020 FEFFFFEB 		bl	vListInitialise
 453              	.LVL38:
3659:../src/FreeRTOS/tasks.c ****     {
 454              		.loc 1 3659 94 discriminator 3 view .LVU133
3659:../src/FreeRTOS/tasks.c ****     {
 455              		.loc 1 3659 104 is_stmt 0 discriminator 3 view .LVU134
 456 0024 014084E2 		add	r4, r4, #1
 457              	.LVL39:
 458              	.L33:
3659:../src/FreeRTOS/tasks.c ****     {
 459              		.loc 1 3659 43 is_stmt 1 discriminator 1 view .LVU135
3659:../src/FreeRTOS/tasks.c ****     {
 460              		.loc 1 3659 5 is_stmt 0 discriminator 1 view .LVU136
 461 0028 130054E3 		cmp	r4, #19
 462 002c F6FFFF9A 		bls	.L34
3664:../src/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 463              		.loc 1 3664 5 is_stmt 1 view .LVU137
 464 0030 005000E3 		movw	r5, #:lower16:.LANCHOR5
 465 0034 005040E3 		movt	r5, #:upper16:.LANCHOR5
 466 0038 0500A0E1 		mov	r0, r5
 467 003c FEFFFFEB 		bl	vListInitialise
 468              	.LVL40:
3665:../src/FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 469              		.loc 1 3665 5 view .LVU138
 470 0040 004000E3 		movw	r4, #:lower16:.LANCHOR6
 471              	.LVL41:
3665:../src/FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 472              		.loc 1 3665 5 is_stmt 0 view .LVU139
 473 0044 004040E3 		movt	r4, #:upper16:.LANCHOR6
 474 0048 0400A0E1 		mov	r0, r4
 475 004c FEFFFFEB 		bl	vListInitialise
 476              	.LVL42:
3666:../src/FreeRTOS/tasks.c **** 
 477              		.loc 1 3666 5 is_stmt 1 view .LVU140
 478 0050 000000E3 		movw	r0, #:lower16:.LANCHOR3
 479 0054 000040E3 		movt	r0, #:upper16:.LANCHOR3
 480 0058 FEFFFFEB 		bl	vListInitialise
 481              	.LVL43:
3670:../src/FreeRTOS/tasks.c ****         }
 482              		.loc 1 3670 13 view .LVU141
 483 005c 000000E3 		movw	r0, #:lower16:.LANCHOR7
 484 0060 000040E3 		movt	r0, #:upper16:.LANCHOR7
 485 0064 FEFFFFEB 		bl	vListInitialise
 486              	.LVL44:
3676:../src/FreeRTOS/tasks.c ****         }
 487              		.loc 1 3676 13 view .LVU142
 488 0068 000000E3 		movw	r0, #:lower16:.LANCHOR2
 489 006c 000040E3 		movt	r0, #:upper16:.LANCHOR2
 490 0070 FEFFFFEB 		bl	vListInitialise
 491              	.LVL45:
3682:../src/FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 492              		.loc 1 3682 5 view .LVU143
3682:../src/FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 493              		.loc 1 3682 23 is_stmt 0 view .LVU144
 494 0074 003000E3 		movw	r3, #:lower16:.LANCHOR0
 495 0078 003040E3 		movt	r3, #:upper16:.LANCHOR0
 496 007c 005083E5 		str	r5, [r3]
3683:../src/FreeRTOS/tasks.c **** }
 497              		.loc 1 3683 5 is_stmt 1 view .LVU145
3683:../src/FreeRTOS/tasks.c **** }
 498              		.loc 1 3683 31 is_stmt 0 view .LVU146
 499 0080 003000E3 		movw	r3, #:lower16:.LANCHOR8
 500 0084 003040E3 		movt	r3, #:upper16:.LANCHOR8
 501 0088 004083E5 		str	r4, [r3]
3684:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 502              		.loc 1 3684 1 view .LVU147
 503 008c 7080BDE8 		pop	{r4, r5, r6, pc}
 504              		.cfi_endproc
 505              	.LFE44:
 507              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 508              		.align	2
 509              		.syntax unified
 510              		.arm
 511              		.fpu neon
 513              	prvAddNewTaskToReadyList:
 514              	.LVL46:
 515              	.LFB5:
1069:../src/FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 516              		.loc 1 1069 1 is_stmt 1 view -0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 0
 519              		@ frame_needed = 0, uses_anonymous_args = 0
1069:../src/FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 520              		.loc 1 1069 1 is_stmt 0 view .LVU149
 521 0000 10402DE9 		push	{r4, lr}
 522              		.cfi_def_cfa_offset 8
 523              		.cfi_offset 4, -8
 524              		.cfi_offset 14, -4
 525 0004 0040A0E1 		mov	r4, r0
1072:../src/FreeRTOS/tasks.c ****     {
 526              		.loc 1 1072 5 is_stmt 1 view .LVU150
 527 0008 FEFFFFEB 		bl	vPortEnterCritical
 528              	.LVL47:
1072:../src/FreeRTOS/tasks.c ****     {
 529              		.loc 1 1072 25 view .LVU151
1074:../src/FreeRTOS/tasks.c **** 
 530              		.loc 1 1074 9 view .LVU152
1074:../src/FreeRTOS/tasks.c **** 
 531              		.loc 1 1074 31 is_stmt 0 view .LVU153
 532 000c 003000E3 		movw	r3, #:lower16:.LANCHOR9
 533 0010 003040E3 		movt	r3, #:upper16:.LANCHOR9
 534 0014 002093E5 		ldr	r2, [r3]
 535 0018 012082E2 		add	r2, r2, #1
 536 001c 002083E5 		str	r2, [r3]
1076:../src/FreeRTOS/tasks.c ****         {
 537              		.loc 1 1076 9 is_stmt 1 view .LVU154
1076:../src/FreeRTOS/tasks.c ****         {
 538              		.loc 1 1076 26 is_stmt 0 view .LVU155
 539 0020 003000E3 		movw	r3, #:lower16:.LANCHOR10
 540 0024 003040E3 		movt	r3, #:upper16:.LANCHOR10
 541 0028 003093E5 		ldr	r3, [r3]
1076:../src/FreeRTOS/tasks.c ****         {
 542              		.loc 1 1076 11 view .LVU156
 543 002c 000053E3 		cmp	r3, #0
 544 0030 0E00000A 		beq	.L42
1099:../src/FreeRTOS/tasks.c ****             {
 545              		.loc 1 1099 13 is_stmt 1 view .LVU157
1099:../src/FreeRTOS/tasks.c ****             {
 546              		.loc 1 1099 35 is_stmt 0 view .LVU158
 547 0034 003000E3 		movw	r3, #:lower16:.LANCHOR11
 548 0038 003040E3 		movt	r3, #:upper16:.LANCHOR11
 549 003c 003093E5 		ldr	r3, [r3]
1099:../src/FreeRTOS/tasks.c ****             {
 550              		.loc 1 1099 15 view .LVU159
 551 0040 000053E3 		cmp	r3, #0
 552 0044 1100001A 		bne	.L38
1101:../src/FreeRTOS/tasks.c ****                 {
 553              		.loc 1 1101 17 is_stmt 1 view .LVU160
1101:../src/FreeRTOS/tasks.c ****                 {
 554              		.loc 1 1101 33 is_stmt 0 view .LVU161
 555 0048 003000E3 		movw	r3, #:lower16:.LANCHOR10
 556 004c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 557 0050 003093E5 		ldr	r3, [r3]
 558 0054 2C2093E5 		ldr	r2, [r3, #44]
1101:../src/FreeRTOS/tasks.c ****                 {
 559              		.loc 1 1101 57 view .LVU162
 560 0058 2C3094E5 		ldr	r3, [r4, #44]
1101:../src/FreeRTOS/tasks.c ****                 {
 561              		.loc 1 1101 19 view .LVU163
 562 005c 030052E1 		cmp	r2, r3
1103:../src/FreeRTOS/tasks.c ****                 }
 563              		.loc 1 1103 21 is_stmt 1 view .LVU164
1103:../src/FreeRTOS/tasks.c ****                 }
 564              		.loc 1 1103 34 is_stmt 0 view .LVU165
 565 0060 00300093 		movwls	r3, #:lower16:.LANCHOR10
 566 0064 00304093 		movtls	r3, #:upper16:.LANCHOR10
 567 0068 00408395 		strls	r4, [r3]
 568 006c 070000EA 		b	.L38
 569              	.L42:
1080:../src/FreeRTOS/tasks.c **** 
 570              		.loc 1 1080 13 is_stmt 1 view .LVU166
1080:../src/FreeRTOS/tasks.c **** 
 571              		.loc 1 1080 26 is_stmt 0 view .LVU167
 572 0070 003000E3 		movw	r3, #:lower16:.LANCHOR10
 573 0074 003040E3 		movt	r3, #:upper16:.LANCHOR10
 574 0078 004083E5 		str	r4, [r3]
1082:../src/FreeRTOS/tasks.c ****             {
 575              		.loc 1 1082 13 is_stmt 1 view .LVU168
1082:../src/FreeRTOS/tasks.c ****             {
 576              		.loc 1 1082 40 is_stmt 0 view .LVU169
 577 007c 003000E3 		movw	r3, #:lower16:.LANCHOR9
 578 0080 003040E3 		movt	r3, #:upper16:.LANCHOR9
 579 0084 003093E5 		ldr	r3, [r3]
1082:../src/FreeRTOS/tasks.c ****             {
 580              		.loc 1 1082 15 view .LVU170
 581 0088 010053E3 		cmp	r3, #1
 582 008c 2200000A 		beq	.L43
 583              	.L38:
1112:../src/FreeRTOS/tasks.c ****             }
 584              		.loc 1 1112 41 is_stmt 1 view .LVU171
1116:../src/FreeRTOS/tasks.c **** 
 585              		.loc 1 1116 9 view .LVU172
1116:../src/FreeRTOS/tasks.c **** 
 586              		.loc 1 1116 21 is_stmt 0 view .LVU173
 587 0090 002000E3 		movw	r2, #:lower16:.LANCHOR12
 588 0094 002040E3 		movt	r2, #:upper16:.LANCHOR12
 589 0098 003092E5 		ldr	r3, [r2]
 590 009c 013083E2 		add	r3, r3, #1
 591 00a0 003082E5 		str	r3, [r2]
1121:../src/FreeRTOS/tasks.c ****             }
 592              		.loc 1 1121 17 is_stmt 1 view .LVU174
1121:../src/FreeRTOS/tasks.c ****             }
 593              		.loc 1 1121 39 is_stmt 0 view .LVU175
 594 00a4 503084E5 		str	r3, [r4, #80]
1124:../src/FreeRTOS/tasks.c **** 
 595              		.loc 1 1124 37 is_stmt 1 view .LVU176
1126:../src/FreeRTOS/tasks.c **** 
 596              		.loc 1 1126 9 view .LVU177
1126:../src/FreeRTOS/tasks.c **** 
 597              		.loc 1 1126 9 view .LVU178
 598 00a8 2C3094E5 		ldr	r3, [r4, #44]
 599 00ac 002000E3 		movw	r2, #:lower16:.LANCHOR13
 600 00b0 002040E3 		movt	r2, #:upper16:.LANCHOR13
 601 00b4 002092E5 		ldr	r2, [r2]
 602 00b8 020053E1 		cmp	r3, r2
1126:../src/FreeRTOS/tasks.c **** 
 603              		.loc 1 1126 9 discriminator 1 view .LVU179
 604 00bc 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 605 00c0 00204083 		movthi	r2, #:upper16:.LANCHOR13
 606 00c4 00308285 		strhi	r3, [r2]
 607              	.L39:
1126:../src/FreeRTOS/tasks.c **** 
 608              		.loc 1 1126 9 discriminator 3 view .LVU180
1126:../src/FreeRTOS/tasks.c **** 
 609              		.loc 1 1126 9 discriminator 3 view .LVU181
 610 00c8 000000E3 		movw	r0, #:lower16:.LANCHOR4
 611 00cc 000040E3 		movt	r0, #:upper16:.LANCHOR4
 612 00d0 033183E0 		add	r3, r3, r3, lsl #2
 613 00d4 041084E2 		add	r1, r4, #4
 614 00d8 030180E0 		add	r0, r0, r3, lsl #2
 615 00dc FEFFFFEB 		bl	vListInsertEnd
 616              	.LVL48:
1126:../src/FreeRTOS/tasks.c **** 
 617              		.loc 1 1126 42 discriminator 3 view .LVU182
1128:../src/FreeRTOS/tasks.c ****     }
 618              		.loc 1 1128 9 discriminator 3 view .LVU183
1130:../src/FreeRTOS/tasks.c **** 
 619              		.loc 1 1130 5 discriminator 3 view .LVU184
 620 00e0 FEFFFFEB 		bl	vPortExitCritical
 621              	.LVL49:
1130:../src/FreeRTOS/tasks.c **** 
 622              		.loc 1 1130 24 discriminator 3 view .LVU185
1132:../src/FreeRTOS/tasks.c ****     {
 623              		.loc 1 1132 5 discriminator 3 view .LVU186
1132:../src/FreeRTOS/tasks.c ****     {
 624              		.loc 1 1132 27 is_stmt 0 discriminator 3 view .LVU187
 625 00e4 003000E3 		movw	r3, #:lower16:.LANCHOR11
 626 00e8 003040E3 		movt	r3, #:upper16:.LANCHOR11
 627 00ec 003093E5 		ldr	r3, [r3]
1132:../src/FreeRTOS/tasks.c ****     {
 628              		.loc 1 1132 7 discriminator 3 view .LVU188
 629 00f0 000053E3 		cmp	r3, #0
 630 00f4 1080BD08 		popeq	{r4, pc}
1136:../src/FreeRTOS/tasks.c ****         {
 631              		.loc 1 1136 9 is_stmt 1 view .LVU189
1136:../src/FreeRTOS/tasks.c ****         {
 632              		.loc 1 1136 25 is_stmt 0 view .LVU190
 633 00f8 003000E3 		movw	r3, #:lower16:.LANCHOR10
 634 00fc 003040E3 		movt	r3, #:upper16:.LANCHOR10
 635 0100 003093E5 		ldr	r3, [r3]
 636 0104 2C2093E5 		ldr	r2, [r3, #44]
1136:../src/FreeRTOS/tasks.c ****         {
 637              		.loc 1 1136 48 view .LVU191
 638 0108 2C3094E5 		ldr	r3, [r4, #44]
1136:../src/FreeRTOS/tasks.c ****         {
 639              		.loc 1 1136 11 view .LVU192
 640 010c 030052E1 		cmp	r2, r3
 641 0110 1080BD28 		popcs	{r4, pc}
1138:../src/FreeRTOS/tasks.c ****         }
 642              		.loc 1 1138 13 is_stmt 1 view .LVU193
 643              		.syntax divided
 644              	@ 1138 "../src/FreeRTOS/tasks.c" 1
 645 0114 000000EF 		SWI 0
 646              	@ 0 "" 2
1138:../src/FreeRTOS/tasks.c ****         }
 647              		.loc 1 1138 44 view .LVU194
1147:../src/FreeRTOS/tasks.c ****     }
 648              		.loc 1 1147 33 view .LVU195
1149:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 649              		.loc 1 1149 1 is_stmt 0 view .LVU196
 650              		.arm
 651              		.syntax unified
 652 0118 1080BDE8 		pop	{r4, pc}
 653              	.L43:
1087:../src/FreeRTOS/tasks.c ****             }
 654              		.loc 1 1087 17 is_stmt 1 view .LVU197
 655 011c FEFFFFEB 		bl	prvInitialiseTaskLists
 656              	.LVL50:
 657 0120 DAFFFFEA 		b	.L38
 658              		.cfi_endproc
 659              	.LFE5:
 661              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 662              		.align	2
 663              		.syntax unified
 664              		.arm
 665              		.fpu neon
 667              	prvCheckTasksWaitingTermination:
 668              	.LFB45:
3688:../src/FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 669              		.loc 1 3688 1 view -0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673 0000 10402DE9 		push	{r4, lr}
 674              		.cfi_def_cfa_offset 8
 675              		.cfi_offset 4, -8
 676              		.cfi_offset 14, -4
 677              	.LBB2:
3693:../src/FreeRTOS/tasks.c **** 
 678              		.loc 1 3693 13 view .LVU199
3697:../src/FreeRTOS/tasks.c ****             {
 679              		.loc 1 3697 13 view .LVU200
 680              	.L45:
3697:../src/FreeRTOS/tasks.c ****             {
 681              		.loc 1 3697 18 view .LVU201
3697:../src/FreeRTOS/tasks.c ****             {
 682              		.loc 1 3697 49 is_stmt 0 view .LVU202
 683 0004 003000E3 		movw	r3, #:lower16:.LANCHOR14
 684 0008 003040E3 		movt	r3, #:upper16:.LANCHOR14
 685 000c 003093E5 		ldr	r3, [r3]
3697:../src/FreeRTOS/tasks.c ****             {
 686              		.loc 1 3697 18 view .LVU203
 687 0010 000053E3 		cmp	r3, #0
 688 0014 1080BD08 		popeq	{r4, pc}
3699:../src/FreeRTOS/tasks.c ****                 {
 689              		.loc 1 3699 17 is_stmt 1 view .LVU204
 690 0018 FEFFFFEB 		bl	vPortEnterCritical
 691              	.LVL51:
3699:../src/FreeRTOS/tasks.c ****                 {
 692              		.loc 1 3699 37 view .LVU205
3701:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 693              		.loc 1 3701 21 view .LVU206
3701:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 694              		.loc 1 3701 29 is_stmt 0 view .LVU207
 695 001c 003000E3 		movw	r3, #:lower16:.LANCHOR7
 696 0020 003040E3 		movt	r3, #:upper16:.LANCHOR7
 697 0024 0C3093E5 		ldr	r3, [r3, #12]
3701:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 698              		.loc 1 3701 27 view .LVU208
 699 0028 0C4093E5 		ldr	r4, [r3, #12]
 700              	.LVL52:
3702:../src/FreeRTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
 701              		.loc 1 3702 21 is_stmt 1 view .LVU209
3702:../src/FreeRTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
 702              		.loc 1 3702 30 is_stmt 0 view .LVU210
 703 002c 040084E2 		add	r0, r4, #4
 704 0030 FEFFFFEB 		bl	uxListRemove
 705              	.LVL53:
3703:../src/FreeRTOS/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
 706              		.loc 1 3703 21 is_stmt 1 view .LVU211
 707 0034 003000E3 		movw	r3, #:lower16:.LANCHOR9
 708 0038 003040E3 		movt	r3, #:upper16:.LANCHOR9
 709 003c 002093E5 		ldr	r2, [r3]
 710 0040 012042E2 		sub	r2, r2, #1
 711 0044 002083E5 		str	r2, [r3]
3704:../src/FreeRTOS/tasks.c ****                 }
 712              		.loc 1 3704 21 view .LVU212
 713 0048 003000E3 		movw	r3, #:lower16:.LANCHOR14
 714 004c 003040E3 		movt	r3, #:upper16:.LANCHOR14
 715 0050 002093E5 		ldr	r2, [r3]
 716 0054 012042E2 		sub	r2, r2, #1
 717 0058 002083E5 		str	r2, [r3]
3706:../src/FreeRTOS/tasks.c **** 
 718              		.loc 1 3706 17 view .LVU213
 719 005c FEFFFFEB 		bl	vPortExitCritical
 720              	.LVL54:
3706:../src/FreeRTOS/tasks.c **** 
 721              		.loc 1 3706 36 view .LVU214
3708:../src/FreeRTOS/tasks.c ****             }
 722              		.loc 1 3708 17 view .LVU215
 723 0060 0400A0E1 		mov	r0, r4
 724 0064 FEFFFFEB 		bl	prvDeleteTCB
 725              	.LVL55:
 726 0068 E5FFFFEA 		b	.L45
 727              	.LBE2:
 728              		.cfi_endproc
 729              	.LFE45:
 731              		.section	.text.prvIdleTask,"ax",%progbits
 732              		.align	2
 733              		.syntax unified
 734              		.arm
 735              		.fpu neon
 737              	prvIdleTask:
 738              	.LFB41:
3431:../src/FreeRTOS/tasks.c ****     /* Stop warnings. */
 739              		.loc 1 3431 1 view -0
 740              		.cfi_startproc
 741              		@ Volatile: function does not return.
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              	.LVL56:
3431:../src/FreeRTOS/tasks.c ****     /* Stop warnings. */
 745              		.loc 1 3431 1 is_stmt 0 view .LVU217
 746 0000 10402DE9 		push	{r4, lr}
 747              		.cfi_def_cfa_offset 8
 748              		.cfi_offset 4, -8
 749              		.cfi_offset 14, -4
 750              	.LVL57:
 751              	.L50:
3433:../src/FreeRTOS/tasks.c **** 
 752              		.loc 1 3433 5 is_stmt 1 view .LVU218
3441:../src/FreeRTOS/tasks.c **** 
 753              		.loc 1 3441 67 view .LVU219
3443:../src/FreeRTOS/tasks.c ****     {
 754              		.loc 1 3443 5 view .LVU220
3447:../src/FreeRTOS/tasks.c **** 
 755              		.loc 1 3447 9 view .LVU221
 756 0004 FEFFFFEB 		bl	prvCheckTasksWaitingTermination
 757              	.LVL58:
3470:../src/FreeRTOS/tasks.c ****                 {
 758              		.loc 1 3470 17 view .LVU222
3470:../src/FreeRTOS/tasks.c ****                 {
 759              		.loc 1 3470 21 is_stmt 0 view .LVU223
 760 0008 003000E3 		movw	r3, #:lower16:.LANCHOR4
 761 000c 003040E3 		movt	r3, #:upper16:.LANCHOR4
 762 0010 003093E5 		ldr	r3, [r3]
3470:../src/FreeRTOS/tasks.c ****                 {
 763              		.loc 1 3470 19 view .LVU224
 764 0014 010053E3 		cmp	r3, #1
 765 0018 F9FFFF9A 		bls	.L50
3472:../src/FreeRTOS/tasks.c ****                 }
 766              		.loc 1 3472 21 is_stmt 1 view .LVU225
 767              		.syntax divided
 768              	@ 3472 "../src/FreeRTOS/tasks.c" 1
 769 001c 000000EF 		SWI 0
 770              	@ 0 "" 2
3472:../src/FreeRTOS/tasks.c ****                 }
 771              		.loc 1 3472 32 view .LVU226
 772              		.arm
 773              		.syntax unified
 774 0020 F7FFFFEA 		b	.L50
 775              		.cfi_endproc
 776              	.LFE41:
 778              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 779              		.align	2
 780              		.syntax unified
 781              		.arm
 782              		.fpu neon
 784              	prvAddCurrentTaskToDelayedList:
 785              	.LVL59:
 786              	.LFB69:
4014:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4015:../src/FreeRTOS/tasks.c **** 
4016:../src/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4017:../src/FreeRTOS/tasks.c **** 
4018:../src/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4019:../src/FreeRTOS/tasks.c ****     {
4020:../src/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
4021:../src/FreeRTOS/tasks.c **** 
4022:../src/FreeRTOS/tasks.c ****         /* A critical section is not required as this is not called from
4023:../src/FreeRTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4024:../src/FreeRTOS/tasks.c ****          * individual execution thread. */
4025:../src/FreeRTOS/tasks.c ****         xReturn = pxCurrentTCB;
4026:../src/FreeRTOS/tasks.c **** 
4027:../src/FreeRTOS/tasks.c ****         return xReturn;
4028:../src/FreeRTOS/tasks.c ****     }
4029:../src/FreeRTOS/tasks.c **** 
4030:../src/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4031:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4032:../src/FreeRTOS/tasks.c **** 
4033:../src/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4034:../src/FreeRTOS/tasks.c **** 
4035:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4036:../src/FreeRTOS/tasks.c ****     {
4037:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
4038:../src/FreeRTOS/tasks.c **** 
4039:../src/FreeRTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4040:../src/FreeRTOS/tasks.c ****         {
4041:../src/FreeRTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4042:../src/FreeRTOS/tasks.c ****         }
4043:../src/FreeRTOS/tasks.c ****         else
4044:../src/FreeRTOS/tasks.c ****         {
4045:../src/FreeRTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4046:../src/FreeRTOS/tasks.c ****             {
4047:../src/FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4048:../src/FreeRTOS/tasks.c ****             }
4049:../src/FreeRTOS/tasks.c ****             else
4050:../src/FreeRTOS/tasks.c ****             {
4051:../src/FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4052:../src/FreeRTOS/tasks.c ****             }
4053:../src/FreeRTOS/tasks.c ****         }
4054:../src/FreeRTOS/tasks.c **** 
4055:../src/FreeRTOS/tasks.c ****         return xReturn;
4056:../src/FreeRTOS/tasks.c ****     }
4057:../src/FreeRTOS/tasks.c **** 
4058:../src/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4059:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4060:../src/FreeRTOS/tasks.c **** 
4061:../src/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4062:../src/FreeRTOS/tasks.c **** 
4063:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4064:../src/FreeRTOS/tasks.c ****     {
4065:../src/FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4066:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
4067:../src/FreeRTOS/tasks.c **** 
4068:../src/FreeRTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4069:../src/FreeRTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4070:../src/FreeRTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4071:../src/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4072:../src/FreeRTOS/tasks.c ****         {
4073:../src/FreeRTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4074:../src/FreeRTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4075:../src/FreeRTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4076:../src/FreeRTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4077:../src/FreeRTOS/tasks.c ****             {
4078:../src/FreeRTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4079:../src/FreeRTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4080:../src/FreeRTOS/tasks.c ****                  * not being used for anything else. */
4081:../src/FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4082:../src/FreeRTOS/tasks.c ****                 {
4083:../src/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4084:../src/FreeRTOS/tasks.c ****                 }
4085:../src/FreeRTOS/tasks.c ****                 else
4086:../src/FreeRTOS/tasks.c ****                 {
4087:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4088:../src/FreeRTOS/tasks.c ****                 }
4089:../src/FreeRTOS/tasks.c **** 
4090:../src/FreeRTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4091:../src/FreeRTOS/tasks.c ****                  * to be moved into a new list. */
4092:../src/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4093:../src/FreeRTOS/tasks.c ****                 {
4094:../src/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4095:../src/FreeRTOS/tasks.c ****                     {
4096:../src/FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4097:../src/FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
4098:../src/FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
4099:../src/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4100:../src/FreeRTOS/tasks.c ****                     }
4101:../src/FreeRTOS/tasks.c ****                     else
4102:../src/FreeRTOS/tasks.c ****                     {
4103:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4104:../src/FreeRTOS/tasks.c ****                     }
4105:../src/FreeRTOS/tasks.c **** 
4106:../src/FreeRTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4107:../src/FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4108:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4109:../src/FreeRTOS/tasks.c ****                 }
4110:../src/FreeRTOS/tasks.c ****                 else
4111:../src/FreeRTOS/tasks.c ****                 {
4112:../src/FreeRTOS/tasks.c ****                     /* Just inherit the priority. */
4113:../src/FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4114:../src/FreeRTOS/tasks.c ****                 }
4115:../src/FreeRTOS/tasks.c **** 
4116:../src/FreeRTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4117:../src/FreeRTOS/tasks.c **** 
4118:../src/FreeRTOS/tasks.c ****                 /* Inheritance occurred. */
4119:../src/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4120:../src/FreeRTOS/tasks.c ****             }
4121:../src/FreeRTOS/tasks.c ****             else
4122:../src/FreeRTOS/tasks.c ****             {
4123:../src/FreeRTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4124:../src/FreeRTOS/tasks.c ****                 {
4125:../src/FreeRTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4126:../src/FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4127:../src/FreeRTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4128:../src/FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4129:../src/FreeRTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4130:../src/FreeRTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4131:../src/FreeRTOS/tasks.c ****                      * not been the case. */
4132:../src/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4133:../src/FreeRTOS/tasks.c ****                 }
4134:../src/FreeRTOS/tasks.c ****                 else
4135:../src/FreeRTOS/tasks.c ****                 {
4136:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4137:../src/FreeRTOS/tasks.c ****                 }
4138:../src/FreeRTOS/tasks.c ****             }
4139:../src/FreeRTOS/tasks.c ****         }
4140:../src/FreeRTOS/tasks.c ****         else
4141:../src/FreeRTOS/tasks.c ****         {
4142:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4143:../src/FreeRTOS/tasks.c ****         }
4144:../src/FreeRTOS/tasks.c **** 
4145:../src/FreeRTOS/tasks.c ****         return xReturn;
4146:../src/FreeRTOS/tasks.c ****     }
4147:../src/FreeRTOS/tasks.c **** 
4148:../src/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4149:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4150:../src/FreeRTOS/tasks.c **** 
4151:../src/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4152:../src/FreeRTOS/tasks.c **** 
4153:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4154:../src/FreeRTOS/tasks.c ****     {
4155:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4156:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
4157:../src/FreeRTOS/tasks.c **** 
4158:../src/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4159:../src/FreeRTOS/tasks.c ****         {
4160:../src/FreeRTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4161:../src/FreeRTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4162:../src/FreeRTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4163:../src/FreeRTOS/tasks.c ****              * be the running state task. */
4164:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4165:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4166:../src/FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4167:../src/FreeRTOS/tasks.c **** 
4168:../src/FreeRTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4169:../src/FreeRTOS/tasks.c ****              * task? */
4170:../src/FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4171:../src/FreeRTOS/tasks.c ****             {
4172:../src/FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4173:../src/FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4174:../src/FreeRTOS/tasks.c ****                 {
4175:../src/FreeRTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4176:../src/FreeRTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4177:../src/FreeRTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4178:../src/FreeRTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4179:../src/FreeRTOS/tasks.c ****                      * the holding task from the ready list. */
4180:../src/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4181:../src/FreeRTOS/tasks.c ****                     {
4182:../src/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4183:../src/FreeRTOS/tasks.c ****                     }
4184:../src/FreeRTOS/tasks.c ****                     else
4185:../src/FreeRTOS/tasks.c ****                     {
4186:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4187:../src/FreeRTOS/tasks.c ****                     }
4188:../src/FreeRTOS/tasks.c **** 
4189:../src/FreeRTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4190:../src/FreeRTOS/tasks.c ****                      * new  ready list. */
4191:../src/FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4192:../src/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4193:../src/FreeRTOS/tasks.c **** 
4194:../src/FreeRTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4195:../src/FreeRTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4196:../src/FreeRTOS/tasks.c ****                      * running to give back the mutex. */
4197:../src/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4198:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4199:../src/FreeRTOS/tasks.c **** 
4200:../src/FreeRTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4201:../src/FreeRTOS/tasks.c ****                      * This is only actually required in the corner case whereby
4202:../src/FreeRTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4203:../src/FreeRTOS/tasks.c ****                      * in an order different to that in which they were taken.
4204:../src/FreeRTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4205:../src/FreeRTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4206:../src/FreeRTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4207:../src/FreeRTOS/tasks.c ****                      * a task is waiting on it or not. */
4208:../src/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4209:../src/FreeRTOS/tasks.c ****                 }
4210:../src/FreeRTOS/tasks.c ****                 else
4211:../src/FreeRTOS/tasks.c ****                 {
4212:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4213:../src/FreeRTOS/tasks.c ****                 }
4214:../src/FreeRTOS/tasks.c ****             }
4215:../src/FreeRTOS/tasks.c ****             else
4216:../src/FreeRTOS/tasks.c ****             {
4217:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4218:../src/FreeRTOS/tasks.c ****             }
4219:../src/FreeRTOS/tasks.c ****         }
4220:../src/FreeRTOS/tasks.c ****         else
4221:../src/FreeRTOS/tasks.c ****         {
4222:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4223:../src/FreeRTOS/tasks.c ****         }
4224:../src/FreeRTOS/tasks.c **** 
4225:../src/FreeRTOS/tasks.c ****         return xReturn;
4226:../src/FreeRTOS/tasks.c ****     }
4227:../src/FreeRTOS/tasks.c **** 
4228:../src/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4229:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4230:../src/FreeRTOS/tasks.c **** 
4231:../src/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4232:../src/FreeRTOS/tasks.c **** 
4233:../src/FreeRTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4234:../src/FreeRTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4235:../src/FreeRTOS/tasks.c ****     {
4236:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4237:../src/FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4238:../src/FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4239:../src/FreeRTOS/tasks.c **** 
4240:../src/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4241:../src/FreeRTOS/tasks.c ****         {
4242:../src/FreeRTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4243:../src/FreeRTOS/tasks.c ****              * one mutex. */
4244:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4245:../src/FreeRTOS/tasks.c **** 
4246:../src/FreeRTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4247:../src/FreeRTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4248:../src/FreeRTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4249:../src/FreeRTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4250:../src/FreeRTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4251:../src/FreeRTOS/tasks.c ****             {
4252:../src/FreeRTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4253:../src/FreeRTOS/tasks.c ****             }
4254:../src/FreeRTOS/tasks.c ****             else
4255:../src/FreeRTOS/tasks.c ****             {
4256:../src/FreeRTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4257:../src/FreeRTOS/tasks.c ****             }
4258:../src/FreeRTOS/tasks.c **** 
4259:../src/FreeRTOS/tasks.c ****             /* Does the priority need to change? */
4260:../src/FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4261:../src/FreeRTOS/tasks.c ****             {
4262:../src/FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4263:../src/FreeRTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4264:../src/FreeRTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4265:../src/FreeRTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4266:../src/FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4267:../src/FreeRTOS/tasks.c ****                 {
4268:../src/FreeRTOS/tasks.c ****                     /* If a task has timed out because it already holds the
4269:../src/FreeRTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4270:../src/FreeRTOS/tasks.c ****                      * its own priority. */
4271:../src/FreeRTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4272:../src/FreeRTOS/tasks.c **** 
4273:../src/FreeRTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4274:../src/FreeRTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4275:../src/FreeRTOS/tasks.c ****                      * state. */
4276:../src/FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4277:../src/FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4278:../src/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4279:../src/FreeRTOS/tasks.c **** 
4280:../src/FreeRTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4281:../src/FreeRTOS/tasks.c ****                      * being used for anything else. */
4282:../src/FreeRTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4283:../src/FreeRTOS/tasks.c ****                     {
4284:../src/FreeRTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4285:../src/FreeRTOS/tasks.c ****                     }
4286:../src/FreeRTOS/tasks.c ****                     else
4287:../src/FreeRTOS/tasks.c ****                     {
4288:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4289:../src/FreeRTOS/tasks.c ****                     }
4290:../src/FreeRTOS/tasks.c **** 
4291:../src/FreeRTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
4292:../src/FreeRTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4293:../src/FreeRTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4294:../src/FreeRTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
4295:../src/FreeRTOS/tasks.c ****                      * the task's priority is going to change and there is one
4296:../src/FreeRTOS/tasks.c ****                      * Ready list per priority. */
4297:../src/FreeRTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4298:../src/FreeRTOS/tasks.c ****                     {
4299:../src/FreeRTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4300:../src/FreeRTOS/tasks.c ****                         {
4301:../src/FreeRTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4302:../src/FreeRTOS/tasks.c ****                              * there is no need to check again and the port level
4303:../src/FreeRTOS/tasks.c ****                              * reset macro can be called directly. */
4304:../src/FreeRTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4305:../src/FreeRTOS/tasks.c ****                         }
4306:../src/FreeRTOS/tasks.c ****                         else
4307:../src/FreeRTOS/tasks.c ****                         {
4308:../src/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4309:../src/FreeRTOS/tasks.c ****                         }
4310:../src/FreeRTOS/tasks.c **** 
4311:../src/FreeRTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4312:../src/FreeRTOS/tasks.c ****                     }
4313:../src/FreeRTOS/tasks.c ****                     else
4314:../src/FreeRTOS/tasks.c ****                     {
4315:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4316:../src/FreeRTOS/tasks.c ****                     }
4317:../src/FreeRTOS/tasks.c ****                 }
4318:../src/FreeRTOS/tasks.c ****                 else
4319:../src/FreeRTOS/tasks.c ****                 {
4320:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4321:../src/FreeRTOS/tasks.c ****                 }
4322:../src/FreeRTOS/tasks.c ****             }
4323:../src/FreeRTOS/tasks.c ****             else
4324:../src/FreeRTOS/tasks.c ****             {
4325:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4326:../src/FreeRTOS/tasks.c ****             }
4327:../src/FreeRTOS/tasks.c ****         }
4328:../src/FreeRTOS/tasks.c ****         else
4329:../src/FreeRTOS/tasks.c ****         {
4330:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4331:../src/FreeRTOS/tasks.c ****         }
4332:../src/FreeRTOS/tasks.c ****     }
4333:../src/FreeRTOS/tasks.c **** 
4334:../src/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4335:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4336:../src/FreeRTOS/tasks.c **** 
4337:../src/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4338:../src/FreeRTOS/tasks.c **** 
4339:../src/FreeRTOS/tasks.c ****     void vTaskEnterCritical( void )
4340:../src/FreeRTOS/tasks.c ****     {
4341:../src/FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4342:../src/FreeRTOS/tasks.c **** 
4343:../src/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4344:../src/FreeRTOS/tasks.c ****         {
4345:../src/FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4346:../src/FreeRTOS/tasks.c **** 
4347:../src/FreeRTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4348:../src/FreeRTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
4349:../src/FreeRTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4350:../src/FreeRTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4351:../src/FreeRTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
4352:../src/FreeRTOS/tasks.c ****              * critical section. */
4353:../src/FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4354:../src/FreeRTOS/tasks.c ****             {
4355:../src/FreeRTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4356:../src/FreeRTOS/tasks.c ****             }
4357:../src/FreeRTOS/tasks.c ****         }
4358:../src/FreeRTOS/tasks.c ****         else
4359:../src/FreeRTOS/tasks.c ****         {
4360:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4361:../src/FreeRTOS/tasks.c ****         }
4362:../src/FreeRTOS/tasks.c ****     }
4363:../src/FreeRTOS/tasks.c **** 
4364:../src/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4365:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4366:../src/FreeRTOS/tasks.c **** 
4367:../src/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4368:../src/FreeRTOS/tasks.c **** 
4369:../src/FreeRTOS/tasks.c ****     void vTaskExitCritical( void )
4370:../src/FreeRTOS/tasks.c ****     {
4371:../src/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4372:../src/FreeRTOS/tasks.c ****         {
4373:../src/FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4374:../src/FreeRTOS/tasks.c ****             {
4375:../src/FreeRTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4376:../src/FreeRTOS/tasks.c **** 
4377:../src/FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4378:../src/FreeRTOS/tasks.c ****                 {
4379:../src/FreeRTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4380:../src/FreeRTOS/tasks.c ****                 }
4381:../src/FreeRTOS/tasks.c ****                 else
4382:../src/FreeRTOS/tasks.c ****                 {
4383:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4384:../src/FreeRTOS/tasks.c ****                 }
4385:../src/FreeRTOS/tasks.c ****             }
4386:../src/FreeRTOS/tasks.c ****             else
4387:../src/FreeRTOS/tasks.c ****             {
4388:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4389:../src/FreeRTOS/tasks.c ****             }
4390:../src/FreeRTOS/tasks.c ****         }
4391:../src/FreeRTOS/tasks.c ****         else
4392:../src/FreeRTOS/tasks.c ****         {
4393:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4394:../src/FreeRTOS/tasks.c ****         }
4395:../src/FreeRTOS/tasks.c ****     }
4396:../src/FreeRTOS/tasks.c **** 
4397:../src/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4398:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4399:../src/FreeRTOS/tasks.c **** 
4400:../src/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4401:../src/FreeRTOS/tasks.c **** 
4402:../src/FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4403:../src/FreeRTOS/tasks.c ****                                         const char * pcTaskName )
4404:../src/FreeRTOS/tasks.c ****     {
4405:../src/FreeRTOS/tasks.c ****         size_t x;
4406:../src/FreeRTOS/tasks.c **** 
4407:../src/FreeRTOS/tasks.c ****         /* Start by copying the entire string. */
4408:../src/FreeRTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4409:../src/FreeRTOS/tasks.c **** 
4410:../src/FreeRTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4411:../src/FreeRTOS/tasks.c ****          * printed out. */
4412:../src/FreeRTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4413:../src/FreeRTOS/tasks.c ****         {
4414:../src/FreeRTOS/tasks.c ****             pcBuffer[ x ] = ' ';
4415:../src/FreeRTOS/tasks.c ****         }
4416:../src/FreeRTOS/tasks.c **** 
4417:../src/FreeRTOS/tasks.c ****         /* Terminate. */
4418:../src/FreeRTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4419:../src/FreeRTOS/tasks.c **** 
4420:../src/FreeRTOS/tasks.c ****         /* Return the new end of string. */
4421:../src/FreeRTOS/tasks.c ****         return &( pcBuffer[ x ] );
4422:../src/FreeRTOS/tasks.c ****     }
4423:../src/FreeRTOS/tasks.c **** 
4424:../src/FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4425:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4426:../src/FreeRTOS/tasks.c **** 
4427:../src/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4428:../src/FreeRTOS/tasks.c **** 
4429:../src/FreeRTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4430:../src/FreeRTOS/tasks.c ****     {
4431:../src/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4432:../src/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4433:../src/FreeRTOS/tasks.c ****         char cStatus;
4434:../src/FreeRTOS/tasks.c **** 
4435:../src/FreeRTOS/tasks.c ****         /*
4436:../src/FreeRTOS/tasks.c ****          * PLEASE NOTE:
4437:../src/FreeRTOS/tasks.c ****          *
4438:../src/FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4439:../src/FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4440:../src/FreeRTOS/tasks.c ****          * scheduler.
4441:../src/FreeRTOS/tasks.c ****          *
4442:../src/FreeRTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4443:../src/FreeRTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4444:../src/FreeRTOS/tasks.c ****          * displays task names, states and stack usage.
4445:../src/FreeRTOS/tasks.c ****          *
4446:../src/FreeRTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4447:../src/FreeRTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4448:../src/FreeRTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4449:../src/FreeRTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4450:../src/FreeRTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4451:../src/FreeRTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4452:../src/FreeRTOS/tasks.c ****          * snprintf() implementation!).
4453:../src/FreeRTOS/tasks.c ****          *
4454:../src/FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4455:../src/FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4456:../src/FreeRTOS/tasks.c ****          * through a call to vTaskList().
4457:../src/FreeRTOS/tasks.c ****          */
4458:../src/FreeRTOS/tasks.c **** 
4459:../src/FreeRTOS/tasks.c **** 
4460:../src/FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4461:../src/FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4462:../src/FreeRTOS/tasks.c **** 
4463:../src/FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4464:../src/FreeRTOS/tasks.c ****          * function is executing. */
4465:../src/FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4466:../src/FreeRTOS/tasks.c **** 
4467:../src/FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4468:../src/FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4469:../src/FreeRTOS/tasks.c ****          * equate to NULL. */
4470:../src/FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4471:../src/FreeRTOS/tasks.c **** 
4472:../src/FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4473:../src/FreeRTOS/tasks.c ****         {
4474:../src/FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4475:../src/FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4476:../src/FreeRTOS/tasks.c **** 
4477:../src/FreeRTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4478:../src/FreeRTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4479:../src/FreeRTOS/tasks.c ****             {
4480:../src/FreeRTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4481:../src/FreeRTOS/tasks.c ****                 {
4482:../src/FreeRTOS/tasks.c ****                     case eRunning:
4483:../src/FreeRTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4484:../src/FreeRTOS/tasks.c ****                         break;
4485:../src/FreeRTOS/tasks.c **** 
4486:../src/FreeRTOS/tasks.c ****                     case eReady:
4487:../src/FreeRTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
4488:../src/FreeRTOS/tasks.c ****                         break;
4489:../src/FreeRTOS/tasks.c **** 
4490:../src/FreeRTOS/tasks.c ****                     case eBlocked:
4491:../src/FreeRTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4492:../src/FreeRTOS/tasks.c ****                         break;
4493:../src/FreeRTOS/tasks.c **** 
4494:../src/FreeRTOS/tasks.c ****                     case eSuspended:
4495:../src/FreeRTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4496:../src/FreeRTOS/tasks.c ****                         break;
4497:../src/FreeRTOS/tasks.c **** 
4498:../src/FreeRTOS/tasks.c ****                     case eDeleted:
4499:../src/FreeRTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
4500:../src/FreeRTOS/tasks.c ****                         break;
4501:../src/FreeRTOS/tasks.c **** 
4502:../src/FreeRTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4503:../src/FreeRTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4504:../src/FreeRTOS/tasks.c ****                                     * to prevent static checking errors. */
4505:../src/FreeRTOS/tasks.c ****                         cStatus = ( char ) 0x00;
4506:../src/FreeRTOS/tasks.c ****                         break;
4507:../src/FreeRTOS/tasks.c ****                 }
4508:../src/FreeRTOS/tasks.c **** 
4509:../src/FreeRTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4510:../src/FreeRTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4511:../src/FreeRTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4512:../src/FreeRTOS/tasks.c **** 
4513:../src/FreeRTOS/tasks.c ****                 /* Write the rest of the string. */
4514:../src/FreeRTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4515:../src/FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4516:../src/FreeRTOS/tasks.c ****             }
4517:../src/FreeRTOS/tasks.c **** 
4518:../src/FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4519:../src/FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4520:../src/FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4521:../src/FreeRTOS/tasks.c ****         }
4522:../src/FreeRTOS/tasks.c ****         else
4523:../src/FreeRTOS/tasks.c ****         {
4524:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4525:../src/FreeRTOS/tasks.c ****         }
4526:../src/FreeRTOS/tasks.c ****     }
4527:../src/FreeRTOS/tasks.c **** 
4528:../src/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4529:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4530:../src/FreeRTOS/tasks.c **** 
4531:../src/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4532:../src/FreeRTOS/tasks.c **** 
4533:../src/FreeRTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4534:../src/FreeRTOS/tasks.c ****     {
4535:../src/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4536:../src/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4537:../src/FreeRTOS/tasks.c ****         uint32_t ulTotalTime, ulStatsAsPercentage;
4538:../src/FreeRTOS/tasks.c **** 
4539:../src/FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY != 1 )
4540:../src/FreeRTOS/tasks.c ****             {
4541:../src/FreeRTOS/tasks.c ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4542:../src/FreeRTOS/tasks.c ****             }
4543:../src/FreeRTOS/tasks.c ****         #endif
4544:../src/FreeRTOS/tasks.c **** 
4545:../src/FreeRTOS/tasks.c ****         /*
4546:../src/FreeRTOS/tasks.c ****          * PLEASE NOTE:
4547:../src/FreeRTOS/tasks.c ****          *
4548:../src/FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4549:../src/FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4550:../src/FreeRTOS/tasks.c ****          * scheduler.
4551:../src/FreeRTOS/tasks.c ****          *
4552:../src/FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4553:../src/FreeRTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4554:../src/FreeRTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4555:../src/FreeRTOS/tasks.c ****          * in both absolute and percentage terms.
4556:../src/FreeRTOS/tasks.c ****          *
4557:../src/FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4558:../src/FreeRTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4559:../src/FreeRTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4560:../src/FreeRTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4561:../src/FreeRTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4562:../src/FreeRTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4563:../src/FreeRTOS/tasks.c ****          * a full snprintf() implementation!).
4564:../src/FreeRTOS/tasks.c ****          *
4565:../src/FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4566:../src/FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4567:../src/FreeRTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4568:../src/FreeRTOS/tasks.c ****          */
4569:../src/FreeRTOS/tasks.c **** 
4570:../src/FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4571:../src/FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4572:../src/FreeRTOS/tasks.c **** 
4573:../src/FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4574:../src/FreeRTOS/tasks.c ****          * function is executing. */
4575:../src/FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4576:../src/FreeRTOS/tasks.c **** 
4577:../src/FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4578:../src/FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4579:../src/FreeRTOS/tasks.c ****          * equate to NULL. */
4580:../src/FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4581:../src/FreeRTOS/tasks.c **** 
4582:../src/FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4583:../src/FreeRTOS/tasks.c ****         {
4584:../src/FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4585:../src/FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4586:../src/FreeRTOS/tasks.c **** 
4587:../src/FreeRTOS/tasks.c ****             /* For percentage calculations. */
4588:../src/FreeRTOS/tasks.c ****             ulTotalTime /= 100UL;
4589:../src/FreeRTOS/tasks.c **** 
4590:../src/FreeRTOS/tasks.c ****             /* Avoid divide by zero errors. */
4591:../src/FreeRTOS/tasks.c ****             if( ulTotalTime > 0UL )
4592:../src/FreeRTOS/tasks.c ****             {
4593:../src/FreeRTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
4594:../src/FreeRTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4595:../src/FreeRTOS/tasks.c ****                 {
4596:../src/FreeRTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4597:../src/FreeRTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4598:../src/FreeRTOS/tasks.c ****                      * ulTotalRunTimeDiv100 has already been divided by 100. */
4599:../src/FreeRTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4600:../src/FreeRTOS/tasks.c **** 
4601:../src/FreeRTOS/tasks.c ****                     /* Write the task name to the string, padding with
4602:../src/FreeRTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4603:../src/FreeRTOS/tasks.c ****                      * easily. */
4604:../src/FreeRTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4605:../src/FreeRTOS/tasks.c **** 
4606:../src/FreeRTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4607:../src/FreeRTOS/tasks.c ****                     {
4608:../src/FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4609:../src/FreeRTOS/tasks.c ****                             {
4610:../src/FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4611:../src/FreeRTOS/tasks.c ****                             }
4612:../src/FreeRTOS/tasks.c ****                         #else
4613:../src/FreeRTOS/tasks.c ****                             {
4614:../src/FreeRTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4615:../src/FreeRTOS/tasks.c ****                                  * printf() library can be used. */
4616:../src/FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4617:../src/FreeRTOS/tasks.c ****                             }
4618:../src/FreeRTOS/tasks.c ****                         #endif
4619:../src/FreeRTOS/tasks.c ****                     }
4620:../src/FreeRTOS/tasks.c ****                     else
4621:../src/FreeRTOS/tasks.c ****                     {
4622:../src/FreeRTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4623:../src/FreeRTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4624:../src/FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4625:../src/FreeRTOS/tasks.c ****                             {
4626:../src/FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4627:../src/FreeRTOS/tasks.c ****                             }
4628:../src/FreeRTOS/tasks.c ****                         #else
4629:../src/FreeRTOS/tasks.c ****                             {
4630:../src/FreeRTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4631:../src/FreeRTOS/tasks.c ****                                  * printf() library can be used. */
4632:../src/FreeRTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4633:../src/FreeRTOS/tasks.c ****                             }
4634:../src/FreeRTOS/tasks.c ****                         #endif
4635:../src/FreeRTOS/tasks.c ****                     }
4636:../src/FreeRTOS/tasks.c **** 
4637:../src/FreeRTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4638:../src/FreeRTOS/tasks.c ****                 }
4639:../src/FreeRTOS/tasks.c ****             }
4640:../src/FreeRTOS/tasks.c ****             else
4641:../src/FreeRTOS/tasks.c ****             {
4642:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4643:../src/FreeRTOS/tasks.c ****             }
4644:../src/FreeRTOS/tasks.c **** 
4645:../src/FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4646:../src/FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4647:../src/FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4648:../src/FreeRTOS/tasks.c ****         }
4649:../src/FreeRTOS/tasks.c ****         else
4650:../src/FreeRTOS/tasks.c ****         {
4651:../src/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4652:../src/FreeRTOS/tasks.c ****         }
4653:../src/FreeRTOS/tasks.c ****     }
4654:../src/FreeRTOS/tasks.c **** 
4655:../src/FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4656:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4657:../src/FreeRTOS/tasks.c **** 
4658:../src/FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4659:../src/FreeRTOS/tasks.c **** {
4660:../src/FreeRTOS/tasks.c ****     TickType_t uxReturn;
4661:../src/FreeRTOS/tasks.c **** 
4662:../src/FreeRTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4663:../src/FreeRTOS/tasks.c **** 
4664:../src/FreeRTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4665:../src/FreeRTOS/tasks.c ****      * queues and semaphores. */
4666:../src/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4667:../src/FreeRTOS/tasks.c **** 
4668:../src/FreeRTOS/tasks.c ****     return uxReturn;
4669:../src/FreeRTOS/tasks.c **** }
4670:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4671:../src/FreeRTOS/tasks.c **** 
4672:../src/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4673:../src/FreeRTOS/tasks.c **** 
4674:../src/FreeRTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4675:../src/FreeRTOS/tasks.c ****     {
4676:../src/FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4677:../src/FreeRTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4678:../src/FreeRTOS/tasks.c ****         if( pxCurrentTCB != NULL )
4679:../src/FreeRTOS/tasks.c ****         {
4680:../src/FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4681:../src/FreeRTOS/tasks.c ****         }
4682:../src/FreeRTOS/tasks.c **** 
4683:../src/FreeRTOS/tasks.c ****         return pxCurrentTCB;
4684:../src/FreeRTOS/tasks.c ****     }
4685:../src/FreeRTOS/tasks.c **** 
4686:../src/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4687:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4688:../src/FreeRTOS/tasks.c **** 
4689:../src/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4690:../src/FreeRTOS/tasks.c **** 
4691:../src/FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4692:../src/FreeRTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4693:../src/FreeRTOS/tasks.c ****                                       TickType_t xTicksToWait )
4694:../src/FreeRTOS/tasks.c ****     {
4695:../src/FreeRTOS/tasks.c ****         uint32_t ulReturn;
4696:../src/FreeRTOS/tasks.c **** 
4697:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4698:../src/FreeRTOS/tasks.c **** 
4699:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4700:../src/FreeRTOS/tasks.c ****         {
4701:../src/FreeRTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4702:../src/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4703:../src/FreeRTOS/tasks.c ****             {
4704:../src/FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4705:../src/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4706:../src/FreeRTOS/tasks.c **** 
4707:../src/FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4708:../src/FreeRTOS/tasks.c ****                 {
4709:../src/FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4710:../src/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4711:../src/FreeRTOS/tasks.c **** 
4712:../src/FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4713:../src/FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4714:../src/FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4715:../src/FreeRTOS/tasks.c ****                      * application code should ever do. */
4716:../src/FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4717:../src/FreeRTOS/tasks.c ****                 }
4718:../src/FreeRTOS/tasks.c ****                 else
4719:../src/FreeRTOS/tasks.c ****                 {
4720:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4721:../src/FreeRTOS/tasks.c ****                 }
4722:../src/FreeRTOS/tasks.c ****             }
4723:../src/FreeRTOS/tasks.c ****             else
4724:../src/FreeRTOS/tasks.c ****             {
4725:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4726:../src/FreeRTOS/tasks.c ****             }
4727:../src/FreeRTOS/tasks.c ****         }
4728:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4729:../src/FreeRTOS/tasks.c **** 
4730:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4731:../src/FreeRTOS/tasks.c ****         {
4732:../src/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4733:../src/FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4734:../src/FreeRTOS/tasks.c **** 
4735:../src/FreeRTOS/tasks.c ****             if( ulReturn != 0UL )
4736:../src/FreeRTOS/tasks.c ****             {
4737:../src/FreeRTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
4738:../src/FreeRTOS/tasks.c ****                 {
4739:../src/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4740:../src/FreeRTOS/tasks.c ****                 }
4741:../src/FreeRTOS/tasks.c ****                 else
4742:../src/FreeRTOS/tasks.c ****                 {
4743:../src/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4744:../src/FreeRTOS/tasks.c ****                 }
4745:../src/FreeRTOS/tasks.c ****             }
4746:../src/FreeRTOS/tasks.c ****             else
4747:../src/FreeRTOS/tasks.c ****             {
4748:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4749:../src/FreeRTOS/tasks.c ****             }
4750:../src/FreeRTOS/tasks.c **** 
4751:../src/FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4752:../src/FreeRTOS/tasks.c ****         }
4753:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4754:../src/FreeRTOS/tasks.c **** 
4755:../src/FreeRTOS/tasks.c ****         return ulReturn;
4756:../src/FreeRTOS/tasks.c ****     }
4757:../src/FreeRTOS/tasks.c **** 
4758:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4759:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4760:../src/FreeRTOS/tasks.c **** 
4761:../src/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4762:../src/FreeRTOS/tasks.c **** 
4763:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4764:../src/FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4765:../src/FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4766:../src/FreeRTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4767:../src/FreeRTOS/tasks.c ****                                        TickType_t xTicksToWait )
4768:../src/FreeRTOS/tasks.c ****     {
4769:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
4770:../src/FreeRTOS/tasks.c **** 
4771:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4772:../src/FreeRTOS/tasks.c **** 
4773:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4774:../src/FreeRTOS/tasks.c ****         {
4775:../src/FreeRTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4776:../src/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4777:../src/FreeRTOS/tasks.c ****             {
4778:../src/FreeRTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4779:../src/FreeRTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4780:../src/FreeRTOS/tasks.c ****                  * clear the value to zero. */
4781:../src/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4782:../src/FreeRTOS/tasks.c **** 
4783:../src/FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4784:../src/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4785:../src/FreeRTOS/tasks.c **** 
4786:../src/FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4787:../src/FreeRTOS/tasks.c ****                 {
4788:../src/FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4789:../src/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4790:../src/FreeRTOS/tasks.c **** 
4791:../src/FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4792:../src/FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4793:../src/FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4794:../src/FreeRTOS/tasks.c ****                      * application code should ever do. */
4795:../src/FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4796:../src/FreeRTOS/tasks.c ****                 }
4797:../src/FreeRTOS/tasks.c ****                 else
4798:../src/FreeRTOS/tasks.c ****                 {
4799:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4800:../src/FreeRTOS/tasks.c ****                 }
4801:../src/FreeRTOS/tasks.c ****             }
4802:../src/FreeRTOS/tasks.c ****             else
4803:../src/FreeRTOS/tasks.c ****             {
4804:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4805:../src/FreeRTOS/tasks.c ****             }
4806:../src/FreeRTOS/tasks.c ****         }
4807:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4808:../src/FreeRTOS/tasks.c **** 
4809:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4810:../src/FreeRTOS/tasks.c ****         {
4811:../src/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4812:../src/FreeRTOS/tasks.c **** 
4813:../src/FreeRTOS/tasks.c ****             if( pulNotificationValue != NULL )
4814:../src/FreeRTOS/tasks.c ****             {
4815:../src/FreeRTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4816:../src/FreeRTOS/tasks.c ****                  * have changed. */
4817:../src/FreeRTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4818:../src/FreeRTOS/tasks.c ****             }
4819:../src/FreeRTOS/tasks.c **** 
4820:../src/FreeRTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4821:../src/FreeRTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4822:../src/FreeRTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4823:../src/FreeRTOS/tasks.c ****              * unblocked because of a timeout. */
4824:../src/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4825:../src/FreeRTOS/tasks.c ****             {
4826:../src/FreeRTOS/tasks.c ****                 /* A notification was not received. */
4827:../src/FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
4828:../src/FreeRTOS/tasks.c ****             }
4829:../src/FreeRTOS/tasks.c ****             else
4830:../src/FreeRTOS/tasks.c ****             {
4831:../src/FreeRTOS/tasks.c ****                 /* A notification was already pending or a notification was
4832:../src/FreeRTOS/tasks.c ****                  * received while the task was waiting. */
4833:../src/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4834:../src/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4835:../src/FreeRTOS/tasks.c ****             }
4836:../src/FreeRTOS/tasks.c **** 
4837:../src/FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4838:../src/FreeRTOS/tasks.c ****         }
4839:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4840:../src/FreeRTOS/tasks.c **** 
4841:../src/FreeRTOS/tasks.c ****         return xReturn;
4842:../src/FreeRTOS/tasks.c ****     }
4843:../src/FreeRTOS/tasks.c **** 
4844:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4845:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4846:../src/FreeRTOS/tasks.c **** 
4847:../src/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4848:../src/FreeRTOS/tasks.c **** 
4849:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4850:../src/FreeRTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4851:../src/FreeRTOS/tasks.c ****                                    uint32_t ulValue,
4852:../src/FreeRTOS/tasks.c ****                                    eNotifyAction eAction,
4853:../src/FreeRTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4854:../src/FreeRTOS/tasks.c ****     {
4855:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4856:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4857:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4858:../src/FreeRTOS/tasks.c **** 
4859:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4860:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4861:../src/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
4862:../src/FreeRTOS/tasks.c **** 
4863:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4864:../src/FreeRTOS/tasks.c ****         {
4865:../src/FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4866:../src/FreeRTOS/tasks.c ****             {
4867:../src/FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4868:../src/FreeRTOS/tasks.c ****             }
4869:../src/FreeRTOS/tasks.c **** 
4870:../src/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4871:../src/FreeRTOS/tasks.c **** 
4872:../src/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4873:../src/FreeRTOS/tasks.c **** 
4874:../src/FreeRTOS/tasks.c ****             switch( eAction )
4875:../src/FreeRTOS/tasks.c ****             {
4876:../src/FreeRTOS/tasks.c ****                 case eSetBits:
4877:../src/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4878:../src/FreeRTOS/tasks.c ****                     break;
4879:../src/FreeRTOS/tasks.c **** 
4880:../src/FreeRTOS/tasks.c ****                 case eIncrement:
4881:../src/FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4882:../src/FreeRTOS/tasks.c ****                     break;
4883:../src/FreeRTOS/tasks.c **** 
4884:../src/FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
4885:../src/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4886:../src/FreeRTOS/tasks.c ****                     break;
4887:../src/FreeRTOS/tasks.c **** 
4888:../src/FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4889:../src/FreeRTOS/tasks.c **** 
4890:../src/FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4891:../src/FreeRTOS/tasks.c ****                     {
4892:../src/FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4893:../src/FreeRTOS/tasks.c ****                     }
4894:../src/FreeRTOS/tasks.c ****                     else
4895:../src/FreeRTOS/tasks.c ****                     {
4896:../src/FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
4897:../src/FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
4898:../src/FreeRTOS/tasks.c ****                     }
4899:../src/FreeRTOS/tasks.c **** 
4900:../src/FreeRTOS/tasks.c ****                     break;
4901:../src/FreeRTOS/tasks.c **** 
4902:../src/FreeRTOS/tasks.c ****                 case eNoAction:
4903:../src/FreeRTOS/tasks.c **** 
4904:../src/FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
4905:../src/FreeRTOS/tasks.c ****                      * updated. */
4906:../src/FreeRTOS/tasks.c ****                     break;
4907:../src/FreeRTOS/tasks.c **** 
4908:../src/FreeRTOS/tasks.c ****                 default:
4909:../src/FreeRTOS/tasks.c **** 
4910:../src/FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4911:../src/FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4912:../src/FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
4913:../src/FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4914:../src/FreeRTOS/tasks.c **** 
4915:../src/FreeRTOS/tasks.c ****                     break;
4916:../src/FreeRTOS/tasks.c ****             }
4917:../src/FreeRTOS/tasks.c **** 
4918:../src/FreeRTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4919:../src/FreeRTOS/tasks.c **** 
4920:../src/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4921:../src/FreeRTOS/tasks.c ****              * notification then unblock it now. */
4922:../src/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4923:../src/FreeRTOS/tasks.c ****             {
4924:../src/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4925:../src/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4926:../src/FreeRTOS/tasks.c **** 
4927:../src/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
4928:../src/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4929:../src/FreeRTOS/tasks.c **** 
4930:../src/FreeRTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4931:../src/FreeRTOS/tasks.c ****                     {
4932:../src/FreeRTOS/tasks.c ****                         /* If a task is blocked waiting for a notification then
4933:../src/FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4934:../src/FreeRTOS/tasks.c ****                          * out time.  If the task is unblocked for a reason other than
4935:../src/FreeRTOS/tasks.c ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4936:../src/FreeRTOS/tasks.c ****                          * because it will automatically get reset to a new value when
4937:../src/FreeRTOS/tasks.c ****                          * the tick count equals xNextTaskUnblockTime.  However if
4938:../src/FreeRTOS/tasks.c ****                          * tickless idling is used it might be more important to enter
4939:../src/FreeRTOS/tasks.c ****                          * sleep mode at the earliest possible time - so reset
4940:../src/FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4941:../src/FreeRTOS/tasks.c ****                          * earliest possible time. */
4942:../src/FreeRTOS/tasks.c ****                         prvResetNextTaskUnblockTime();
4943:../src/FreeRTOS/tasks.c ****                     }
4944:../src/FreeRTOS/tasks.c ****                 #endif
4945:../src/FreeRTOS/tasks.c **** 
4946:../src/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4947:../src/FreeRTOS/tasks.c ****                 {
4948:../src/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
4949:../src/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
4950:../src/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
4951:../src/FreeRTOS/tasks.c ****                 }
4952:../src/FreeRTOS/tasks.c ****                 else
4953:../src/FreeRTOS/tasks.c ****                 {
4954:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4955:../src/FreeRTOS/tasks.c ****                 }
4956:../src/FreeRTOS/tasks.c ****             }
4957:../src/FreeRTOS/tasks.c ****             else
4958:../src/FreeRTOS/tasks.c ****             {
4959:../src/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4960:../src/FreeRTOS/tasks.c ****             }
4961:../src/FreeRTOS/tasks.c ****         }
4962:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4963:../src/FreeRTOS/tasks.c **** 
4964:../src/FreeRTOS/tasks.c ****         return xReturn;
4965:../src/FreeRTOS/tasks.c ****     }
4966:../src/FreeRTOS/tasks.c **** 
4967:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4968:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4969:../src/FreeRTOS/tasks.c **** 
4970:../src/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4971:../src/FreeRTOS/tasks.c **** 
4972:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4973:../src/FreeRTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4974:../src/FreeRTOS/tasks.c ****                                           uint32_t ulValue,
4975:../src/FreeRTOS/tasks.c ****                                           eNotifyAction eAction,
4976:../src/FreeRTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4977:../src/FreeRTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4978:../src/FreeRTOS/tasks.c ****     {
4979:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4980:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4981:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4982:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4983:../src/FreeRTOS/tasks.c **** 
4984:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4985:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4986:../src/FreeRTOS/tasks.c **** 
4987:../src/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4988:../src/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4989:../src/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4990:../src/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4991:../src/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4992:../src/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
4993:../src/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4994:../src/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4995:../src/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
4996:../src/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4997:../src/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4998:../src/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4999:../src/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5000:../src/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5001:../src/FreeRTOS/tasks.c ****          * provided on the following link:
5002:../src/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5003:../src/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5004:../src/FreeRTOS/tasks.c **** 
5005:../src/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5006:../src/FreeRTOS/tasks.c **** 
5007:../src/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5008:../src/FreeRTOS/tasks.c ****         {
5009:../src/FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
5010:../src/FreeRTOS/tasks.c ****             {
5011:../src/FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5012:../src/FreeRTOS/tasks.c ****             }
5013:../src/FreeRTOS/tasks.c **** 
5014:../src/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5015:../src/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5016:../src/FreeRTOS/tasks.c **** 
5017:../src/FreeRTOS/tasks.c ****             switch( eAction )
5018:../src/FreeRTOS/tasks.c ****             {
5019:../src/FreeRTOS/tasks.c ****                 case eSetBits:
5020:../src/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5021:../src/FreeRTOS/tasks.c ****                     break;
5022:../src/FreeRTOS/tasks.c **** 
5023:../src/FreeRTOS/tasks.c ****                 case eIncrement:
5024:../src/FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5025:../src/FreeRTOS/tasks.c ****                     break;
5026:../src/FreeRTOS/tasks.c **** 
5027:../src/FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
5028:../src/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5029:../src/FreeRTOS/tasks.c ****                     break;
5030:../src/FreeRTOS/tasks.c **** 
5031:../src/FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5032:../src/FreeRTOS/tasks.c **** 
5033:../src/FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5034:../src/FreeRTOS/tasks.c ****                     {
5035:../src/FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5036:../src/FreeRTOS/tasks.c ****                     }
5037:../src/FreeRTOS/tasks.c ****                     else
5038:../src/FreeRTOS/tasks.c ****                     {
5039:../src/FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
5040:../src/FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
5041:../src/FreeRTOS/tasks.c ****                     }
5042:../src/FreeRTOS/tasks.c **** 
5043:../src/FreeRTOS/tasks.c ****                     break;
5044:../src/FreeRTOS/tasks.c **** 
5045:../src/FreeRTOS/tasks.c ****                 case eNoAction:
5046:../src/FreeRTOS/tasks.c **** 
5047:../src/FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
5048:../src/FreeRTOS/tasks.c ****                      * updated. */
5049:../src/FreeRTOS/tasks.c ****                     break;
5050:../src/FreeRTOS/tasks.c **** 
5051:../src/FreeRTOS/tasks.c ****                 default:
5052:../src/FreeRTOS/tasks.c **** 
5053:../src/FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5054:../src/FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5055:../src/FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
5056:../src/FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5057:../src/FreeRTOS/tasks.c ****                     break;
5058:../src/FreeRTOS/tasks.c ****             }
5059:../src/FreeRTOS/tasks.c **** 
5060:../src/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5061:../src/FreeRTOS/tasks.c **** 
5062:../src/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5063:../src/FreeRTOS/tasks.c ****              * notification then unblock it now. */
5064:../src/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5065:../src/FreeRTOS/tasks.c ****             {
5066:../src/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5067:../src/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5068:../src/FreeRTOS/tasks.c **** 
5069:../src/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5070:../src/FreeRTOS/tasks.c ****                 {
5071:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5072:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5073:../src/FreeRTOS/tasks.c ****                 }
5074:../src/FreeRTOS/tasks.c ****                 else
5075:../src/FreeRTOS/tasks.c ****                 {
5076:../src/FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5077:../src/FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5078:../src/FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5079:../src/FreeRTOS/tasks.c ****                 }
5080:../src/FreeRTOS/tasks.c **** 
5081:../src/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5082:../src/FreeRTOS/tasks.c ****                 {
5083:../src/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5084:../src/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5085:../src/FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5086:../src/FreeRTOS/tasks.c ****                     {
5087:../src/FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5088:../src/FreeRTOS/tasks.c ****                     }
5089:../src/FreeRTOS/tasks.c **** 
5090:../src/FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5091:../src/FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5092:../src/FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5093:../src/FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
5094:../src/FreeRTOS/tasks.c ****                 }
5095:../src/FreeRTOS/tasks.c ****                 else
5096:../src/FreeRTOS/tasks.c ****                 {
5097:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5098:../src/FreeRTOS/tasks.c ****                 }
5099:../src/FreeRTOS/tasks.c ****             }
5100:../src/FreeRTOS/tasks.c ****         }
5101:../src/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5102:../src/FreeRTOS/tasks.c **** 
5103:../src/FreeRTOS/tasks.c ****         return xReturn;
5104:../src/FreeRTOS/tasks.c ****     }
5105:../src/FreeRTOS/tasks.c **** 
5106:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5107:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5108:../src/FreeRTOS/tasks.c **** 
5109:../src/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5110:../src/FreeRTOS/tasks.c **** 
5111:../src/FreeRTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5112:../src/FreeRTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5113:../src/FreeRTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5114:../src/FreeRTOS/tasks.c ****     {
5115:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5116:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5117:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5118:../src/FreeRTOS/tasks.c **** 
5119:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
5120:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5121:../src/FreeRTOS/tasks.c **** 
5122:../src/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5123:../src/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5124:../src/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5125:../src/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5126:../src/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5127:../src/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5128:../src/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5129:../src/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5130:../src/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5131:../src/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5132:../src/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5133:../src/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5134:../src/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5135:../src/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5136:../src/FreeRTOS/tasks.c ****          * provided on the following link:
5137:../src/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5138:../src/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5139:../src/FreeRTOS/tasks.c **** 
5140:../src/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5141:../src/FreeRTOS/tasks.c **** 
5142:../src/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5143:../src/FreeRTOS/tasks.c ****         {
5144:../src/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5145:../src/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5146:../src/FreeRTOS/tasks.c **** 
5147:../src/FreeRTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5148:../src/FreeRTOS/tasks.c ****              * semaphore. */
5149:../src/FreeRTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5150:../src/FreeRTOS/tasks.c **** 
5151:../src/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5152:../src/FreeRTOS/tasks.c **** 
5153:../src/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5154:../src/FreeRTOS/tasks.c ****              * notification then unblock it now. */
5155:../src/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5156:../src/FreeRTOS/tasks.c ****             {
5157:../src/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5158:../src/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5159:../src/FreeRTOS/tasks.c **** 
5160:../src/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5161:../src/FreeRTOS/tasks.c ****                 {
5162:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5163:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5164:../src/FreeRTOS/tasks.c ****                 }
5165:../src/FreeRTOS/tasks.c ****                 else
5166:../src/FreeRTOS/tasks.c ****                 {
5167:../src/FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5168:../src/FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5169:../src/FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5170:../src/FreeRTOS/tasks.c ****                 }
5171:../src/FreeRTOS/tasks.c **** 
5172:../src/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5173:../src/FreeRTOS/tasks.c ****                 {
5174:../src/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5175:../src/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5176:../src/FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5177:../src/FreeRTOS/tasks.c ****                     {
5178:../src/FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5179:../src/FreeRTOS/tasks.c ****                     }
5180:../src/FreeRTOS/tasks.c **** 
5181:../src/FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5182:../src/FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5183:../src/FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5184:../src/FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
5185:../src/FreeRTOS/tasks.c ****                 }
5186:../src/FreeRTOS/tasks.c ****                 else
5187:../src/FreeRTOS/tasks.c ****                 {
5188:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5189:../src/FreeRTOS/tasks.c ****                 }
5190:../src/FreeRTOS/tasks.c ****             }
5191:../src/FreeRTOS/tasks.c ****         }
5192:../src/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5193:../src/FreeRTOS/tasks.c ****     }
5194:../src/FreeRTOS/tasks.c **** 
5195:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5196:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5197:../src/FreeRTOS/tasks.c **** 
5198:../src/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5199:../src/FreeRTOS/tasks.c **** 
5200:../src/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5201:../src/FreeRTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5202:../src/FreeRTOS/tasks.c ****     {
5203:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5204:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
5205:../src/FreeRTOS/tasks.c **** 
5206:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5207:../src/FreeRTOS/tasks.c **** 
5208:../src/FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5209:../src/FreeRTOS/tasks.c ****          * its notification state cleared. */
5210:../src/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5211:../src/FreeRTOS/tasks.c **** 
5212:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5213:../src/FreeRTOS/tasks.c ****         {
5214:../src/FreeRTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5215:../src/FreeRTOS/tasks.c ****             {
5216:../src/FreeRTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5217:../src/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
5218:../src/FreeRTOS/tasks.c ****             }
5219:../src/FreeRTOS/tasks.c ****             else
5220:../src/FreeRTOS/tasks.c ****             {
5221:../src/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
5222:../src/FreeRTOS/tasks.c ****             }
5223:../src/FreeRTOS/tasks.c ****         }
5224:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5225:../src/FreeRTOS/tasks.c **** 
5226:../src/FreeRTOS/tasks.c ****         return xReturn;
5227:../src/FreeRTOS/tasks.c ****     }
5228:../src/FreeRTOS/tasks.c **** 
5229:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5230:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5231:../src/FreeRTOS/tasks.c **** 
5232:../src/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5233:../src/FreeRTOS/tasks.c **** 
5234:../src/FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5235:../src/FreeRTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
5236:../src/FreeRTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5237:../src/FreeRTOS/tasks.c ****     {
5238:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5239:../src/FreeRTOS/tasks.c ****         uint32_t ulReturn;
5240:../src/FreeRTOS/tasks.c **** 
5241:../src/FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5242:../src/FreeRTOS/tasks.c ****          * its notification state cleared. */
5243:../src/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5244:../src/FreeRTOS/tasks.c **** 
5245:../src/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5246:../src/FreeRTOS/tasks.c ****         {
5247:../src/FreeRTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5248:../src/FreeRTOS/tasks.c ****              * then clear the bit mask. */
5249:../src/FreeRTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5250:../src/FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5251:../src/FreeRTOS/tasks.c ****         }
5252:../src/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5253:../src/FreeRTOS/tasks.c **** 
5254:../src/FreeRTOS/tasks.c ****         return ulReturn;
5255:../src/FreeRTOS/tasks.c ****     }
5256:../src/FreeRTOS/tasks.c **** 
5257:../src/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5258:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5259:../src/FreeRTOS/tasks.c **** 
5260:../src/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5261:../src/FreeRTOS/tasks.c **** 
5262:../src/FreeRTOS/tasks.c ****     uint32_t ulTaskGetIdleRunTimeCounter( void )
5263:../src/FreeRTOS/tasks.c ****     {
5264:../src/FreeRTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5265:../src/FreeRTOS/tasks.c ****     }
5266:../src/FreeRTOS/tasks.c **** 
5267:../src/FreeRTOS/tasks.c **** #endif
5268:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5269:../src/FreeRTOS/tasks.c **** 
5270:../src/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5271:../src/FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5272:../src/FreeRTOS/tasks.c **** {
 787              		.loc 1 5272 1 view -0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		.loc 1 5272 1 is_stmt 0 view .LVU228
 792 0000 70402DE9 		push	{r4, r5, r6, lr}
 793              		.cfi_def_cfa_offset 16
 794              		.cfi_offset 4, -16
 795              		.cfi_offset 5, -12
 796              		.cfi_offset 6, -8
 797              		.cfi_offset 14, -4
 798 0004 0040A0E1 		mov	r4, r0
 799 0008 0150A0E1 		mov	r5, r1
5273:../src/FreeRTOS/tasks.c ****     TickType_t xTimeToWake;
 800              		.loc 1 5273 5 is_stmt 1 view .LVU229
5274:../src/FreeRTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 801              		.loc 1 5274 5 view .LVU230
 802              		.loc 1 5274 22 is_stmt 0 view .LVU231
 803 000c 003000E3 		movw	r3, #:lower16:.LANCHOR15
 804 0010 003040E3 		movt	r3, #:upper16:.LANCHOR15
 805 0014 006093E5 		ldr	r6, [r3]
 806              	.LVL60:
5275:../src/FreeRTOS/tasks.c **** 
5276:../src/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5277:../src/FreeRTOS/tasks.c ****         {
5278:../src/FreeRTOS/tasks.c ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5279:../src/FreeRTOS/tasks.c ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5280:../src/FreeRTOS/tasks.c ****              * when the task leaves the Blocked state. */
5281:../src/FreeRTOS/tasks.c ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
 807              		.loc 1 5281 13 is_stmt 1 view .LVU232
 808              		.loc 1 5281 25 is_stmt 0 view .LVU233
 809 0018 003000E3 		movw	r3, #:lower16:.LANCHOR10
 810 001c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 811 0020 002093E5 		ldr	r2, [r3]
 812              		.loc 1 5281 42 view .LVU234
 813 0024 0010A0E3 		mov	r1, #0
 814              	.LVL61:
 815              		.loc 1 5281 42 view .LVU235
 816 0028 7510C2E5 		strb	r1, [r2, #117]
5282:../src/FreeRTOS/tasks.c ****         }
5283:../src/FreeRTOS/tasks.c ****     #endif
5284:../src/FreeRTOS/tasks.c **** 
5285:../src/FreeRTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5286:../src/FreeRTOS/tasks.c ****      * as the same list item is used for both lists. */
5287:../src/FreeRTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 817              		.loc 1 5287 5 is_stmt 1 view .LVU236
 818              		.loc 1 5287 38 is_stmt 0 view .LVU237
 819 002c 000093E5 		ldr	r0, [r3]
 820              	.LVL62:
 821              		.loc 1 5287 9 view .LVU238
 822 0030 040080E2 		add	r0, r0, #4
 823 0034 FEFFFFEB 		bl	uxListRemove
 824              	.LVL63:
5288:../src/FreeRTOS/tasks.c ****     {
5289:../src/FreeRTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5290:../src/FreeRTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5291:../src/FreeRTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
5292:../src/FreeRTOS/tasks.c ****     }
5293:../src/FreeRTOS/tasks.c ****     else
5294:../src/FreeRTOS/tasks.c ****     {
5295:../src/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 825              		.loc 1 5295 33 is_stmt 1 view .LVU239
5296:../src/FreeRTOS/tasks.c ****     }
5297:../src/FreeRTOS/tasks.c **** 
5298:../src/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5299:../src/FreeRTOS/tasks.c ****         {
5300:../src/FreeRTOS/tasks.c ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 826              		.loc 1 5300 13 view .LVU240
 827              		.loc 1 5300 32 is_stmt 0 view .LVU241
 828 0038 010074E3 		cmn	r4, #1
 829 003c 0030A013 		movne	r3, #0
 830 0040 0130A003 		moveq	r3, #1
 831              		.loc 1 5300 51 view .LVU242
 832 0044 000055E3 		cmp	r5, #0
 833 0048 0310A011 		movne	r1, r3
 834 004c 0010A003 		moveq	r1, #0
 835              		.loc 1 5300 15 view .LVU243
 836 0050 000051E3 		cmp	r1, #0
 837 0054 0F00001A 		bne	.L58
5301:../src/FreeRTOS/tasks.c ****             {
5302:../src/FreeRTOS/tasks.c ****                 /* Add the task to the suspended task list instead of a delayed task
5303:../src/FreeRTOS/tasks.c ****                  * list to ensure it is not woken by a timing event.  It will block
5304:../src/FreeRTOS/tasks.c ****                  * indefinitely. */
5305:../src/FreeRTOS/tasks.c ****                 vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5306:../src/FreeRTOS/tasks.c ****             }
5307:../src/FreeRTOS/tasks.c ****             else
5308:../src/FreeRTOS/tasks.c ****             {
5309:../src/FreeRTOS/tasks.c ****                 /* Calculate the time at which the task should be woken if the event
5310:../src/FreeRTOS/tasks.c ****                  * does not occur.  This may overflow but this doesn't matter, the
5311:../src/FreeRTOS/tasks.c ****                  * kernel will manage it correctly. */
5312:../src/FreeRTOS/tasks.c ****                 xTimeToWake = xConstTickCount + xTicksToWait;
 838              		.loc 1 5312 17 is_stmt 1 view .LVU244
 839              		.loc 1 5312 29 is_stmt 0 view .LVU245
 840 0058 044086E0 		add	r4, r6, r4
 841              	.LVL64:
5313:../src/FreeRTOS/tasks.c **** 
5314:../src/FreeRTOS/tasks.c ****                 /* The list item will be inserted in wake time order. */
5315:../src/FreeRTOS/tasks.c ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 842              		.loc 1 5315 17 is_stmt 1 view .LVU246
 843 005c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 844 0060 003040E3 		movt	r3, #:upper16:.LANCHOR10
 845 0064 003093E5 		ldr	r3, [r3]
 846 0068 044083E5 		str	r4, [r3, #4]
5316:../src/FreeRTOS/tasks.c **** 
5317:../src/FreeRTOS/tasks.c ****                 if( xTimeToWake < xConstTickCount )
 847              		.loc 1 5317 17 view .LVU247
 848              		.loc 1 5317 19 is_stmt 0 view .LVU248
 849 006c 040056E1 		cmp	r6, r4
 850 0070 1000009A 		bls	.L56
5318:../src/FreeRTOS/tasks.c ****                 {
5319:../src/FreeRTOS/tasks.c ****                     /* Wake time has overflowed.  Place this item in the overflow
5320:../src/FreeRTOS/tasks.c ****                      * list. */
5321:../src/FreeRTOS/tasks.c ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 851              		.loc 1 5321 21 is_stmt 1 view .LVU249
 852 0074 003000E3 		movw	r3, #:lower16:.LANCHOR8
 853 0078 003040E3 		movt	r3, #:upper16:.LANCHOR8
 854 007c 000093E5 		ldr	r0, [r3]
 855              		.loc 1 5321 76 is_stmt 0 view .LVU250
 856 0080 003000E3 		movw	r3, #:lower16:.LANCHOR10
 857 0084 003040E3 		movt	r3, #:upper16:.LANCHOR10
 858 0088 001093E5 		ldr	r1, [r3]
 859              		.loc 1 5321 21 view .LVU251
 860 008c 041081E2 		add	r1, r1, #4
 861 0090 FEFFFFEB 		bl	vListInsert
 862              	.LVL65:
 863 0094 7080BDE8 		pop	{r4, r5, r6, pc}
 864              	.LVL66:
 865              	.L58:
5305:../src/FreeRTOS/tasks.c ****             }
 866              		.loc 1 5305 17 is_stmt 1 view .LVU252
5305:../src/FreeRTOS/tasks.c ****             }
 867              		.loc 1 5305 69 is_stmt 0 view .LVU253
 868 0098 003000E3 		movw	r3, #:lower16:.LANCHOR10
 869 009c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 870 00a0 001093E5 		ldr	r1, [r3]
5305:../src/FreeRTOS/tasks.c ****             }
 871              		.loc 1 5305 17 view .LVU254
 872 00a4 041081E2 		add	r1, r1, #4
 873 00a8 000000E3 		movw	r0, #:lower16:.LANCHOR2
 874 00ac 000040E3 		movt	r0, #:upper16:.LANCHOR2
 875 00b0 FEFFFFEB 		bl	vListInsertEnd
 876              	.LVL67:
 877 00b4 7080BDE8 		pop	{r4, r5, r6, pc}
 878              	.LVL68:
 879              	.L56:
5322:../src/FreeRTOS/tasks.c ****                 }
5323:../src/FreeRTOS/tasks.c ****                 else
5324:../src/FreeRTOS/tasks.c ****                 {
5325:../src/FreeRTOS/tasks.c ****                     /* The wake time has not overflowed, so the current block list
5326:../src/FreeRTOS/tasks.c ****                      * is used. */
5327:../src/FreeRTOS/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 880              		.loc 1 5327 21 is_stmt 1 view .LVU255
 881 00b8 003000E3 		movw	r3, #:lower16:.LANCHOR0
 882 00bc 003040E3 		movt	r3, #:upper16:.LANCHOR0
 883 00c0 000093E5 		ldr	r0, [r3]
 884              		.loc 1 5327 68 is_stmt 0 view .LVU256
 885 00c4 003000E3 		movw	r3, #:lower16:.LANCHOR10
 886 00c8 003040E3 		movt	r3, #:upper16:.LANCHOR10
 887 00cc 001093E5 		ldr	r1, [r3]
 888              		.loc 1 5327 21 view .LVU257
 889 00d0 041081E2 		add	r1, r1, #4
 890 00d4 FEFFFFEB 		bl	vListInsert
 891              	.LVL69:
5328:../src/FreeRTOS/tasks.c **** 
5329:../src/FreeRTOS/tasks.c ****                     /* If the task entering the blocked state was placed at the
5330:../src/FreeRTOS/tasks.c ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5331:../src/FreeRTOS/tasks.c ****                      * needs to be updated too. */
5332:../src/FreeRTOS/tasks.c ****                     if( xTimeToWake < xNextTaskUnblockTime )
 892              		.loc 1 5332 21 is_stmt 1 view .LVU258
 893              		.loc 1 5332 37 is_stmt 0 view .LVU259
 894 00d8 003000E3 		movw	r3, #:lower16:.LANCHOR1
 895 00dc 003040E3 		movt	r3, #:upper16:.LANCHOR1
 896 00e0 003093E5 		ldr	r3, [r3]
 897              		.loc 1 5332 23 view .LVU260
 898 00e4 040053E1 		cmp	r3, r4
5333:../src/FreeRTOS/tasks.c ****                     {
5334:../src/FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xTimeToWake;
 899              		.loc 1 5334 25 is_stmt 1 view .LVU261
 900              		.loc 1 5334 46 is_stmt 0 view .LVU262
 901 00e8 00300083 		movwhi	r3, #:lower16:.LANCHOR1
 902 00ec 00304083 		movthi	r3, #:upper16:.LANCHOR1
 903 00f0 00408385 		strhi	r4, [r3]
5335:../src/FreeRTOS/tasks.c ****                     }
5336:../src/FreeRTOS/tasks.c ****                     else
5337:../src/FreeRTOS/tasks.c ****                     {
5338:../src/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
 904              		.loc 1 5338 49 is_stmt 1 view .LVU263
5339:../src/FreeRTOS/tasks.c ****                     }
5340:../src/FreeRTOS/tasks.c ****                 }
5341:../src/FreeRTOS/tasks.c ****             }
5342:../src/FreeRTOS/tasks.c ****         }
5343:../src/FreeRTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5344:../src/FreeRTOS/tasks.c ****         {
5345:../src/FreeRTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5346:../src/FreeRTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5347:../src/FreeRTOS/tasks.c ****              * will manage it correctly. */
5348:../src/FreeRTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5349:../src/FreeRTOS/tasks.c **** 
5350:../src/FreeRTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5351:../src/FreeRTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5352:../src/FreeRTOS/tasks.c **** 
5353:../src/FreeRTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
5354:../src/FreeRTOS/tasks.c ****             {
5355:../src/FreeRTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
5356:../src/FreeRTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5357:../src/FreeRTOS/tasks.c ****             }
5358:../src/FreeRTOS/tasks.c ****             else
5359:../src/FreeRTOS/tasks.c ****             {
5360:../src/FreeRTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list is used. */
5361:../src/FreeRTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5362:../src/FreeRTOS/tasks.c **** 
5363:../src/FreeRTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the head of the
5364:../src/FreeRTOS/tasks.c ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5365:../src/FreeRTOS/tasks.c ****                  * too. */
5366:../src/FreeRTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5367:../src/FreeRTOS/tasks.c ****                 {
5368:../src/FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5369:../src/FreeRTOS/tasks.c ****                 }
5370:../src/FreeRTOS/tasks.c ****                 else
5371:../src/FreeRTOS/tasks.c ****                 {
5372:../src/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5373:../src/FreeRTOS/tasks.c ****                 }
5374:../src/FreeRTOS/tasks.c ****             }
5375:../src/FreeRTOS/tasks.c **** 
5376:../src/FreeRTOS/tasks.c ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5377:../src/FreeRTOS/tasks.c ****             ( void ) xCanBlockIndefinitely;
5378:../src/FreeRTOS/tasks.c ****         }
5379:../src/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5380:../src/FreeRTOS/tasks.c **** }
 905              		.loc 1 5380 1 is_stmt 0 view .LVU264
 906 00f4 7080BDE8 		pop	{r4, r5, r6, pc}
 907              		.cfi_endproc
 908              	.LFE69:
 910              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 911              		.align	2
 912              		.syntax unified
 913              		.arm
 914              		.fpu neon
 916              	prvWriteNameToBuffer:
 917              	.LVL70:
 918              	.LFB57:
4404:../src/FreeRTOS/tasks.c ****         size_t x;
 919              		.loc 1 4404 5 is_stmt 1 view -0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 0
 922              		@ frame_needed = 0, uses_anonymous_args = 0
4404:../src/FreeRTOS/tasks.c ****         size_t x;
 923              		.loc 1 4404 5 is_stmt 0 view .LVU266
 924 0000 10402DE9 		push	{r4, lr}
 925              		.cfi_def_cfa_offset 8
 926              		.cfi_offset 4, -8
 927              		.cfi_offset 14, -4
 928 0004 0040A0E1 		mov	r4, r0
4405:../src/FreeRTOS/tasks.c **** 
 929              		.loc 1 4405 9 is_stmt 1 view .LVU267
4408:../src/FreeRTOS/tasks.c **** 
 930              		.loc 1 4408 9 view .LVU268
 931 0008 FEFFFFEB 		bl	strcpy
 932              	.LVL71:
4412:../src/FreeRTOS/tasks.c ****         {
 933              		.loc 1 4412 9 view .LVU269
4412:../src/FreeRTOS/tasks.c ****         {
 934              		.loc 1 4412 18 is_stmt 0 view .LVU270
 935 000c 0400A0E1 		mov	r0, r4
 936 0010 FEFFFFEB 		bl	strlen
 937              	.LVL72:
 938              	.L60:
4412:../src/FreeRTOS/tasks.c ****         {
 939              		.loc 1 4412 38 is_stmt 1 discriminator 1 view .LVU271
4412:../src/FreeRTOS/tasks.c ****         {
 940              		.loc 1 4412 9 is_stmt 0 discriminator 1 view .LVU272
 941 0014 160050E3 		cmp	r0, #22
4414:../src/FreeRTOS/tasks.c ****         }
 942              		.loc 1 4414 13 is_stmt 1 discriminator 3 view .LVU273
4414:../src/FreeRTOS/tasks.c ****         }
 943              		.loc 1 4414 27 is_stmt 0 discriminator 3 view .LVU274
 944 0018 2030A093 		movls	r3, #32
 945 001c 0030C497 		strbls	r3, [r4, r0]
4412:../src/FreeRTOS/tasks.c ****         {
 946              		.loc 1 4412 86 is_stmt 1 discriminator 3 view .LVU275
4412:../src/FreeRTOS/tasks.c ****         {
 947              		.loc 1 4412 87 is_stmt 0 discriminator 3 view .LVU276
 948 0020 01008092 		addls	r0, r0, #1
 949              	.LVL73:
4412:../src/FreeRTOS/tasks.c ****         {
 950              		.loc 1 4412 87 discriminator 3 view .LVU277
 951 0024 FAFFFF9A 		bls	.L60
 952              	.L63:
4418:../src/FreeRTOS/tasks.c **** 
 953              		.loc 1 4418 9 is_stmt 1 view .LVU278
4418:../src/FreeRTOS/tasks.c **** 
 954              		.loc 1 4418 23 is_stmt 0 view .LVU279
 955 0028 0030A0E3 		mov	r3, #0
 956 002c 0030C4E7 		strb	r3, [r4, r0]
4421:../src/FreeRTOS/tasks.c ****     }
 957              		.loc 1 4421 9 is_stmt 1 view .LVU280
4422:../src/FreeRTOS/tasks.c **** 
 958              		.loc 1 4422 5 is_stmt 0 view .LVU281
 959 0030 000084E0 		add	r0, r4, r0
 960              	.LVL74:
4422:../src/FreeRTOS/tasks.c **** 
 961              		.loc 1 4422 5 view .LVU282
 962 0034 1080BDE8 		pop	{r4, pc}
 963              		.cfi_endproc
 964              	.LFE57:
 966              		.section	.text.xTaskCreate,"ax",%progbits
 967              		.align	2
 968              		.global	xTaskCreate
 969              		.syntax unified
 970              		.arm
 971              		.fpu neon
 973              	xTaskCreate:
 974              	.LVL75:
 975              	.LFB3:
 732:../src/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 976              		.loc 1 732 5 is_stmt 1 view -0
 977              		.cfi_startproc
 978              		@ args = 8, pretend = 0, frame = 0
 979              		@ frame_needed = 0, uses_anonymous_args = 0
 732:../src/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 980              		.loc 1 732 5 is_stmt 0 view .LVU284
 981 0000 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 982              		.cfi_def_cfa_offset 28
 983              		.cfi_offset 4, -28
 984              		.cfi_offset 5, -24
 985              		.cfi_offset 6, -20
 986              		.cfi_offset 7, -16
 987              		.cfi_offset 8, -12
 988              		.cfi_offset 9, -8
 989              		.cfi_offset 14, -4
 990 0004 14D04DE2 		sub	sp, sp, #20
 991              		.cfi_def_cfa_offset 48
 992 0008 0070A0E1 		mov	r7, r0
 993 000c 0180A0E1 		mov	r8, r1
 994 0010 0250A0E1 		mov	r5, r2
 995 0014 0390A0E1 		mov	r9, r3
 733:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 996              		.loc 1 733 9 is_stmt 1 view .LVU285
 734:../src/FreeRTOS/tasks.c **** 
 997              		.loc 1 734 9 view .LVU286
 998              	.LBB3:
 763:../src/FreeRTOS/tasks.c **** 
 999              		.loc 1 763 17 view .LVU287
 766:../src/FreeRTOS/tasks.c **** 
 1000              		.loc 1 766 17 view .LVU288
 766:../src/FreeRTOS/tasks.c **** 
 1001              		.loc 1 766 27 is_stmt 0 view .LVU289
 1002 0018 0201A0E1 		lsl	r0, r2, #2
 1003              	.LVL76:
 766:../src/FreeRTOS/tasks.c **** 
 1004              		.loc 1 766 27 view .LVU290
 1005 001c FEFFFFEB 		bl	pvPortMalloc
 1006              	.LVL77:
 768:../src/FreeRTOS/tasks.c ****                 {
 1007              		.loc 1 768 17 is_stmt 1 view .LVU291
 768:../src/FreeRTOS/tasks.c ****                 {
 1008              		.loc 1 768 19 is_stmt 0 view .LVU292
 1009 0020 004050E2 		subs	r4, r0, #0
 1010 0024 1900000A 		beq	.L68
 771:../src/FreeRTOS/tasks.c **** 
 1011              		.loc 1 771 21 is_stmt 1 view .LVU293
 771:../src/FreeRTOS/tasks.c **** 
 1012              		.loc 1 771 44 is_stmt 0 view .LVU294
 1013 0028 7800A0E3 		mov	r0, #120
 1014              	.LVL78:
 771:../src/FreeRTOS/tasks.c **** 
 1015              		.loc 1 771 44 view .LVU295
 1016 002c FEFFFFEB 		bl	pvPortMalloc
 1017              	.LVL79:
 773:../src/FreeRTOS/tasks.c ****                     {
 1018              		.loc 1 773 21 is_stmt 1 view .LVU296
 773:../src/FreeRTOS/tasks.c ****                     {
 1019              		.loc 1 773 23 is_stmt 0 view .LVU297
 1020 0030 006050E2 		subs	r6, r0, #0
 1021 0034 1200000A 		beq	.L66
 776:../src/FreeRTOS/tasks.c ****                     }
 1022              		.loc 1 776 25 is_stmt 1 view .LVU298
 776:../src/FreeRTOS/tasks.c ****                     }
 1023              		.loc 1 776 43 is_stmt 0 view .LVU299
 1024 0038 304086E5 		str	r4, [r6, #48]
 1025              	.LVL80:
 1026              	.L67:
 776:../src/FreeRTOS/tasks.c ****                     }
 1027              		.loc 1 776 43 view .LVU300
 1028              	.LBE3:
 792:../src/FreeRTOS/tasks.c ****         {
 1029              		.loc 1 792 9 is_stmt 1 view .LVU301
 792:../src/FreeRTOS/tasks.c ****         {
 1030              		.loc 1 792 11 is_stmt 0 view .LVU302
 1031 003c 000056E3 		cmp	r6, #0
 1032 0040 1500000A 		beq	.L69
 802:../src/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 1033              		.loc 1 802 13 is_stmt 1 view .LVU303
 1034 0044 0030A0E3 		mov	r3, #0
 1035 0048 0C308DE5 		str	r3, [sp, #12]
 1036 004c 08608DE5 		str	r6, [sp, #8]
 1037 0050 34309DE5 		ldr	r3, [sp, #52]
 1038 0054 04308DE5 		str	r3, [sp, #4]
 1039 0058 30309DE5 		ldr	r3, [sp, #48]
 1040 005c 00308DE5 		str	r3, [sp]
 1041 0060 0930A0E1 		mov	r3, r9
 1042 0064 0520A0E1 		mov	r2, r5
 1043 0068 0810A0E1 		mov	r1, r8
 1044 006c 0700A0E1 		mov	r0, r7
 1045 0070 FEFFFFEB 		bl	prvInitialiseNewTask
 1046              	.LVL81:
 803:../src/FreeRTOS/tasks.c ****             xReturn = pdPASS;
 1047              		.loc 1 803 13 view .LVU304
 1048 0074 0600A0E1 		mov	r0, r6
 1049 0078 FEFFFFEB 		bl	prvAddNewTaskToReadyList
 1050              	.LVL82:
 804:../src/FreeRTOS/tasks.c ****         }
 1051              		.loc 1 804 13 view .LVU305
 804:../src/FreeRTOS/tasks.c ****         }
 1052              		.loc 1 804 21 is_stmt 0 view .LVU306
 1053 007c 0100A0E3 		mov	r0, #1
 1054 0080 030000EA 		b	.L64
 1055              	.LVL83:
 1056              	.L66:
 1057              	.LBB4:
 782:../src/FreeRTOS/tasks.c ****                     }
 1058              		.loc 1 782 25 is_stmt 1 view .LVU307
 1059 0084 0400A0E1 		mov	r0, r4
 1060              	.LVL84:
 782:../src/FreeRTOS/tasks.c ****                     }
 1061              		.loc 1 782 25 is_stmt 0 view .LVU308
 1062 0088 FEFFFFEB 		bl	vPortFree
 1063              	.LVL85:
 1064 008c EAFFFFEA 		b	.L67
 1065              	.LVL86:
 1066              	.L68:
 782:../src/FreeRTOS/tasks.c ****                     }
 1067              		.loc 1 782 25 view .LVU309
 1068              	.LBE4:
 808:../src/FreeRTOS/tasks.c ****         }
 1069              		.loc 1 808 21 view .LVU310
 1070 0090 0000E0E3 		mvn	r0, #0
 1071              	.LVL87:
 1072              	.L64:
 812:../src/FreeRTOS/tasks.c **** 
 1073              		.loc 1 812 5 view .LVU311
 1074 0094 14D08DE2 		add	sp, sp, #20
 1075              		.cfi_remember_state
 1076              		.cfi_def_cfa_offset 28
 1077              		@ sp needed
 1078 0098 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1079              	.LVL88:
 1080              	.L69:
 1081              		.cfi_restore_state
 808:../src/FreeRTOS/tasks.c ****         }
 1082              		.loc 1 808 21 view .LVU312
 1083 009c 0000E0E3 		mvn	r0, #0
 1084              	.LVL89:
 811:../src/FreeRTOS/tasks.c ****     }
 1085              		.loc 1 811 9 is_stmt 1 view .LVU313
 811:../src/FreeRTOS/tasks.c ****     }
 1086              		.loc 1 811 16 is_stmt 0 view .LVU314
 1087 00a0 FBFFFFEA 		b	.L64
 1088              		.cfi_endproc
 1089              	.LFE3:
 1091              		.section	.text.vTaskDelete,"ax",%progbits
 1092              		.align	2
 1093              		.global	vTaskDelete
 1094              		.syntax unified
 1095              		.arm
 1096              		.fpu neon
 1098              	vTaskDelete:
 1099              	.LVL90:
 1100              	.LFB6:
1155:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1101              		.loc 1 1155 5 is_stmt 1 view -0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
1155:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1105              		.loc 1 1155 5 is_stmt 0 view .LVU316
 1106 0000 70402DE9 		push	{r4, r5, r6, lr}
 1107              		.cfi_def_cfa_offset 16
 1108              		.cfi_offset 4, -16
 1109              		.cfi_offset 5, -12
 1110              		.cfi_offset 6, -8
 1111              		.cfi_offset 14, -4
 1112 0004 0040A0E1 		mov	r4, r0
1156:../src/FreeRTOS/tasks.c **** 
 1113              		.loc 1 1156 9 is_stmt 1 view .LVU317
1158:../src/FreeRTOS/tasks.c ****         {
 1114              		.loc 1 1158 9 view .LVU318
 1115 0008 FEFFFFEB 		bl	vPortEnterCritical
 1116              	.LVL91:
1158:../src/FreeRTOS/tasks.c ****         {
 1117              		.loc 1 1158 29 view .LVU319
1162:../src/FreeRTOS/tasks.c **** 
 1118              		.loc 1 1162 13 view .LVU320
1162:../src/FreeRTOS/tasks.c **** 
 1119              		.loc 1 1162 21 is_stmt 0 view .LVU321
 1120 000c 000054E3 		cmp	r4, #0
 1121 0010 3000000A 		beq	.L80
 1122              	.LVL92:
 1123              	.L72:
1165:../src/FreeRTOS/tasks.c ****             {
 1124              		.loc 1 1165 13 is_stmt 1 discriminator 4 view .LVU322
1165:../src/FreeRTOS/tasks.c ****             {
 1125              		.loc 1 1165 17 is_stmt 0 discriminator 4 view .LVU323
 1126 0014 045084E2 		add	r5, r4, #4
 1127 0018 0500A0E1 		mov	r0, r5
 1128 001c FEFFFFEB 		bl	uxListRemove
 1129              	.LVL93:
1171:../src/FreeRTOS/tasks.c ****             }
 1130              		.loc 1 1171 41 is_stmt 1 discriminator 4 view .LVU324
1175:../src/FreeRTOS/tasks.c ****             {
 1131              		.loc 1 1175 13 discriminator 4 view .LVU325
1175:../src/FreeRTOS/tasks.c ****             {
 1132              		.loc 1 1175 17 is_stmt 0 discriminator 4 view .LVU326
 1133 0020 283094E5 		ldr	r3, [r4, #40]
1175:../src/FreeRTOS/tasks.c ****             {
 1134              		.loc 1 1175 15 discriminator 4 view .LVU327
 1135 0024 000053E3 		cmp	r3, #0
 1136 0028 0100000A 		beq	.L73
1177:../src/FreeRTOS/tasks.c ****             }
 1137              		.loc 1 1177 17 is_stmt 1 view .LVU328
1177:../src/FreeRTOS/tasks.c ****             }
 1138              		.loc 1 1177 26 is_stmt 0 view .LVU329
 1139 002c 180084E2 		add	r0, r4, #24
 1140 0030 FEFFFFEB 		bl	uxListRemove
 1141              	.LVL94:
 1142              	.L73:
1181:../src/FreeRTOS/tasks.c ****             }
 1143              		.loc 1 1181 41 is_stmt 1 view .LVU330
1188:../src/FreeRTOS/tasks.c **** 
 1144              		.loc 1 1188 13 view .LVU331
1188:../src/FreeRTOS/tasks.c **** 
 1145              		.loc 1 1188 25 is_stmt 0 view .LVU332
 1146 0034 003000E3 		movw	r3, #:lower16:.LANCHOR12
 1147 0038 003040E3 		movt	r3, #:upper16:.LANCHOR12
 1148 003c 002093E5 		ldr	r2, [r3]
 1149 0040 012082E2 		add	r2, r2, #1
 1150 0044 002083E5 		str	r2, [r3]
1190:../src/FreeRTOS/tasks.c ****             {
 1151              		.loc 1 1190 13 is_stmt 1 view .LVU333
1190:../src/FreeRTOS/tasks.c ****             {
 1152              		.loc 1 1190 23 is_stmt 0 view .LVU334
 1153 0048 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1154 004c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1155 0050 003093E5 		ldr	r3, [r3]
1190:../src/FreeRTOS/tasks.c ****             {
 1156              		.loc 1 1190 15 view .LVU335
 1157 0054 040053E1 		cmp	r3, r4
 1158 0058 2200000A 		beq	.L81
1217:../src/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
 1159              		.loc 1 1217 17 is_stmt 1 view .LVU336
 1160 005c 003000E3 		movw	r3, #:lower16:.LANCHOR9
 1161 0060 003040E3 		movt	r3, #:upper16:.LANCHOR9
 1162 0064 002093E5 		ldr	r2, [r3]
 1163 0068 012042E2 		sub	r2, r2, #1
 1164 006c 002083E5 		str	r2, [r3]
1218:../src/FreeRTOS/tasks.c **** 
 1165              		.loc 1 1218 42 view .LVU337
1222:../src/FreeRTOS/tasks.c ****             }
 1166              		.loc 1 1222 17 view .LVU338
 1167 0070 FEFFFFEB 		bl	prvResetNextTaskUnblockTime
 1168              	.LVL95:
 1169              	.L75:
1225:../src/FreeRTOS/tasks.c **** 
 1170              		.loc 1 1225 9 view .LVU339
 1171 0074 FEFFFFEB 		bl	vPortExitCritical
 1172              	.LVL96:
1225:../src/FreeRTOS/tasks.c **** 
 1173              		.loc 1 1225 28 view .LVU340
1230:../src/FreeRTOS/tasks.c ****         {
 1174              		.loc 1 1230 9 view .LVU341
1230:../src/FreeRTOS/tasks.c ****         {
 1175              		.loc 1 1230 19 is_stmt 0 view .LVU342
 1176 0078 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1177 007c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1178 0080 003093E5 		ldr	r3, [r3]
1230:../src/FreeRTOS/tasks.c ****         {
 1179              		.loc 1 1230 11 view .LVU343
 1180 0084 040053E1 		cmp	r3, r4
 1181 0088 0100000A 		beq	.L76
1232:../src/FreeRTOS/tasks.c ****         }
 1182              		.loc 1 1232 13 is_stmt 1 view .LVU344
 1183 008c 0400A0E1 		mov	r0, r4
 1184 0090 FEFFFFEB 		bl	prvDeleteTCB
 1185              	.LVL97:
 1186              	.L76:
1237:../src/FreeRTOS/tasks.c ****         {
 1187              		.loc 1 1237 9 view .LVU345
1237:../src/FreeRTOS/tasks.c ****         {
 1188              		.loc 1 1237 31 is_stmt 0 view .LVU346
 1189 0094 003000E3 		movw	r3, #:lower16:.LANCHOR11
 1190 0098 003040E3 		movt	r3, #:upper16:.LANCHOR11
 1191 009c 003093E5 		ldr	r3, [r3]
1237:../src/FreeRTOS/tasks.c ****         {
 1192              		.loc 1 1237 11 view .LVU347
 1193 00a0 000053E3 		cmp	r3, #0
 1194 00a4 7080BD08 		popeq	{r4, r5, r6, pc}
1239:../src/FreeRTOS/tasks.c ****             {
 1195              		.loc 1 1239 13 is_stmt 1 view .LVU348
1239:../src/FreeRTOS/tasks.c ****             {
 1196              		.loc 1 1239 23 is_stmt 0 view .LVU349
 1197 00a8 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1198 00ac 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1199 00b0 003093E5 		ldr	r3, [r3]
1239:../src/FreeRTOS/tasks.c ****             {
 1200              		.loc 1 1239 15 view .LVU350
 1201 00b4 040053E1 		cmp	r3, r4
 1202 00b8 7080BD18 		popne	{r4, r5, r6, pc}
1241:../src/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1203              		.loc 1 1241 17 is_stmt 1 view .LVU351
 1204 00bc 003000E3 		movw	r3, #:lower16:.LANCHOR16
 1205 00c0 003040E3 		movt	r3, #:upper16:.LANCHOR16
 1206 00c4 003093E5 		ldr	r3, [r3]
 1207 00c8 000053E3 		cmp	r3, #0
 1208 00cc 0F00001A 		bne	.L82
 1209              	.L78:
1241:../src/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1210              		.loc 1 1241 58 discriminator 3 view .LVU352
1242:../src/FreeRTOS/tasks.c ****             }
 1211              		.loc 1 1242 17 discriminator 3 view .LVU353
 1212              		.syntax divided
 1213              	@ 1242 "../src/FreeRTOS/tasks.c" 1
 1214 00d0 000000EF 		SWI 0
 1215              	@ 0 "" 2
1242:../src/FreeRTOS/tasks.c ****             }
 1216              		.loc 1 1242 39 discriminator 3 view .LVU354
1246:../src/FreeRTOS/tasks.c ****             }
 1217              		.loc 1 1246 41 discriminator 3 view .LVU355
1249:../src/FreeRTOS/tasks.c **** 
 1218              		.loc 1 1249 5 is_stmt 0 discriminator 3 view .LVU356
 1219              		.arm
 1220              		.syntax unified
 1221 00d4 7080BDE8 		pop	{r4, r5, r6, pc}
 1222              	.LVL98:
 1223              	.L80:
1162:../src/FreeRTOS/tasks.c **** 
 1224              		.loc 1 1162 21 discriminator 1 view .LVU357
 1225 00d8 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1226 00dc 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1227 00e0 004093E5 		ldr	r4, [r3]
 1228              	.LVL99:
1162:../src/FreeRTOS/tasks.c **** 
 1229              		.loc 1 1162 21 discriminator 1 view .LVU358
 1230 00e4 CAFFFFEA 		b	.L72
 1231              	.LVL100:
 1232              	.L81:
1197:../src/FreeRTOS/tasks.c **** 
 1233              		.loc 1 1197 17 is_stmt 1 view .LVU359
 1234 00e8 0510A0E1 		mov	r1, r5
 1235 00ec 000000E3 		movw	r0, #:lower16:.LANCHOR7
 1236 00f0 000040E3 		movt	r0, #:upper16:.LANCHOR7
 1237 00f4 FEFFFFEB 		bl	vListInsertEnd
 1238              	.LVL101:
1202:../src/FreeRTOS/tasks.c **** 
 1239              		.loc 1 1202 17 view .LVU360
 1240 00f8 003000E3 		movw	r3, #:lower16:.LANCHOR14
 1241 00fc 003040E3 		movt	r3, #:upper16:.LANCHOR14
 1242 0100 002093E5 		ldr	r2, [r3]
 1243 0104 012082E2 		add	r2, r2, #1
 1244 0108 002083E5 		str	r2, [r3]
1206:../src/FreeRTOS/tasks.c **** 
 1245              		.loc 1 1206 42 view .LVU361
1213:../src/FreeRTOS/tasks.c ****             }
 1246              		.loc 1 1213 66 view .LVU362
 1247 010c D8FFFFEA 		b	.L75
 1248              	.L82:
1241:../src/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1249              		.loc 1 1241 17 discriminator 1 view .LVU363
 1250 0110 D91400E3 		movw	r1, #1241
 1251 0114 000000E3 		movw	r0, #:lower16:.LC0
 1252 0118 000040E3 		movt	r0, #:upper16:.LC0
 1253 011c FEFFFFEB 		bl	R_OS_AssertCalled
 1254              	.LVL102:
 1255 0120 EAFFFFEA 		b	.L78
 1256              		.cfi_endproc
 1257              	.LFE6:
 1259              		.section	.text.eTaskGetState,"ax",%progbits
 1260              		.align	2
 1261              		.global	eTaskGetState
 1262              		.syntax unified
 1263              		.arm
 1264              		.fpu neon
 1266              	eTaskGetState:
 1267              	.LVL103:
 1268              	.LFB9:
1389:../src/FreeRTOS/tasks.c ****         eTaskState eReturn;
 1269              		.loc 1 1389 5 view -0
 1270              		.cfi_startproc
 1271              		@ args = 0, pretend = 0, frame = 0
 1272              		@ frame_needed = 0, uses_anonymous_args = 0
1389:../src/FreeRTOS/tasks.c ****         eTaskState eReturn;
 1273              		.loc 1 1389 5 is_stmt 0 view .LVU365
 1274 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1275              		.cfi_def_cfa_offset 24
 1276              		.cfi_offset 4, -24
 1277              		.cfi_offset 5, -20
 1278              		.cfi_offset 6, -16
 1279              		.cfi_offset 7, -12
 1280              		.cfi_offset 8, -8
 1281              		.cfi_offset 14, -4
1390:../src/FreeRTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
 1282              		.loc 1 1390 9 is_stmt 1 view .LVU366
1391:../src/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1283              		.loc 1 1391 9 view .LVU367
1392:../src/FreeRTOS/tasks.c **** 
 1284              		.loc 1 1392 9 view .LVU368
 1285              	.LVL104:
1394:../src/FreeRTOS/tasks.c **** 
 1286              		.loc 1 1394 9 view .LVU369
 1287 0004 004050E2 		subs	r4, r0, #0
 1288 0008 1C00000A 		beq	.L96
 1289              	.LVL105:
 1290              	.L84:
1394:../src/FreeRTOS/tasks.c **** 
 1291              		.loc 1 1394 30 discriminator 3 view .LVU370
1396:../src/FreeRTOS/tasks.c ****         {
 1292              		.loc 1 1396 9 discriminator 3 view .LVU371
1396:../src/FreeRTOS/tasks.c ****         {
 1293              		.loc 1 1396 19 is_stmt 0 discriminator 3 view .LVU372
 1294 000c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1295 0010 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1296 0014 003093E5 		ldr	r3, [r3]
1396:../src/FreeRTOS/tasks.c ****         {
 1297              		.loc 1 1396 11 discriminator 3 view .LVU373
 1298 0018 040053E1 		cmp	r3, r4
 1299 001c 2F00000A 		beq	.L89
1403:../src/FreeRTOS/tasks.c ****             {
 1300              		.loc 1 1403 13 is_stmt 1 view .LVU374
 1301 0020 FEFFFFEB 		bl	vPortEnterCritical
 1302              	.LVL106:
1403:../src/FreeRTOS/tasks.c ****             {
 1303              		.loc 1 1403 33 view .LVU375
1405:../src/FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1304              		.loc 1 1405 17 view .LVU376
1405:../src/FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1305              		.loc 1 1405 29 is_stmt 0 view .LVU377
 1306 0024 145094E5 		ldr	r5, [r4, #20]
 1307              	.LVL107:
1406:../src/FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1308              		.loc 1 1406 17 is_stmt 1 view .LVU378
1406:../src/FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1309              		.loc 1 1406 31 is_stmt 0 view .LVU379
 1310 0028 003000E3 		movw	r3, #:lower16:.LANCHOR0
 1311 002c 003040E3 		movt	r3, #:upper16:.LANCHOR0
 1312 0030 007093E5 		ldr	r7, [r3]
 1313              	.LVL108:
1407:../src/FreeRTOS/tasks.c ****             }
 1314              		.loc 1 1407 17 is_stmt 1 view .LVU380
1407:../src/FreeRTOS/tasks.c ****             }
 1315              		.loc 1 1407 41 is_stmt 0 view .LVU381
 1316 0034 003000E3 		movw	r3, #:lower16:.LANCHOR8
 1317 0038 003040E3 		movt	r3, #:upper16:.LANCHOR8
 1318 003c 006093E5 		ldr	r6, [r3]
 1319              	.LVL109:
1409:../src/FreeRTOS/tasks.c **** 
 1320              		.loc 1 1409 13 is_stmt 1 view .LVU382
 1321 0040 FEFFFFEB 		bl	vPortExitCritical
 1322              	.LVL110:
1409:../src/FreeRTOS/tasks.c **** 
 1323              		.loc 1 1409 32 view .LVU383
1411:../src/FreeRTOS/tasks.c ****             {
 1324              		.loc 1 1411 13 view .LVU384
1411:../src/FreeRTOS/tasks.c ****             {
 1325              		.loc 1 1411 15 is_stmt 0 view .LVU385
 1326 0044 060055E1 		cmp	r5, r6
 1327 0048 07005511 		cmpne	r5, r7
 1328 004c 2500000A 		beq	.L90
1419:../src/FreeRTOS/tasks.c ****                 {
 1329              		.loc 1 1419 22 is_stmt 1 view .LVU386
1419:../src/FreeRTOS/tasks.c ****                 {
 1330              		.loc 1 1419 24 is_stmt 0 view .LVU387
 1331 0050 003000E3 		movw	r3, #:lower16:.LANCHOR2
 1332 0054 003040E3 		movt	r3, #:upper16:.LANCHOR2
 1333 0058 030055E1 		cmp	r5, r3
 1334 005c 0C00000A 		beq	.L97
1460:../src/FreeRTOS/tasks.c ****                 {
 1335              		.loc 1 1460 22 is_stmt 1 view .LVU388
1460:../src/FreeRTOS/tasks.c ****                 {
 1336              		.loc 1 1460 24 is_stmt 0 view .LVU389
 1337 0060 003000E3 		movw	r3, #:lower16:.LANCHOR7
 1338 0064 003040E3 		movt	r3, #:upper16:.LANCHOR7
 1339 0068 030055E1 		cmp	r5, r3
 1340 006c 2100000A 		beq	.L93
1460:../src/FreeRTOS/tasks.c ****                 {
 1341              		.loc 1 1460 71 discriminator 1 view .LVU390
 1342 0070 000055E3 		cmp	r5, #0
 1343 0074 1700000A 		beq	.L98
1473:../src/FreeRTOS/tasks.c ****             }
 1344              		.loc 1 1473 25 view .LVU391
 1345 0078 0100A0E3 		mov	r0, #1
 1346              	.LVL111:
1477:../src/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1347              		.loc 1 1477 9 is_stmt 1 view .LVU392
1478:../src/FreeRTOS/tasks.c **** 
 1348              		.loc 1 1478 5 is_stmt 0 view .LVU393
 1349 007c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1350              	.LVL112:
 1351              	.L96:
1394:../src/FreeRTOS/tasks.c **** 
 1352              		.loc 1 1394 9 is_stmt 1 discriminator 1 view .LVU394
 1353 0080 721500E3 		movw	r1, #1394
 1354 0084 000000E3 		movw	r0, #:lower16:.LC0
 1355              	.LVL113:
1394:../src/FreeRTOS/tasks.c **** 
 1356              		.loc 1 1394 9 is_stmt 0 discriminator 1 view .LVU395
 1357 0088 000040E3 		movt	r0, #:upper16:.LC0
 1358 008c FEFFFFEB 		bl	R_OS_AssertCalled
 1359              	.LVL114:
 1360 0090 DDFFFFEA 		b	.L84
 1361              	.LVL115:
 1362              	.L97:
1424:../src/FreeRTOS/tasks.c ****                     {
 1363              		.loc 1 1424 21 is_stmt 1 view .LVU396
1424:../src/FreeRTOS/tasks.c ****                     {
 1364              		.loc 1 1424 25 is_stmt 0 view .LVU397
 1365 0094 283094E5 		ldr	r3, [r4, #40]
1424:../src/FreeRTOS/tasks.c ****                     {
 1366              		.loc 1 1424 23 view .LVU398
 1367 0098 000053E3 		cmp	r3, #0
 1368 009c 0800000A 		beq	.L91
1454:../src/FreeRTOS/tasks.c ****                     }
 1369              		.loc 1 1454 33 view .LVU399
 1370 00a0 0200A0E3 		mov	r0, #2
 1371 00a4 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1372              	.LVL116:
 1373              	.L88:
 1374              	.LBB5:
1439:../src/FreeRTOS/tasks.c ****                                     {
 1375              		.loc 1 1439 37 is_stmt 1 view .LVU400
1439:../src/FreeRTOS/tasks.c ****                                     {
 1376              		.loc 1 1439 61 is_stmt 0 view .LVU401
 1377 00a8 032084E0 		add	r2, r4, r3
 1378 00ac 7420D2E5 		ldrb	r2, [r2, #116]	@ zero_extendqisi2
 1379 00b0 7220EFE6 		uxtb	r2, r2
1439:../src/FreeRTOS/tasks.c ****                                     {
 1380              		.loc 1 1439 39 view .LVU402
 1381 00b4 010052E3 		cmp	r2, #1
 1382 00b8 0C00000A 		beq	.L92
1437:../src/FreeRTOS/tasks.c ****                                 {
 1383              		.loc 1 1437 88 is_stmt 1 discriminator 2 view .LVU403
1437:../src/FreeRTOS/tasks.c ****                                 {
 1384              		.loc 1 1437 89 is_stmt 0 discriminator 2 view .LVU404
 1385 00bc 013083E2 		add	r3, r3, #1
 1386              	.LVL117:
1437:../src/FreeRTOS/tasks.c ****                                 {
 1387              		.loc 1 1437 89 discriminator 2 view .LVU405
 1388 00c0 000000EA 		b	.L87
 1389              	.LVL118:
 1390              	.L91:
1437:../src/FreeRTOS/tasks.c ****                                 {
 1391              		.loc 1 1437 40 view .LVU406
 1392 00c4 0030A0E3 		mov	r3, #0
 1393              	.L87:
 1394              	.LVL119:
1437:../src/FreeRTOS/tasks.c ****                                 {
 1395              		.loc 1 1437 45 is_stmt 1 discriminator 1 view .LVU407
1437:../src/FreeRTOS/tasks.c ****                                 {
 1396              		.loc 1 1437 33 is_stmt 0 discriminator 1 view .LVU408
 1397 00c8 000053E3 		cmp	r3, #0
 1398 00cc F5FFFFDA 		ble	.L88
1435:../src/FreeRTOS/tasks.c **** 
 1399              		.loc 1 1435 41 view .LVU409
 1400 00d0 0300A0E3 		mov	r0, #3
 1401 00d4 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1402              	.LVL120:
 1403              	.L98:
1435:../src/FreeRTOS/tasks.c **** 
 1404              		.loc 1 1435 41 view .LVU410
 1405              	.LBE5:
1465:../src/FreeRTOS/tasks.c ****                 }
 1406              		.loc 1 1465 29 view .LVU411
 1407 00d8 0400A0E3 		mov	r0, #4
 1408 00dc F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1409              	.LVL121:
 1410              	.L89:
1399:../src/FreeRTOS/tasks.c ****         }
 1411              		.loc 1 1399 21 view .LVU412
 1412 00e0 0000A0E3 		mov	r0, #0
 1413 00e4 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1414              	.LVL122:
 1415              	.L90:
1415:../src/FreeRTOS/tasks.c ****             }
 1416              		.loc 1 1415 25 view .LVU413
 1417 00e8 0200A0E3 		mov	r0, #2
 1418 00ec F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1419              	.LVL123:
 1420              	.L92:
 1421              	.LBB6:
1441:../src/FreeRTOS/tasks.c ****                                         break;
 1422              		.loc 1 1441 49 view .LVU414
 1423 00f0 0200A0E3 		mov	r0, #2
 1424 00f4 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1425              	.LVL124:
 1426              	.L93:
1441:../src/FreeRTOS/tasks.c ****                                         break;
 1427              		.loc 1 1441 49 view .LVU415
 1428              	.LBE6:
1465:../src/FreeRTOS/tasks.c ****                 }
 1429              		.loc 1 1465 29 view .LVU416
 1430 00f8 0400A0E3 		mov	r0, #4
 1431 00fc F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1432              		.cfi_endproc
 1433              	.LFE9:
 1435              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1436              		.align	2
 1437              		.global	uxTaskPriorityGet
 1438              		.syntax unified
 1439              		.arm
 1440              		.fpu neon
 1442              	uxTaskPriorityGet:
 1443              	.LVL125:
 1444              	.LFB10:
1486:../src/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1445              		.loc 1 1486 5 is_stmt 1 view -0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
1486:../src/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1449              		.loc 1 1486 5 is_stmt 0 view .LVU418
 1450 0000 10402DE9 		push	{r4, lr}
 1451              		.cfi_def_cfa_offset 8
 1452              		.cfi_offset 4, -8
 1453              		.cfi_offset 14, -4
 1454 0004 0040A0E1 		mov	r4, r0
1487:../src/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 1455              		.loc 1 1487 9 is_stmt 1 view .LVU419
1488:../src/FreeRTOS/tasks.c **** 
 1456              		.loc 1 1488 9 view .LVU420
1490:../src/FreeRTOS/tasks.c ****         {
 1457              		.loc 1 1490 9 view .LVU421
 1458 0008 FEFFFFEB 		bl	vPortEnterCritical
 1459              	.LVL126:
1490:../src/FreeRTOS/tasks.c ****         {
 1460              		.loc 1 1490 29 view .LVU422
1494:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1461              		.loc 1 1494 13 view .LVU423
1494:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1462              		.loc 1 1494 21 is_stmt 0 view .LVU424
 1463 000c 000054E3 		cmp	r4, #0
 1464 0010 0300000A 		beq	.L102
 1465              	.LVL127:
 1466              	.L100:
1495:../src/FreeRTOS/tasks.c ****         }
 1467              		.loc 1 1495 13 is_stmt 1 discriminator 4 view .LVU425
1495:../src/FreeRTOS/tasks.c ****         }
 1468              		.loc 1 1495 22 is_stmt 0 discriminator 4 view .LVU426
 1469 0014 2C4094E5 		ldr	r4, [r4, #44]
 1470              	.LVL128:
1497:../src/FreeRTOS/tasks.c **** 
 1471              		.loc 1 1497 9 is_stmt 1 discriminator 4 view .LVU427
 1472 0018 FEFFFFEB 		bl	vPortExitCritical
 1473              	.LVL129:
1497:../src/FreeRTOS/tasks.c **** 
 1474              		.loc 1 1497 28 discriminator 4 view .LVU428
1499:../src/FreeRTOS/tasks.c ****     }
 1475              		.loc 1 1499 9 discriminator 4 view .LVU429
1500:../src/FreeRTOS/tasks.c **** 
 1476              		.loc 1 1500 5 is_stmt 0 discriminator 4 view .LVU430
 1477 001c 0400A0E1 		mov	r0, r4
 1478 0020 1080BDE8 		pop	{r4, pc}
 1479              	.LVL130:
 1480              	.L102:
1494:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1481              		.loc 1 1494 21 discriminator 1 view .LVU431
 1482 0024 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1483 0028 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1484 002c 004093E5 		ldr	r4, [r3]
 1485              	.LVL131:
1494:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1486              		.loc 1 1494 21 discriminator 1 view .LVU432
 1487 0030 F7FFFFEA 		b	.L100
 1488              		.cfi_endproc
 1489              	.LFE10:
 1491              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1492              		.align	2
 1493              		.global	uxTaskPriorityGetFromISR
 1494              		.syntax unified
 1495              		.arm
 1496              		.fpu neon
 1498              	uxTaskPriorityGetFromISR:
 1499              	.LVL132:
 1500              	.LFB11:
1508:../src/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1501              		.loc 1 1508 5 is_stmt 1 view -0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 0
 1504              		@ frame_needed = 0, uses_anonymous_args = 0
1508:../src/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1505              		.loc 1 1508 5 is_stmt 0 view .LVU434
 1506 0000 10402DE9 		push	{r4, lr}
 1507              		.cfi_def_cfa_offset 8
 1508              		.cfi_offset 4, -8
 1509              		.cfi_offset 14, -4
 1510 0004 0040A0E1 		mov	r4, r0
1509:../src/FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
 1511              		.loc 1 1509 9 is_stmt 1 view .LVU435
1510:../src/FreeRTOS/tasks.c **** 
 1512              		.loc 1 1510 9 view .LVU436
1528:../src/FreeRTOS/tasks.c **** 
 1513              		.loc 1 1528 9 view .LVU437
 1514 0008 FEFFFFEB 		bl	vPortValidateInterruptPriority
 1515              	.LVL133:
1530:../src/FreeRTOS/tasks.c ****         {
 1516              		.loc 1 1530 9 view .LVU438
1530:../src/FreeRTOS/tasks.c ****         {
 1517              		.loc 1 1530 33 is_stmt 0 view .LVU439
 1518 000c FEFFFFEB 		bl	ulPortSetInterruptMask
 1519              	.LVL134:
1534:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1520              		.loc 1 1534 13 is_stmt 1 view .LVU440
1534:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1521              		.loc 1 1534 21 is_stmt 0 view .LVU441
 1522 0010 000054E3 		cmp	r4, #0
 1523 0014 0300000A 		beq	.L106
 1524              	.LVL135:
 1525              	.L104:
1535:../src/FreeRTOS/tasks.c ****         }
 1526              		.loc 1 1535 13 is_stmt 1 discriminator 4 view .LVU442
1535:../src/FreeRTOS/tasks.c ****         }
 1527              		.loc 1 1535 22 is_stmt 0 discriminator 4 view .LVU443
 1528 0018 2C4094E5 		ldr	r4, [r4, #44]
 1529              	.LVL136:
1537:../src/FreeRTOS/tasks.c **** 
 1530              		.loc 1 1537 9 is_stmt 1 discriminator 4 view .LVU444
 1531 001c FEFFFFEB 		bl	vPortClearInterruptMask
 1532              	.LVL137:
1539:../src/FreeRTOS/tasks.c ****     }
 1533              		.loc 1 1539 9 discriminator 4 view .LVU445
1540:../src/FreeRTOS/tasks.c **** 
 1534              		.loc 1 1540 5 is_stmt 0 discriminator 4 view .LVU446
 1535 0020 0400A0E1 		mov	r0, r4
 1536 0024 1080BDE8 		pop	{r4, pc}
 1537              	.LVL138:
 1538              	.L106:
1534:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1539              		.loc 1 1534 21 discriminator 1 view .LVU447
 1540 0028 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1541 002c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1542 0030 004093E5 		ldr	r4, [r3]
 1543              	.LVL139:
1534:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1544              		.loc 1 1534 21 discriminator 1 view .LVU448
 1545 0034 F7FFFFEA 		b	.L104
 1546              		.cfi_endproc
 1547              	.LFE11:
 1549              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1550              		.align	2
 1551              		.global	vTaskPrioritySet
 1552              		.syntax unified
 1553              		.arm
 1554              		.fpu neon
 1556              	vTaskPrioritySet:
 1557              	.LVL140:
 1558              	.LFB12:
1549:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1559              		.loc 1 1549 5 is_stmt 1 view -0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 0, uses_anonymous_args = 0
1549:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1563              		.loc 1 1549 5 is_stmt 0 view .LVU450
 1564 0000 70402DE9 		push	{r4, r5, r6, lr}
 1565              		.cfi_def_cfa_offset 16
 1566              		.cfi_offset 4, -16
 1567              		.cfi_offset 5, -12
 1568              		.cfi_offset 6, -8
 1569              		.cfi_offset 14, -4
 1570 0004 0040A0E1 		mov	r4, r0
 1571 0008 0150A0E1 		mov	r5, r1
1550:../src/FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1572              		.loc 1 1550 9 is_stmt 1 view .LVU451
1551:../src/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1573              		.loc 1 1551 9 view .LVU452
1552:../src/FreeRTOS/tasks.c **** 
 1574              		.loc 1 1552 9 view .LVU453
 1575              	.LVL141:
1554:../src/FreeRTOS/tasks.c **** 
 1576              		.loc 1 1554 9 view .LVU454
 1577 000c 130051E3 		cmp	r1, #19
 1578 0010 1500008A 		bhi	.L123
 1579              	.LVL142:
 1580              	.L108:
1554:../src/FreeRTOS/tasks.c **** 
 1581              		.loc 1 1554 65 discriminator 3 view .LVU455
1557:../src/FreeRTOS/tasks.c ****         {
 1582              		.loc 1 1557 9 discriminator 3 view .LVU456
1557:../src/FreeRTOS/tasks.c ****         {
 1583              		.loc 1 1557 11 is_stmt 0 discriminator 3 view .LVU457
 1584 0014 130055E3 		cmp	r5, #19
1559:../src/FreeRTOS/tasks.c ****         }
 1585              		.loc 1 1559 27 view .LVU458
 1586 0018 1350A083 		movhi	r5, #19
 1587              	.LVL143:
 1588              	.L109:
1563:../src/FreeRTOS/tasks.c ****         }
 1589              		.loc 1 1563 37 is_stmt 1 view .LVU459
1566:../src/FreeRTOS/tasks.c ****         {
 1590              		.loc 1 1566 9 view .LVU460
 1591 001c FEFFFFEB 		bl	vPortEnterCritical
 1592              	.LVL144:
1566:../src/FreeRTOS/tasks.c ****         {
 1593              		.loc 1 1566 29 view .LVU461
1570:../src/FreeRTOS/tasks.c **** 
 1594              		.loc 1 1570 13 view .LVU462
1570:../src/FreeRTOS/tasks.c **** 
 1595              		.loc 1 1570 21 is_stmt 0 view .LVU463
 1596 0020 000054E3 		cmp	r4, #0
 1597 0024 1500000A 		beq	.L124
 1598              	.LVL145:
 1599              	.L110:
1572:../src/FreeRTOS/tasks.c **** 
 1600              		.loc 1 1572 59 is_stmt 1 discriminator 4 view .LVU464
1576:../src/FreeRTOS/tasks.c ****                 }
 1601              		.loc 1 1576 21 discriminator 4 view .LVU465
1576:../src/FreeRTOS/tasks.c ****                 }
 1602              		.loc 1 1576 43 is_stmt 0 discriminator 4 view .LVU466
 1603 0028 583094E5 		ldr	r3, [r4, #88]
 1604              	.LVL146:
1584:../src/FreeRTOS/tasks.c ****             {
 1605              		.loc 1 1584 13 is_stmt 1 discriminator 4 view .LVU467
1584:../src/FreeRTOS/tasks.c ****             {
 1606              		.loc 1 1584 15 is_stmt 0 discriminator 4 view .LVU468
 1607 002c 030055E1 		cmp	r5, r3
 1608 0030 2E00000A 		beq	.L111
1588:../src/FreeRTOS/tasks.c ****                 {
 1609              		.loc 1 1588 17 is_stmt 1 view .LVU469
1588:../src/FreeRTOS/tasks.c ****                 {
 1610              		.loc 1 1588 19 is_stmt 0 view .LVU470
 1611 0034 1500009A 		bls	.L112
1590:../src/FreeRTOS/tasks.c ****                     {
 1612              		.loc 1 1590 21 is_stmt 1 view .LVU471
1590:../src/FreeRTOS/tasks.c ****                     {
 1613              		.loc 1 1590 31 is_stmt 0 view .LVU472
 1614 0038 002000E3 		movw	r2, #:lower16:.LANCHOR10
 1615 003c 002040E3 		movt	r2, #:upper16:.LANCHOR10
 1616 0040 002092E5 		ldr	r2, [r2]
1590:../src/FreeRTOS/tasks.c ****                     {
 1617              		.loc 1 1590 23 view .LVU473
 1618 0044 040052E1 		cmp	r2, r4
 1619 0048 2A00000A 		beq	.L119
1595:../src/FreeRTOS/tasks.c ****                         {
 1620              		.loc 1 1595 25 is_stmt 1 view .LVU474
1595:../src/FreeRTOS/tasks.c ****                         {
 1621              		.loc 1 1595 58 is_stmt 0 view .LVU475
 1622 004c 002000E3 		movw	r2, #:lower16:.LANCHOR10
 1623 0050 002040E3 		movt	r2, #:upper16:.LANCHOR10
 1624 0054 002092E5 		ldr	r2, [r2]
 1625 0058 2C2092E5 		ldr	r2, [r2, #44]
1595:../src/FreeRTOS/tasks.c ****                         {
 1626              		.loc 1 1595 27 view .LVU476
 1627 005c 050052E1 		cmp	r2, r5
 1628 0060 2600009A 		bls	.L120
1552:../src/FreeRTOS/tasks.c **** 
 1629              		.loc 1 1552 20 view .LVU477
 1630 0064 0060A0E3 		mov	r6, #0
 1631 0068 0E0000EA 		b	.L113
 1632              	.LVL147:
 1633              	.L123:
1554:../src/FreeRTOS/tasks.c **** 
 1634              		.loc 1 1554 9 is_stmt 1 discriminator 1 view .LVU478
 1635 006c 121600E3 		movw	r1, #1554
 1636              	.LVL148:
1554:../src/FreeRTOS/tasks.c **** 
 1637              		.loc 1 1554 9 is_stmt 0 discriminator 1 view .LVU479
 1638 0070 000000E3 		movw	r0, #:lower16:.LC0
 1639              	.LVL149:
1554:../src/FreeRTOS/tasks.c **** 
 1640              		.loc 1 1554 9 discriminator 1 view .LVU480
 1641 0074 000040E3 		movt	r0, #:upper16:.LC0
 1642 0078 FEFFFFEB 		bl	R_OS_AssertCalled
 1643              	.LVL150:
 1644 007c E4FFFFEA 		b	.L108
 1645              	.L124:
1570:../src/FreeRTOS/tasks.c **** 
 1646              		.loc 1 1570 21 discriminator 1 view .LVU481
 1647 0080 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1648 0084 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1649 0088 004093E5 		ldr	r4, [r3]
 1650              	.LVL151:
1570:../src/FreeRTOS/tasks.c **** 
 1651              		.loc 1 1570 21 discriminator 1 view .LVU482
 1652 008c E5FFFFEA 		b	.L110
 1653              	.LVL152:
 1654              	.L112:
1611:../src/FreeRTOS/tasks.c ****                 {
 1655              		.loc 1 1611 22 is_stmt 1 view .LVU483
1611:../src/FreeRTOS/tasks.c ****                 {
 1656              		.loc 1 1611 32 is_stmt 0 view .LVU484
 1657 0090 002000E3 		movw	r2, #:lower16:.LANCHOR10
 1658 0094 002040E3 		movt	r2, #:upper16:.LANCHOR10
 1659 0098 002092E5 		ldr	r2, [r2]
1611:../src/FreeRTOS/tasks.c ****                 {
 1660              		.loc 1 1611 24 view .LVU485
 1661 009c 040052E1 		cmp	r2, r4
 1662 00a0 1800000A 		beq	.L121
1552:../src/FreeRTOS/tasks.c **** 
 1663              		.loc 1 1552 20 view .LVU486
 1664 00a4 0060A0E3 		mov	r6, #0
 1665              	.L113:
 1666              	.LVL153:
1623:../src/FreeRTOS/tasks.c **** 
 1667              		.loc 1 1623 17 is_stmt 1 view .LVU487
1628:../src/FreeRTOS/tasks.c **** 
 1668              		.loc 1 1628 17 view .LVU488
1628:../src/FreeRTOS/tasks.c **** 
 1669              		.loc 1 1628 39 is_stmt 0 view .LVU489
 1670 00a8 2C2094E5 		ldr	r2, [r4, #44]
 1671              	.LVL154:
1634:../src/FreeRTOS/tasks.c ****                         {
 1672              		.loc 1 1634 25 is_stmt 1 view .LVU490
1634:../src/FreeRTOS/tasks.c ****                         {
 1673              		.loc 1 1634 27 is_stmt 0 view .LVU491
 1674 00ac 020053E1 		cmp	r3, r2
 1675 00b0 1600000A 		beq	.L125
 1676              	.L114:
1640:../src/FreeRTOS/tasks.c ****                         }
 1677              		.loc 1 1640 53 is_stmt 1 view .LVU492
1644:../src/FreeRTOS/tasks.c ****                     }
 1678              		.loc 1 1644 25 view .LVU493
1644:../src/FreeRTOS/tasks.c ****                     }
 1679              		.loc 1 1644 47 is_stmt 0 view .LVU494
 1680 00b4 585084E5 		str	r5, [r4, #88]
1654:../src/FreeRTOS/tasks.c ****                 {
 1681              		.loc 1 1654 17 is_stmt 1 view .LVU495
1654:../src/FreeRTOS/tasks.c ****                 {
 1682              		.loc 1 1654 23 is_stmt 0 view .LVU496
 1683 00b8 183094E5 		ldr	r3, [r4, #24]
 1684              	.LVL155:
1654:../src/FreeRTOS/tasks.c ****                 {
 1685              		.loc 1 1654 19 view .LVU497
 1686 00bc 000053E3 		cmp	r3, #0
1656:../src/FreeRTOS/tasks.c ****                 }
 1687              		.loc 1 1656 21 is_stmt 1 view .LVU498
 1688 00c0 145065A2 		rsbge	r5, r5, #20
 1689              	.LVL156:
1656:../src/FreeRTOS/tasks.c ****                 }
 1690              		.loc 1 1656 21 is_stmt 0 view .LVU499
 1691 00c4 185084A5 		strge	r5, [r4, #24]
 1692              	.L115:
1660:../src/FreeRTOS/tasks.c ****                 }
 1693              		.loc 1 1660 45 is_stmt 1 view .LVU500
1667:../src/FreeRTOS/tasks.c ****                 {
 1694              		.loc 1 1667 17 view .LVU501
1667:../src/FreeRTOS/tasks.c ****                 {
 1695              		.loc 1 1667 21 is_stmt 0 view .LVU502
 1696 00c8 141094E5 		ldr	r1, [r4, #20]
 1697 00cc 003000E3 		movw	r3, #:lower16:.LANCHOR4
 1698 00d0 003040E3 		movt	r3, #:upper16:.LANCHOR4
 1699 00d4 022182E0 		add	r2, r2, r2, lsl #2
 1700              	.LVL157:
1667:../src/FreeRTOS/tasks.c ****                 {
 1701              		.loc 1 1667 21 view .LVU503
 1702 00d8 023183E0 		add	r3, r3, r2, lsl #2
1667:../src/FreeRTOS/tasks.c ****                 {
 1703              		.loc 1 1667 19 view .LVU504
 1704 00dc 030051E1 		cmp	r1, r3
 1705 00e0 0C00000A 		beq	.L126
 1706              	.LVL158:
 1707              	.L116:
1688:../src/FreeRTOS/tasks.c ****                 }
 1708              		.loc 1 1688 45 is_stmt 1 view .LVU505
1691:../src/FreeRTOS/tasks.c ****                 {
 1709              		.loc 1 1691 17 view .LVU506
1691:../src/FreeRTOS/tasks.c ****                 {
 1710              		.loc 1 1691 19 is_stmt 0 view .LVU507
 1711 00e4 000056E3 		cmp	r6, #0
 1712 00e8 0000000A 		beq	.L111
1693:../src/FreeRTOS/tasks.c ****                 }
 1713              		.loc 1 1693 21 is_stmt 1 view .LVU508
 1714              		.syntax divided
 1715              	@ 1693 "../src/FreeRTOS/tasks.c" 1
 1716 00ec 000000EF 		SWI 0
 1717              	@ 0 "" 2
1693:../src/FreeRTOS/tasks.c ****                 }
 1718              		.loc 1 1693 52 view .LVU509
 1719              	.LVL159:
 1720              		.arm
 1721              		.syntax unified
 1722              	.L111:
1697:../src/FreeRTOS/tasks.c ****                 }
 1723              		.loc 1 1697 45 view .LVU510
1702:../src/FreeRTOS/tasks.c ****             }
 1724              		.loc 1 1702 17 view .LVU511
1705:../src/FreeRTOS/tasks.c ****     }
 1725              		.loc 1 1705 9 view .LVU512
 1726 00f0 FEFFFFEB 		bl	vPortExitCritical
 1727              	.LVL160:
1705:../src/FreeRTOS/tasks.c ****     }
 1728              		.loc 1 1705 28 view .LVU513
1706:../src/FreeRTOS/tasks.c **** 
 1729              		.loc 1 1706 5 is_stmt 0 view .LVU514
 1730 00f4 7080BDE8 		pop	{r4, r5, r6, pc}
 1731              	.LVL161:
 1732              	.L119:
1552:../src/FreeRTOS/tasks.c **** 
 1733              		.loc 1 1552 20 view .LVU515
 1734 00f8 0060A0E3 		mov	r6, #0
 1735 00fc E9FFFFEA 		b	.L113
 1736              	.L120:
1597:../src/FreeRTOS/tasks.c ****                         }
 1737              		.loc 1 1597 44 view .LVU516
 1738 0100 0160A0E3 		mov	r6, #1
 1739 0104 E7FFFFEA 		b	.L113
 1740              	.L121:
1616:../src/FreeRTOS/tasks.c ****                 }
 1741              		.loc 1 1616 36 view .LVU517
 1742 0108 0160A0E3 		mov	r6, #1
 1743 010c E5FFFFEA 		b	.L113
 1744              	.LVL162:
 1745              	.L125:
1636:../src/FreeRTOS/tasks.c ****                         }
 1746              		.loc 1 1636 29 is_stmt 1 view .LVU518
1636:../src/FreeRTOS/tasks.c ****                         }
 1747              		.loc 1 1636 47 is_stmt 0 view .LVU519
 1748 0110 2C5084E5 		str	r5, [r4, #44]
 1749 0114 E6FFFFEA 		b	.L114
 1750              	.LVL163:
 1751              	.L126:
1672:../src/FreeRTOS/tasks.c ****                     {
 1752              		.loc 1 1672 21 is_stmt 1 view .LVU520
1672:../src/FreeRTOS/tasks.c ****                     {
 1753              		.loc 1 1672 25 is_stmt 0 view .LVU521
 1754 0118 045084E2 		add	r5, r4, #4
 1755 011c 0500A0E1 		mov	r0, r5
 1756 0120 FEFFFFEB 		bl	uxListRemove
 1757              	.LVL164:
1681:../src/FreeRTOS/tasks.c ****                     }
 1758              		.loc 1 1681 49 is_stmt 1 view .LVU522
1684:../src/FreeRTOS/tasks.c ****                 }
 1759              		.loc 1 1684 21 view .LVU523
1684:../src/FreeRTOS/tasks.c ****                 }
 1760              		.loc 1 1684 21 view .LVU524
 1761 0124 2C3094E5 		ldr	r3, [r4, #44]
 1762 0128 002000E3 		movw	r2, #:lower16:.LANCHOR13
 1763 012c 002040E3 		movt	r2, #:upper16:.LANCHOR13
 1764 0130 002092E5 		ldr	r2, [r2]
 1765 0134 020053E1 		cmp	r3, r2
1684:../src/FreeRTOS/tasks.c ****                 }
 1766              		.loc 1 1684 21 discriminator 1 view .LVU525
 1767 0138 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 1768 013c 00204083 		movthi	r2, #:upper16:.LANCHOR13
 1769 0140 00308285 		strhi	r3, [r2]
 1770              	.L117:
1684:../src/FreeRTOS/tasks.c ****                 }
 1771              		.loc 1 1684 21 discriminator 3 view .LVU526
1684:../src/FreeRTOS/tasks.c ****                 }
 1772              		.loc 1 1684 21 discriminator 3 view .LVU527
 1773 0144 000000E3 		movw	r0, #:lower16:.LANCHOR4
 1774 0148 000040E3 		movt	r0, #:upper16:.LANCHOR4
 1775 014c 033183E0 		add	r3, r3, r3, lsl #2
 1776 0150 0510A0E1 		mov	r1, r5
 1777 0154 030180E0 		add	r0, r0, r3, lsl #2
 1778 0158 FEFFFFEB 		bl	vListInsertEnd
 1779              	.LVL165:
1684:../src/FreeRTOS/tasks.c ****                 }
 1780              		.loc 1 1684 51 discriminator 3 view .LVU528
 1781 015c E0FFFFEA 		b	.L116
 1782              		.cfi_endproc
 1783              	.LFE12:
 1785              		.section	.text.vTaskResume,"ax",%progbits
 1786              		.align	2
 1787              		.global	vTaskResume
 1788              		.syntax unified
 1789              		.arm
 1790              		.fpu neon
 1792              	vTaskResume:
 1793              	.LVL166:
 1794              	.LFB15:
1866:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1795              		.loc 1 1866 5 view -0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 0
 1798              		@ frame_needed = 0, uses_anonymous_args = 0
1866:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1799              		.loc 1 1866 5 is_stmt 0 view .LVU530
 1800 0000 70402DE9 		push	{r4, r5, r6, lr}
 1801              		.cfi_def_cfa_offset 16
 1802              		.cfi_offset 4, -16
 1803              		.cfi_offset 5, -12
 1804              		.cfi_offset 6, -8
 1805              		.cfi_offset 14, -4
1867:../src/FreeRTOS/tasks.c **** 
 1806              		.loc 1 1867 9 is_stmt 1 view .LVU531
 1807              	.LVL167:
1870:../src/FreeRTOS/tasks.c **** 
 1808              		.loc 1 1870 9 view .LVU532
 1809 0004 004050E2 		subs	r4, r0, #0
 1810 0008 0D00000A 		beq	.L133
 1811              	.LVL168:
 1812              	.L128:
1870:../src/FreeRTOS/tasks.c **** 
 1813              		.loc 1 1870 38 discriminator 3 view .LVU533
1874:../src/FreeRTOS/tasks.c ****         {
 1814              		.loc 1 1874 9 discriminator 3 view .LVU534
1874:../src/FreeRTOS/tasks.c ****         {
 1815              		.loc 1 1874 21 is_stmt 0 discriminator 3 view .LVU535
 1816 000c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1817 0010 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1818 0014 003093E5 		ldr	r3, [r3]
1874:../src/FreeRTOS/tasks.c ****         {
 1819              		.loc 1 1874 11 discriminator 3 view .LVU536
 1820 0018 040053E1 		cmp	r3, r4
 1821 001c 7080BD08 		popeq	{r4, r5, r6, pc}
1874:../src/FreeRTOS/tasks.c ****         {
 1822              		.loc 1 1874 39 discriminator 1 view .LVU537
 1823 0020 000054E3 		cmp	r4, #0
 1824 0024 7080BD08 		popeq	{r4, r5, r6, pc}
1876:../src/FreeRTOS/tasks.c ****             {
 1825              		.loc 1 1876 13 is_stmt 1 view .LVU538
 1826 0028 FEFFFFEB 		bl	vPortEnterCritical
 1827              	.LVL169:
1876:../src/FreeRTOS/tasks.c ****             {
 1828              		.loc 1 1876 33 view .LVU539
1878:../src/FreeRTOS/tasks.c ****                 {
 1829              		.loc 1 1878 17 view .LVU540
1878:../src/FreeRTOS/tasks.c ****                 {
 1830              		.loc 1 1878 21 is_stmt 0 view .LVU541
 1831 002c 0400A0E1 		mov	r0, r4
 1832 0030 FEFFFFEB 		bl	prvTaskIsTaskSuspended
 1833              	.LVL170:
1878:../src/FreeRTOS/tasks.c ****                 {
 1834              		.loc 1 1878 19 view .LVU542
 1835 0034 000050E3 		cmp	r0, #0
 1836 0038 0600001A 		bne	.L134
 1837              	.L130:
1902:../src/FreeRTOS/tasks.c ****                 }
 1838              		.loc 1 1902 45 is_stmt 1 view .LVU543
1905:../src/FreeRTOS/tasks.c ****         }
 1839              		.loc 1 1905 13 view .LVU544
 1840 003c FEFFFFEB 		bl	vPortExitCritical
 1841              	.LVL171:
1905:../src/FreeRTOS/tasks.c ****         }
 1842              		.loc 1 1905 32 view .LVU545
1909:../src/FreeRTOS/tasks.c ****         }
 1843              		.loc 1 1909 37 view .LVU546
1911:../src/FreeRTOS/tasks.c **** 
 1844              		.loc 1 1911 5 is_stmt 0 view .LVU547
 1845 0040 7080BDE8 		pop	{r4, r5, r6, pc}
 1846              	.LVL172:
 1847              	.L133:
1870:../src/FreeRTOS/tasks.c **** 
 1848              		.loc 1 1870 9 is_stmt 1 discriminator 1 view .LVU548
 1849 0044 4E1700E3 		movw	r1, #1870
 1850 0048 000000E3 		movw	r0, #:lower16:.LC0
 1851              	.LVL173:
1870:../src/FreeRTOS/tasks.c **** 
 1852              		.loc 1 1870 9 is_stmt 0 discriminator 1 view .LVU549
 1853 004c 000040E3 		movt	r0, #:upper16:.LC0
 1854 0050 FEFFFFEB 		bl	R_OS_AssertCalled
 1855              	.LVL174:
 1856 0054 ECFFFFEA 		b	.L128
 1857              	.L134:
1880:../src/FreeRTOS/tasks.c **** 
 1858              		.loc 1 1880 46 is_stmt 1 view .LVU550
1884:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1859              		.loc 1 1884 21 view .LVU551
1884:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1860              		.loc 1 1884 30 is_stmt 0 view .LVU552
 1861 0058 045084E2 		add	r5, r4, #4
 1862 005c 0500A0E1 		mov	r0, r5
 1863 0060 FEFFFFEB 		bl	uxListRemove
 1864              	.LVL175:
1885:../src/FreeRTOS/tasks.c **** 
 1865              		.loc 1 1885 21 is_stmt 1 view .LVU553
1885:../src/FreeRTOS/tasks.c **** 
 1866              		.loc 1 1885 21 view .LVU554
 1867 0064 2C3094E5 		ldr	r3, [r4, #44]
 1868 0068 002000E3 		movw	r2, #:lower16:.LANCHOR13
 1869 006c 002040E3 		movt	r2, #:upper16:.LANCHOR13
 1870 0070 002092E5 		ldr	r2, [r2]
 1871 0074 020053E1 		cmp	r3, r2
1885:../src/FreeRTOS/tasks.c **** 
 1872              		.loc 1 1885 21 discriminator 1 view .LVU555
 1873 0078 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 1874 007c 00204083 		movthi	r2, #:upper16:.LANCHOR13
 1875 0080 00308285 		strhi	r3, [r2]
 1876              	.L131:
1885:../src/FreeRTOS/tasks.c **** 
 1877              		.loc 1 1885 21 discriminator 3 view .LVU556
1885:../src/FreeRTOS/tasks.c **** 
 1878              		.loc 1 1885 21 discriminator 3 view .LVU557
 1879 0084 000000E3 		movw	r0, #:lower16:.LANCHOR4
 1880 0088 000040E3 		movt	r0, #:upper16:.LANCHOR4
 1881 008c 033183E0 		add	r3, r3, r3, lsl #2
 1882 0090 0510A0E1 		mov	r1, r5
 1883 0094 030180E0 		add	r0, r0, r3, lsl #2
 1884 0098 FEFFFFEB 		bl	vListInsertEnd
 1885              	.LVL176:
1885:../src/FreeRTOS/tasks.c **** 
 1886              		.loc 1 1885 51 discriminator 3 view .LVU558
1888:../src/FreeRTOS/tasks.c ****                     {
 1887              		.loc 1 1888 21 discriminator 3 view .LVU559
1888:../src/FreeRTOS/tasks.c ****                     {
 1888              		.loc 1 1888 30 is_stmt 0 discriminator 3 view .LVU560
 1889 009c 2C2094E5 		ldr	r2, [r4, #44]
1888:../src/FreeRTOS/tasks.c ****                     {
 1890              		.loc 1 1888 58 discriminator 3 view .LVU561
 1891 00a0 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1892 00a4 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1893 00a8 003093E5 		ldr	r3, [r3]
 1894 00ac 2C3093E5 		ldr	r3, [r3, #44]
1888:../src/FreeRTOS/tasks.c ****                     {
 1895              		.loc 1 1888 23 discriminator 3 view .LVU562
 1896 00b0 030052E1 		cmp	r2, r3
 1897 00b4 E0FFFF3A 		bcc	.L130
1893:../src/FreeRTOS/tasks.c ****                     }
 1898              		.loc 1 1893 25 is_stmt 1 view .LVU563
 1899              		.syntax divided
 1900              	@ 1893 "../src/FreeRTOS/tasks.c" 1
 1901 00b8 000000EF 		SWI 0
 1902              	@ 0 "" 2
1893:../src/FreeRTOS/tasks.c ****                     }
 1903              		.loc 1 1893 56 view .LVU564
 1904              		.arm
 1905              		.syntax unified
 1906 00bc DEFFFFEA 		b	.L130
 1907              		.cfi_endproc
 1908              	.LFE15:
 1910              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1911              		.align	2
 1912              		.global	xTaskResumeFromISR
 1913              		.syntax unified
 1914              		.arm
 1915              		.fpu neon
 1917              	xTaskResumeFromISR:
 1918              	.LVL177:
 1919              	.LFB16:
1920:../src/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1920              		.loc 1 1920 5 view -0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 0
 1923              		@ frame_needed = 0, uses_anonymous_args = 0
1920:../src/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1924              		.loc 1 1920 5 is_stmt 0 view .LVU566
 1925 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1926              		.cfi_def_cfa_offset 24
 1927              		.cfi_offset 4, -24
 1928              		.cfi_offset 5, -20
 1929              		.cfi_offset 6, -16
 1930              		.cfi_offset 7, -12
 1931              		.cfi_offset 8, -8
 1932              		.cfi_offset 14, -4
1921:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1933              		.loc 1 1921 9 is_stmt 1 view .LVU567
 1934              	.LVL178:
1922:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 1935              		.loc 1 1922 9 view .LVU568
1923:../src/FreeRTOS/tasks.c **** 
 1936              		.loc 1 1923 9 view .LVU569
1925:../src/FreeRTOS/tasks.c **** 
 1937              		.loc 1 1925 9 view .LVU570
 1938 0004 004050E2 		subs	r4, r0, #0
 1939 0008 2C00000A 		beq	.L143
 1940              	.LVL179:
 1941              	.L136:
1925:../src/FreeRTOS/tasks.c **** 
 1942              		.loc 1 1925 38 discriminator 3 view .LVU571
1943:../src/FreeRTOS/tasks.c **** 
 1943              		.loc 1 1943 9 discriminator 3 view .LVU572
 1944 000c FEFFFFEB 		bl	vPortValidateInterruptPriority
 1945              	.LVL180:
1945:../src/FreeRTOS/tasks.c ****         {
 1946              		.loc 1 1945 9 discriminator 3 view .LVU573
1945:../src/FreeRTOS/tasks.c ****         {
 1947              		.loc 1 1945 34 is_stmt 0 discriminator 3 view .LVU574
 1948 0010 FEFFFFEB 		bl	ulPortSetInterruptMask
 1949              	.LVL181:
 1950 0014 0060A0E1 		mov	r6, r0
 1951              	.LVL182:
1947:../src/FreeRTOS/tasks.c ****             {
 1952              		.loc 1 1947 13 is_stmt 1 discriminator 3 view .LVU575
1947:../src/FreeRTOS/tasks.c ****             {
 1953              		.loc 1 1947 17 is_stmt 0 discriminator 3 view .LVU576
 1954 0018 0400A0E1 		mov	r0, r4
 1955              	.LVL183:
1947:../src/FreeRTOS/tasks.c ****             {
 1956              		.loc 1 1947 17 discriminator 3 view .LVU577
 1957 001c FEFFFFEB 		bl	prvTaskIsTaskSuspended
 1958              	.LVL184:
1947:../src/FreeRTOS/tasks.c ****             {
 1959              		.loc 1 1947 15 discriminator 3 view .LVU578
 1960 0020 005050E2 		subs	r5, r0, #0
 1961 0024 2100000A 		beq	.L137
1949:../src/FreeRTOS/tasks.c **** 
 1962              		.loc 1 1949 51 is_stmt 1 view .LVU579
1952:../src/FreeRTOS/tasks.c ****                 {
 1963              		.loc 1 1952 17 view .LVU580
1952:../src/FreeRTOS/tasks.c ****                 {
 1964              		.loc 1 1952 42 is_stmt 0 view .LVU581
 1965 0028 003000E3 		movw	r3, #:lower16:.LANCHOR16
 1966 002c 003040E3 		movt	r3, #:upper16:.LANCHOR16
 1967 0030 003093E5 		ldr	r3, [r3]
1952:../src/FreeRTOS/tasks.c ****                 {
 1968              		.loc 1 1952 19 view .LVU582
 1969 0034 000053E3 		cmp	r3, #0
 1970 0038 2700001A 		bne	.L138
1956:../src/FreeRTOS/tasks.c ****                     {
 1971              		.loc 1 1956 21 is_stmt 1 view .LVU583
1956:../src/FreeRTOS/tasks.c ****                     {
 1972              		.loc 1 1956 30 is_stmt 0 view .LVU584
 1973 003c 2C2094E5 		ldr	r2, [r4, #44]
1956:../src/FreeRTOS/tasks.c ****                     {
 1974              		.loc 1 1956 58 view .LVU585
 1975 0040 003000E3 		movw	r3, #:lower16:.LANCHOR10
 1976 0044 003040E3 		movt	r3, #:upper16:.LANCHOR10
 1977 0048 003093E5 		ldr	r3, [r3]
 1978 004c 2C3093E5 		ldr	r3, [r3, #44]
1956:../src/FreeRTOS/tasks.c ****                     {
 1979              		.loc 1 1956 23 view .LVU586
 1980 0050 030052E1 		cmp	r2, r3
 1981 0054 1E00003A 		bcc	.L141
1958:../src/FreeRTOS/tasks.c **** 
 1982              		.loc 1 1958 25 is_stmt 1 view .LVU587
 1983              	.LVL185:
1963:../src/FreeRTOS/tasks.c ****                     }
 1984              		.loc 1 1963 25 view .LVU588
1963:../src/FreeRTOS/tasks.c ****                     }
 1985              		.loc 1 1963 39 is_stmt 0 view .LVU589
 1986 0058 003000E3 		movw	r3, #:lower16:.LANCHOR17
 1987 005c 003040E3 		movt	r3, #:upper16:.LANCHOR17
 1988 0060 0100A0E3 		mov	r0, #1
 1989 0064 000083E5 		str	r0, [r3]
1958:../src/FreeRTOS/tasks.c **** 
 1990              		.loc 1 1958 40 view .LVU590
 1991 0068 0050A0E1 		mov	r5, r0
 1992              	.LVL186:
 1993              	.L139:
1967:../src/FreeRTOS/tasks.c ****                     }
 1994              		.loc 1 1967 49 is_stmt 1 view .LVU591
1970:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1995              		.loc 1 1970 21 view .LVU592
1970:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1996              		.loc 1 1970 30 is_stmt 0 view .LVU593
 1997 006c 047084E2 		add	r7, r4, #4
 1998 0070 0700A0E1 		mov	r0, r7
 1999 0074 FEFFFFEB 		bl	uxListRemove
 2000              	.LVL187:
1971:../src/FreeRTOS/tasks.c ****                 }
 2001              		.loc 1 1971 21 is_stmt 1 view .LVU594
1971:../src/FreeRTOS/tasks.c ****                 }
 2002              		.loc 1 1971 21 view .LVU595
 2003 0078 2C3094E5 		ldr	r3, [r4, #44]
 2004 007c 002000E3 		movw	r2, #:lower16:.LANCHOR13
 2005 0080 002040E3 		movt	r2, #:upper16:.LANCHOR13
 2006 0084 002092E5 		ldr	r2, [r2]
 2007 0088 020053E1 		cmp	r3, r2
1971:../src/FreeRTOS/tasks.c ****                 }
 2008              		.loc 1 1971 21 discriminator 1 view .LVU596
 2009 008c 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 2010 0090 00204083 		movthi	r2, #:upper16:.LANCHOR13
 2011 0094 00308285 		strhi	r3, [r2]
 2012              	.L140:
1971:../src/FreeRTOS/tasks.c ****                 }
 2013              		.loc 1 1971 21 discriminator 3 view .LVU597
1971:../src/FreeRTOS/tasks.c ****                 }
 2014              		.loc 1 1971 21 discriminator 3 view .LVU598
 2015 0098 000000E3 		movw	r0, #:lower16:.LANCHOR4
 2016 009c 000040E3 		movt	r0, #:upper16:.LANCHOR4
 2017 00a0 033183E0 		add	r3, r3, r3, lsl #2
 2018 00a4 0710A0E1 		mov	r1, r7
 2019 00a8 030180E0 		add	r0, r0, r3, lsl #2
 2020 00ac FEFFFFEB 		bl	vListInsertEnd
 2021              	.LVL188:
1971:../src/FreeRTOS/tasks.c ****                 }
 2022              		.loc 1 1971 51 discriminator 3 view .LVU599
 2023              	.L137:
1983:../src/FreeRTOS/tasks.c ****             }
 2024              		.loc 1 1983 41 view .LVU600
1986:../src/FreeRTOS/tasks.c **** 
 2025              		.loc 1 1986 9 view .LVU601
 2026 00b0 0600A0E1 		mov	r0, r6
 2027 00b4 FEFFFFEB 		bl	vPortClearInterruptMask
 2028              	.LVL189:
1988:../src/FreeRTOS/tasks.c ****     }
 2029              		.loc 1 1988 9 view .LVU602
1989:../src/FreeRTOS/tasks.c **** 
 2030              		.loc 1 1989 5 is_stmt 0 view .LVU603
 2031 00b8 0500A0E1 		mov	r0, r5
 2032 00bc F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2033              	.LVL190:
 2034              	.L143:
1925:../src/FreeRTOS/tasks.c **** 
 2035              		.loc 1 1925 9 is_stmt 1 discriminator 1 view .LVU604
 2036 00c0 851700E3 		movw	r1, #1925
 2037 00c4 000000E3 		movw	r0, #:lower16:.LC0
 2038              	.LVL191:
1925:../src/FreeRTOS/tasks.c **** 
 2039              		.loc 1 1925 9 is_stmt 0 discriminator 1 view .LVU605
 2040 00c8 000040E3 		movt	r0, #:upper16:.LC0
 2041 00cc FEFFFFEB 		bl	R_OS_AssertCalled
 2042              	.LVL192:
 2043 00d0 CDFFFFEA 		b	.L136
 2044              	.LVL193:
 2045              	.L141:
1921:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2046              		.loc 1 1921 20 view .LVU606
 2047 00d4 0050A0E3 		mov	r5, #0
 2048 00d8 E3FFFFEA 		b	.L139
 2049              	.L138:
1978:../src/FreeRTOS/tasks.c ****                 }
 2050              		.loc 1 1978 21 is_stmt 1 view .LVU607
 2051 00dc 181084E2 		add	r1, r4, #24
 2052 00e0 000000E3 		movw	r0, #:lower16:.LANCHOR3
 2053 00e4 000040E3 		movt	r0, #:upper16:.LANCHOR3
 2054 00e8 FEFFFFEB 		bl	vListInsertEnd
 2055              	.LVL194:
1921:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2056              		.loc 1 1921 20 is_stmt 0 view .LVU608
 2057 00ec 0050A0E3 		mov	r5, #0
 2058 00f0 EEFFFFEA 		b	.L137
 2059              		.cfi_endproc
 2060              	.LFE16:
 2062              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 2063              		.align	2
 2064              	.LC1:
 2065 0000 49444C45 		.ascii	"IDLE\000"
 2065      00
 2066              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2067              		.align	2
 2068              		.global	vTaskStartScheduler
 2069              		.syntax unified
 2070              		.arm
 2071              		.fpu neon
 2073              	vTaskStartScheduler:
 2074              	.LFB17:
1995:../src/FreeRTOS/tasks.c ****     BaseType_t xReturn;
 2075              		.loc 1 1995 1 is_stmt 1 view -0
 2076              		.cfi_startproc
 2077              		@ args = 0, pretend = 0, frame = 0
 2078              		@ frame_needed = 0, uses_anonymous_args = 0
 2079 0000 04E02DE5 		str	lr, [sp, #-4]!
 2080              		.cfi_def_cfa_offset 4
 2081              		.cfi_offset 14, -4
 2082 0004 0CD04DE2 		sub	sp, sp, #12
 2083              		.cfi_def_cfa_offset 16
1996:../src/FreeRTOS/tasks.c **** 
 2084              		.loc 1 1996 5 view .LVU610
2028:../src/FreeRTOS/tasks.c ****                                    configIDLE_TASK_NAME,
 2085              		.loc 1 2028 13 view .LVU611
2028:../src/FreeRTOS/tasks.c ****                                    configIDLE_TASK_NAME,
 2086              		.loc 1 2028 23 is_stmt 0 view .LVU612
 2087 0008 003000E3 		movw	r3, #:lower16:.LANCHOR18
 2088 000c 003040E3 		movt	r3, #:upper16:.LANCHOR18
 2089 0010 04308DE5 		str	r3, [sp, #4]
 2090 0014 0030A0E3 		mov	r3, #0
 2091 0018 00308DE5 		str	r3, [sp]
 2092 001c A020A0E3 		mov	r2, #160
 2093 0020 001000E3 		movw	r1, #:lower16:.LC1
 2094 0024 001040E3 		movt	r1, #:upper16:.LC1
 2095 0028 000000E3 		movw	r0, #:lower16:prvIdleTask
 2096 002c 000040E3 		movt	r0, #:upper16:prvIdleTask
 2097 0030 FEFFFFEB 		bl	xTaskCreate
 2098              	.LVL195:
2039:../src/FreeRTOS/tasks.c ****             {
 2099              		.loc 1 2039 13 is_stmt 1 view .LVU613
2039:../src/FreeRTOS/tasks.c ****             {
 2100              		.loc 1 2039 15 is_stmt 0 view .LVU614
 2101 0034 010050E3 		cmp	r0, #1
 2102 0038 0800000A 		beq	.L149
 2103              	.L145:
2045:../src/FreeRTOS/tasks.c ****             }
 2104              		.loc 1 2045 41 is_stmt 1 view .LVU615
2050:../src/FreeRTOS/tasks.c ****     {
 2105              		.loc 1 2050 5 view .LVU616
2050:../src/FreeRTOS/tasks.c ****     {
 2106              		.loc 1 2050 7 is_stmt 0 view .LVU617
 2107 003c 010050E3 		cmp	r0, #1
 2108 0040 0800000A 		beq	.L150
2109:../src/FreeRTOS/tasks.c ****     }
 2109              		.loc 1 2109 9 is_stmt 1 view .LVU618
 2110 0044 010070E3 		cmn	r0, #1
 2111 0048 1600000A 		beq	.L151
 2112              	.LVL196:
 2113              	.L147:
2109:../src/FreeRTOS/tasks.c ****     }
 2114              		.loc 1 2109 73 discriminator 3 view .LVU619
2114:../src/FreeRTOS/tasks.c **** 
 2115              		.loc 1 2114 5 discriminator 3 view .LVU620
2118:../src/FreeRTOS/tasks.c **** }
 2116              		.loc 1 2118 5 discriminator 3 view .LVU621
 2117 004c 003000E3 		movw	r3, #:lower16:.LANCHOR19
 2118 0050 003040E3 		movt	r3, #:upper16:.LANCHOR19
 2119 0054 003093E5 		ldr	r3, [r3]
2119:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2120              		.loc 1 2119 1 is_stmt 0 discriminator 3 view .LVU622
 2121 0058 0CD08DE2 		add	sp, sp, #12
 2122              		.cfi_remember_state
 2123              		.cfi_def_cfa_offset 4
 2124              		@ sp needed
 2125 005c 04F09DE4 		ldr	pc, [sp], #4
 2126              	.LVL197:
 2127              	.L149:
 2128              		.cfi_restore_state
2041:../src/FreeRTOS/tasks.c ****             }
 2129              		.loc 1 2041 17 is_stmt 1 view .LVU623
2041:../src/FreeRTOS/tasks.c ****             }
 2130              		.loc 1 2041 27 is_stmt 0 view .LVU624
 2131 0060 FEFFFFEB 		bl	xTimerCreateTimerTask
 2132              	.LVL198:
2041:../src/FreeRTOS/tasks.c ****             }
 2133              		.loc 1 2041 27 view .LVU625
 2134 0064 F4FFFFEA 		b	.L145
 2135              	.L150:
2066:../src/FreeRTOS/tasks.c **** 
 2136              		.loc 1 2066 9 is_stmt 1 view .LVU626
 2137 0068 FEFFFFEB 		bl	ulPortSetInterruptMask
 2138              	.LVL199:
2078:../src/FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2139              		.loc 1 2078 9 view .LVU627
2078:../src/FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2140              		.loc 1 2078 30 is_stmt 0 view .LVU628
 2141 006c 003000E3 		movw	r3, #:lower16:.LANCHOR1
 2142 0070 003040E3 		movt	r3, #:upper16:.LANCHOR1
 2143 0074 0020E0E3 		mvn	r2, #0
 2144 0078 002083E5 		str	r2, [r3]
2079:../src/FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2145              		.loc 1 2079 9 is_stmt 1 view .LVU629
2079:../src/FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2146              		.loc 1 2079 27 is_stmt 0 view .LVU630
 2147 007c 003000E3 		movw	r3, #:lower16:.LANCHOR11
 2148 0080 003040E3 		movt	r3, #:upper16:.LANCHOR11
 2149 0084 0120A0E3 		mov	r2, #1
 2150 0088 002083E5 		str	r2, [r3]
2080:../src/FreeRTOS/tasks.c **** 
 2151              		.loc 1 2080 9 is_stmt 1 view .LVU631
2080:../src/FreeRTOS/tasks.c **** 
 2152              		.loc 1 2080 20 is_stmt 0 view .LVU632
 2153 008c 003000E3 		movw	r3, #:lower16:.LANCHOR15
 2154 0090 003040E3 		movt	r3, #:upper16:.LANCHOR15
 2155 0094 0020A0E3 		mov	r2, #0
 2156 0098 002083E5 		str	r2, [r3]
2088:../src/FreeRTOS/tasks.c **** 
 2157              		.loc 1 2088 9 is_stmt 1 view .LVU633
 2158 009c FEFFFFEB 		bl	vInitialiseRunTimeStats
 2159              	.LVL200:
2090:../src/FreeRTOS/tasks.c **** 
 2160              		.loc 1 2090 32 view .LVU634
2094:../src/FreeRTOS/tasks.c ****         {
 2161              		.loc 1 2094 9 view .LVU635
2094:../src/FreeRTOS/tasks.c ****         {
 2162              		.loc 1 2094 13 is_stmt 0 view .LVU636
 2163 00a0 FEFFFFEB 		bl	xPortStartScheduler
 2164              	.LVL201:
 2165 00a4 E8FFFFEA 		b	.L147
 2166              	.LVL202:
 2167              	.L151:
2109:../src/FreeRTOS/tasks.c ****     }
 2168              		.loc 1 2109 9 is_stmt 1 discriminator 1 view .LVU637
 2169 00a8 3D1800E3 		movw	r1, #2109
 2170 00ac 000000E3 		movw	r0, #:lower16:.LC0
 2171              	.LVL203:
2109:../src/FreeRTOS/tasks.c ****     }
 2172              		.loc 1 2109 9 is_stmt 0 discriminator 1 view .LVU638
 2173 00b0 000040E3 		movt	r0, #:upper16:.LC0
 2174 00b4 FEFFFFEB 		bl	R_OS_AssertCalled
 2175              	.LVL204:
 2176 00b8 E3FFFFEA 		b	.L147
 2177              		.cfi_endproc
 2178              	.LFE17:
 2180              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2181              		.align	2
 2182              		.global	vTaskEndScheduler
 2183              		.syntax unified
 2184              		.arm
 2185              		.fpu neon
 2187              	vTaskEndScheduler:
 2188              	.LFB18:
2123:../src/FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 2189              		.loc 1 2123 1 is_stmt 1 view -0
 2190              		.cfi_startproc
 2191              		@ args = 0, pretend = 0, frame = 0
 2192              		@ frame_needed = 0, uses_anonymous_args = 0
 2193 0000 10402DE9 		push	{r4, lr}
 2194              		.cfi_def_cfa_offset 8
 2195              		.cfi_offset 4, -8
 2196              		.cfi_offset 14, -4
2127:../src/FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 2197              		.loc 1 2127 5 view .LVU640
 2198 0004 FEFFFFEB 		bl	ulPortSetInterruptMask
 2199              	.LVL205:
2128:../src/FreeRTOS/tasks.c ****     vPortEndScheduler();
 2200              		.loc 1 2128 5 view .LVU641
2128:../src/FreeRTOS/tasks.c ****     vPortEndScheduler();
 2201              		.loc 1 2128 23 is_stmt 0 view .LVU642
 2202 0008 003000E3 		movw	r3, #:lower16:.LANCHOR11
 2203 000c 003040E3 		movt	r3, #:upper16:.LANCHOR11
 2204 0010 0020A0E3 		mov	r2, #0
 2205 0014 002083E5 		str	r2, [r3]
2129:../src/FreeRTOS/tasks.c **** }
 2206              		.loc 1 2129 5 is_stmt 1 view .LVU643
 2207 0018 FEFFFFEB 		bl	vPortEndScheduler
 2208              	.LVL206:
2130:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 2209              		.loc 1 2130 1 is_stmt 0 view .LVU644
 2210 001c 1080BDE8 		pop	{r4, pc}
 2211              		.cfi_endproc
 2212              	.LFE18:
 2214              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2215              		.align	2
 2216              		.global	vTaskSuspendAll
 2217              		.syntax unified
 2218              		.arm
 2219              		.fpu neon
 2221              	vTaskSuspendAll:
 2222              	.LFB19:
2134:../src/FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
 2223              		.loc 1 2134 1 is_stmt 1 view -0
 2224              		.cfi_startproc
 2225              		@ args = 0, pretend = 0, frame = 0
 2226              		@ frame_needed = 0, uses_anonymous_args = 0
 2227              		@ link register save eliminated.
2142:../src/FreeRTOS/tasks.c **** 
 2228              		.loc 1 2142 27 view .LVU646
2146:../src/FreeRTOS/tasks.c **** 
 2229              		.loc 1 2146 5 view .LVU647
 2230 0000 003000E3 		movw	r3, #:lower16:.LANCHOR16
 2231 0004 003040E3 		movt	r3, #:upper16:.LANCHOR16
 2232 0008 002093E5 		ldr	r2, [r3]
 2233 000c 012082E2 		add	r2, r2, #1
 2234 0010 002083E5 		str	r2, [r3]
2150:../src/FreeRTOS/tasks.c **** }
 2235              		.loc 1 2150 25 view .LVU648
2151:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 2236              		.loc 1 2151 1 is_stmt 0 view .LVU649
 2237 0014 1EFF2FE1 		bx	lr
 2238              		.cfi_endproc
 2239              	.LFE19:
 2241              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2242              		.align	2
 2243              		.global	xTaskGetTickCount
 2244              		.syntax unified
 2245              		.arm
 2246              		.fpu neon
 2248              	xTaskGetTickCount:
 2249              	.LFB21:
2329:../src/FreeRTOS/tasks.c ****     TickType_t xTicks;
 2250              		.loc 1 2329 1 is_stmt 1 view -0
 2251              		.cfi_startproc
 2252              		@ args = 0, pretend = 0, frame = 0
 2253              		@ frame_needed = 0, uses_anonymous_args = 0
 2254              		@ link register save eliminated.
2330:../src/FreeRTOS/tasks.c **** 
 2255              		.loc 1 2330 5 view .LVU651
2333:../src/FreeRTOS/tasks.c ****     {
 2256              		.loc 1 2333 35 view .LVU652
2335:../src/FreeRTOS/tasks.c ****     }
 2257              		.loc 1 2335 9 view .LVU653
2335:../src/FreeRTOS/tasks.c ****     }
 2258              		.loc 1 2335 16 is_stmt 0 view .LVU654
 2259 0000 003000E3 		movw	r3, #:lower16:.LANCHOR15
 2260 0004 003040E3 		movt	r3, #:upper16:.LANCHOR15
 2261 0008 000093E5 		ldr	r0, [r3]
 2262              	.LVL207:
2337:../src/FreeRTOS/tasks.c **** 
 2263              		.loc 1 2337 34 is_stmt 1 view .LVU655
2339:../src/FreeRTOS/tasks.c **** }
 2264              		.loc 1 2339 5 view .LVU656
2340:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2265              		.loc 1 2340 1 is_stmt 0 view .LVU657
 2266 000c 1EFF2FE1 		bx	lr
 2267              		.cfi_endproc
 2268              	.LFE21:
 2270              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2271              		.align	2
 2272              		.global	xTaskGetTickCountFromISR
 2273              		.syntax unified
 2274              		.arm
 2275              		.fpu neon
 2277              	xTaskGetTickCountFromISR:
 2278              	.LFB22:
2344:../src/FreeRTOS/tasks.c ****     TickType_t xReturn;
 2279              		.loc 1 2344 1 is_stmt 1 view -0
 2280              		.cfi_startproc
 2281              		@ args = 0, pretend = 0, frame = 0
 2282              		@ frame_needed = 0, uses_anonymous_args = 0
 2283 0000 10402DE9 		push	{r4, lr}
 2284              		.cfi_def_cfa_offset 8
 2285              		.cfi_offset 4, -8
 2286              		.cfi_offset 14, -4
2345:../src/FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
 2287              		.loc 1 2345 5 view .LVU659
2346:../src/FreeRTOS/tasks.c **** 
 2288              		.loc 1 2346 5 view .LVU660
2362:../src/FreeRTOS/tasks.c **** 
 2289              		.loc 1 2362 5 view .LVU661
 2290 0004 FEFFFFEB 		bl	vPortValidateInterruptPriority
 2291              	.LVL208:
2364:../src/FreeRTOS/tasks.c ****     {
 2292              		.loc 1 2364 5 view .LVU662
2366:../src/FreeRTOS/tasks.c ****     }
 2293              		.loc 1 2366 9 view .LVU663
2366:../src/FreeRTOS/tasks.c ****     }
 2294              		.loc 1 2366 17 is_stmt 0 view .LVU664
 2295 0008 003000E3 		movw	r3, #:lower16:.LANCHOR15
 2296 000c 003040E3 		movt	r3, #:upper16:.LANCHOR15
 2297 0010 000093E5 		ldr	r0, [r3]
 2298              	.LVL209:
2368:../src/FreeRTOS/tasks.c **** 
 2299              		.loc 1 2368 5 is_stmt 1 view .LVU665
2370:../src/FreeRTOS/tasks.c **** }
 2300              		.loc 1 2370 5 view .LVU666
2371:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2301              		.loc 1 2371 1 is_stmt 0 view .LVU667
 2302 0014 1080BDE8 		pop	{r4, pc}
 2303              		.cfi_endproc
 2304              	.LFE22:
 2306              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2307              		.align	2
 2308              		.global	uxTaskGetNumberOfTasks
 2309              		.syntax unified
 2310              		.arm
 2311              		.fpu neon
 2313              	uxTaskGetNumberOfTasks:
 2314              	.LFB23:
2375:../src/FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
 2315              		.loc 1 2375 1 is_stmt 1 view -0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 0
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 2319              		@ link register save eliminated.
2378:../src/FreeRTOS/tasks.c **** }
 2320              		.loc 1 2378 5 view .LVU669
2378:../src/FreeRTOS/tasks.c **** }
 2321              		.loc 1 2378 12 is_stmt 0 view .LVU670
 2322 0000 003000E3 		movw	r3, #:lower16:.LANCHOR9
 2323 0004 003040E3 		movt	r3, #:upper16:.LANCHOR9
 2324 0008 000093E5 		ldr	r0, [r3]
2379:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2325              		.loc 1 2379 1 view .LVU671
 2326 000c 1EFF2FE1 		bx	lr
 2327              		.cfi_endproc
 2328              	.LFE23:
 2330              		.section	.text.pcTaskGetName,"ax",%progbits
 2331              		.align	2
 2332              		.global	pcTaskGetName
 2333              		.syntax unified
 2334              		.arm
 2335              		.fpu neon
 2337              	pcTaskGetName:
 2338              	.LVL210:
 2339              	.LFB24:
2383:../src/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 2340              		.loc 1 2383 1 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 0
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
2383:../src/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 2344              		.loc 1 2383 1 is_stmt 0 view .LVU673
 2345 0000 10402DE9 		push	{r4, lr}
 2346              		.cfi_def_cfa_offset 8
 2347              		.cfi_offset 4, -8
 2348              		.cfi_offset 14, -4
2384:../src/FreeRTOS/tasks.c **** 
 2349              		.loc 1 2384 5 is_stmt 1 view .LVU674
2388:../src/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2350              		.loc 1 2388 5 view .LVU675
2388:../src/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2351              		.loc 1 2388 13 is_stmt 0 view .LVU676
 2352 0004 004050E2 		subs	r4, r0, #0
 2353 0008 0300000A 		beq	.L163
 2354              	.LVL211:
 2355              	.L160:
2389:../src/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2356              		.loc 1 2389 5 is_stmt 1 discriminator 4 view .LVU677
 2357 000c 000054E3 		cmp	r4, #0
 2358 0010 0500000A 		beq	.L164
 2359              	.L161:
2389:../src/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2360              		.loc 1 2389 26 discriminator 3 view .LVU678
2390:../src/FreeRTOS/tasks.c **** }
 2361              		.loc 1 2390 5 discriminator 3 view .LVU679
2391:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2362              		.loc 1 2391 1 is_stmt 0 discriminator 3 view .LVU680
 2363 0014 340084E2 		add	r0, r4, #52
 2364 0018 1080BDE8 		pop	{r4, pc}
 2365              	.LVL212:
 2366              	.L163:
2388:../src/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2367              		.loc 1 2388 13 discriminator 1 view .LVU681
 2368 001c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 2369 0020 003040E3 		movt	r3, #:upper16:.LANCHOR10
 2370 0024 004093E5 		ldr	r4, [r3]
 2371              	.LVL213:
2388:../src/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2372              		.loc 1 2388 13 discriminator 1 view .LVU682
 2373 0028 F7FFFFEA 		b	.L160
 2374              	.LVL214:
 2375              	.L164:
2389:../src/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2376              		.loc 1 2389 5 is_stmt 1 discriminator 1 view .LVU683
 2377 002c 551900E3 		movw	r1, #2389
 2378 0030 000000E3 		movw	r0, #:lower16:.LC0
 2379 0034 000040E3 		movt	r0, #:upper16:.LC0
 2380 0038 FEFFFFEB 		bl	R_OS_AssertCalled
 2381              	.LVL215:
 2382 003c F4FFFFEA 		b	.L161
 2383              		.cfi_endproc
 2384              	.LFE24:
 2386              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2387              		.align	2
 2388              		.global	xTaskIncrementTick
 2389              		.syntax unified
 2390              		.arm
 2391              		.fpu neon
 2393              	xTaskIncrementTick:
 2394              	.LFB28:
2733:../src/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 2395              		.loc 1 2733 1 view -0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 0
 2398              		@ frame_needed = 0, uses_anonymous_args = 0
 2399 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 2400              		.cfi_def_cfa_offset 24
 2401              		.cfi_offset 4, -24
 2402              		.cfi_offset 5, -20
 2403              		.cfi_offset 6, -16
 2404              		.cfi_offset 7, -12
 2405              		.cfi_offset 8, -8
 2406              		.cfi_offset 14, -4
2734:../src/FreeRTOS/tasks.c ****     TickType_t xItemValue;
 2407              		.loc 1 2734 5 view .LVU685
2735:../src/FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 2408              		.loc 1 2735 5 view .LVU686
2736:../src/FreeRTOS/tasks.c **** 
 2409              		.loc 1 2736 5 view .LVU687
 2410              	.LVL216:
2741:../src/FreeRTOS/tasks.c **** 
 2411              		.loc 1 2741 43 view .LVU688
2743:../src/FreeRTOS/tasks.c ****     {
 2412              		.loc 1 2743 5 view .LVU689
2743:../src/FreeRTOS/tasks.c ****     {
 2413              		.loc 1 2743 30 is_stmt 0 view .LVU690
 2414 0004 003000E3 		movw	r3, #:lower16:.LANCHOR16
 2415 0008 003040E3 		movt	r3, #:upper16:.LANCHOR16
 2416 000c 003093E5 		ldr	r3, [r3]
2743:../src/FreeRTOS/tasks.c ****     {
 2417              		.loc 1 2743 7 view .LVU691
 2418 0010 000053E3 		cmp	r3, #0
 2419 0014 6F00001A 		bne	.L166
 2420              	.LBB7:
2747:../src/FreeRTOS/tasks.c **** 
 2421              		.loc 1 2747 9 is_stmt 1 view .LVU692
2747:../src/FreeRTOS/tasks.c **** 
 2422              		.loc 1 2747 55 is_stmt 0 view .LVU693
 2423 0018 003000E3 		movw	r3, #:lower16:.LANCHOR15
 2424 001c 003040E3 		movt	r3, #:upper16:.LANCHOR15
 2425 0020 005093E5 		ldr	r5, [r3]
2747:../src/FreeRTOS/tasks.c **** 
 2426              		.loc 1 2747 26 view .LVU694
 2427 0024 015085E2 		add	r5, r5, #1
 2428              	.LVL217:
2751:../src/FreeRTOS/tasks.c **** 
 2429              		.loc 1 2751 9 is_stmt 1 view .LVU695
2751:../src/FreeRTOS/tasks.c **** 
 2430              		.loc 1 2751 20 is_stmt 0 view .LVU696
 2431 0028 005083E5 		str	r5, [r3]
2753:../src/FreeRTOS/tasks.c ****         {
 2432              		.loc 1 2753 9 is_stmt 1 view .LVU697
2753:../src/FreeRTOS/tasks.c ****         {
 2433              		.loc 1 2753 11 is_stmt 0 view .LVU698
 2434 002c 000055E3 		cmp	r5, #0
 2435 0030 1300001A 		bne	.L167
 2436              	.LBB8:
2755:../src/FreeRTOS/tasks.c ****         }
 2437              		.loc 1 2755 13 is_stmt 1 view .LVU699
2755:../src/FreeRTOS/tasks.c ****         }
 2438              		.loc 1 2755 13 view .LVU700
 2439 0034 003000E3 		movw	r3, #:lower16:.LANCHOR0
 2440 0038 003040E3 		movt	r3, #:upper16:.LANCHOR0
 2441 003c 003093E5 		ldr	r3, [r3]
 2442 0040 003093E5 		ldr	r3, [r3]
 2443 0044 000053E3 		cmp	r3, #0
 2444 0048 2400001A 		bne	.L184
 2445              	.L168:
2755:../src/FreeRTOS/tasks.c ****         }
 2446              		.loc 1 2755 13 discriminator 3 view .LVU701
2755:../src/FreeRTOS/tasks.c ****         }
 2447              		.loc 1 2755 13 discriminator 3 view .LVU702
 2448 004c 002000E3 		movw	r2, #:lower16:.LANCHOR0
 2449 0050 002040E3 		movt	r2, #:upper16:.LANCHOR0
 2450 0054 001092E5 		ldr	r1, [r2]
 2451              	.LVL218:
2755:../src/FreeRTOS/tasks.c ****         }
 2452              		.loc 1 2755 13 discriminator 3 view .LVU703
 2453 0058 003000E3 		movw	r3, #:lower16:.LANCHOR8
 2454 005c 003040E3 		movt	r3, #:upper16:.LANCHOR8
 2455 0060 000093E5 		ldr	r0, [r3]
 2456 0064 000082E5 		str	r0, [r2]
2755:../src/FreeRTOS/tasks.c ****         }
 2457              		.loc 1 2755 13 discriminator 3 view .LVU704
 2458 0068 001083E5 		str	r1, [r3]
2755:../src/FreeRTOS/tasks.c ****         }
 2459              		.loc 1 2755 13 discriminator 3 view .LVU705
 2460 006c 003000E3 		movw	r3, #:lower16:.LANCHOR20
 2461 0070 003040E3 		movt	r3, #:upper16:.LANCHOR20
 2462 0074 002093E5 		ldr	r2, [r3]
 2463 0078 012082E2 		add	r2, r2, #1
 2464 007c 002083E5 		str	r2, [r3]
2755:../src/FreeRTOS/tasks.c ****         }
 2465              		.loc 1 2755 13 discriminator 3 view .LVU706
 2466 0080 FEFFFFEB 		bl	prvResetNextTaskUnblockTime
 2467              	.LVL219:
2755:../src/FreeRTOS/tasks.c ****         }
 2468              		.loc 1 2755 13 is_stmt 0 discriminator 3 view .LVU707
 2469              	.LBE8:
2755:../src/FreeRTOS/tasks.c ****         }
 2470              		.loc 1 2755 39 is_stmt 1 discriminator 3 view .LVU708
 2471              	.L167:
2759:../src/FreeRTOS/tasks.c ****         }
 2472              		.loc 1 2759 37 view .LVU709
2766:../src/FreeRTOS/tasks.c ****         {
 2473              		.loc 1 2766 9 view .LVU710
2766:../src/FreeRTOS/tasks.c ****         {
 2474              		.loc 1 2766 29 is_stmt 0 view .LVU711
 2475 0084 003000E3 		movw	r3, #:lower16:.LANCHOR1
 2476 0088 003040E3 		movt	r3, #:upper16:.LANCHOR1
 2477 008c 003093E5 		ldr	r3, [r3]
2766:../src/FreeRTOS/tasks.c ****         {
 2478              		.loc 1 2766 11 view .LVU712
 2479 0090 050053E1 		cmp	r3, r5
 2480 0094 4400009A 		bls	.L179
 2481              	.LBE7:
2736:../src/FreeRTOS/tasks.c **** 
 2482              		.loc 1 2736 16 view .LVU713
 2483 0098 0060A0E3 		mov	r6, #0
 2484              	.LVL220:
 2485              	.L170:
 2486              	.LBB10:
2849:../src/FreeRTOS/tasks.c ****                 {
 2487              		.loc 1 2849 17 is_stmt 1 view .LVU714
2849:../src/FreeRTOS/tasks.c ****                 {
 2488              		.loc 1 2849 21 is_stmt 0 view .LVU715
 2489 009c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 2490 00a0 003040E3 		movt	r3, #:upper16:.LANCHOR10
 2491 00a4 003093E5 		ldr	r3, [r3]
 2492 00a8 2C3093E5 		ldr	r3, [r3, #44]
 2493 00ac 002000E3 		movw	r2, #:lower16:.LANCHOR4
 2494 00b0 002040E3 		movt	r2, #:upper16:.LANCHOR4
 2495 00b4 033183E0 		add	r3, r3, r3, lsl #2
 2496 00b8 0311A0E1 		lsl	r1, r3, #2
 2497 00bc 013092E7 		ldr	r3, [r2, r1]
2849:../src/FreeRTOS/tasks.c ****                 {
 2498              		.loc 1 2849 19 view .LVU716
 2499 00c0 010053E3 		cmp	r3, #1
2851:../src/FreeRTOS/tasks.c ****                 }
 2500              		.loc 1 2851 37 view .LVU717
 2501 00c4 0160A083 		movhi	r6, #1
 2502              	.LVL221:
 2503              	.L177:
2855:../src/FreeRTOS/tasks.c ****                 }
 2504              		.loc 1 2855 45 is_stmt 1 view .LVU718
2877:../src/FreeRTOS/tasks.c ****                 {
 2505              		.loc 1 2877 17 view .LVU719
2877:../src/FreeRTOS/tasks.c ****                 {
 2506              		.loc 1 2877 35 is_stmt 0 view .LVU720
 2507 00c8 003000E3 		movw	r3, #:lower16:.LANCHOR17
 2508 00cc 003040E3 		movt	r3, #:upper16:.LANCHOR17
 2509 00d0 003093E5 		ldr	r3, [r3]
2877:../src/FreeRTOS/tasks.c ****                 {
 2510              		.loc 1 2877 19 view .LVU721
 2511 00d4 000053E3 		cmp	r3, #0
2879:../src/FreeRTOS/tasks.c ****                 }
 2512              		.loc 1 2879 37 view .LVU722
 2513 00d8 0160A013 		movne	r6, #1
 2514              	.LVL222:
2879:../src/FreeRTOS/tasks.c ****                 }
 2515              		.loc 1 2879 37 view .LVU723
 2516              	.LBE10:
2901:../src/FreeRTOS/tasks.c **** }
 2517              		.loc 1 2901 5 is_stmt 1 view .LVU724
2901:../src/FreeRTOS/tasks.c **** }
 2518              		.loc 1 2901 12 is_stmt 0 view .LVU725
 2519 00dc 430000EA 		b	.L165
 2520              	.LVL223:
 2521              	.L184:
 2522              	.LBB11:
 2523              	.LBB9:
2755:../src/FreeRTOS/tasks.c ****         }
 2524              		.loc 1 2755 13 is_stmt 1 discriminator 1 view .LVU726
 2525 00e0 C31A00E3 		movw	r1, #2755
 2526 00e4 000000E3 		movw	r0, #:lower16:.LC0
 2527 00e8 000040E3 		movt	r0, #:upper16:.LC0
 2528 00ec FEFFFFEB 		bl	R_OS_AssertCalled
 2529              	.LVL224:
 2530 00f0 D5FFFFEA 		b	.L168
 2531              	.LVL225:
 2532              	.L180:
2755:../src/FreeRTOS/tasks.c ****         }
 2533              		.loc 1 2755 13 is_stmt 0 discriminator 1 view .LVU727
 2534              	.LBE9:
2832:../src/FreeRTOS/tasks.c ****                             }
 2535              		.loc 1 2832 49 view .LVU728
 2536 00f4 0160A0E3 		mov	r6, #1
 2537              	.LVL226:
 2538              	.L169:
2768:../src/FreeRTOS/tasks.c ****             {
 2539              		.loc 1 2768 13 is_stmt 1 view .LVU729
2770:../src/FreeRTOS/tasks.c ****                 {
 2540              		.loc 1 2770 17 view .LVU730
2770:../src/FreeRTOS/tasks.c ****                 {
 2541              		.loc 1 2770 21 is_stmt 0 view .LVU731
 2542 00f8 003000E3 		movw	r3, #:lower16:.LANCHOR0
 2543 00fc 003040E3 		movt	r3, #:upper16:.LANCHOR0
 2544 0100 003093E5 		ldr	r3, [r3]
 2545 0104 003093E5 		ldr	r3, [r3]
2770:../src/FreeRTOS/tasks.c ****                 {
 2546              		.loc 1 2770 19 view .LVU732
 2547 0108 000053E3 		cmp	r3, #0
 2548 010c 2800000A 		beq	.L185
2786:../src/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2549              		.loc 1 2786 21 is_stmt 1 view .LVU733
2786:../src/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2550              		.loc 1 2786 29 is_stmt 0 view .LVU734
 2551 0110 003000E3 		movw	r3, #:lower16:.LANCHOR0
 2552 0114 003040E3 		movt	r3, #:upper16:.LANCHOR0
 2553 0118 003093E5 		ldr	r3, [r3]
 2554 011c 0C3093E5 		ldr	r3, [r3, #12]
2786:../src/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2555              		.loc 1 2786 27 view .LVU735
 2556 0120 0C4093E5 		ldr	r4, [r3, #12]
 2557              	.LVL227:
2787:../src/FreeRTOS/tasks.c **** 
 2558              		.loc 1 2787 21 is_stmt 1 view .LVU736
2787:../src/FreeRTOS/tasks.c **** 
 2559              		.loc 1 2787 32 is_stmt 0 view .LVU737
 2560 0124 043094E5 		ldr	r3, [r4, #4]
 2561              	.LVL228:
2789:../src/FreeRTOS/tasks.c ****                     {
 2562              		.loc 1 2789 21 is_stmt 1 view .LVU738
2789:../src/FreeRTOS/tasks.c ****                     {
 2563              		.loc 1 2789 23 is_stmt 0 view .LVU739
 2564 0128 030055E1 		cmp	r5, r3
 2565 012c 2500003A 		bcc	.L186
2801:../src/FreeRTOS/tasks.c ****                     }
 2566              		.loc 1 2801 49 is_stmt 1 view .LVU740
2805:../src/FreeRTOS/tasks.c **** 
 2567              		.loc 1 2805 21 view .LVU741
2805:../src/FreeRTOS/tasks.c **** 
 2568              		.loc 1 2805 30 is_stmt 0 view .LVU742
 2569 0130 047084E2 		add	r7, r4, #4
 2570 0134 0700A0E1 		mov	r0, r7
 2571 0138 FEFFFFEB 		bl	uxListRemove
 2572              	.LVL229:
2809:../src/FreeRTOS/tasks.c ****                     {
 2573              		.loc 1 2809 21 is_stmt 1 view .LVU743
2809:../src/FreeRTOS/tasks.c ****                     {
 2574              		.loc 1 2809 25 is_stmt 0 view .LVU744
 2575 013c 283094E5 		ldr	r3, [r4, #40]
2809:../src/FreeRTOS/tasks.c ****                     {
 2576              		.loc 1 2809 23 view .LVU745
 2577 0140 000053E3 		cmp	r3, #0
 2578 0144 0100000A 		beq	.L173
2811:../src/FreeRTOS/tasks.c ****                     }
 2579              		.loc 1 2811 25 is_stmt 1 view .LVU746
2811:../src/FreeRTOS/tasks.c ****                     }
 2580              		.loc 1 2811 34 is_stmt 0 view .LVU747
 2581 0148 180084E2 		add	r0, r4, #24
 2582 014c FEFFFFEB 		bl	uxListRemove
 2583              	.LVL230:
 2584              	.L173:
2815:../src/FreeRTOS/tasks.c ****                     }
 2585              		.loc 1 2815 49 is_stmt 1 view .LVU748
2820:../src/FreeRTOS/tasks.c **** 
 2586              		.loc 1 2820 21 view .LVU749
2820:../src/FreeRTOS/tasks.c **** 
 2587              		.loc 1 2820 21 view .LVU750
 2588 0150 2C3094E5 		ldr	r3, [r4, #44]
 2589 0154 002000E3 		movw	r2, #:lower16:.LANCHOR13
 2590 0158 002040E3 		movt	r2, #:upper16:.LANCHOR13
 2591 015c 002092E5 		ldr	r2, [r2]
 2592 0160 020053E1 		cmp	r3, r2
2820:../src/FreeRTOS/tasks.c **** 
 2593              		.loc 1 2820 21 discriminator 1 view .LVU751
 2594 0164 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 2595 0168 00204083 		movthi	r2, #:upper16:.LANCHOR13
 2596 016c 00308285 		strhi	r3, [r2]
 2597              	.L174:
2820:../src/FreeRTOS/tasks.c **** 
 2598              		.loc 1 2820 21 discriminator 3 view .LVU752
2820:../src/FreeRTOS/tasks.c **** 
 2599              		.loc 1 2820 21 discriminator 3 view .LVU753
 2600 0170 002000E3 		movw	r2, #:lower16:.LANCHOR4
 2601 0174 002040E3 		movt	r2, #:upper16:.LANCHOR4
 2602 0178 033183E0 		add	r3, r3, r3, lsl #2
 2603 017c 0301A0E1 		lsl	r0, r3, #2
 2604 0180 0710A0E1 		mov	r1, r7
 2605 0184 000082E0 		add	r0, r2, r0
 2606 0188 FEFFFFEB 		bl	vListInsertEnd
 2607              	.LVL231:
2820:../src/FreeRTOS/tasks.c **** 
 2608              		.loc 1 2820 51 discriminator 3 view .LVU754
2830:../src/FreeRTOS/tasks.c ****                             {
 2609              		.loc 1 2830 29 discriminator 3 view .LVU755
2830:../src/FreeRTOS/tasks.c ****                             {
 2610              		.loc 1 2830 38 is_stmt 0 discriminator 3 view .LVU756
 2611 018c 2C2094E5 		ldr	r2, [r4, #44]
2830:../src/FreeRTOS/tasks.c ****                             {
 2612              		.loc 1 2830 66 discriminator 3 view .LVU757
 2613 0190 003000E3 		movw	r3, #:lower16:.LANCHOR10
 2614 0194 003040E3 		movt	r3, #:upper16:.LANCHOR10
 2615 0198 003093E5 		ldr	r3, [r3]
 2616 019c 2C3093E5 		ldr	r3, [r3, #44]
2830:../src/FreeRTOS/tasks.c ****                             {
 2617              		.loc 1 2830 31 discriminator 3 view .LVU758
 2618 01a0 030052E1 		cmp	r2, r3
 2619 01a4 D2FFFF2A 		bcs	.L180
 2620 01a8 D2FFFFEA 		b	.L169
 2621              	.LVL232:
 2622              	.L179:
2830:../src/FreeRTOS/tasks.c ****                             {
 2623              		.loc 1 2830 31 discriminator 3 view .LVU759
 2624              	.LBE11:
2736:../src/FreeRTOS/tasks.c **** 
 2625              		.loc 1 2736 16 view .LVU760
 2626 01ac 0060A0E3 		mov	r6, #0
 2627 01b0 D0FFFFEA 		b	.L169
 2628              	.LVL233:
 2629              	.L185:
 2630              	.LBB12:
2777:../src/FreeRTOS/tasks.c ****                     break;
 2631              		.loc 1 2777 21 is_stmt 1 view .LVU761
2777:../src/FreeRTOS/tasks.c ****                     break;
 2632              		.loc 1 2777 42 is_stmt 0 view .LVU762
 2633 01b4 003000E3 		movw	r3, #:lower16:.LANCHOR1
 2634 01b8 003040E3 		movt	r3, #:upper16:.LANCHOR1
 2635 01bc 0020E0E3 		mvn	r2, #0
 2636 01c0 002083E5 		str	r2, [r3]
2778:../src/FreeRTOS/tasks.c ****                 }
 2637              		.loc 1 2778 21 is_stmt 1 view .LVU763
 2638 01c4 B4FFFFEA 		b	.L170
 2639              	.LVL234:
 2640              	.L186:
2796:../src/FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
 2641              		.loc 1 2796 25 view .LVU764
2796:../src/FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
 2642              		.loc 1 2796 46 is_stmt 0 view .LVU765
 2643 01c8 002000E3 		movw	r2, #:lower16:.LANCHOR1
 2644 01cc 002040E3 		movt	r2, #:upper16:.LANCHOR1
 2645 01d0 003082E5 		str	r3, [r2]
2797:../src/FreeRTOS/tasks.c ****                     }
 2646              		.loc 1 2797 25 is_stmt 1 view .LVU766
 2647 01d4 B0FFFFEA 		b	.L170
 2648              	.LVL235:
 2649              	.L166:
2797:../src/FreeRTOS/tasks.c ****                     }
 2650              		.loc 1 2797 25 is_stmt 0 view .LVU767
 2651              	.LBE12:
2890:../src/FreeRTOS/tasks.c **** 
 2652              		.loc 1 2890 9 is_stmt 1 view .LVU768
 2653 01d8 003000E3 		movw	r3, #:lower16:.LANCHOR21
 2654 01dc 003040E3 		movt	r3, #:upper16:.LANCHOR21
 2655 01e0 002093E5 		ldr	r2, [r3]
 2656 01e4 012082E2 		add	r2, r2, #1
 2657 01e8 002083E5 		str	r2, [r3]
2736:../src/FreeRTOS/tasks.c **** 
 2658              		.loc 1 2736 16 is_stmt 0 view .LVU769
 2659 01ec 0060A0E3 		mov	r6, #0
 2660              	.LVL236:
 2661              	.L165:
2902:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2662              		.loc 1 2902 1 view .LVU770
 2663 01f0 0600A0E1 		mov	r0, r6
 2664 01f4 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2665              		.cfi_endproc
 2666              	.LFE28:
 2668              		.section	.text.xTaskResumeAll,"ax",%progbits
 2669              		.align	2
 2670              		.global	xTaskResumeAll
 2671              		.syntax unified
 2672              		.arm
 2673              		.fpu neon
 2675              	xTaskResumeAll:
 2676              	.LFB20:
2218:../src/FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 2677              		.loc 1 2218 1 is_stmt 1 view -0
 2678              		.cfi_startproc
 2679              		@ args = 0, pretend = 0, frame = 0
 2680              		@ frame_needed = 0, uses_anonymous_args = 0
 2681 0000 70402DE9 		push	{r4, r5, r6, lr}
 2682              		.cfi_def_cfa_offset 16
 2683              		.cfi_offset 4, -16
 2684              		.cfi_offset 5, -12
 2685              		.cfi_offset 6, -8
 2686              		.cfi_offset 14, -4
2219:../src/FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2687              		.loc 1 2219 5 view .LVU772
 2688              	.LVL237:
2220:../src/FreeRTOS/tasks.c **** 
 2689              		.loc 1 2220 5 view .LVU773
2224:../src/FreeRTOS/tasks.c **** 
 2690              		.loc 1 2224 5 view .LVU774
 2691 0004 003000E3 		movw	r3, #:lower16:.LANCHOR16
 2692 0008 003040E3 		movt	r3, #:upper16:.LANCHOR16
 2693 000c 003093E5 		ldr	r3, [r3]
 2694 0010 000053E3 		cmp	r3, #0
 2695 0014 0F00000A 		beq	.L201
 2696              	.L188:
2224:../src/FreeRTOS/tasks.c **** 
 2697              		.loc 1 2224 41 discriminator 3 view .LVU775
2231:../src/FreeRTOS/tasks.c ****     {
 2698              		.loc 1 2231 5 discriminator 3 view .LVU776
 2699 0018 FEFFFFEB 		bl	vPortEnterCritical
 2700              	.LVL238:
2231:../src/FreeRTOS/tasks.c ****     {
 2701              		.loc 1 2231 25 discriminator 3 view .LVU777
2233:../src/FreeRTOS/tasks.c **** 
 2702              		.loc 1 2233 9 discriminator 3 view .LVU778
 2703 001c 003000E3 		movw	r3, #:lower16:.LANCHOR16
 2704 0020 003040E3 		movt	r3, #:upper16:.LANCHOR16
 2705 0024 002093E5 		ldr	r2, [r3]
 2706 0028 012042E2 		sub	r2, r2, #1
 2707 002c 002083E5 		str	r2, [r3]
2235:../src/FreeRTOS/tasks.c ****         {
 2708              		.loc 1 2235 9 discriminator 3 view .LVU779
2235:../src/FreeRTOS/tasks.c ****         {
 2709              		.loc 1 2235 34 is_stmt 0 discriminator 3 view .LVU780
 2710 0030 003093E5 		ldr	r3, [r3]
2235:../src/FreeRTOS/tasks.c ****         {
 2711              		.loc 1 2235 11 discriminator 3 view .LVU781
 2712 0034 000053E3 		cmp	r3, #0
 2713 0038 5100001A 		bne	.L198
2237:../src/FreeRTOS/tasks.c ****             {
 2714              		.loc 1 2237 13 is_stmt 1 view .LVU782
2237:../src/FreeRTOS/tasks.c ****             {
 2715              		.loc 1 2237 40 is_stmt 0 view .LVU783
 2716 003c 003000E3 		movw	r3, #:lower16:.LANCHOR9
 2717 0040 003040E3 		movt	r3, #:upper16:.LANCHOR9
 2718 0044 003093E5 		ldr	r3, [r3]
2237:../src/FreeRTOS/tasks.c ****             {
 2719              		.loc 1 2237 15 view .LVU784
 2720 0048 000053E3 		cmp	r3, #0
 2721 004c 0600001A 		bne	.L199
2220:../src/FreeRTOS/tasks.c **** 
 2722              		.loc 1 2220 16 view .LVU785
 2723 0050 0040A0E3 		mov	r4, #0
 2724 0054 4B0000EA 		b	.L189
 2725              	.L201:
2224:../src/FreeRTOS/tasks.c **** 
 2726              		.loc 1 2224 5 is_stmt 1 discriminator 1 view .LVU786
 2727 0058 8B1EA0E3 		mov	r1, #2224
 2728 005c 000000E3 		movw	r0, #:lower16:.LC0
 2729 0060 000040E3 		movt	r0, #:upper16:.LC0
 2730 0064 FEFFFFEB 		bl	R_OS_AssertCalled
 2731              	.LVL239:
 2732 0068 EAFFFFEA 		b	.L188
 2733              	.L199:
2219:../src/FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2734              		.loc 1 2219 13 is_stmt 0 view .LVU787
 2735 006c 0040A0E3 		mov	r4, #0
 2736              	.LVL240:
 2737              	.L190:
2256:../src/FreeRTOS/tasks.c ****                     }
 2738              		.loc 1 2256 49 is_stmt 1 view .LVU788
2241:../src/FreeRTOS/tasks.c ****                 {
 2739              		.loc 1 2241 22 view .LVU789
2241:../src/FreeRTOS/tasks.c ****                 {
 2740              		.loc 1 2241 24 is_stmt 0 view .LVU790
 2741 0070 003000E3 		movw	r3, #:lower16:.LANCHOR3
 2742 0074 003040E3 		movt	r3, #:upper16:.LANCHOR3
 2743 0078 003093E5 		ldr	r3, [r3]
2241:../src/FreeRTOS/tasks.c ****                 {
 2744              		.loc 1 2241 22 view .LVU791
 2745 007c 000053E3 		cmp	r3, #0
 2746 0080 2100000A 		beq	.L202
2243:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2747              		.loc 1 2243 21 is_stmt 1 view .LVU792
2243:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2748              		.loc 1 2243 29 is_stmt 0 view .LVU793
 2749 0084 003000E3 		movw	r3, #:lower16:.LANCHOR3
 2750 0088 003040E3 		movt	r3, #:upper16:.LANCHOR3
 2751 008c 0C3093E5 		ldr	r3, [r3, #12]
2243:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2752              		.loc 1 2243 27 view .LVU794
 2753 0090 0C4093E5 		ldr	r4, [r3, #12]
 2754              	.LVL241:
2244:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2755              		.loc 1 2244 21 is_stmt 1 view .LVU795
2244:../src/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2756              		.loc 1 2244 30 is_stmt 0 view .LVU796
 2757 0094 180084E2 		add	r0, r4, #24
 2758 0098 FEFFFFEB 		bl	uxListRemove
 2759              	.LVL242:
2245:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2760              		.loc 1 2245 21 is_stmt 1 view .LVU797
2245:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2761              		.loc 1 2245 30 is_stmt 0 view .LVU798
 2762 009c 045084E2 		add	r5, r4, #4
 2763 00a0 0500A0E1 		mov	r0, r5
 2764 00a4 FEFFFFEB 		bl	uxListRemove
 2765              	.LVL243:
2246:../src/FreeRTOS/tasks.c **** 
 2766              		.loc 1 2246 21 is_stmt 1 view .LVU799
2246:../src/FreeRTOS/tasks.c **** 
 2767              		.loc 1 2246 21 view .LVU800
 2768 00a8 2C3094E5 		ldr	r3, [r4, #44]
 2769 00ac 002000E3 		movw	r2, #:lower16:.LANCHOR13
 2770 00b0 002040E3 		movt	r2, #:upper16:.LANCHOR13
 2771 00b4 002092E5 		ldr	r2, [r2]
 2772 00b8 020053E1 		cmp	r3, r2
2246:../src/FreeRTOS/tasks.c **** 
 2773              		.loc 1 2246 21 discriminator 1 view .LVU801
 2774 00bc 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 2775 00c0 00204083 		movthi	r2, #:upper16:.LANCHOR13
 2776 00c4 00308285 		strhi	r3, [r2]
 2777              	.L191:
2246:../src/FreeRTOS/tasks.c **** 
 2778              		.loc 1 2246 21 discriminator 3 view .LVU802
2246:../src/FreeRTOS/tasks.c **** 
 2779              		.loc 1 2246 21 discriminator 3 view .LVU803
 2780 00c8 000000E3 		movw	r0, #:lower16:.LANCHOR4
 2781 00cc 000040E3 		movt	r0, #:upper16:.LANCHOR4
 2782 00d0 033183E0 		add	r3, r3, r3, lsl #2
 2783 00d4 0510A0E1 		mov	r1, r5
 2784 00d8 030180E0 		add	r0, r0, r3, lsl #2
 2785 00dc FEFFFFEB 		bl	vListInsertEnd
 2786              	.LVL244:
2246:../src/FreeRTOS/tasks.c **** 
 2787              		.loc 1 2246 51 discriminator 3 view .LVU804
2250:../src/FreeRTOS/tasks.c ****                     {
 2788              		.loc 1 2250 21 discriminator 3 view .LVU805
2250:../src/FreeRTOS/tasks.c ****                     {
 2789              		.loc 1 2250 30 is_stmt 0 discriminator 3 view .LVU806
 2790 00e0 2C2094E5 		ldr	r2, [r4, #44]
2250:../src/FreeRTOS/tasks.c ****                     {
 2791              		.loc 1 2250 58 discriminator 3 view .LVU807
 2792 00e4 003000E3 		movw	r3, #:lower16:.LANCHOR10
 2793 00e8 003040E3 		movt	r3, #:upper16:.LANCHOR10
 2794 00ec 003093E5 		ldr	r3, [r3]
 2795 00f0 2C3093E5 		ldr	r3, [r3, #44]
2250:../src/FreeRTOS/tasks.c ****                     {
 2796              		.loc 1 2250 23 discriminator 3 view .LVU808
 2797 00f4 030052E1 		cmp	r2, r3
2252:../src/FreeRTOS/tasks.c ****                     }
 2798              		.loc 1 2252 25 is_stmt 1 view .LVU809
2252:../src/FreeRTOS/tasks.c ****                     }
 2799              		.loc 1 2252 39 is_stmt 0 view .LVU810
 2800 00f8 00300023 		movwcs	r3, #:lower16:.LANCHOR17
 2801 00fc 00304023 		movtcs	r3, #:upper16:.LANCHOR17
 2802 0100 0120A023 		movcs	r2, #1
 2803 0104 00208325 		strcs	r2, [r3]
 2804 0108 D8FFFFEA 		b	.L190
 2805              	.L202:
2260:../src/FreeRTOS/tasks.c ****                 {
 2806              		.loc 1 2260 17 is_stmt 1 view .LVU811
2260:../src/FreeRTOS/tasks.c ****                 {
 2807              		.loc 1 2260 19 is_stmt 0 view .LVU812
 2808 010c 000054E3 		cmp	r4, #0
 2809 0110 0000000A 		beq	.L194
2268:../src/FreeRTOS/tasks.c ****                 }
 2810              		.loc 1 2268 21 is_stmt 1 view .LVU813
 2811 0114 FEFFFFEB 		bl	prvResetNextTaskUnblockTime
 2812              	.LVL245:
 2813              	.L194:
 2814              	.LBB13:
2276:../src/FreeRTOS/tasks.c **** 
 2815              		.loc 1 2276 21 view .LVU814
2276:../src/FreeRTOS/tasks.c **** 
 2816              		.loc 1 2276 32 is_stmt 0 view .LVU815
 2817 0118 003000E3 		movw	r3, #:lower16:.LANCHOR21
 2818 011c 003040E3 		movt	r3, #:upper16:.LANCHOR21
 2819 0120 004093E5 		ldr	r4, [r3]
 2820              	.LVL246:
2278:../src/FreeRTOS/tasks.c ****                     {
 2821              		.loc 1 2278 21 is_stmt 1 view .LVU816
2278:../src/FreeRTOS/tasks.c ****                     {
 2822              		.loc 1 2278 23 is_stmt 0 view .LVU817
 2823 0124 000054E3 		cmp	r4, #0
 2824 0128 0900001A 		bne	.L197
 2825              	.L195:
2298:../src/FreeRTOS/tasks.c ****                     }
 2826              		.loc 1 2298 49 is_stmt 1 view .LVU818
 2827              	.LBE13:
2302:../src/FreeRTOS/tasks.c ****                 {
 2828              		.loc 1 2302 17 view .LVU819
2302:../src/FreeRTOS/tasks.c ****                 {
 2829              		.loc 1 2302 35 is_stmt 0 view .LVU820
 2830 012c 003000E3 		movw	r3, #:lower16:.LANCHOR17
 2831 0130 003040E3 		movt	r3, #:upper16:.LANCHOR17
 2832 0134 004093E5 		ldr	r4, [r3]
 2833              	.LVL247:
2302:../src/FreeRTOS/tasks.c ****                 {
 2834              		.loc 1 2302 19 view .LVU821
 2835 0138 000054E3 		cmp	r4, #0
 2836 013c 1100000A 		beq	.L189
2306:../src/FreeRTOS/tasks.c ****                         }
 2837              		.loc 1 2306 29 is_stmt 1 view .LVU822
 2838              	.LVL248:
2309:../src/FreeRTOS/tasks.c ****                 }
 2839              		.loc 1 2309 21 view .LVU823
 2840              		.syntax divided
 2841              	@ 2309 "../src/FreeRTOS/tasks.c" 1
 2842 0140 000000EF 		SWI 0
 2843              	@ 0 "" 2
2309:../src/FreeRTOS/tasks.c ****                 }
 2844              		.loc 1 2309 52 view .LVU824
2306:../src/FreeRTOS/tasks.c ****                         }
 2845              		.loc 1 2306 45 is_stmt 0 view .LVU825
 2846              		.arm
 2847              		.syntax unified
 2848 0144 0140A0E3 		mov	r4, #1
 2849 0148 0E0000EA 		b	.L189
 2850              	.LVL249:
 2851              	.L196:
 2852              	.LBB14:
2288:../src/FreeRTOS/tasks.c ****                             }
 2853              		.loc 1 2288 57 is_stmt 1 view .LVU826
2291:../src/FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 2854              		.loc 1 2291 29 view .LVU827
2292:../src/FreeRTOS/tasks.c **** 
 2855              		.loc 1 2292 32 view .LVU828
2292:../src/FreeRTOS/tasks.c **** 
 2856              		.loc 1 2292 25 is_stmt 0 view .LVU829
 2857 014c 014054E2 		subs	r4, r4, #1
 2858              	.LVL250:
2292:../src/FreeRTOS/tasks.c **** 
 2859              		.loc 1 2292 25 view .LVU830
 2860 0150 0600000A 		beq	.L203
 2861              	.L197:
2280:../src/FreeRTOS/tasks.c ****                         {
 2862              		.loc 1 2280 25 is_stmt 1 view .LVU831
2282:../src/FreeRTOS/tasks.c ****                             {
 2863              		.loc 1 2282 29 view .LVU832
2282:../src/FreeRTOS/tasks.c ****                             {
 2864              		.loc 1 2282 33 is_stmt 0 view .LVU833
 2865 0154 FEFFFFEB 		bl	xTaskIncrementTick
 2866              	.LVL251:
2282:../src/FreeRTOS/tasks.c ****                             {
 2867              		.loc 1 2282 31 view .LVU834
 2868 0158 000050E3 		cmp	r0, #0
2284:../src/FreeRTOS/tasks.c ****                             }
 2869              		.loc 1 2284 33 is_stmt 1 view .LVU835
2284:../src/FreeRTOS/tasks.c ****                             }
 2870              		.loc 1 2284 47 is_stmt 0 view .LVU836
 2871 015c 00300013 		movwne	r3, #:lower16:.LANCHOR17
 2872 0160 00304013 		movtne	r3, #:upper16:.LANCHOR17
 2873 0164 0120A013 		movne	r2, #1
 2874 0168 00208315 		strne	r2, [r3]
 2875 016c F6FFFFEA 		b	.L196
 2876              	.L203:
2294:../src/FreeRTOS/tasks.c ****                     }
 2877              		.loc 1 2294 25 is_stmt 1 view .LVU837
2294:../src/FreeRTOS/tasks.c ****                     }
 2878              		.loc 1 2294 38 is_stmt 0 view .LVU838
 2879 0170 003000E3 		movw	r3, #:lower16:.LANCHOR21
 2880 0174 003040E3 		movt	r3, #:upper16:.LANCHOR21
 2881 0178 0020A0E3 		mov	r2, #0
 2882 017c 002083E5 		str	r2, [r3]
 2883 0180 E9FFFFEA 		b	.L195
 2884              	.LVL252:
 2885              	.L198:
2294:../src/FreeRTOS/tasks.c ****                     }
 2886              		.loc 1 2294 38 view .LVU839
 2887              	.LBE14:
2220:../src/FreeRTOS/tasks.c **** 
 2888              		.loc 1 2220 16 view .LVU840
 2889 0184 0040A0E3 		mov	r4, #0
 2890              	.LVL253:
 2891              	.L189:
2319:../src/FreeRTOS/tasks.c ****         }
 2892              		.loc 1 2319 37 is_stmt 1 view .LVU841
2322:../src/FreeRTOS/tasks.c **** 
 2893              		.loc 1 2322 5 view .LVU842
 2894 0188 FEFFFFEB 		bl	vPortExitCritical
 2895              	.LVL254:
2322:../src/FreeRTOS/tasks.c **** 
 2896              		.loc 1 2322 24 view .LVU843
2324:../src/FreeRTOS/tasks.c **** }
 2897              		.loc 1 2324 5 view .LVU844
2325:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2898              		.loc 1 2325 1 is_stmt 0 view .LVU845
 2899 018c 0400A0E1 		mov	r0, r4
 2900 0190 7080BDE8 		pop	{r4, r5, r6, pc}
 2901              		.cfi_endproc
 2902              	.LFE20:
 2904              		.section	.text.xTaskDelayUntil,"ax",%progbits
 2905              		.align	2
 2906              		.global	xTaskDelayUntil
 2907              		.syntax unified
 2908              		.arm
 2909              		.fpu neon
 2911              	xTaskDelayUntil:
 2912              	.LVL255:
 2913              	.LFB7:
1258:../src/FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 2914              		.loc 1 1258 5 is_stmt 1 view -0
 2915              		.cfi_startproc
 2916              		@ args = 0, pretend = 0, frame = 0
 2917              		@ frame_needed = 0, uses_anonymous_args = 0
1258:../src/FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 2918              		.loc 1 1258 5 is_stmt 0 view .LVU847
 2919 0000 70402DE9 		push	{r4, r5, r6, lr}
 2920              		.cfi_def_cfa_offset 16
 2921              		.cfi_offset 4, -16
 2922              		.cfi_offset 5, -12
 2923              		.cfi_offset 6, -8
 2924              		.cfi_offset 14, -4
 2925 0004 0140A0E1 		mov	r4, r1
1259:../src/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2926              		.loc 1 1259 9 is_stmt 1 view .LVU848
1260:../src/FreeRTOS/tasks.c **** 
 2927              		.loc 1 1260 9 view .LVU849
 2928              	.LVL256:
1262:../src/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2929              		.loc 1 1262 9 view .LVU850
 2930 0008 005050E2 		subs	r5, r0, #0
 2931 000c 1300000A 		beq	.L217
 2932              	.LVL257:
 2933              	.L205:
1262:../src/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2934              		.loc 1 1262 43 discriminator 3 view .LVU851
1263:../src/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2935              		.loc 1 1263 9 discriminator 3 view .LVU852
 2936 0010 000054E3 		cmp	r4, #0
 2937 0014 1600000A 		beq	.L218
 2938              	.L206:
1263:../src/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2939              		.loc 1 1263 48 discriminator 3 view .LVU853
1264:../src/FreeRTOS/tasks.c **** 
 2940              		.loc 1 1264 9 discriminator 3 view .LVU854
 2941 0018 003000E3 		movw	r3, #:lower16:.LANCHOR16
 2942 001c 003040E3 		movt	r3, #:upper16:.LANCHOR16
 2943 0020 003093E5 		ldr	r3, [r3]
 2944 0024 000053E3 		cmp	r3, #0
 2945 0028 1600001A 		bne	.L219
 2946              	.L207:
1264:../src/FreeRTOS/tasks.c **** 
 2947              		.loc 1 1264 50 discriminator 3 view .LVU855
1266:../src/FreeRTOS/tasks.c ****         {
 2948              		.loc 1 1266 9 discriminator 3 view .LVU856
 2949 002c FEFFFFEB 		bl	vTaskSuspendAll
 2950              	.LVL258:
 2951              	.LBB15:
1270:../src/FreeRTOS/tasks.c **** 
 2952              		.loc 1 1270 13 discriminator 3 view .LVU857
1270:../src/FreeRTOS/tasks.c **** 
 2953              		.loc 1 1270 30 is_stmt 0 discriminator 3 view .LVU858
 2954 0030 003000E3 		movw	r3, #:lower16:.LANCHOR15
 2955 0034 003040E3 		movt	r3, #:upper16:.LANCHOR15
 2956 0038 000093E5 		ldr	r0, [r3]
 2957              	.LVL259:
1273:../src/FreeRTOS/tasks.c **** 
 2958              		.loc 1 1273 13 is_stmt 1 discriminator 3 view .LVU859
1273:../src/FreeRTOS/tasks.c **** 
 2959              		.loc 1 1273 27 is_stmt 0 discriminator 3 view .LVU860
 2960 003c 002095E5 		ldr	r2, [r5]
1273:../src/FreeRTOS/tasks.c **** 
 2961              		.loc 1 1273 25 discriminator 3 view .LVU861
 2962 0040 044082E0 		add	r4, r2, r4
 2963              	.LVL260:
1275:../src/FreeRTOS/tasks.c ****             {
 2964              		.loc 1 1275 13 is_stmt 1 discriminator 3 view .LVU862
1275:../src/FreeRTOS/tasks.c ****             {
 2965              		.loc 1 1275 15 is_stmt 0 discriminator 3 view .LVU863
 2966 0044 000052E1 		cmp	r2, r0
 2967 0048 1900009A 		bls	.L208
1282:../src/FreeRTOS/tasks.c ****                 {
 2968              		.loc 1 1282 17 is_stmt 1 view .LVU864
1282:../src/FreeRTOS/tasks.c ****                 {
 2969              		.loc 1 1282 19 is_stmt 0 view .LVU865
 2970 004c 040052E1 		cmp	r2, r4
 2971 0050 1100008A 		bhi	.L209
1307:../src/FreeRTOS/tasks.c **** 
 2972              		.loc 1 1307 13 is_stmt 1 view .LVU866
1307:../src/FreeRTOS/tasks.c **** 
 2973              		.loc 1 1307 33 is_stmt 0 view .LVU867
 2974 0054 004085E5 		str	r4, [r5]
1309:../src/FreeRTOS/tasks.c ****             {
 2975              		.loc 1 1309 13 is_stmt 1 view .LVU868
 2976              	.LBE15:
1260:../src/FreeRTOS/tasks.c **** 
 2977              		.loc 1 1260 37 is_stmt 0 view .LVU869
 2978 0058 0040A0E3 		mov	r4, #0
 2979              	.LVL261:
1260:../src/FreeRTOS/tasks.c **** 
 2980              		.loc 1 1260 37 view .LVU870
 2981 005c 1D0000EA 		b	.L210
 2982              	.LVL262:
 2983              	.L217:
1262:../src/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2984              		.loc 1 1262 9 is_stmt 1 discriminator 1 view .LVU871
 2985 0060 EE1400E3 		movw	r1, #1262
 2986              	.LVL263:
1262:../src/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2987              		.loc 1 1262 9 is_stmt 0 discriminator 1 view .LVU872
 2988 0064 000000E3 		movw	r0, #:lower16:.LC0
 2989              	.LVL264:
1262:../src/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2990              		.loc 1 1262 9 discriminator 1 view .LVU873
 2991 0068 000040E3 		movt	r0, #:upper16:.LC0
 2992 006c FEFFFFEB 		bl	R_OS_AssertCalled
 2993              	.LVL265:
 2994 0070 E6FFFFEA 		b	.L205
 2995              	.L218:
1263:../src/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2996              		.loc 1 1263 9 is_stmt 1 discriminator 1 view .LVU874
 2997 0074 EF1400E3 		movw	r1, #1263
 2998 0078 000000E3 		movw	r0, #:lower16:.LC0
 2999 007c 000040E3 		movt	r0, #:upper16:.LC0
 3000 0080 FEFFFFEB 		bl	R_OS_AssertCalled
 3001              	.LVL266:
 3002 0084 E3FFFFEA 		b	.L206
 3003              	.L219:
1264:../src/FreeRTOS/tasks.c **** 
 3004              		.loc 1 1264 9 discriminator 1 view .LVU875
 3005 0088 4F1EA0E3 		mov	r1, #1264
 3006 008c 000000E3 		movw	r0, #:lower16:.LC0
 3007 0090 000040E3 		movt	r0, #:upper16:.LC0
 3008 0094 FEFFFFEB 		bl	R_OS_AssertCalled
 3009              	.LVL267:
 3010 0098 E3FFFFEA 		b	.L207
 3011              	.LVL268:
 3012              	.L209:
 3013              	.LBB16:
1282:../src/FreeRTOS/tasks.c ****                 {
 3014              		.loc 1 1282 59 is_stmt 0 discriminator 1 view .LVU876
 3015 009c 040050E1 		cmp	r0, r4
1307:../src/FreeRTOS/tasks.c **** 
 3016              		.loc 1 1307 13 is_stmt 1 view .LVU877
1307:../src/FreeRTOS/tasks.c **** 
 3017              		.loc 1 1307 33 is_stmt 0 view .LVU878
 3018 00a0 00408525 		strcs	r4, [r5]
1309:../src/FreeRTOS/tasks.c ****             {
 3019              		.loc 1 1309 13 is_stmt 1 view .LVU879
 3020              	.LBE16:
1260:../src/FreeRTOS/tasks.c **** 
 3021              		.loc 1 1260 37 is_stmt 0 view .LVU880
 3022 00a4 0040A023 		movcs	r4, #0
 3023              	.LVL269:
1260:../src/FreeRTOS/tasks.c **** 
 3024              		.loc 1 1260 37 view .LVU881
 3025 00a8 0A00002A 		bcs	.L210
 3026              	.LVL270:
 3027              	.L211:
 3028              	.LBB17:
1284:../src/FreeRTOS/tasks.c ****                 }
 3029              		.loc 1 1284 21 is_stmt 1 view .LVU882
1307:../src/FreeRTOS/tasks.c **** 
 3030              		.loc 1 1307 13 view .LVU883
1307:../src/FreeRTOS/tasks.c **** 
 3031              		.loc 1 1307 33 is_stmt 0 view .LVU884
 3032 00ac 004085E5 		str	r4, [r5]
1309:../src/FreeRTOS/tasks.c ****             {
 3033              		.loc 1 1309 13 is_stmt 1 view .LVU885
 3034 00b0 040000EA 		b	.L212
 3035              	.LVL271:
 3036              	.L208:
1296:../src/FreeRTOS/tasks.c ****                 {
 3037              		.loc 1 1296 17 view .LVU886
1296:../src/FreeRTOS/tasks.c ****                 {
 3038              		.loc 1 1296 19 is_stmt 0 view .LVU887
 3039 00b4 040052E1 		cmp	r2, r4
 3040 00b8 0100008A 		bhi	.L213
1296:../src/FreeRTOS/tasks.c ****                 {
 3041              		.loc 1 1296 59 discriminator 1 view .LVU888
 3042 00bc 040050E1 		cmp	r0, r4
 3043 00c0 0A00002A 		bcs	.L214
 3044              	.L213:
1298:../src/FreeRTOS/tasks.c ****                 }
 3045              		.loc 1 1298 21 is_stmt 1 view .LVU889
 3046              	.LVL272:
1307:../src/FreeRTOS/tasks.c **** 
 3047              		.loc 1 1307 13 view .LVU890
1307:../src/FreeRTOS/tasks.c **** 
 3048              		.loc 1 1307 33 is_stmt 0 view .LVU891
 3049 00c4 004085E5 		str	r4, [r5]
1309:../src/FreeRTOS/tasks.c ****             {
 3050              		.loc 1 1309 13 is_stmt 1 view .LVU892
 3051              	.L212:
1311:../src/FreeRTOS/tasks.c **** 
 3052              		.loc 1 1311 53 view .LVU893
1315:../src/FreeRTOS/tasks.c ****             }
 3053              		.loc 1 1315 17 view .LVU894
 3054 00c8 0010A0E3 		mov	r1, #0
 3055 00cc 000044E0 		sub	r0, r4, r0
 3056              	.LVL273:
1315:../src/FreeRTOS/tasks.c ****             }
 3057              		.loc 1 1315 17 is_stmt 0 view .LVU895
 3058 00d0 FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 3059              	.LVL274:
 3060 00d4 0140A0E3 		mov	r4, #1
 3061              	.LVL275:
 3062              	.L210:
1319:../src/FreeRTOS/tasks.c ****             }
 3063              		.loc 1 1319 41 is_stmt 1 view .LVU896
 3064              	.LBE17:
1322:../src/FreeRTOS/tasks.c **** 
 3065              		.loc 1 1322 9 view .LVU897
1322:../src/FreeRTOS/tasks.c **** 
 3066              		.loc 1 1322 27 is_stmt 0 view .LVU898
 3067 00d8 FEFFFFEB 		bl	xTaskResumeAll
 3068              	.LVL276:
1326:../src/FreeRTOS/tasks.c ****         {
 3069              		.loc 1 1326 9 is_stmt 1 view .LVU899
1326:../src/FreeRTOS/tasks.c ****         {
 3070              		.loc 1 1326 11 is_stmt 0 view .LVU900
 3071 00dc 000050E3 		cmp	r0, #0
 3072 00e0 0000001A 		bne	.L204
1328:../src/FreeRTOS/tasks.c ****         }
 3073              		.loc 1 1328 13 is_stmt 1 view .LVU901
 3074              		.syntax divided
 3075              	@ 1328 "../src/FreeRTOS/tasks.c" 1
 3076 00e4 000000EF 		SWI 0
 3077              	@ 0 "" 2
1328:../src/FreeRTOS/tasks.c ****         }
 3078              		.loc 1 1328 35 view .LVU902
1332:../src/FreeRTOS/tasks.c ****         }
 3079              		.loc 1 1332 37 view .LVU903
1335:../src/FreeRTOS/tasks.c ****     }
 3080              		.loc 1 1335 9 view .LVU904
 3081              		.arm
 3082              		.syntax unified
 3083              	.L204:
1336:../src/FreeRTOS/tasks.c **** 
 3084              		.loc 1 1336 5 is_stmt 0 view .LVU905
 3085 00e8 0400A0E1 		mov	r0, r4
 3086              	.LVL277:
1336:../src/FreeRTOS/tasks.c **** 
 3087              		.loc 1 1336 5 view .LVU906
 3088 00ec 7080BDE8 		pop	{r4, r5, r6, pc}
 3089              	.LVL278:
 3090              	.L214:
 3091              	.LBB18:
1307:../src/FreeRTOS/tasks.c **** 
 3092              		.loc 1 1307 13 is_stmt 1 view .LVU907
1307:../src/FreeRTOS/tasks.c **** 
 3093              		.loc 1 1307 33 is_stmt 0 view .LVU908
 3094 00f0 004085E5 		str	r4, [r5]
1309:../src/FreeRTOS/tasks.c ****             {
 3095              		.loc 1 1309 13 is_stmt 1 view .LVU909
 3096              	.LBE18:
1260:../src/FreeRTOS/tasks.c **** 
 3097              		.loc 1 1260 37 is_stmt 0 view .LVU910
 3098 00f4 0040A0E3 		mov	r4, #0
 3099              	.LVL279:
1260:../src/FreeRTOS/tasks.c **** 
 3100              		.loc 1 1260 37 view .LVU911
 3101 00f8 F6FFFFEA 		b	.L210
 3102              		.cfi_endproc
 3103              	.LFE7:
 3105              		.section	.text.vTaskDelay,"ax",%progbits
 3106              		.align	2
 3107              		.global	vTaskDelay
 3108              		.syntax unified
 3109              		.arm
 3110              		.fpu neon
 3112              	vTaskDelay:
 3113              	.LVL280:
 3114              	.LFB8:
1344:../src/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3115              		.loc 1 1344 5 is_stmt 1 view -0
 3116              		.cfi_startproc
 3117              		@ args = 0, pretend = 0, frame = 0
 3118              		@ frame_needed = 0, uses_anonymous_args = 0
1344:../src/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3119              		.loc 1 1344 5 is_stmt 0 view .LVU913
 3120 0000 10402DE9 		push	{r4, lr}
 3121              		.cfi_def_cfa_offset 8
 3122              		.cfi_offset 4, -8
 3123              		.cfi_offset 14, -4
1345:../src/FreeRTOS/tasks.c **** 
 3124              		.loc 1 1345 9 is_stmt 1 view .LVU914
 3125              	.LVL281:
1348:../src/FreeRTOS/tasks.c ****         {
 3126              		.loc 1 1348 9 view .LVU915
1348:../src/FreeRTOS/tasks.c ****         {
 3127              		.loc 1 1348 11 is_stmt 0 view .LVU916
 3128 0004 004050E2 		subs	r4, r0, #0
 3129 0008 0B00000A 		beq	.L221
1350:../src/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3130              		.loc 1 1350 13 is_stmt 1 view .LVU917
 3131 000c 003000E3 		movw	r3, #:lower16:.LANCHOR16
 3132 0010 003040E3 		movt	r3, #:upper16:.LANCHOR16
 3133 0014 003093E5 		ldr	r3, [r3]
 3134 0018 000053E3 		cmp	r3, #0
 3135 001c 0800001A 		bne	.L225
 3136              	.LVL282:
 3137              	.L222:
1350:../src/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3138              		.loc 1 1350 54 discriminator 3 view .LVU918
1351:../src/FreeRTOS/tasks.c ****             {
 3139              		.loc 1 1351 13 discriminator 3 view .LVU919
 3140 0020 FEFFFFEB 		bl	vTaskSuspendAll
 3141              	.LVL283:
1353:../src/FreeRTOS/tasks.c **** 
 3142              		.loc 1 1353 34 discriminator 3 view .LVU920
1362:../src/FreeRTOS/tasks.c ****             }
 3143              		.loc 1 1362 17 discriminator 3 view .LVU921
 3144 0024 0010A0E3 		mov	r1, #0
 3145 0028 0400A0E1 		mov	r0, r4
 3146 002c FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 3147              	.LVL284:
1364:../src/FreeRTOS/tasks.c ****         }
 3148              		.loc 1 1364 13 discriminator 3 view .LVU922
1364:../src/FreeRTOS/tasks.c ****         }
 3149              		.loc 1 1364 31 is_stmt 0 discriminator 3 view .LVU923
 3150 0030 FEFFFFEB 		bl	xTaskResumeAll
 3151              	.LVL285:
1368:../src/FreeRTOS/tasks.c ****         }
 3152              		.loc 1 1368 37 is_stmt 1 discriminator 3 view .LVU924
1373:../src/FreeRTOS/tasks.c ****         {
 3153              		.loc 1 1373 9 discriminator 3 view .LVU925
1373:../src/FreeRTOS/tasks.c ****         {
 3154              		.loc 1 1373 11 is_stmt 0 discriminator 3 view .LVU926
 3155 0034 000050E3 		cmp	r0, #0
 3156 0038 1080BD18 		popne	{r4, pc}
 3157              	.LVL286:
 3158              	.L221:
1375:../src/FreeRTOS/tasks.c ****         }
 3159              		.loc 1 1375 13 is_stmt 1 view .LVU927
 3160              		.syntax divided
 3161              	@ 1375 "../src/FreeRTOS/tasks.c" 1
 3162 003c 000000EF 		SWI 0
 3163              	@ 0 "" 2
1375:../src/FreeRTOS/tasks.c ****         }
 3164              		.loc 1 1375 35 view .LVU928
1379:../src/FreeRTOS/tasks.c ****         }
 3165              		.loc 1 1379 37 view .LVU929
1381:../src/FreeRTOS/tasks.c **** 
 3166              		.loc 1 1381 5 is_stmt 0 view .LVU930
 3167              		.arm
 3168              		.syntax unified
 3169 0040 1080BDE8 		pop	{r4, pc}
 3170              	.LVL287:
 3171              	.L225:
1350:../src/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3172              		.loc 1 1350 13 is_stmt 1 discriminator 1 view .LVU931
 3173 0044 461500E3 		movw	r1, #1350
 3174 0048 000000E3 		movw	r0, #:lower16:.LC0
 3175              	.LVL288:
1350:../src/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3176              		.loc 1 1350 13 is_stmt 0 discriminator 1 view .LVU932
 3177 004c 000040E3 		movt	r0, #:upper16:.LC0
 3178 0050 FEFFFFEB 		bl	R_OS_AssertCalled
 3179              	.LVL289:
 3180 0054 F1FFFFEA 		b	.L222
 3181              		.cfi_endproc
 3182              	.LFE8:
 3184              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3185              		.align	2
 3186              		.global	xTaskCatchUpTicks
 3187              		.syntax unified
 3188              		.arm
 3189              		.fpu neon
 3191              	xTaskCatchUpTicks:
 3192              	.LVL290:
 3193              	.LFB26:
2635:../src/FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 3194              		.loc 1 2635 1 is_stmt 1 view -0
 3195              		.cfi_startproc
 3196              		@ args = 0, pretend = 0, frame = 0
 3197              		@ frame_needed = 0, uses_anonymous_args = 0
2635:../src/FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 3198              		.loc 1 2635 1 is_stmt 0 view .LVU934
 3199 0000 10402DE9 		push	{r4, lr}
 3200              		.cfi_def_cfa_offset 8
 3201              		.cfi_offset 4, -8
 3202              		.cfi_offset 14, -4
 3203 0004 0040A0E1 		mov	r4, r0
2636:../src/FreeRTOS/tasks.c **** 
 3204              		.loc 1 2636 5 is_stmt 1 view .LVU935
2640:../src/FreeRTOS/tasks.c **** 
 3205              		.loc 1 2640 5 view .LVU936
 3206 0008 003000E3 		movw	r3, #:lower16:.LANCHOR16
 3207 000c 003040E3 		movt	r3, #:upper16:.LANCHOR16
 3208 0010 003093E5 		ldr	r3, [r3]
 3209 0014 000053E3 		cmp	r3, #0
 3210 0018 0700001A 		bne	.L229
 3211              	.LVL291:
 3212              	.L227:
2640:../src/FreeRTOS/tasks.c **** 
 3213              		.loc 1 2640 46 discriminator 3 view .LVU937
2644:../src/FreeRTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
 3214              		.loc 1 2644 5 discriminator 3 view .LVU938
 3215 001c FEFFFFEB 		bl	vTaskSuspendAll
 3216              	.LVL292:
2645:../src/FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3217              		.loc 1 2645 5 discriminator 3 view .LVU939
2645:../src/FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3218              		.loc 1 2645 18 is_stmt 0 discriminator 3 view .LVU940
 3219 0020 003000E3 		movw	r3, #:lower16:.LANCHOR21
 3220 0024 003040E3 		movt	r3, #:upper16:.LANCHOR21
 3221 0028 002093E5 		ldr	r2, [r3]
 3222 002c 040082E0 		add	r0, r2, r4
 3223 0030 000083E5 		str	r0, [r3]
2646:../src/FreeRTOS/tasks.c **** 
 3224              		.loc 1 2646 5 is_stmt 1 discriminator 3 view .LVU941
2646:../src/FreeRTOS/tasks.c **** 
 3225              		.loc 1 2646 22 is_stmt 0 discriminator 3 view .LVU942
 3226 0034 FEFFFFEB 		bl	xTaskResumeAll
 3227              	.LVL293:
2648:../src/FreeRTOS/tasks.c **** }
 3228              		.loc 1 2648 5 is_stmt 1 discriminator 3 view .LVU943
2649:../src/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3229              		.loc 1 2649 1 is_stmt 0 discriminator 3 view .LVU944
 3230 0038 1080BDE8 		pop	{r4, pc}
 3231              	.LVL294:
 3232              	.L229:
2640:../src/FreeRTOS/tasks.c **** 
 3233              		.loc 1 2640 5 is_stmt 1 discriminator 1 view .LVU945
 3234 003c A51EA0E3 		mov	r1, #2640
 3235 0040 000000E3 		movw	r0, #:lower16:.LC0
 3236              	.LVL295:
2640:../src/FreeRTOS/tasks.c **** 
 3237              		.loc 1 2640 5 is_stmt 0 discriminator 1 view .LVU946
 3238 0044 000040E3 		movt	r0, #:upper16:.LC0
 3239 0048 FEFFFFEB 		bl	R_OS_AssertCalled
 3240              	.LVL296:
 3241 004c F2FFFFEA 		b	.L227
 3242              		.cfi_endproc
 3243              	.LFE26:
 3245              		.section	.text.xTaskAbortDelay,"ax",%progbits
 3246              		.align	2
 3247              		.global	xTaskAbortDelay
 3248              		.syntax unified
 3249              		.arm
 3250              		.fpu neon
 3252              	xTaskAbortDelay:
 3253              	.LVL297:
 3254              	.LFB27:
2655:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
 3255              		.loc 1 2655 5 is_stmt 1 view -0
 3256              		.cfi_startproc
 3257              		@ args = 0, pretend = 0, frame = 0
 3258              		@ frame_needed = 0, uses_anonymous_args = 0
2655:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
 3259              		.loc 1 2655 5 is_stmt 0 view .LVU948
 3260 0000 70402DE9 		push	{r4, r5, r6, lr}
 3261              		.cfi_def_cfa_offset 16
 3262              		.cfi_offset 4, -16
 3263              		.cfi_offset 5, -12
 3264              		.cfi_offset 6, -8
 3265              		.cfi_offset 14, -4
2656:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 3266              		.loc 1 2656 9 is_stmt 1 view .LVU949
 3267              	.LVL298:
2657:../src/FreeRTOS/tasks.c **** 
 3268              		.loc 1 2657 9 view .LVU950
2659:../src/FreeRTOS/tasks.c **** 
 3269              		.loc 1 2659 9 view .LVU951
 3270 0004 004050E2 		subs	r4, r0, #0
 3271 0008 0800000A 		beq	.L238
 3272              	.LVL299:
 3273              	.L231:
2659:../src/FreeRTOS/tasks.c **** 
 3274              		.loc 1 2659 30 discriminator 3 view .LVU952
2661:../src/FreeRTOS/tasks.c ****         {
 3275              		.loc 1 2661 9 discriminator 3 view .LVU953
 3276 000c FEFFFFEB 		bl	vTaskSuspendAll
 3277              	.LVL300:
2665:../src/FreeRTOS/tasks.c ****             {
 3278              		.loc 1 2665 13 discriminator 3 view .LVU954
2665:../src/FreeRTOS/tasks.c ****             {
 3279              		.loc 1 2665 17 is_stmt 0 discriminator 3 view .LVU955
 3280 0010 0400A0E1 		mov	r0, r4
 3281 0014 FEFFFFEB 		bl	eTaskGetState
 3282              	.LVL301:
2665:../src/FreeRTOS/tasks.c ****             {
 3283              		.loc 1 2665 15 discriminator 3 view .LVU956
 3284 0018 020050E3 		cmp	r0, #2
 3285 001c 0800000A 		beq	.L239
2721:../src/FreeRTOS/tasks.c ****             }
 3286              		.loc 1 2721 25 view .LVU957
 3287 0020 0040A0E3 		mov	r4, #0
 3288              	.LVL302:
 3289              	.L232:
2724:../src/FreeRTOS/tasks.c **** 
 3290              		.loc 1 2724 9 is_stmt 1 view .LVU958
2724:../src/FreeRTOS/tasks.c **** 
 3291              		.loc 1 2724 18 is_stmt 0 view .LVU959
 3292 0024 FEFFFFEB 		bl	xTaskResumeAll
 3293              	.LVL303:
2726:../src/FreeRTOS/tasks.c ****     }
 3294              		.loc 1 2726 9 is_stmt 1 view .LVU960
2727:../src/FreeRTOS/tasks.c **** 
 3295              		.loc 1 2727 5 is_stmt 0 view .LVU961
 3296 0028 0400A0E1 		mov	r0, r4
 3297 002c 7080BDE8 		pop	{r4, r5, r6, pc}
 3298              	.LVL304:
 3299              	.L238:
2659:../src/FreeRTOS/tasks.c **** 
 3300              		.loc 1 2659 9 is_stmt 1 discriminator 1 view .LVU962
 3301 0030 631A00E3 		movw	r1, #2659
 3302 0034 000000E3 		movw	r0, #:lower16:.LC0
 3303              	.LVL305:
2659:../src/FreeRTOS/tasks.c **** 
 3304              		.loc 1 2659 9 is_stmt 0 discriminator 1 view .LVU963
 3305 0038 000040E3 		movt	r0, #:upper16:.LC0
 3306 003c FEFFFFEB 		bl	R_OS_AssertCalled
 3307              	.LVL306:
 3308 0040 F1FFFFEA 		b	.L231
 3309              	.L239:
2667:../src/FreeRTOS/tasks.c **** 
 3310              		.loc 1 2667 17 is_stmt 1 view .LVU964
 3311              	.LVL307:
2672:../src/FreeRTOS/tasks.c **** 
 3312              		.loc 1 2672 17 view .LVU965
2672:../src/FreeRTOS/tasks.c **** 
 3313              		.loc 1 2672 26 is_stmt 0 view .LVU966
 3314 0044 045084E2 		add	r5, r4, #4
 3315 0048 0500A0E1 		mov	r0, r5
 3316 004c FEFFFFEB 		bl	uxListRemove
 3317              	.LVL308:
2678:../src/FreeRTOS/tasks.c ****                 {
 3318              		.loc 1 2678 17 is_stmt 1 view .LVU967
 3319 0050 FEFFFFEB 		bl	vPortEnterCritical
 3320              	.LVL309:
2678:../src/FreeRTOS/tasks.c ****                 {
 3321              		.loc 1 2678 37 view .LVU968
2680:../src/FreeRTOS/tasks.c ****                     {
 3322              		.loc 1 2680 21 view .LVU969
2680:../src/FreeRTOS/tasks.c ****                     {
 3323              		.loc 1 2680 25 is_stmt 0 view .LVU970
 3324 0054 283094E5 		ldr	r3, [r4, #40]
2680:../src/FreeRTOS/tasks.c ****                     {
 3325              		.loc 1 2680 23 view .LVU971
 3326 0058 000053E3 		cmp	r3, #0
 3327 005c 0300000A 		beq	.L233
2682:../src/FreeRTOS/tasks.c **** 
 3328              		.loc 1 2682 25 is_stmt 1 view .LVU972
2682:../src/FreeRTOS/tasks.c **** 
 3329              		.loc 1 2682 34 is_stmt 0 view .LVU973
 3330 0060 180084E2 		add	r0, r4, #24
 3331 0064 FEFFFFEB 		bl	uxListRemove
 3332              	.LVL310:
2687:../src/FreeRTOS/tasks.c ****                     }
 3333              		.loc 1 2687 25 is_stmt 1 view .LVU974
2687:../src/FreeRTOS/tasks.c ****                     }
 3334              		.loc 1 2687 47 is_stmt 0 view .LVU975
 3335 0068 0130A0E3 		mov	r3, #1
 3336 006c 7530C4E5 		strb	r3, [r4, #117]
 3337              	.L233:
2691:../src/FreeRTOS/tasks.c ****                     }
 3338              		.loc 1 2691 49 is_stmt 1 view .LVU976
2694:../src/FreeRTOS/tasks.c **** 
 3339              		.loc 1 2694 17 view .LVU977
 3340 0070 FEFFFFEB 		bl	vPortExitCritical
 3341              	.LVL311:
2694:../src/FreeRTOS/tasks.c **** 
 3342              		.loc 1 2694 36 view .LVU978
2697:../src/FreeRTOS/tasks.c **** 
 3343              		.loc 1 2697 17 view .LVU979
2697:../src/FreeRTOS/tasks.c **** 
 3344              		.loc 1 2697 17 view .LVU980
 3345 0074 2C3094E5 		ldr	r3, [r4, #44]
 3346 0078 002000E3 		movw	r2, #:lower16:.LANCHOR13
 3347 007c 002040E3 		movt	r2, #:upper16:.LANCHOR13
 3348 0080 002092E5 		ldr	r2, [r2]
 3349 0084 020053E1 		cmp	r3, r2
2697:../src/FreeRTOS/tasks.c **** 
 3350              		.loc 1 2697 17 discriminator 1 view .LVU981
 3351 0088 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 3352 008c 00204083 		movthi	r2, #:upper16:.LANCHOR13
 3353 0090 00308285 		strhi	r3, [r2]
 3354              	.L234:
2697:../src/FreeRTOS/tasks.c **** 
 3355              		.loc 1 2697 17 discriminator 3 view .LVU982
2697:../src/FreeRTOS/tasks.c **** 
 3356              		.loc 1 2697 17 discriminator 3 view .LVU983
 3357 0094 000000E3 		movw	r0, #:lower16:.LANCHOR4
 3358 0098 000040E3 		movt	r0, #:upper16:.LANCHOR4
 3359 009c 033183E0 		add	r3, r3, r3, lsl #2
 3360 00a0 0510A0E1 		mov	r1, r5
 3361 00a4 030180E0 		add	r0, r0, r3, lsl #2
 3362 00a8 FEFFFFEB 		bl	vListInsertEnd
 3363              	.LVL312:
2697:../src/FreeRTOS/tasks.c **** 
 3364              		.loc 1 2697 47 discriminator 3 view .LVU984
2706:../src/FreeRTOS/tasks.c ****                         {
 3365              		.loc 1 2706 25 discriminator 3 view .LVU985
2706:../src/FreeRTOS/tasks.c ****                         {
 3366              		.loc 1 2706 34 is_stmt 0 discriminator 3 view .LVU986
 3367 00ac 2C2094E5 		ldr	r2, [r4, #44]
2706:../src/FreeRTOS/tasks.c ****                         {
 3368              		.loc 1 2706 61 discriminator 3 view .LVU987
 3369 00b0 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3370 00b4 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3371 00b8 003093E5 		ldr	r3, [r3]
 3372 00bc 2C3093E5 		ldr	r3, [r3, #44]
2706:../src/FreeRTOS/tasks.c ****                         {
 3373              		.loc 1 2706 27 discriminator 3 view .LVU988
 3374 00c0 030052E1 		cmp	r2, r3
 3375 00c4 0400009A 		bls	.L236
2710:../src/FreeRTOS/tasks.c ****                         }
 3376              		.loc 1 2710 29 is_stmt 1 view .LVU989
2710:../src/FreeRTOS/tasks.c ****                         }
 3377              		.loc 1 2710 43 is_stmt 0 view .LVU990
 3378 00c8 003000E3 		movw	r3, #:lower16:.LANCHOR17
 3379 00cc 003040E3 		movt	r3, #:upper16:.LANCHOR17
 3380 00d0 0140A0E3 		mov	r4, #1
 3381              	.LVL313:
2710:../src/FreeRTOS/tasks.c ****                         }
 3382              		.loc 1 2710 43 view .LVU991
 3383 00d4 004083E5 		str	r4, [r3]
 3384 00d8 D1FFFFEA 		b	.L232
 3385              	.LVL314:
 3386              	.L236:
2667:../src/FreeRTOS/tasks.c **** 
 3387              		.loc 1 2667 25 view .LVU992
 3388 00dc 0140A0E3 		mov	r4, #1
 3389              	.LVL315:
2667:../src/FreeRTOS/tasks.c **** 
 3390              		.loc 1 2667 25 view .LVU993
 3391 00e0 CFFFFFEA 		b	.L232
 3392              		.cfi_endproc
 3393              	.LFE27:
 3395              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3396              		.align	2
 3397              		.global	vTaskSwitchContext
 3398              		.syntax unified
 3399              		.arm
 3400              		.fpu neon
 3402              	vTaskSwitchContext:
 3403              	.LFB29:
3018:../src/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3404              		.loc 1 3018 1 is_stmt 1 view -0
 3405              		.cfi_startproc
 3406              		@ args = 0, pretend = 0, frame = 0
 3407              		@ frame_needed = 0, uses_anonymous_args = 0
3019:../src/FreeRTOS/tasks.c ****     {
 3408              		.loc 1 3019 5 view .LVU995
3019:../src/FreeRTOS/tasks.c ****     {
 3409              		.loc 1 3019 30 is_stmt 0 view .LVU996
 3410 0000 003000E3 		movw	r3, #:lower16:.LANCHOR16
 3411 0004 003040E3 		movt	r3, #:upper16:.LANCHOR16
 3412 0008 003093E5 		ldr	r3, [r3]
3019:../src/FreeRTOS/tasks.c ****     {
 3413              		.loc 1 3019 7 view .LVU997
 3414 000c 000053E3 		cmp	r3, #0
 3415 0010 0400000A 		beq	.L241
3023:../src/FreeRTOS/tasks.c ****     }
 3416              		.loc 1 3023 9 is_stmt 1 view .LVU998
3023:../src/FreeRTOS/tasks.c ****     }
 3417              		.loc 1 3023 23 is_stmt 0 view .LVU999
 3418 0014 003000E3 		movw	r3, #:lower16:.LANCHOR17
 3419 0018 003040E3 		movt	r3, #:upper16:.LANCHOR17
 3420 001c 0120A0E3 		mov	r2, #1
 3421 0020 002083E5 		str	r2, [r3]
 3422 0024 1EFF2FE1 		bx	lr
 3423              	.L241:
3018:../src/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3424              		.loc 1 3018 1 view .LVU1000
 3425 0028 10402DE9 		push	{r4, lr}
 3426              		.cfi_def_cfa_offset 8
 3427              		.cfi_offset 4, -8
 3428              		.cfi_offset 14, -4
3027:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 3429              		.loc 1 3027 9 is_stmt 1 view .LVU1001
3027:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 3430              		.loc 1 3027 23 is_stmt 0 view .LVU1002
 3431 002c 003000E3 		movw	r3, #:lower16:.LANCHOR17
 3432 0030 003040E3 		movt	r3, #:upper16:.LANCHOR17
 3433 0034 0020A0E3 		mov	r2, #0
 3434 0038 002083E5 		str	r2, [r3]
3028:../src/FreeRTOS/tasks.c **** 
 3435              		.loc 1 3028 33 is_stmt 1 view .LVU1003
3035:../src/FreeRTOS/tasks.c ****                 #endif
 3436              		.loc 1 3035 21 view .LVU1004
3035:../src/FreeRTOS/tasks.c ****                 #endif
 3437              		.loc 1 3035 38 is_stmt 0 view .LVU1005
 3438 003c FEFFFFEB 		bl	ulGetRunTimeCounterValue
 3439              	.LVL316:
3035:../src/FreeRTOS/tasks.c ****                 #endif
 3440              		.loc 1 3035 36 view .LVU1006
 3441 0040 003000E3 		movw	r3, #:lower16:.LANCHOR22
 3442 0044 003040E3 		movt	r3, #:upper16:.LANCHOR22
 3443 0048 000083E5 		str	r0, [r3]
3045:../src/FreeRTOS/tasks.c ****                 {
 3444              		.loc 1 3045 17 is_stmt 1 view .LVU1007
3045:../src/FreeRTOS/tasks.c ****                 {
 3445              		.loc 1 3045 36 is_stmt 0 view .LVU1008
 3446 004c 002093E5 		ldr	r2, [r3]
 3447 0050 003000E3 		movw	r3, #:lower16:.LANCHOR23
 3448 0054 003040E3 		movt	r3, #:upper16:.LANCHOR23
 3449 0058 003093E5 		ldr	r3, [r3]
3045:../src/FreeRTOS/tasks.c ****                 {
 3450              		.loc 1 3045 19 view .LVU1009
 3451 005c 030052E1 		cmp	r2, r3
 3452 0060 0900009A 		bls	.L243
3047:../src/FreeRTOS/tasks.c ****                 }
 3453              		.loc 1 3047 21 is_stmt 1 view .LVU1010
3047:../src/FreeRTOS/tasks.c ****                 }
 3454              		.loc 1 3047 72 is_stmt 0 view .LVU1011
 3455 0064 002000E3 		movw	r2, #:lower16:.LANCHOR22
 3456 0068 002040E3 		movt	r2, #:upper16:.LANCHOR22
 3457 006c 002092E5 		ldr	r2, [r2]
 3458 0070 032042E0 		sub	r2, r2, r3
3047:../src/FreeRTOS/tasks.c ****                 }
 3459              		.loc 1 3047 52 view .LVU1012
 3460 0074 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3461 0078 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3462 007c 001093E5 		ldr	r1, [r3]
 3463 0080 6C3091E5 		ldr	r3, [r1, #108]
 3464 0084 023083E0 		add	r3, r3, r2
 3465 0088 6C3081E5 		str	r3, [r1, #108]
 3466              	.L243:
3051:../src/FreeRTOS/tasks.c ****                 }
 3467              		.loc 1 3051 45 is_stmt 1 view .LVU1013
3054:../src/FreeRTOS/tasks.c ****             }
 3468              		.loc 1 3054 17 view .LVU1014
3054:../src/FreeRTOS/tasks.c ****             }
 3469              		.loc 1 3054 38 is_stmt 0 view .LVU1015
 3470 008c 003000E3 		movw	r3, #:lower16:.LANCHOR22
 3471 0090 003040E3 		movt	r3, #:upper16:.LANCHOR22
 3472 0094 002093E5 		ldr	r2, [r3]
 3473 0098 003000E3 		movw	r3, #:lower16:.LANCHOR23
 3474 009c 003040E3 		movt	r3, #:upper16:.LANCHOR23
 3475 00a0 002083E5 		str	r2, [r3]
 3476              	.LBB19:
3059:../src/FreeRTOS/tasks.c **** 
 3477              		.loc 1 3059 9 is_stmt 1 view .LVU1016
 3478 00a4 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3479 00a8 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3480 00ac 003093E5 		ldr	r3, [r3]
 3481 00b0 302093E5 		ldr	r2, [r3, #48]
 3482              	.LVL317:
3059:../src/FreeRTOS/tasks.c **** 
 3483              		.loc 1 3059 9 view .LVU1017
3059:../src/FreeRTOS/tasks.c **** 
 3484              		.loc 1 3059 9 view .LVU1018
 3485 00b4 001092E5 		ldr	r1, [r2]
 3486 00b8 A5350AE3 		movw	r3, #42405
 3487 00bc 1338DFE7 		bfi	r3, r3, #16, #16
 3488 00c0 030051E1 		cmp	r1, r3
 3489 00c4 0400001A 		bne	.L244
3059:../src/FreeRTOS/tasks.c **** 
 3490              		.loc 1 3059 9 is_stmt 0 discriminator 2 view .LVU1019
 3491 00c8 041092E5 		ldr	r1, [r2, #4]
 3492 00cc A5350AE3 		movw	r3, #42405
 3493 00d0 1338DFE7 		bfi	r3, r3, #16, #16
 3494 00d4 030051E1 		cmp	r1, r3
 3495 00d8 0900000A 		beq	.L253
 3496              	.LVL318:
 3497              	.L244:
3059:../src/FreeRTOS/tasks.c **** 
 3498              		.loc 1 3059 9 is_stmt 1 discriminator 7 view .LVU1020
 3499 00dc 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3500 00e0 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3501 00e4 000093E5 		ldr	r0, [r3]
 3502 00e8 001093E5 		ldr	r1, [r3]
 3503 00ec 341081E2 		add	r1, r1, #52
 3504 00f0 FEFFFFEB 		bl	vApplicationStackOverflowHook
 3505              	.LVL319:
 3506              	.L245:
3059:../src/FreeRTOS/tasks.c **** 
 3507              		.loc 1 3059 9 is_stmt 0 discriminator 7 view .LVU1021
 3508              	.LBE19:
3059:../src/FreeRTOS/tasks.c **** 
 3509              		.loc 1 3059 39 is_stmt 1 discriminator 9 view .LVU1022
 3510              	.LBB20:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3511              		.loc 1 3070 9 discriminator 9 view .LVU1023
 3512 00f4 003000E3 		movw	r3, #:lower16:.LANCHOR13
 3513 00f8 003040E3 		movt	r3, #:upper16:.LANCHOR13
 3514 00fc 004093E5 		ldr	r4, [r3]
 3515              	.LVL320:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3516              		.loc 1 3070 9 discriminator 9 view .LVU1024
 3517 0100 0F0000EA 		b	.L246
 3518              	.LVL321:
 3519              	.L253:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3520              		.loc 1 3070 9 is_stmt 0 discriminator 9 view .LVU1025
 3521              	.LBE20:
 3522              	.LBB23:
3059:../src/FreeRTOS/tasks.c **** 
 3523              		.loc 1 3059 9 discriminator 4 view .LVU1026
 3524 0104 081092E5 		ldr	r1, [r2, #8]
 3525 0108 A5350AE3 		movw	r3, #42405
 3526 010c 1338DFE7 		bfi	r3, r3, #16, #16
 3527 0110 030051E1 		cmp	r1, r3
 3528 0114 F0FFFF1A 		bne	.L244
3059:../src/FreeRTOS/tasks.c **** 
 3529              		.loc 1 3059 9 discriminator 6 view .LVU1027
 3530 0118 0C2092E5 		ldr	r2, [r2, #12]
 3531              	.LVL322:
3059:../src/FreeRTOS/tasks.c **** 
 3532              		.loc 1 3059 9 discriminator 6 view .LVU1028
 3533 011c A5350AE3 		movw	r3, #42405
 3534 0120 1338DFE7 		bfi	r3, r3, #16, #16
 3535 0124 030052E1 		cmp	r2, r3
 3536 0128 EBFFFF1A 		bne	.L244
 3537 012c F0FFFFEA 		b	.L245
 3538              	.LVL323:
 3539              	.L255:
3059:../src/FreeRTOS/tasks.c **** 
 3540              		.loc 1 3059 9 discriminator 6 view .LVU1029
 3541              	.LBE23:
 3542              	.LBB24:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3543              		.loc 1 3070 9 is_stmt 1 discriminator 2 view .LVU1030
 3544 0130 FE1B00E3 		movw	r1, #3070
 3545 0134 000000E3 		movw	r0, #:lower16:.LC0
 3546 0138 000040E3 		movt	r0, #:upper16:.LC0
 3547 013c FEFFFFEB 		bl	R_OS_AssertCalled
 3548              	.LVL324:
 3549              	.L247:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3550              		.loc 1 3070 9 discriminator 4 view .LVU1031
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3551              		.loc 1 3070 9 discriminator 4 view .LVU1032
 3552 0140 014044E2 		sub	r4, r4, #1
 3553              	.LVL325:
 3554              	.L246:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3555              		.loc 1 3070 9 discriminator 5 view .LVU1033
 3556 0144 002000E3 		movw	r2, #:lower16:.LANCHOR4
 3557 0148 002040E3 		movt	r2, #:upper16:.LANCHOR4
 3558 014c 043184E0 		add	r3, r4, r4, lsl #2
 3559 0150 0331A0E1 		lsl	r3, r3, #2
 3560 0154 033092E7 		ldr	r3, [r2, r3]
 3561 0158 000053E3 		cmp	r3, #0
 3562 015c 0200001A 		bne	.L254
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3563              		.loc 1 3070 9 discriminator 6 view .LVU1034
 3564 0160 000054E3 		cmp	r4, #0
 3565 0164 F5FFFF1A 		bne	.L247
 3566 0168 F0FFFFEA 		b	.L255
 3567              	.L254:
 3568              	.LBB21:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3569              		.loc 1 3070 9 discriminator 7 view .LVU1035
 3570              	.LVL326:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3571              		.loc 1 3070 9 discriminator 7 view .LVU1036
 3572 016c 002000E3 		movw	r2, #:lower16:.LANCHOR4
 3573 0170 002040E3 		movt	r2, #:upper16:.LANCHOR4
 3574 0174 0431A0E1 		lsl	r3, r4, #2
 3575 0178 041083E0 		add	r1, r3, r4
 3576 017c 011182E0 		add	r1, r2, r1, lsl #2
 3577 0180 040091E5 		ldr	r0, [r1, #4]
 3578 0184 040090E5 		ldr	r0, [r0, #4]
 3579 0188 040081E5 		str	r0, [r1, #4]
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3580              		.loc 1 3070 9 discriminator 7 view .LVU1037
 3581 018c 043083E0 		add	r3, r3, r4
 3582 0190 0331A0E1 		lsl	r3, r3, #2
 3583 0194 083083E2 		add	r3, r3, #8
 3584 0198 033082E0 		add	r3, r2, r3
 3585 019c 030050E1 		cmp	r0, r3
 3586 01a0 0C00000A 		beq	.L256
 3587              	.L249:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3588              		.loc 1 3070 9 discriminator 10 view .LVU1038
 3589 01a4 003000E3 		movw	r3, #:lower16:.LANCHOR4
 3590 01a8 003040E3 		movt	r3, #:upper16:.LANCHOR4
 3591 01ac 042184E0 		add	r2, r4, r4, lsl #2
 3592 01b0 023183E0 		add	r3, r3, r2, lsl #2
 3593 01b4 043093E5 		ldr	r3, [r3, #4]
 3594 01b8 0C2093E5 		ldr	r2, [r3, #12]
 3595 01bc 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3596 01c0 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3597 01c4 002083E5 		str	r2, [r3]
 3598              	.LBE21:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3599              		.loc 1 3070 9 discriminator 10 view .LVU1039
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3600              		.loc 1 3070 9 discriminator 10 view .LVU1040
 3601 01c8 003000E3 		movw	r3, #:lower16:.LANCHOR13
 3602 01cc 003040E3 		movt	r3, #:upper16:.LANCHOR13
 3603 01d0 004083E5 		str	r4, [r3]
 3604              	.LBE24:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3605              		.loc 1 3070 43 discriminator 10 view .LVU1041
3071:../src/FreeRTOS/tasks.c **** 
 3606              		.loc 1 3071 32 discriminator 10 view .LVU1042
3090:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3607              		.loc 1 3090 1 is_stmt 0 discriminator 10 view .LVU1043
 3608 01d4 1080BDE8 		pop	{r4, pc}
 3609              	.L256:
 3610              	.LBB25:
 3611              	.LBB22:
3070:../src/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3612              		.loc 1 3070 9 is_stmt 1 discriminator 8 view .LVU1044
 3613 01d8 042090E5 		ldr	r2, [r0, #4]
 3614 01dc 003000E3 		movw	r3, #:lower16:.LANCHOR4
 3615 01e0 003040E3 		movt	r3, #:upper16:.LANCHOR4
 3616 01e4 041184E0 		add	r1, r4, r4, lsl #2
 3617 01e8 013183E0 		add	r3, r3, r1, lsl #2
 3618 01ec 042083E5 		str	r2, [r3, #4]
 3619 01f0 EBFFFFEA 		b	.L249
 3620              	.LBE22:
 3621              	.LBE25:
 3622              		.cfi_endproc
 3623              	.LFE29:
 3625              		.section	.text.vTaskSuspend,"ax",%progbits
 3626              		.align	2
 3627              		.global	vTaskSuspend
 3628              		.syntax unified
 3629              		.arm
 3630              		.fpu neon
 3632              	vTaskSuspend:
 3633              	.LVL327:
 3634              	.LFB13:
1714:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3635              		.loc 1 1714 5 view -0
 3636              		.cfi_startproc
 3637              		@ args = 0, pretend = 0, frame = 0
 3638              		@ frame_needed = 0, uses_anonymous_args = 0
1714:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3639              		.loc 1 1714 5 is_stmt 0 view .LVU1046
 3640 0000 70402DE9 		push	{r4, r5, r6, lr}
 3641              		.cfi_def_cfa_offset 16
 3642              		.cfi_offset 4, -16
 3643              		.cfi_offset 5, -12
 3644              		.cfi_offset 6, -8
 3645              		.cfi_offset 14, -4
 3646 0004 0040A0E1 		mov	r4, r0
1715:../src/FreeRTOS/tasks.c **** 
 3647              		.loc 1 1715 9 is_stmt 1 view .LVU1047
1717:../src/FreeRTOS/tasks.c ****         {
 3648              		.loc 1 1717 9 view .LVU1048
 3649 0008 FEFFFFEB 		bl	vPortEnterCritical
 3650              	.LVL328:
1717:../src/FreeRTOS/tasks.c ****         {
 3651              		.loc 1 1717 29 view .LVU1049
1721:../src/FreeRTOS/tasks.c **** 
 3652              		.loc 1 1721 13 view .LVU1050
1721:../src/FreeRTOS/tasks.c **** 
 3653              		.loc 1 1721 21 is_stmt 0 view .LVU1051
 3654 000c 000054E3 		cmp	r4, #0
 3655 0010 2500000A 		beq	.L269
 3656              	.LVL329:
 3657              	.L258:
1723:../src/FreeRTOS/tasks.c **** 
 3658              		.loc 1 1723 39 is_stmt 1 discriminator 4 view .LVU1052
1727:../src/FreeRTOS/tasks.c ****             {
 3659              		.loc 1 1727 13 discriminator 4 view .LVU1053
1727:../src/FreeRTOS/tasks.c ****             {
 3660              		.loc 1 1727 17 is_stmt 0 discriminator 4 view .LVU1054
 3661 0014 045084E2 		add	r5, r4, #4
 3662 0018 0500A0E1 		mov	r0, r5
 3663 001c FEFFFFEB 		bl	uxListRemove
 3664              	.LVL330:
1733:../src/FreeRTOS/tasks.c ****             }
 3665              		.loc 1 1733 41 is_stmt 1 discriminator 4 view .LVU1055
1737:../src/FreeRTOS/tasks.c ****             {
 3666              		.loc 1 1737 13 discriminator 4 view .LVU1056
1737:../src/FreeRTOS/tasks.c ****             {
 3667              		.loc 1 1737 17 is_stmt 0 discriminator 4 view .LVU1057
 3668 0020 283094E5 		ldr	r3, [r4, #40]
1737:../src/FreeRTOS/tasks.c ****             {
 3669              		.loc 1 1737 15 discriminator 4 view .LVU1058
 3670 0024 000053E3 		cmp	r3, #0
 3671 0028 0100000A 		beq	.L259
1739:../src/FreeRTOS/tasks.c ****             }
 3672              		.loc 1 1739 17 is_stmt 1 view .LVU1059
1739:../src/FreeRTOS/tasks.c ****             }
 3673              		.loc 1 1739 26 is_stmt 0 view .LVU1060
 3674 002c 180084E2 		add	r0, r4, #24
 3675 0030 FEFFFFEB 		bl	uxListRemove
 3676              	.LVL331:
 3677              	.L259:
1743:../src/FreeRTOS/tasks.c ****             }
 3678              		.loc 1 1743 41 is_stmt 1 view .LVU1061
1746:../src/FreeRTOS/tasks.c **** 
 3679              		.loc 1 1746 13 view .LVU1062
 3680 0034 0510A0E1 		mov	r1, r5
 3681 0038 000000E3 		movw	r0, #:lower16:.LANCHOR2
 3682 003c 000040E3 		movt	r0, #:upper16:.LANCHOR2
 3683 0040 FEFFFFEB 		bl	vListInsertEnd
 3684              	.LVL332:
 3685              	.LBB26:
1750:../src/FreeRTOS/tasks.c **** 
 3686              		.loc 1 1750 21 view .LVU1063
1752:../src/FreeRTOS/tasks.c ****                     {
 3687              		.loc 1 1752 21 view .LVU1064
1752:../src/FreeRTOS/tasks.c ****                     {
 3688              		.loc 1 1752 28 is_stmt 0 view .LVU1065
 3689 0044 0030A0E3 		mov	r3, #0
 3690              	.LVL333:
 3691              	.L260:
1752:../src/FreeRTOS/tasks.c ****                     {
 3692              		.loc 1 1752 33 is_stmt 1 discriminator 1 view .LVU1066
1752:../src/FreeRTOS/tasks.c ****                     {
 3693              		.loc 1 1752 21 is_stmt 0 discriminator 1 view .LVU1067
 3694 0048 000053E3 		cmp	r3, #0
 3695 004c 1A0000DA 		ble	.L262
 3696              	.LBE26:
1764:../src/FreeRTOS/tasks.c **** 
 3697              		.loc 1 1764 9 is_stmt 1 view .LVU1068
 3698 0050 FEFFFFEB 		bl	vPortExitCritical
 3699              	.LVL334:
1764:../src/FreeRTOS/tasks.c **** 
 3700              		.loc 1 1764 28 view .LVU1069
1766:../src/FreeRTOS/tasks.c ****         {
 3701              		.loc 1 1766 9 view .LVU1070
1766:../src/FreeRTOS/tasks.c ****         {
 3702              		.loc 1 1766 31 is_stmt 0 view .LVU1071
 3703 0054 003000E3 		movw	r3, #:lower16:.LANCHOR11
 3704 0058 003040E3 		movt	r3, #:upper16:.LANCHOR11
 3705 005c 003093E5 		ldr	r3, [r3]
1766:../src/FreeRTOS/tasks.c ****         {
 3706              		.loc 1 1766 11 view .LVU1072
 3707 0060 000053E3 		cmp	r3, #0
 3708 0064 1F00001A 		bne	.L270
 3709              	.L263:
1778:../src/FreeRTOS/tasks.c ****         }
 3710              		.loc 1 1778 37 is_stmt 1 view .LVU1073
1781:../src/FreeRTOS/tasks.c ****         {
 3711              		.loc 1 1781 9 view .LVU1074
1781:../src/FreeRTOS/tasks.c ****         {
 3712              		.loc 1 1781 19 is_stmt 0 view .LVU1075
 3713 0068 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3714 006c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3715 0070 003093E5 		ldr	r3, [r3]
1781:../src/FreeRTOS/tasks.c ****         {
 3716              		.loc 1 1781 11 view .LVU1076
 3717 0074 040053E1 		cmp	r3, r4
 3718 0078 7080BD18 		popne	{r4, r5, r6, pc}
1783:../src/FreeRTOS/tasks.c ****             {
 3719              		.loc 1 1783 13 is_stmt 1 view .LVU1077
1783:../src/FreeRTOS/tasks.c ****             {
 3720              		.loc 1 1783 35 is_stmt 0 view .LVU1078
 3721 007c 003000E3 		movw	r3, #:lower16:.LANCHOR11
 3722 0080 003040E3 		movt	r3, #:upper16:.LANCHOR11
 3723 0084 003093E5 		ldr	r3, [r3]
1783:../src/FreeRTOS/tasks.c ****             {
 3724              		.loc 1 1783 15 view .LVU1079
 3725 0088 000053E3 		cmp	r3, #0
 3726 008c 1E00000A 		beq	.L265
1786:../src/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3727              		.loc 1 1786 17 is_stmt 1 view .LVU1080
 3728 0090 003000E3 		movw	r3, #:lower16:.LANCHOR16
 3729 0094 003040E3 		movt	r3, #:upper16:.LANCHOR16
 3730 0098 003093E5 		ldr	r3, [r3]
 3731 009c 000053E3 		cmp	r3, #0
 3732 00a0 1400001A 		bne	.L271
 3733              	.L266:
1786:../src/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3734              		.loc 1 1786 58 discriminator 3 view .LVU1081
1787:../src/FreeRTOS/tasks.c ****             }
 3735              		.loc 1 1787 17 discriminator 3 view .LVU1082
 3736              		.syntax divided
 3737              	@ 1787 "../src/FreeRTOS/tasks.c" 1
 3738 00a4 000000EF 		SWI 0
 3739              	@ 0 "" 2
1787:../src/FreeRTOS/tasks.c ****             }
 3740              		.loc 1 1787 39 discriminator 3 view .LVU1083
 3741              		.arm
 3742              		.syntax unified
 3743 00a8 7080BDE8 		pop	{r4, r5, r6, pc}
 3744              	.LVL335:
 3745              	.L269:
1721:../src/FreeRTOS/tasks.c **** 
 3746              		.loc 1 1721 21 is_stmt 0 discriminator 1 view .LVU1084
 3747 00ac 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3748 00b0 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3749 00b4 004093E5 		ldr	r4, [r3]
 3750              	.LVL336:
1721:../src/FreeRTOS/tasks.c **** 
 3751              		.loc 1 1721 21 discriminator 1 view .LVU1085
 3752 00b8 D5FFFFEA 		b	.L258
 3753              	.LVL337:
 3754              	.L262:
 3755              	.LBB27:
1754:../src/FreeRTOS/tasks.c ****                         {
 3756              		.loc 1 1754 25 is_stmt 1 view .LVU1086
1754:../src/FreeRTOS/tasks.c ****                         {
 3757              		.loc 1 1754 49 is_stmt 0 view .LVU1087
 3758 00bc 032084E0 		add	r2, r4, r3
 3759 00c0 7420D2E5 		ldrb	r2, [r2, #116]	@ zero_extendqisi2
 3760 00c4 7220EFE6 		uxtb	r2, r2
1754:../src/FreeRTOS/tasks.c ****                         {
 3761              		.loc 1 1754 27 view .LVU1088
 3762 00c8 010052E3 		cmp	r2, #1
 3763 00cc 0100000A 		beq	.L272
 3764              	.L261:
1752:../src/FreeRTOS/tasks.c ****                     {
 3765              		.loc 1 1752 76 is_stmt 1 discriminator 2 view .LVU1089
1752:../src/FreeRTOS/tasks.c ****                     {
 3766              		.loc 1 1752 77 is_stmt 0 discriminator 2 view .LVU1090
 3767 00d0 013083E2 		add	r3, r3, #1
 3768              	.LVL338:
1752:../src/FreeRTOS/tasks.c ****                     {
 3769              		.loc 1 1752 77 discriminator 2 view .LVU1091
 3770 00d4 DBFFFFEA 		b	.L260
 3771              	.L272:
1758:../src/FreeRTOS/tasks.c ****                         }
 3772              		.loc 1 1758 29 is_stmt 1 view .LVU1092
1758:../src/FreeRTOS/tasks.c ****                         }
 3773              		.loc 1 1758 55 is_stmt 0 view .LVU1093
 3774 00d8 032084E0 		add	r2, r4, r3
 3775 00dc 0010A0E3 		mov	r1, #0
 3776 00e0 7410C2E5 		strb	r1, [r2, #116]
 3777 00e4 F9FFFFEA 		b	.L261
 3778              	.LVL339:
 3779              	.L270:
1758:../src/FreeRTOS/tasks.c ****                         }
 3780              		.loc 1 1758 55 view .LVU1094
 3781              	.LBE27:
1770:../src/FreeRTOS/tasks.c ****             {
 3782              		.loc 1 1770 13 is_stmt 1 view .LVU1095
 3783 00e8 FEFFFFEB 		bl	vPortEnterCritical
 3784              	.LVL340:
1770:../src/FreeRTOS/tasks.c ****             {
 3785              		.loc 1 1770 33 view .LVU1096
1772:../src/FreeRTOS/tasks.c ****             }
 3786              		.loc 1 1772 17 view .LVU1097
 3787 00ec FEFFFFEB 		bl	prvResetNextTaskUnblockTime
 3788              	.LVL341:
1774:../src/FreeRTOS/tasks.c ****         }
 3789              		.loc 1 1774 13 view .LVU1098
 3790 00f0 FEFFFFEB 		bl	vPortExitCritical
 3791              	.LVL342:
1774:../src/FreeRTOS/tasks.c ****         }
 3792              		.loc 1 1774 32 view .LVU1099
 3793 00f4 DBFFFFEA 		b	.L263
 3794              	.L271:
1786:../src/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3795              		.loc 1 1786 17 discriminator 1 view .LVU1100
 3796 00f8 FA1600E3 		movw	r1, #1786
 3797 00fc 000000E3 		movw	r0, #:lower16:.LC0
 3798 0100 000040E3 		movt	r0, #:upper16:.LC0
 3799 0104 FEFFFFEB 		bl	R_OS_AssertCalled
 3800              	.LVL343:
 3801 0108 E5FFFFEA 		b	.L266
 3802              	.L265:
1794:../src/FreeRTOS/tasks.c ****                 {
 3803              		.loc 1 1794 17 view .LVU1101
1794:../src/FreeRTOS/tasks.c ****                 {
 3804              		.loc 1 1794 21 is_stmt 0 view .LVU1102
 3805 010c 003000E3 		movw	r3, #:lower16:.LANCHOR2
 3806 0110 003040E3 		movt	r3, #:upper16:.LANCHOR2
 3807 0114 002093E5 		ldr	r2, [r3]
1794:../src/FreeRTOS/tasks.c ****                 {
 3808              		.loc 1 1794 68 view .LVU1103
 3809 0118 003000E3 		movw	r3, #:lower16:.LANCHOR9
 3810 011c 003040E3 		movt	r3, #:upper16:.LANCHOR9
 3811 0120 003093E5 		ldr	r3, [r3]
1794:../src/FreeRTOS/tasks.c ****                 {
 3812              		.loc 1 1794 19 view .LVU1104
 3813 0124 030052E1 		cmp	r2, r3
 3814 0128 0400001A 		bne	.L267
1800:../src/FreeRTOS/tasks.c ****                 }
 3815              		.loc 1 1800 21 is_stmt 1 view .LVU1105
1800:../src/FreeRTOS/tasks.c ****                 }
 3816              		.loc 1 1800 34 is_stmt 0 view .LVU1106
 3817 012c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3818 0130 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3819 0134 0020A0E3 		mov	r2, #0
 3820 0138 002083E5 		str	r2, [r3]
 3821 013c 7080BDE8 		pop	{r4, r5, r6, pc}
 3822              	.L267:
1804:../src/FreeRTOS/tasks.c ****                 }
 3823              		.loc 1 1804 21 is_stmt 1 view .LVU1107
 3824 0140 FEFFFFEB 		bl	vTaskSwitchContext
 3825              	.LVL344:
1810:../src/FreeRTOS/tasks.c ****         }
 3826              		.loc 1 1810 37 view .LVU1108
1812:../src/FreeRTOS/tasks.c **** 
 3827              		.loc 1 1812 5 is_stmt 0 view .LVU1109
 3828 0144 7080BDE8 		pop	{r4, r5, r6, pc}
 3829              		.cfi_endproc
 3830              	.LFE13:
 3832              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3833              		.align	2
 3834              		.global	vTaskPlaceOnEventList
 3835              		.syntax unified
 3836              		.arm
 3837              		.fpu neon
 3839              	vTaskPlaceOnEventList:
 3840              	.LVL345:
 3841              	.LFB30:
3095:../src/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3842              		.loc 1 3095 1 is_stmt 1 view -0
 3843              		.cfi_startproc
 3844              		@ args = 0, pretend = 0, frame = 0
 3845              		@ frame_needed = 0, uses_anonymous_args = 0
3095:../src/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3846              		.loc 1 3095 1 is_stmt 0 view .LVU1111
 3847 0000 70402DE9 		push	{r4, r5, r6, lr}
 3848              		.cfi_def_cfa_offset 16
 3849              		.cfi_offset 4, -16
 3850              		.cfi_offset 5, -12
 3851              		.cfi_offset 6, -8
 3852              		.cfi_offset 14, -4
 3853 0004 0150A0E1 		mov	r5, r1
3096:../src/FreeRTOS/tasks.c **** 
 3854              		.loc 1 3096 5 is_stmt 1 view .LVU1112
 3855 0008 004050E2 		subs	r4, r0, #0
 3856 000c 0900000A 		beq	.L276
 3857              	.LVL346:
 3858              	.L274:
3096:../src/FreeRTOS/tasks.c **** 
 3859              		.loc 1 3096 32 discriminator 3 view .LVU1113
3105:../src/FreeRTOS/tasks.c **** 
 3860              		.loc 1 3105 5 discriminator 3 view .LVU1114
3105:../src/FreeRTOS/tasks.c **** 
 3861              		.loc 1 3105 46 is_stmt 0 discriminator 3 view .LVU1115
 3862 0010 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3863 0014 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3864 0018 001093E5 		ldr	r1, [r3]
3105:../src/FreeRTOS/tasks.c **** 
 3865              		.loc 1 3105 5 discriminator 3 view .LVU1116
 3866 001c 181081E2 		add	r1, r1, #24
 3867 0020 0400A0E1 		mov	r0, r4
 3868 0024 FEFFFFEB 		bl	vListInsert
 3869              	.LVL347:
3107:../src/FreeRTOS/tasks.c **** }
 3870              		.loc 1 3107 5 is_stmt 1 discriminator 3 view .LVU1117
 3871 0028 0110A0E3 		mov	r1, #1
 3872 002c 0500A0E1 		mov	r0, r5
 3873 0030 FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 3874              	.LVL348:
3108:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3875              		.loc 1 3108 1 is_stmt 0 discriminator 3 view .LVU1118
 3876 0034 7080BDE8 		pop	{r4, r5, r6, pc}
 3877              	.LVL349:
 3878              	.L276:
3096:../src/FreeRTOS/tasks.c **** 
 3879              		.loc 1 3096 5 is_stmt 1 discriminator 1 view .LVU1119
 3880 0038 181C00E3 		movw	r1, #3096
 3881              	.LVL350:
3096:../src/FreeRTOS/tasks.c **** 
 3882              		.loc 1 3096 5 is_stmt 0 discriminator 1 view .LVU1120
 3883 003c 000000E3 		movw	r0, #:lower16:.LC0
 3884              	.LVL351:
3096:../src/FreeRTOS/tasks.c **** 
 3885              		.loc 1 3096 5 discriminator 1 view .LVU1121
 3886 0040 000040E3 		movt	r0, #:upper16:.LC0
 3887 0044 FEFFFFEB 		bl	R_OS_AssertCalled
 3888              	.LVL352:
 3889 0048 F0FFFFEA 		b	.L274
 3890              		.cfi_endproc
 3891              	.LFE30:
 3893              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3894              		.align	2
 3895              		.global	vTaskPlaceOnUnorderedEventList
 3896              		.syntax unified
 3897              		.arm
 3898              		.fpu neon
 3900              	vTaskPlaceOnUnorderedEventList:
 3901              	.LVL353:
 3902              	.LFB31:
3114:../src/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3903              		.loc 1 3114 1 is_stmt 1 view -0
 3904              		.cfi_startproc
 3905              		@ args = 0, pretend = 0, frame = 0
 3906              		@ frame_needed = 0, uses_anonymous_args = 0
3114:../src/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3907              		.loc 1 3114 1 is_stmt 0 view .LVU1123
 3908 0000 70402DE9 		push	{r4, r5, r6, lr}
 3909              		.cfi_def_cfa_offset 16
 3910              		.cfi_offset 4, -16
 3911              		.cfi_offset 5, -12
 3912              		.cfi_offset 6, -8
 3913              		.cfi_offset 14, -4
 3914 0004 0140A0E1 		mov	r4, r1
 3915 0008 0260A0E1 		mov	r6, r2
3115:../src/FreeRTOS/tasks.c **** 
 3916              		.loc 1 3115 5 is_stmt 1 view .LVU1124
 3917 000c 005050E2 		subs	r5, r0, #0
 3918 0010 1100000A 		beq	.L281
 3919              	.LVL354:
 3920              	.L278:
3115:../src/FreeRTOS/tasks.c **** 
 3921              		.loc 1 3115 32 discriminator 3 view .LVU1125
3119:../src/FreeRTOS/tasks.c **** 
 3922              		.loc 1 3119 5 discriminator 3 view .LVU1126
 3923 0014 003000E3 		movw	r3, #:lower16:.LANCHOR16
 3924 0018 003040E3 		movt	r3, #:upper16:.LANCHOR16
 3925 001c 003093E5 		ldr	r3, [r3]
 3926 0020 000053E3 		cmp	r3, #0
 3927 0024 1100000A 		beq	.L282
 3928              	.L279:
3119:../src/FreeRTOS/tasks.c **** 
 3929              		.loc 1 3119 46 discriminator 3 view .LVU1127
3124:../src/FreeRTOS/tasks.c **** 
 3930              		.loc 1 3124 5 discriminator 3 view .LVU1128
 3931 0028 003000E3 		movw	r3, #:lower16:.LANCHOR10
 3932 002c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 3933 0030 002093E5 		ldr	r2, [r3]
 3934 0034 024184E3 		orr	r4, r4, #-2147483648
 3935              	.LVL355:
3124:../src/FreeRTOS/tasks.c **** 
 3936              		.loc 1 3124 5 is_stmt 0 discriminator 3 view .LVU1129
 3937 0038 184082E5 		str	r4, [r2, #24]
3131:../src/FreeRTOS/tasks.c **** 
 3938              		.loc 1 3131 5 is_stmt 1 discriminator 3 view .LVU1130
3131:../src/FreeRTOS/tasks.c **** 
 3939              		.loc 1 3131 49 is_stmt 0 discriminator 3 view .LVU1131
 3940 003c 001093E5 		ldr	r1, [r3]
3131:../src/FreeRTOS/tasks.c **** 
 3941              		.loc 1 3131 5 discriminator 3 view .LVU1132
 3942 0040 181081E2 		add	r1, r1, #24
 3943 0044 0500A0E1 		mov	r0, r5
 3944 0048 FEFFFFEB 		bl	vListInsertEnd
 3945              	.LVL356:
3133:../src/FreeRTOS/tasks.c **** }
 3946              		.loc 1 3133 5 is_stmt 1 discriminator 3 view .LVU1133
 3947 004c 0110A0E3 		mov	r1, #1
 3948 0050 0600A0E1 		mov	r0, r6
 3949 0054 FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 3950              	.LVL357:
3134:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3951              		.loc 1 3134 1 is_stmt 0 discriminator 3 view .LVU1134
 3952 0058 7080BDE8 		pop	{r4, r5, r6, pc}
 3953              	.LVL358:
 3954              	.L281:
3115:../src/FreeRTOS/tasks.c **** 
 3955              		.loc 1 3115 5 is_stmt 1 discriminator 1 view .LVU1135
 3956 005c 2B1C00E3 		movw	r1, #3115
 3957              	.LVL359:
3115:../src/FreeRTOS/tasks.c **** 
 3958              		.loc 1 3115 5 is_stmt 0 discriminator 1 view .LVU1136
 3959 0060 000000E3 		movw	r0, #:lower16:.LC0
 3960              	.LVL360:
3115:../src/FreeRTOS/tasks.c **** 
 3961              		.loc 1 3115 5 discriminator 1 view .LVU1137
 3962 0064 000040E3 		movt	r0, #:upper16:.LC0
 3963 0068 FEFFFFEB 		bl	R_OS_AssertCalled
 3964              	.LVL361:
3115:../src/FreeRTOS/tasks.c **** 
 3965              		.loc 1 3115 5 discriminator 1 view .LVU1138
 3966 006c E8FFFFEA 		b	.L278
 3967              	.L282:
3119:../src/FreeRTOS/tasks.c **** 
 3968              		.loc 1 3119 5 is_stmt 1 discriminator 1 view .LVU1139
 3969 0070 2F1C00E3 		movw	r1, #3119
 3970 0074 000000E3 		movw	r0, #:lower16:.LC0
 3971 0078 000040E3 		movt	r0, #:upper16:.LC0
 3972 007c FEFFFFEB 		bl	R_OS_AssertCalled
 3973              	.LVL362:
 3974 0080 E8FFFFEA 		b	.L279
 3975              		.cfi_endproc
 3976              	.LFE31:
 3978              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3979              		.align	2
 3980              		.global	vTaskPlaceOnEventListRestricted
 3981              		.syntax unified
 3982              		.arm
 3983              		.fpu neon
 3985              	vTaskPlaceOnEventListRestricted:
 3986              	.LVL363:
 3987              	.LFB32:
3142:../src/FreeRTOS/tasks.c ****         configASSERT( pxEventList );
 3988              		.loc 1 3142 5 view -0
 3989              		.cfi_startproc
 3990              		@ args = 0, pretend = 0, frame = 0
 3991              		@ frame_needed = 0, uses_anonymous_args = 0
3142:../src/FreeRTOS/tasks.c ****         configASSERT( pxEventList );
 3992              		.loc 1 3142 5 is_stmt 0 view .LVU1141
 3993 0000 70402DE9 		push	{r4, r5, r6, lr}
 3994              		.cfi_def_cfa_offset 16
 3995              		.cfi_offset 4, -16
 3996              		.cfi_offset 5, -12
 3997              		.cfi_offset 6, -8
 3998              		.cfi_offset 14, -4
 3999 0004 0160A0E1 		mov	r6, r1
 4000 0008 0240A0E1 		mov	r4, r2
3143:../src/FreeRTOS/tasks.c **** 
 4001              		.loc 1 3143 9 is_stmt 1 view .LVU1142
 4002 000c 005050E2 		subs	r5, r0, #0
 4003 0010 0B00000A 		beq	.L288
 4004              	.LVL364:
 4005              	.L284:
3143:../src/FreeRTOS/tasks.c **** 
 4006              		.loc 1 3143 36 discriminator 3 view .LVU1143
3155:../src/FreeRTOS/tasks.c **** 
 4007              		.loc 1 3155 9 discriminator 3 view .LVU1144
3155:../src/FreeRTOS/tasks.c **** 
 4008              		.loc 1 3155 53 is_stmt 0 discriminator 3 view .LVU1145
 4009 0014 003000E3 		movw	r3, #:lower16:.LANCHOR10
 4010 0018 003040E3 		movt	r3, #:upper16:.LANCHOR10
 4011 001c 001093E5 		ldr	r1, [r3]
3155:../src/FreeRTOS/tasks.c **** 
 4012              		.loc 1 3155 9 discriminator 3 view .LVU1146
 4013 0020 181081E2 		add	r1, r1, #24
 4014 0024 0500A0E1 		mov	r0, r5
 4015 0028 FEFFFFEB 		bl	vListInsertEnd
 4016              	.LVL365:
3160:../src/FreeRTOS/tasks.c ****         {
 4017              		.loc 1 3160 9 is_stmt 1 discriminator 3 view .LVU1147
3160:../src/FreeRTOS/tasks.c ****         {
 4018              		.loc 1 3160 11 is_stmt 0 discriminator 3 view .LVU1148
 4019 002c 000054E3 		cmp	r4, #0
3162:../src/FreeRTOS/tasks.c ****         }
 4020              		.loc 1 3162 26 view .LVU1149
 4021 0030 0060E013 		mvnne	r6, #0
 4022              	.LVL366:
 4023              	.L285:
3165:../src/FreeRTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4024              		.loc 1 3165 63 is_stmt 1 view .LVU1150
3166:../src/FreeRTOS/tasks.c ****     }
 4025              		.loc 1 3166 9 view .LVU1151
 4026 0034 0410A0E1 		mov	r1, r4
 4027 0038 0600A0E1 		mov	r0, r6
 4028 003c FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 4029              	.LVL367:
3167:../src/FreeRTOS/tasks.c **** 
 4030              		.loc 1 3167 5 is_stmt 0 view .LVU1152
 4031 0040 7080BDE8 		pop	{r4, r5, r6, pc}
 4032              	.LVL368:
 4033              	.L288:
3143:../src/FreeRTOS/tasks.c **** 
 4034              		.loc 1 3143 9 is_stmt 1 discriminator 1 view .LVU1153
 4035 0044 471C00E3 		movw	r1, #3143
 4036              	.LVL369:
3143:../src/FreeRTOS/tasks.c **** 
 4037              		.loc 1 3143 9 is_stmt 0 discriminator 1 view .LVU1154
 4038 0048 000000E3 		movw	r0, #:lower16:.LC0
 4039              	.LVL370:
3143:../src/FreeRTOS/tasks.c **** 
 4040              		.loc 1 3143 9 discriminator 1 view .LVU1155
 4041 004c 000040E3 		movt	r0, #:upper16:.LC0
 4042 0050 FEFFFFEB 		bl	R_OS_AssertCalled
 4043              	.LVL371:
3143:../src/FreeRTOS/tasks.c **** 
 4044              		.loc 1 3143 9 discriminator 1 view .LVU1156
 4045 0054 EEFFFFEA 		b	.L284
 4046              		.cfi_endproc
 4047              	.LFE32:
 4049              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4050              		.align	2
 4051              		.global	xTaskRemoveFromEventList
 4052              		.syntax unified
 4053              		.arm
 4054              		.fpu neon
 4056              	xTaskRemoveFromEventList:
 4057              	.LVL372:
 4058              	.LFB33:
3173:../src/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4059              		.loc 1 3173 1 is_stmt 1 view -0
 4060              		.cfi_startproc
 4061              		@ args = 0, pretend = 0, frame = 0
 4062              		@ frame_needed = 0, uses_anonymous_args = 0
3173:../src/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4063              		.loc 1 3173 1 is_stmt 0 view .LVU1158
 4064 0000 70402DE9 		push	{r4, r5, r6, lr}
 4065              		.cfi_def_cfa_offset 16
 4066              		.cfi_offset 4, -16
 4067              		.cfi_offset 5, -12
 4068              		.cfi_offset 6, -8
 4069              		.cfi_offset 14, -4
3174:../src/FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4070              		.loc 1 3174 5 is_stmt 1 view .LVU1159
3175:../src/FreeRTOS/tasks.c **** 
 4071              		.loc 1 3175 5 view .LVU1160
3190:../src/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4072              		.loc 1 3190 5 view .LVU1161
3190:../src/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4073              		.loc 1 3190 22 is_stmt 0 view .LVU1162
 4074 0004 0C3090E5 		ldr	r3, [r0, #12]
3190:../src/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4075              		.loc 1 3190 20 view .LVU1163
 4076 0008 0C4093E5 		ldr	r4, [r3, #12]
 4077              	.LVL373:
3191:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4078              		.loc 1 3191 5 is_stmt 1 view .LVU1164
 4079 000c 000054E3 		cmp	r4, #0
 4080 0010 2400000A 		beq	.L297
 4081              	.LVL374:
 4082              	.L290:
3191:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4083              		.loc 1 3191 35 discriminator 3 view .LVU1165
3192:../src/FreeRTOS/tasks.c **** 
 4084              		.loc 1 3192 5 discriminator 3 view .LVU1166
3192:../src/FreeRTOS/tasks.c **** 
 4085              		.loc 1 3192 14 is_stmt 0 discriminator 3 view .LVU1167
 4086 0014 185084E2 		add	r5, r4, #24
 4087 0018 0500A0E1 		mov	r0, r5
 4088 001c FEFFFFEB 		bl	uxListRemove
 4089              	.LVL375:
3194:../src/FreeRTOS/tasks.c ****     {
 4090              		.loc 1 3194 5 is_stmt 1 discriminator 3 view .LVU1168
3194:../src/FreeRTOS/tasks.c ****     {
 4091              		.loc 1 3194 30 is_stmt 0 discriminator 3 view .LVU1169
 4092 0020 003000E3 		movw	r3, #:lower16:.LANCHOR16
 4093 0024 003040E3 		movt	r3, #:upper16:.LANCHOR16
 4094 0028 003093E5 		ldr	r3, [r3]
3194:../src/FreeRTOS/tasks.c ****     {
 4095              		.loc 1 3194 7 discriminator 3 view .LVU1170
 4096 002c 000053E3 		cmp	r3, #0
 4097 0030 2100001A 		bne	.L291
3196:../src/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4098              		.loc 1 3196 9 is_stmt 1 view .LVU1171
3196:../src/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4099              		.loc 1 3196 18 is_stmt 0 view .LVU1172
 4100 0034 045084E2 		add	r5, r4, #4
 4101 0038 0500A0E1 		mov	r0, r5
 4102 003c FEFFFFEB 		bl	uxListRemove
 4103              	.LVL376:
3197:../src/FreeRTOS/tasks.c **** 
 4104              		.loc 1 3197 9 is_stmt 1 view .LVU1173
3197:../src/FreeRTOS/tasks.c **** 
 4105              		.loc 1 3197 9 view .LVU1174
 4106 0040 2C3094E5 		ldr	r3, [r4, #44]
 4107 0044 002000E3 		movw	r2, #:lower16:.LANCHOR13
 4108 0048 002040E3 		movt	r2, #:upper16:.LANCHOR13
 4109 004c 002092E5 		ldr	r2, [r2]
 4110 0050 020053E1 		cmp	r3, r2
3197:../src/FreeRTOS/tasks.c **** 
 4111              		.loc 1 3197 9 discriminator 1 view .LVU1175
 4112 0054 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 4113 0058 00204083 		movthi	r2, #:upper16:.LANCHOR13
 4114 005c 00308285 		strhi	r3, [r2]
 4115              	.L292:
3197:../src/FreeRTOS/tasks.c **** 
 4116              		.loc 1 3197 9 discriminator 3 view .LVU1176
3197:../src/FreeRTOS/tasks.c **** 
 4117              		.loc 1 3197 9 discriminator 3 view .LVU1177
 4118 0060 000000E3 		movw	r0, #:lower16:.LANCHOR4
 4119 0064 000040E3 		movt	r0, #:upper16:.LANCHOR4
 4120 0068 033183E0 		add	r3, r3, r3, lsl #2
 4121 006c 0510A0E1 		mov	r1, r5
 4122 0070 030180E0 		add	r0, r0, r3, lsl #2
 4123 0074 FEFFFFEB 		bl	vListInsertEnd
 4124              	.LVL377:
3197:../src/FreeRTOS/tasks.c **** 
 4125              		.loc 1 3197 48 discriminator 3 view .LVU1178
 4126              	.L293:
3220:../src/FreeRTOS/tasks.c ****     {
 4127              		.loc 1 3220 5 view .LVU1179
3220:../src/FreeRTOS/tasks.c ****     {
 4128              		.loc 1 3220 23 is_stmt 0 view .LVU1180
 4129 0078 2C2094E5 		ldr	r2, [r4, #44]
3220:../src/FreeRTOS/tasks.c ****     {
 4130              		.loc 1 3220 50 view .LVU1181
 4131 007c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 4132 0080 003040E3 		movt	r3, #:upper16:.LANCHOR10
 4133 0084 003093E5 		ldr	r3, [r3]
 4134 0088 2C3093E5 		ldr	r3, [r3, #44]
3220:../src/FreeRTOS/tasks.c ****     {
 4135              		.loc 1 3220 7 view .LVU1182
 4136 008c 030052E1 		cmp	r2, r3
 4137 0090 0E00009A 		bls	.L295
3225:../src/FreeRTOS/tasks.c **** 
 4138              		.loc 1 3225 9 is_stmt 1 view .LVU1183
 4139              	.LVL378:
3229:../src/FreeRTOS/tasks.c ****     }
 4140              		.loc 1 3229 9 view .LVU1184
3229:../src/FreeRTOS/tasks.c ****     }
 4141              		.loc 1 3229 23 is_stmt 0 view .LVU1185
 4142 0094 003000E3 		movw	r3, #:lower16:.LANCHOR17
 4143 0098 003040E3 		movt	r3, #:upper16:.LANCHOR17
 4144 009c 0100A0E3 		mov	r0, #1
 4145 00a0 000083E5 		str	r0, [r3]
 4146 00a4 7080BDE8 		pop	{r4, r5, r6, pc}
 4147              	.LVL379:
 4148              	.L297:
3191:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4149              		.loc 1 3191 5 is_stmt 1 discriminator 1 view .LVU1186
 4150 00a8 771C00E3 		movw	r1, #3191
 4151 00ac 000000E3 		movw	r0, #:lower16:.LC0
 4152              	.LVL380:
3191:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4153              		.loc 1 3191 5 is_stmt 0 discriminator 1 view .LVU1187
 4154 00b0 000040E3 		movt	r0, #:upper16:.LC0
 4155 00b4 FEFFFFEB 		bl	R_OS_AssertCalled
 4156              	.LVL381:
 4157 00b8 D5FFFFEA 		b	.L290
 4158              	.L291:
3217:../src/FreeRTOS/tasks.c ****     }
 4159              		.loc 1 3217 9 is_stmt 1 view .LVU1188
 4160 00bc 0510A0E1 		mov	r1, r5
 4161 00c0 000000E3 		movw	r0, #:lower16:.LANCHOR3
 4162 00c4 000040E3 		movt	r0, #:upper16:.LANCHOR3
 4163 00c8 FEFFFFEB 		bl	vListInsertEnd
 4164              	.LVL382:
 4165 00cc E9FFFFEA 		b	.L293
 4166              	.L295:
3233:../src/FreeRTOS/tasks.c ****     }
 4167              		.loc 1 3233 17 is_stmt 0 view .LVU1189
 4168 00d0 0000A0E3 		mov	r0, #0
 4169              	.LVL383:
3236:../src/FreeRTOS/tasks.c **** }
 4170              		.loc 1 3236 5 is_stmt 1 view .LVU1190
3237:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4171              		.loc 1 3237 1 is_stmt 0 view .LVU1191
 4172 00d4 7080BDE8 		pop	{r4, r5, r6, pc}
 4173              		.cfi_endproc
 4174              	.LFE33:
 4176              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4177              		.align	2
 4178              		.global	vTaskRemoveFromUnorderedEventList
 4179              		.syntax unified
 4180              		.arm
 4181              		.fpu neon
 4183              	vTaskRemoveFromUnorderedEventList:
 4184              	.LVL384:
 4185              	.LFB34:
3242:../src/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4186              		.loc 1 3242 1 is_stmt 1 view -0
 4187              		.cfi_startproc
 4188              		@ args = 0, pretend = 0, frame = 0
 4189              		@ frame_needed = 0, uses_anonymous_args = 0
3242:../src/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4190              		.loc 1 3242 1 is_stmt 0 view .LVU1193
 4191 0000 70402DE9 		push	{r4, r5, r6, lr}
 4192              		.cfi_def_cfa_offset 16
 4193              		.cfi_offset 4, -16
 4194              		.cfi_offset 5, -12
 4195              		.cfi_offset 6, -8
 4196              		.cfi_offset 14, -4
 4197 0004 0040A0E1 		mov	r4, r0
 4198 0008 0150A0E1 		mov	r5, r1
3243:../src/FreeRTOS/tasks.c **** 
 4199              		.loc 1 3243 5 is_stmt 1 view .LVU1194
3247:../src/FreeRTOS/tasks.c **** 
 4200              		.loc 1 3247 5 view .LVU1195
 4201 000c 003000E3 		movw	r3, #:lower16:.LANCHOR16
 4202 0010 003040E3 		movt	r3, #:upper16:.LANCHOR16
 4203 0014 003093E5 		ldr	r3, [r3]
 4204 0018 000053E3 		cmp	r3, #0
 4205 001c 2200000A 		beq	.L304
 4206              	.LVL385:
 4207              	.L299:
3247:../src/FreeRTOS/tasks.c **** 
 4208              		.loc 1 3247 52 discriminator 3 view .LVU1196
3250:../src/FreeRTOS/tasks.c **** 
 4209              		.loc 1 3250 5 discriminator 3 view .LVU1197
 4210 0020 025185E3 		orr	r5, r5, #-2147483648
 4211              	.LVL386:
3250:../src/FreeRTOS/tasks.c **** 
 4212              		.loc 1 3250 5 is_stmt 0 discriminator 3 view .LVU1198
 4213 0024 005084E5 		str	r5, [r4]
3254:../src/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4214              		.loc 1 3254 5 is_stmt 1 discriminator 3 view .LVU1199
3254:../src/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4215              		.loc 1 3254 20 is_stmt 0 discriminator 3 view .LVU1200
 4216 0028 0C5094E5 		ldr	r5, [r4, #12]
 4217              	.LVL387:
3255:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4218              		.loc 1 3255 5 is_stmt 1 discriminator 3 view .LVU1201
 4219 002c 000055E3 		cmp	r5, #0
 4220 0030 2200000A 		beq	.L305
 4221              	.L300:
3255:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4222              		.loc 1 3255 35 discriminator 3 view .LVU1202
3256:../src/FreeRTOS/tasks.c **** 
 4223              		.loc 1 3256 5 discriminator 3 view .LVU1203
3256:../src/FreeRTOS/tasks.c **** 
 4224              		.loc 1 3256 14 is_stmt 0 discriminator 3 view .LVU1204
 4225 0034 0400A0E1 		mov	r0, r4
 4226 0038 FEFFFFEB 		bl	uxListRemove
 4227              	.LVL388:
3275:../src/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4228              		.loc 1 3275 5 is_stmt 1 discriminator 3 view .LVU1205
3275:../src/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4229              		.loc 1 3275 14 is_stmt 0 discriminator 3 view .LVU1206
 4230 003c 044085E2 		add	r4, r5, #4
 4231              	.LVL389:
3275:../src/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4232              		.loc 1 3275 14 discriminator 3 view .LVU1207
 4233 0040 0400A0E1 		mov	r0, r4
 4234 0044 FEFFFFEB 		bl	uxListRemove
 4235              	.LVL390:
3276:../src/FreeRTOS/tasks.c **** 
 4236              		.loc 1 3276 5 is_stmt 1 discriminator 3 view .LVU1208
3276:../src/FreeRTOS/tasks.c **** 
 4237              		.loc 1 3276 5 discriminator 3 view .LVU1209
 4238 0048 2C3095E5 		ldr	r3, [r5, #44]
 4239 004c 002000E3 		movw	r2, #:lower16:.LANCHOR13
 4240 0050 002040E3 		movt	r2, #:upper16:.LANCHOR13
 4241 0054 002092E5 		ldr	r2, [r2]
 4242 0058 020053E1 		cmp	r3, r2
3276:../src/FreeRTOS/tasks.c **** 
 4243              		.loc 1 3276 5 discriminator 1 view .LVU1210
 4244 005c 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 4245 0060 00204083 		movthi	r2, #:upper16:.LANCHOR13
 4246 0064 00308285 		strhi	r3, [r2]
 4247              	.L301:
3276:../src/FreeRTOS/tasks.c **** 
 4248              		.loc 1 3276 5 discriminator 3 view .LVU1211
3276:../src/FreeRTOS/tasks.c **** 
 4249              		.loc 1 3276 5 discriminator 3 view .LVU1212
 4250 0068 000000E3 		movw	r0, #:lower16:.LANCHOR4
 4251 006c 000040E3 		movt	r0, #:upper16:.LANCHOR4
 4252 0070 033183E0 		add	r3, r3, r3, lsl #2
 4253 0074 0410A0E1 		mov	r1, r4
 4254 0078 030180E0 		add	r0, r0, r3, lsl #2
 4255 007c FEFFFFEB 		bl	vListInsertEnd
 4256              	.LVL391:
3276:../src/FreeRTOS/tasks.c **** 
 4257              		.loc 1 3276 44 discriminator 3 view .LVU1213
3278:../src/FreeRTOS/tasks.c ****     {
 4258              		.loc 1 3278 5 discriminator 3 view .LVU1214
3278:../src/FreeRTOS/tasks.c ****     {
 4259              		.loc 1 3278 23 is_stmt 0 discriminator 3 view .LVU1215
 4260 0080 2C2095E5 		ldr	r2, [r5, #44]
3278:../src/FreeRTOS/tasks.c ****     {
 4261              		.loc 1 3278 50 discriminator 3 view .LVU1216
 4262 0084 003000E3 		movw	r3, #:lower16:.LANCHOR10
 4263 0088 003040E3 		movt	r3, #:upper16:.LANCHOR10
 4264 008c 003093E5 		ldr	r3, [r3]
 4265 0090 2C3093E5 		ldr	r3, [r3, #44]
3278:../src/FreeRTOS/tasks.c ****     {
 4266              		.loc 1 3278 7 discriminator 3 view .LVU1217
 4267 0094 030052E1 		cmp	r2, r3
3284:../src/FreeRTOS/tasks.c ****     }
 4268              		.loc 1 3284 9 is_stmt 1 view .LVU1218
3284:../src/FreeRTOS/tasks.c ****     }
 4269              		.loc 1 3284 23 is_stmt 0 view .LVU1219
 4270 0098 00300083 		movwhi	r3, #:lower16:.LANCHOR17
 4271 009c 00304083 		movthi	r3, #:upper16:.LANCHOR17
 4272 00a0 0120A083 		movhi	r2, #1
 4273 00a4 00208385 		strhi	r2, [r3]
3286:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4274              		.loc 1 3286 1 view .LVU1220
 4275 00a8 7080BDE8 		pop	{r4, r5, r6, pc}
 4276              	.LVL392:
 4277              	.L304:
3247:../src/FreeRTOS/tasks.c **** 
 4278              		.loc 1 3247 5 is_stmt 1 discriminator 1 view .LVU1221
 4279 00ac AF1C00E3 		movw	r1, #3247
 4280              	.LVL393:
3247:../src/FreeRTOS/tasks.c **** 
 4281              		.loc 1 3247 5 is_stmt 0 discriminator 1 view .LVU1222
 4282 00b0 000000E3 		movw	r0, #:lower16:.LC0
 4283              	.LVL394:
3247:../src/FreeRTOS/tasks.c **** 
 4284              		.loc 1 3247 5 discriminator 1 view .LVU1223
 4285 00b4 000040E3 		movt	r0, #:upper16:.LC0
 4286 00b8 FEFFFFEB 		bl	R_OS_AssertCalled
 4287              	.LVL395:
 4288 00bc D7FFFFEA 		b	.L299
 4289              	.LVL396:
 4290              	.L305:
3255:../src/FreeRTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4291              		.loc 1 3255 5 is_stmt 1 discriminator 1 view .LVU1224
 4292 00c0 B71C00E3 		movw	r1, #3255
 4293 00c4 000000E3 		movw	r0, #:lower16:.LC0
 4294 00c8 000040E3 		movt	r0, #:upper16:.LC0
 4295 00cc FEFFFFEB 		bl	R_OS_AssertCalled
 4296              	.LVL397:
 4297 00d0 D7FFFFEA 		b	.L300
 4298              		.cfi_endproc
 4299              	.LFE34:
 4301              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4302              		.align	2
 4303              		.global	vTaskSetTimeOutState
 4304              		.syntax unified
 4305              		.arm
 4306              		.fpu neon
 4308              	vTaskSetTimeOutState:
 4309              	.LVL398:
 4310              	.LFB35:
3290:../src/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 4311              		.loc 1 3290 1 view -0
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 0
 4314              		@ frame_needed = 0, uses_anonymous_args = 0
3290:../src/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 4315              		.loc 1 3290 1 is_stmt 0 view .LVU1226
 4316 0000 10402DE9 		push	{r4, lr}
 4317              		.cfi_def_cfa_offset 8
 4318              		.cfi_offset 4, -8
 4319              		.cfi_offset 14, -4
3291:../src/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4320              		.loc 1 3291 5 is_stmt 1 view .LVU1227
 4321 0004 004050E2 		subs	r4, r0, #0
 4322 0008 0A00000A 		beq	.L309
 4323              	.LVL399:
 4324              	.L307:
3291:../src/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4325              		.loc 1 3291 30 discriminator 3 view .LVU1228
3292:../src/FreeRTOS/tasks.c ****     {
 4326              		.loc 1 3292 5 discriminator 3 view .LVU1229
 4327 000c FEFFFFEB 		bl	vPortEnterCritical
 4328              	.LVL400:
3292:../src/FreeRTOS/tasks.c ****     {
 4329              		.loc 1 3292 25 discriminator 3 view .LVU1230
3294:../src/FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4330              		.loc 1 3294 9 discriminator 3 view .LVU1231
3294:../src/FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4331              		.loc 1 3294 35 is_stmt 0 discriminator 3 view .LVU1232
 4332 0010 003000E3 		movw	r3, #:lower16:.LANCHOR20
 4333 0014 003040E3 		movt	r3, #:upper16:.LANCHOR20
 4334 0018 003093E5 		ldr	r3, [r3]
 4335 001c 003084E5 		str	r3, [r4]
3295:../src/FreeRTOS/tasks.c ****     }
 4336              		.loc 1 3295 9 is_stmt 1 discriminator 3 view .LVU1233
3295:../src/FreeRTOS/tasks.c ****     }
 4337              		.loc 1 3295 36 is_stmt 0 discriminator 3 view .LVU1234
 4338 0020 003000E3 		movw	r3, #:lower16:.LANCHOR15
 4339 0024 003040E3 		movt	r3, #:upper16:.LANCHOR15
 4340 0028 003093E5 		ldr	r3, [r3]
 4341 002c 043084E5 		str	r3, [r4, #4]
3297:../src/FreeRTOS/tasks.c **** }
 4342              		.loc 1 3297 5 is_stmt 1 discriminator 3 view .LVU1235
 4343 0030 FEFFFFEB 		bl	vPortExitCritical
 4344              	.LVL401:
3297:../src/FreeRTOS/tasks.c **** }
 4345              		.loc 1 3297 24 discriminator 3 view .LVU1236
3298:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4346              		.loc 1 3298 1 is_stmt 0 discriminator 3 view .LVU1237
 4347 0034 1080BDE8 		pop	{r4, pc}
 4348              	.LVL402:
 4349              	.L309:
3291:../src/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4350              		.loc 1 3291 5 is_stmt 1 discriminator 1 view .LVU1238
 4351 0038 DB1C00E3 		movw	r1, #3291
 4352 003c 000000E3 		movw	r0, #:lower16:.LC0
 4353              	.LVL403:
3291:../src/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4354              		.loc 1 3291 5 is_stmt 0 discriminator 1 view .LVU1239
 4355 0040 000040E3 		movt	r0, #:upper16:.LC0
 4356 0044 FEFFFFEB 		bl	R_OS_AssertCalled
 4357              	.LVL404:
 4358 0048 EFFFFFEA 		b	.L307
 4359              		.cfi_endproc
 4360              	.LFE35:
 4362              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4363              		.align	2
 4364              		.global	vTaskInternalSetTimeOutState
 4365              		.syntax unified
 4366              		.arm
 4367              		.fpu neon
 4369              	vTaskInternalSetTimeOutState:
 4370              	.LVL405:
 4371              	.LFB36:
3302:../src/FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
 4372              		.loc 1 3302 1 is_stmt 1 view -0
 4373              		.cfi_startproc
 4374              		@ args = 0, pretend = 0, frame = 0
 4375              		@ frame_needed = 0, uses_anonymous_args = 0
 4376              		@ link register save eliminated.
3304:../src/FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4377              		.loc 1 3304 5 view .LVU1241
3304:../src/FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4378              		.loc 1 3304 31 is_stmt 0 view .LVU1242
 4379 0000 003000E3 		movw	r3, #:lower16:.LANCHOR20
 4380 0004 003040E3 		movt	r3, #:upper16:.LANCHOR20
 4381 0008 003093E5 		ldr	r3, [r3]
 4382 000c 003080E5 		str	r3, [r0]
3305:../src/FreeRTOS/tasks.c **** }
 4383              		.loc 1 3305 5 is_stmt 1 view .LVU1243
3305:../src/FreeRTOS/tasks.c **** }
 4384              		.loc 1 3305 32 is_stmt 0 view .LVU1244
 4385 0010 003000E3 		movw	r3, #:lower16:.LANCHOR15
 4386 0014 003040E3 		movt	r3, #:upper16:.LANCHOR15
 4387 0018 003093E5 		ldr	r3, [r3]
 4388 001c 043080E5 		str	r3, [r0, #4]
3306:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4389              		.loc 1 3306 1 view .LVU1245
 4390 0020 1EFF2FE1 		bx	lr
 4391              		.cfi_endproc
 4392              	.LFE36:
 4394              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4395              		.align	2
 4396              		.global	xTaskCheckForTimeOut
 4397              		.syntax unified
 4398              		.arm
 4399              		.fpu neon
 4401              	xTaskCheckForTimeOut:
 4402              	.LVL406:
 4403              	.LFB37:
3311:../src/FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4404              		.loc 1 3311 1 is_stmt 1 view -0
 4405              		.cfi_startproc
 4406              		@ args = 0, pretend = 0, frame = 0
 4407              		@ frame_needed = 0, uses_anonymous_args = 0
3311:../src/FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4408              		.loc 1 3311 1 is_stmt 0 view .LVU1247
 4409 0000 70402DE9 		push	{r4, r5, r6, lr}
 4410              		.cfi_def_cfa_offset 16
 4411              		.cfi_offset 4, -16
 4412              		.cfi_offset 5, -12
 4413              		.cfi_offset 6, -8
 4414              		.cfi_offset 14, -4
 4415 0004 0150A0E1 		mov	r5, r1
3312:../src/FreeRTOS/tasks.c **** 
 4416              		.loc 1 3312 5 is_stmt 1 view .LVU1248
3314:../src/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4417              		.loc 1 3314 5 view .LVU1249
 4418 0008 004050E2 		subs	r4, r0, #0
 4419 000c 1600000A 		beq	.L320
 4420              	.LVL407:
 4421              	.L312:
3314:../src/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4422              		.loc 1 3314 30 discriminator 3 view .LVU1250
3315:../src/FreeRTOS/tasks.c **** 
 4423              		.loc 1 3315 5 discriminator 3 view .LVU1251
 4424 0010 000055E3 		cmp	r5, #0
 4425 0014 1900000A 		beq	.L321
 4426              	.L313:
3315:../src/FreeRTOS/tasks.c **** 
 4427              		.loc 1 3315 34 discriminator 3 view .LVU1252
3317:../src/FreeRTOS/tasks.c ****     {
 4428              		.loc 1 3317 5 discriminator 3 view .LVU1253
 4429 0018 FEFFFFEB 		bl	vPortEnterCritical
 4430              	.LVL408:
3317:../src/FreeRTOS/tasks.c ****     {
 4431              		.loc 1 3317 25 discriminator 3 view .LVU1254
 4432              	.LBB28:
3320:../src/FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4433              		.loc 1 3320 9 discriminator 3 view .LVU1255
3320:../src/FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4434              		.loc 1 3320 26 is_stmt 0 discriminator 3 view .LVU1256
 4435 001c 003000E3 		movw	r3, #:lower16:.LANCHOR15
 4436 0020 003040E3 		movt	r3, #:upper16:.LANCHOR15
 4437 0024 001093E5 		ldr	r1, [r3]
 4438              	.LVL409:
3321:../src/FreeRTOS/tasks.c **** 
 4439              		.loc 1 3321 9 is_stmt 1 discriminator 3 view .LVU1257
3321:../src/FreeRTOS/tasks.c **** 
 4440              		.loc 1 3321 68 is_stmt 0 discriminator 3 view .LVU1258
 4441 0028 042094E5 		ldr	r2, [r4, #4]
3321:../src/FreeRTOS/tasks.c **** 
 4442              		.loc 1 3321 26 discriminator 3 view .LVU1259
 4443 002c 02C041E0 		sub	ip, r1, r2
 4444              	.LVL410:
3324:../src/FreeRTOS/tasks.c ****             {
 4445              		.loc 1 3324 13 is_stmt 1 discriminator 3 view .LVU1260
3324:../src/FreeRTOS/tasks.c ****             {
 4446              		.loc 1 3324 29 is_stmt 0 discriminator 3 view .LVU1261
 4447 0030 003000E3 		movw	r3, #:lower16:.LANCHOR10
 4448 0034 003040E3 		movt	r3, #:upper16:.LANCHOR10
 4449 0038 003093E5 		ldr	r3, [r3]
 4450 003c 7530D3E5 		ldrb	r3, [r3, #117]	@ zero_extendqisi2
3324:../src/FreeRTOS/tasks.c ****             {
 4451              		.loc 1 3324 15 discriminator 3 view .LVU1262
 4452 0040 000053E3 		cmp	r3, #0
 4453 0044 1200000A 		beq	.L314
3328:../src/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 4454              		.loc 1 3328 17 is_stmt 1 view .LVU1263
3328:../src/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 4455              		.loc 1 3328 29 is_stmt 0 view .LVU1264
 4456 0048 003000E3 		movw	r3, #:lower16:.LANCHOR10
 4457 004c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 4458 0050 003093E5 		ldr	r3, [r3]
3328:../src/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 4459              		.loc 1 3328 46 view .LVU1265
 4460 0054 0020A0E3 		mov	r2, #0
 4461 0058 7520C3E5 		strb	r2, [r3, #117]
3329:../src/FreeRTOS/tasks.c ****             }
 4462              		.loc 1 3329 17 is_stmt 1 view .LVU1266
 4463              	.LVL411:
3329:../src/FreeRTOS/tasks.c ****             }
 4464              		.loc 1 3329 25 is_stmt 0 view .LVU1267
 4465 005c 0140A0E3 		mov	r4, #1
 4466              	.LVL412:
 4467              	.L315:
3329:../src/FreeRTOS/tasks.c ****             }
 4468              		.loc 1 3329 25 view .LVU1268
 4469              	.LBE28:
3368:../src/FreeRTOS/tasks.c **** 
 4470              		.loc 1 3368 5 is_stmt 1 view .LVU1269
 4471 0060 FEFFFFEB 		bl	vPortExitCritical
 4472              	.LVL413:
3368:../src/FreeRTOS/tasks.c **** 
 4473              		.loc 1 3368 24 view .LVU1270
3370:../src/FreeRTOS/tasks.c **** }
 4474              		.loc 1 3370 5 view .LVU1271
3371:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4475              		.loc 1 3371 1 is_stmt 0 view .LVU1272
 4476 0064 0400A0E1 		mov	r0, r4
 4477 0068 7080BDE8 		pop	{r4, r5, r6, pc}
 4478              	.LVL414:
 4479              	.L320:
3314:../src/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4480              		.loc 1 3314 5 is_stmt 1 discriminator 1 view .LVU1273
 4481 006c F21C00E3 		movw	r1, #3314
 4482              	.LVL415:
3314:../src/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4483              		.loc 1 3314 5 is_stmt 0 discriminator 1 view .LVU1274
 4484 0070 000000E3 		movw	r0, #:lower16:.LC0
 4485              	.LVL416:
3314:../src/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4486              		.loc 1 3314 5 discriminator 1 view .LVU1275
 4487 0074 000040E3 		movt	r0, #:upper16:.LC0
 4488 0078 FEFFFFEB 		bl	R_OS_AssertCalled
 4489              	.LVL417:
 4490 007c E3FFFFEA 		b	.L312
 4491              	.L321:
3315:../src/FreeRTOS/tasks.c **** 
 4492              		.loc 1 3315 5 is_stmt 1 discriminator 1 view .LVU1276
 4493 0080 F31C00E3 		movw	r1, #3315
 4494 0084 000000E3 		movw	r0, #:lower16:.LC0
 4495 0088 000040E3 		movt	r0, #:upper16:.LC0
 4496 008c FEFFFFEB 		bl	R_OS_AssertCalled
 4497              	.LVL418:
 4498 0090 E0FFFFEA 		b	.L313
 4499              	.LVL419:
 4500              	.L314:
 4501              	.LBB29:
3335:../src/FreeRTOS/tasks.c ****             {
 4502              		.loc 1 3335 13 view .LVU1277
3335:../src/FreeRTOS/tasks.c ****             {
 4503              		.loc 1 3335 17 is_stmt 0 view .LVU1278
 4504 0094 000095E5 		ldr	r0, [r5]
3335:../src/FreeRTOS/tasks.c ****             {
 4505              		.loc 1 3335 15 view .LVU1279
 4506 0098 010070E3 		cmn	r0, #1
 4507 009c 1600000A 		beq	.L318
3345:../src/FreeRTOS/tasks.c ****         {
 4508              		.loc 1 3345 9 is_stmt 1 view .LVU1280
3345:../src/FreeRTOS/tasks.c ****         {
 4509              		.loc 1 3345 43 is_stmt 0 view .LVU1281
 4510 00a0 00E094E5 		ldr	lr, [r4]
3345:../src/FreeRTOS/tasks.c ****         {
 4511              		.loc 1 3345 31 view .LVU1282
 4512 00a4 003000E3 		movw	r3, #:lower16:.LANCHOR20
 4513 00a8 003040E3 		movt	r3, #:upper16:.LANCHOR20
 4514 00ac 003093E5 		ldr	r3, [r3]
3345:../src/FreeRTOS/tasks.c ****         {
 4515              		.loc 1 3345 11 view .LVU1283
 4516 00b0 03005EE1 		cmp	lr, r3
 4517 00b4 0400000A 		beq	.L316
3345:../src/FreeRTOS/tasks.c ****         {
 4518              		.loc 1 3345 62 discriminator 1 view .LVU1284
 4519 00b8 010052E1 		cmp	r2, r1
3352:../src/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4520              		.loc 1 3352 13 is_stmt 1 view .LVU1285
 4521              	.LVL420:
3353:../src/FreeRTOS/tasks.c ****         }
 4522              		.loc 1 3353 13 view .LVU1286
3353:../src/FreeRTOS/tasks.c ****         }
 4523              		.loc 1 3353 28 is_stmt 0 view .LVU1287
 4524 00bc 0030A093 		movls	r3, #0
 4525 00c0 00308595 		strls	r3, [r5]
3352:../src/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4526              		.loc 1 3352 21 view .LVU1288
 4527 00c4 0140A093 		movls	r4, #1
 4528              	.LVL421:
3353:../src/FreeRTOS/tasks.c ****         }
 4529              		.loc 1 3353 28 view .LVU1289
 4530 00c8 E4FFFF9A 		bls	.L315
 4531              	.LVL422:
 4532              	.L316:
3355:../src/FreeRTOS/tasks.c ****         {
 4533              		.loc 1 3355 14 is_stmt 1 view .LVU1290
3355:../src/FreeRTOS/tasks.c ****         {
 4534              		.loc 1 3355 16 is_stmt 0 view .LVU1291
 4535 00cc 0C0050E1 		cmp	r0, ip
3364:../src/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 4536              		.loc 1 3364 13 is_stmt 1 view .LVU1292
3364:../src/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 4537              		.loc 1 3364 28 is_stmt 0 view .LVU1293
 4538 00d0 0030A093 		movls	r3, #0
 4539 00d4 00308595 		strls	r3, [r5]
3365:../src/FreeRTOS/tasks.c ****         }
 4540              		.loc 1 3365 13 is_stmt 1 view .LVU1294
 4541              	.LVL423:
3365:../src/FreeRTOS/tasks.c ****         }
 4542              		.loc 1 3365 21 is_stmt 0 view .LVU1295
 4543 00d8 0140A093 		movls	r4, #1
 4544              	.LVL424:
3365:../src/FreeRTOS/tasks.c ****         }
 4545              		.loc 1 3365 21 view .LVU1296
 4546 00dc DFFFFF9A 		bls	.L315
 4547              	.LVL425:
 4548              	.L322:
3358:../src/FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4549              		.loc 1 3358 13 is_stmt 1 view .LVU1297
3358:../src/FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4550              		.loc 1 3358 28 is_stmt 0 view .LVU1298
 4551 00e0 012042E0 		sub	r2, r2, r1
 4552 00e4 002082E0 		add	r2, r2, r0
 4553 00e8 002085E5 		str	r2, [r5]
3359:../src/FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 4554              		.loc 1 3359 13 is_stmt 1 view .LVU1299
 4555 00ec 0400A0E1 		mov	r0, r4
 4556 00f0 FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 4557              	.LVL426:
3360:../src/FreeRTOS/tasks.c ****         }
 4558              		.loc 1 3360 13 view .LVU1300
3360:../src/FreeRTOS/tasks.c ****         }
 4559              		.loc 1 3360 21 is_stmt 0 view .LVU1301
 4560 00f4 0040A0E3 		mov	r4, #0
 4561              	.LVL427:
3360:../src/FreeRTOS/tasks.c ****         }
 4562              		.loc 1 3360 21 view .LVU1302
 4563 00f8 D8FFFFEA 		b	.L315
 4564              	.LVL428:
 4565              	.L318:
3340:../src/FreeRTOS/tasks.c ****             }
 4566              		.loc 1 3340 25 view .LVU1303
 4567 00fc 0040A0E3 		mov	r4, #0
 4568              	.LVL429:
3340:../src/FreeRTOS/tasks.c ****             }
 4569              		.loc 1 3340 25 view .LVU1304
 4570 0100 D6FFFFEA 		b	.L315
 4571              	.LBE29:
 4572              		.cfi_endproc
 4573              	.LFE37:
 4575              		.section	.text.vTaskMissedYield,"ax",%progbits
 4576              		.align	2
 4577              		.global	vTaskMissedYield
 4578              		.syntax unified
 4579              		.arm
 4580              		.fpu neon
 4582              	vTaskMissedYield:
 4583              	.LFB38:
3375:../src/FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
 4584              		.loc 1 3375 1 is_stmt 1 view -0
 4585              		.cfi_startproc
 4586              		@ args = 0, pretend = 0, frame = 0
 4587              		@ frame_needed = 0, uses_anonymous_args = 0
 4588              		@ link register save eliminated.
3376:../src/FreeRTOS/tasks.c **** }
 4589              		.loc 1 3376 5 view .LVU1306
3376:../src/FreeRTOS/tasks.c **** }
 4590              		.loc 1 3376 19 is_stmt 0 view .LVU1307
 4591 0000 003000E3 		movw	r3, #:lower16:.LANCHOR17
 4592 0004 003040E3 		movt	r3, #:upper16:.LANCHOR17
 4593 0008 0120A0E3 		mov	r2, #1
 4594 000c 002083E5 		str	r2, [r3]
3377:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4595              		.loc 1 3377 1 view .LVU1308
 4596 0010 1EFF2FE1 		bx	lr
 4597              		.cfi_endproc
 4598              	.LFE38:
 4600              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4601              		.align	2
 4602              		.global	uxTaskGetTaskNumber
 4603              		.syntax unified
 4604              		.arm
 4605              		.fpu neon
 4607              	uxTaskGetTaskNumber:
 4608              	.LVL430:
 4609              	.LFB39:
3383:../src/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 4610              		.loc 1 3383 5 is_stmt 1 view -0
 4611              		.cfi_startproc
 4612              		@ args = 0, pretend = 0, frame = 0
 4613              		@ frame_needed = 0, uses_anonymous_args = 0
 4614              		@ link register save eliminated.
3384:../src/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 4615              		.loc 1 3384 9 view .LVU1310
3385:../src/FreeRTOS/tasks.c **** 
 4616              		.loc 1 3385 9 view .LVU1311
3387:../src/FreeRTOS/tasks.c ****         {
 4617              		.loc 1 3387 9 view .LVU1312
3387:../src/FreeRTOS/tasks.c ****         {
 4618              		.loc 1 3387 11 is_stmt 0 view .LVU1313
 4619 0000 000050E3 		cmp	r0, #0
3387:../src/FreeRTOS/tasks.c ****         {
 4620              		.loc 1 3387 11 view .LVU1314
 4621 0004 0100000A 		beq	.L326
3389:../src/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 4622              		.loc 1 3389 13 is_stmt 1 view .LVU1315
 4623              	.LVL431:
3390:../src/FreeRTOS/tasks.c ****         }
 4624              		.loc 1 3390 13 view .LVU1316
3390:../src/FreeRTOS/tasks.c ****         }
 4625              		.loc 1 3390 22 is_stmt 0 view .LVU1317
 4626 0008 540090E5 		ldr	r0, [r0, #84]
 4627              	.LVL432:
3390:../src/FreeRTOS/tasks.c ****         }
 4628              		.loc 1 3390 22 view .LVU1318
 4629 000c 1EFF2FE1 		bx	lr
 4630              	.LVL433:
 4631              	.L326:
3394:../src/FreeRTOS/tasks.c ****         }
 4632              		.loc 1 3394 22 view .LVU1319
 4633 0010 0000A0E3 		mov	r0, #0
 4634              	.LVL434:
3397:../src/FreeRTOS/tasks.c ****     }
 4635              		.loc 1 3397 9 is_stmt 1 view .LVU1320
3398:../src/FreeRTOS/tasks.c **** 
 4636              		.loc 1 3398 5 is_stmt 0 view .LVU1321
 4637 0014 1EFF2FE1 		bx	lr
 4638              		.cfi_endproc
 4639              	.LFE39:
 4641              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4642              		.align	2
 4643              		.global	vTaskSetTaskNumber
 4644              		.syntax unified
 4645              		.arm
 4646              		.fpu neon
 4648              	vTaskSetTaskNumber:
 4649              	.LVL435:
 4650              	.LFB40:
3407:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4651              		.loc 1 3407 5 is_stmt 1 view -0
 4652              		.cfi_startproc
 4653              		@ args = 0, pretend = 0, frame = 0
 4654              		@ frame_needed = 0, uses_anonymous_args = 0
 4655              		@ link register save eliminated.
3408:../src/FreeRTOS/tasks.c **** 
 4656              		.loc 1 3408 9 view .LVU1323
3410:../src/FreeRTOS/tasks.c ****         {
 4657              		.loc 1 3410 9 view .LVU1324
3410:../src/FreeRTOS/tasks.c ****         {
 4658              		.loc 1 3410 11 is_stmt 0 view .LVU1325
 4659 0000 000050E3 		cmp	r0, #0
3410:../src/FreeRTOS/tasks.c ****         {
 4660              		.loc 1 3410 11 view .LVU1326
3412:../src/FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 4661              		.loc 1 3412 13 is_stmt 1 view .LVU1327
 4662              	.LVL436:
3413:../src/FreeRTOS/tasks.c ****         }
 4663              		.loc 1 3413 13 view .LVU1328
3413:../src/FreeRTOS/tasks.c ****         }
 4664              		.loc 1 3413 33 is_stmt 0 view .LVU1329
 4665 0004 54108015 		strne	r1, [r0, #84]
3415:../src/FreeRTOS/tasks.c **** 
 4666              		.loc 1 3415 5 view .LVU1330
 4667 0008 1EFF2FE1 		bx	lr
 4668              		.cfi_endproc
 4669              	.LFE40:
 4671              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 4672              		.align	2
 4673              		.global	vTaskSetThreadLocalStoragePointer
 4674              		.syntax unified
 4675              		.arm
 4676              		.fpu neon
 4678              	vTaskSetThreadLocalStoragePointer:
 4679              	.LVL437:
 4680              	.LFB42:
3600:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4681              		.loc 1 3600 5 is_stmt 1 view -0
 4682              		.cfi_startproc
 4683              		@ args = 0, pretend = 0, frame = 0
 4684              		@ frame_needed = 0, uses_anonymous_args = 0
3601:../src/FreeRTOS/tasks.c **** 
 4685              		.loc 1 3601 9 view .LVU1332
3603:../src/FreeRTOS/tasks.c ****         {
 4686              		.loc 1 3603 9 view .LVU1333
3603:../src/FreeRTOS/tasks.c ****         {
 4687              		.loc 1 3603 11 is_stmt 0 view .LVU1334
 4688 0000 020051E3 		cmp	r1, #2
 4689 0004 1EFF2FC1 		bxgt	lr
3600:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4690              		.loc 1 3600 5 view .LVU1335
 4691 0008 70402DE9 		push	{r4, r5, r6, lr}
 4692              		.cfi_def_cfa_offset 16
 4693              		.cfi_offset 4, -16
 4694              		.cfi_offset 5, -12
 4695              		.cfi_offset 6, -8
 4696              		.cfi_offset 14, -4
 4697 000c 0050A0E1 		mov	r5, r0
 4698 0010 0140A0E1 		mov	r4, r1
 4699 0014 0260A0E1 		mov	r6, r2
3605:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
 4700              		.loc 1 3605 13 is_stmt 1 view .LVU1336
3605:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
 4701              		.loc 1 3605 21 is_stmt 0 view .LVU1337
 4702 0018 000050E3 		cmp	r0, #0
 4703 001c 0400000A 		beq	.L337
 4704              	.LVL438:
 4705              	.L331:
3606:../src/FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 4706              		.loc 1 3606 13 is_stmt 1 discriminator 4 view .LVU1338
 4707 0020 000055E3 		cmp	r5, #0
 4708 0024 0600000A 		beq	.L338
 4709              	.LVL439:
 4710              	.L332:
3606:../src/FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 4711              		.loc 1 3606 42 discriminator 3 view .LVU1339
3607:../src/FreeRTOS/tasks.c ****         }
 4712              		.loc 1 3607 13 discriminator 3 view .LVU1340
3607:../src/FreeRTOS/tasks.c ****         }
 4713              		.loc 1 3607 59 is_stmt 0 discriminator 3 view .LVU1341
 4714 0028 184084E2 		add	r4, r4, #24
 4715              	.LVL440:
3607:../src/FreeRTOS/tasks.c ****         }
 4716              		.loc 1 3607 59 discriminator 3 view .LVU1342
 4717 002c 046185E7 		str	r6, [r5, r4, lsl #2]
3609:../src/FreeRTOS/tasks.c **** 
 4718              		.loc 1 3609 5 discriminator 3 view .LVU1343
 4719 0030 7080BDE8 		pop	{r4, r5, r6, pc}
 4720              	.LVL441:
 4721              	.L337:
3605:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
 4722              		.loc 1 3605 21 discriminator 1 view .LVU1344
 4723 0034 003000E3 		movw	r3, #:lower16:.LANCHOR10
 4724 0038 003040E3 		movt	r3, #:upper16:.LANCHOR10
 4725 003c 005093E5 		ldr	r5, [r3]
 4726              	.LVL442:
3605:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
 4727              		.loc 1 3605 21 discriminator 1 view .LVU1345
 4728 0040 F6FFFFEA 		b	.L331
 4729              	.LVL443:
 4730              	.L338:
3606:../src/FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 4731              		.loc 1 3606 13 is_stmt 1 discriminator 1 view .LVU1346
 4732 0044 161E00E3 		movw	r1, #3606
 4733              	.LVL444:
3606:../src/FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 4734              		.loc 1 3606 13 is_stmt 0 discriminator 1 view .LVU1347
 4735 0048 000000E3 		movw	r0, #:lower16:.LC0
 4736 004c 000040E3 		movt	r0, #:upper16:.LC0
 4737 0050 FEFFFFEB 		bl	R_OS_AssertCalled
 4738              	.LVL445:
3606:../src/FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 4739              		.loc 1 3606 13 discriminator 1 view .LVU1348
 4740 0054 F3FFFFEA 		b	.L332
 4741              		.cfi_endproc
 4742              	.LFE42:
 4744              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 4745              		.align	2
 4746              		.global	pvTaskGetThreadLocalStoragePointer
 4747              		.syntax unified
 4748              		.arm
 4749              		.fpu neon
 4751              	pvTaskGetThreadLocalStoragePointer:
 4752              	.LVL446:
 4753              	.LFB43:
3618:../src/FreeRTOS/tasks.c ****         void * pvReturn = NULL;
 4754              		.loc 1 3618 5 is_stmt 1 view -0
 4755              		.cfi_startproc
 4756              		@ args = 0, pretend = 0, frame = 0
 4757              		@ frame_needed = 0, uses_anonymous_args = 0
 4758              		@ link register save eliminated.
3619:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4759              		.loc 1 3619 9 view .LVU1350
3620:../src/FreeRTOS/tasks.c **** 
 4760              		.loc 1 3620 9 view .LVU1351
3622:../src/FreeRTOS/tasks.c ****         {
 4761              		.loc 1 3622 9 view .LVU1352
3622:../src/FreeRTOS/tasks.c ****         {
 4762              		.loc 1 3622 11 is_stmt 0 view .LVU1353
 4763 0000 020051E3 		cmp	r1, #2
 4764 0004 080000CA 		bgt	.L342
3624:../src/FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 4765              		.loc 1 3624 13 is_stmt 1 view .LVU1354
3624:../src/FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 4766              		.loc 1 3624 21 is_stmt 0 view .LVU1355
 4767 0008 000050E3 		cmp	r0, #0
 4768 000c 0200000A 		beq	.L343
 4769              	.LVL447:
 4770              	.L341:
3625:../src/FreeRTOS/tasks.c ****         }
 4771              		.loc 1 3625 13 is_stmt 1 discriminator 4 view .LVU1356
3625:../src/FreeRTOS/tasks.c ****         }
 4772              		.loc 1 3625 22 is_stmt 0 discriminator 4 view .LVU1357
 4773 0010 181081E2 		add	r1, r1, #24
 4774              	.LVL448:
3625:../src/FreeRTOS/tasks.c ****         }
 4775              		.loc 1 3625 22 discriminator 4 view .LVU1358
 4776 0014 010190E7 		ldr	r0, [r0, r1, lsl #2]
 4777              	.LVL449:
3625:../src/FreeRTOS/tasks.c ****         }
 4778              		.loc 1 3625 22 discriminator 4 view .LVU1359
 4779 0018 1EFF2FE1 		bx	lr
 4780              	.LVL450:
 4781              	.L343:
3624:../src/FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 4782              		.loc 1 3624 21 discriminator 1 view .LVU1360
 4783 001c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 4784 0020 003040E3 		movt	r3, #:upper16:.LANCHOR10
 4785 0024 000093E5 		ldr	r0, [r3]
 4786              	.LVL451:
3624:../src/FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 4787              		.loc 1 3624 21 discriminator 1 view .LVU1361
 4788 0028 F8FFFFEA 		b	.L341
 4789              	.LVL452:
 4790              	.L342:
3629:../src/FreeRTOS/tasks.c ****         }
 4791              		.loc 1 3629 22 view .LVU1362
 4792 002c 0000A0E3 		mov	r0, #0
 4793              	.LVL453:
3632:../src/FreeRTOS/tasks.c ****     }
 4794              		.loc 1 3632 9 is_stmt 1 view .LVU1363
3633:../src/FreeRTOS/tasks.c **** 
 4795              		.loc 1 3633 5 is_stmt 0 view .LVU1364
 4796 0030 1EFF2FE1 		bx	lr
 4797              		.cfi_endproc
 4798              	.LFE43:
 4800              		.section	.text.vTaskGetInfo,"ax",%progbits
 4801              		.align	2
 4802              		.global	vTaskGetInfo
 4803              		.syntax unified
 4804              		.arm
 4805              		.fpu neon
 4807              	vTaskGetInfo:
 4808              	.LVL454:
 4809              	.LFB46:
3721:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4810              		.loc 1 3721 5 is_stmt 1 view -0
 4811              		.cfi_startproc
 4812              		@ args = 0, pretend = 0, frame = 0
 4813              		@ frame_needed = 0, uses_anonymous_args = 0
3721:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 4814              		.loc 1 3721 5 is_stmt 0 view .LVU1366
 4815 0000 70402DE9 		push	{r4, r5, r6, lr}
 4816              		.cfi_def_cfa_offset 16
 4817              		.cfi_offset 4, -16
 4818              		.cfi_offset 5, -12
 4819              		.cfi_offset 6, -8
 4820              		.cfi_offset 14, -4
 4821 0004 0150A0E1 		mov	r5, r1
 4822 0008 0260A0E1 		mov	r6, r2
3722:../src/FreeRTOS/tasks.c **** 
 4823              		.loc 1 3722 9 is_stmt 1 view .LVU1367
3725:../src/FreeRTOS/tasks.c **** 
 4824              		.loc 1 3725 9 view .LVU1368
3725:../src/FreeRTOS/tasks.c **** 
 4825              		.loc 1 3725 17 is_stmt 0 view .LVU1369
 4826 000c 004050E2 		subs	r4, r0, #0
 4827 0010 1B00000A 		beq	.L353
 4828              	.LVL455:
 4829              	.L345:
3727:../src/FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 4830              		.loc 1 3727 9 is_stmt 1 discriminator 4 view .LVU1370
3727:../src/FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 4831              		.loc 1 3727 31 is_stmt 0 discriminator 4 view .LVU1371
 4832 0014 004085E5 		str	r4, [r5]
3728:../src/FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4833              		.loc 1 3728 9 is_stmt 1 discriminator 4 view .LVU1372
3728:../src/FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4834              		.loc 1 3728 53 is_stmt 0 discriminator 4 view .LVU1373
 4835 0018 342084E2 		add	r2, r4, #52
3728:../src/FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4836              		.loc 1 3728 34 discriminator 4 view .LVU1374
 4837 001c 042085E5 		str	r2, [r5, #4]
3729:../src/FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4838              		.loc 1 3729 9 is_stmt 1 discriminator 4 view .LVU1375
3729:../src/FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4839              		.loc 1 3729 48 is_stmt 0 discriminator 4 view .LVU1376
 4840 0020 2C2094E5 		ldr	r2, [r4, #44]
3729:../src/FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4841              		.loc 1 3729 41 discriminator 4 view .LVU1377
 4842 0024 102085E5 		str	r2, [r5, #16]
3730:../src/FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4843              		.loc 1 3730 9 is_stmt 1 discriminator 4 view .LVU1378
3730:../src/FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4844              		.loc 1 3730 42 is_stmt 0 discriminator 4 view .LVU1379
 4845 0028 302094E5 		ldr	r2, [r4, #48]
3730:../src/FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4846              		.loc 1 3730 35 discriminator 4 view .LVU1380
 4847 002c 1C2085E5 		str	r2, [r5, #28]
3731:../src/FreeRTOS/tasks.c **** 
 4848              		.loc 1 3731 9 is_stmt 1 discriminator 4 view .LVU1381
3731:../src/FreeRTOS/tasks.c **** 
 4849              		.loc 1 3731 42 is_stmt 0 discriminator 4 view .LVU1382
 4850 0030 502094E5 		ldr	r2, [r4, #80]
3731:../src/FreeRTOS/tasks.c **** 
 4851              		.loc 1 3731 35 discriminator 4 view .LVU1383
 4852 0034 082085E5 		str	r2, [r5, #8]
3735:../src/FreeRTOS/tasks.c ****             }
 4853              		.loc 1 3735 17 is_stmt 1 discriminator 4 view .LVU1384
3735:../src/FreeRTOS/tasks.c ****             }
 4854              		.loc 1 3735 53 is_stmt 0 discriminator 4 view .LVU1385
 4855 0038 582094E5 		ldr	r2, [r4, #88]
3735:../src/FreeRTOS/tasks.c ****             }
 4856              		.loc 1 3735 46 discriminator 4 view .LVU1386
 4857 003c 142085E5 		str	r2, [r5, #20]
3745:../src/FreeRTOS/tasks.c ****             }
 4858              		.loc 1 3745 17 is_stmt 1 discriminator 4 view .LVU1387
3745:../src/FreeRTOS/tasks.c ****             }
 4859              		.loc 1 3745 55 is_stmt 0 discriminator 4 view .LVU1388
 4860 0040 6C2094E5 		ldr	r2, [r4, #108]
3745:../src/FreeRTOS/tasks.c ****             }
 4861              		.loc 1 3745 48 discriminator 4 view .LVU1389
 4862 0044 182085E5 		str	r2, [r5, #24]
3756:../src/FreeRTOS/tasks.c ****         {
 4863              		.loc 1 3756 9 is_stmt 1 discriminator 4 view .LVU1390
3756:../src/FreeRTOS/tasks.c ****         {
 4864              		.loc 1 3756 11 is_stmt 0 discriminator 4 view .LVU1391
 4865 0048 050053E3 		cmp	r3, #5
 4866 004c 1A00000A 		beq	.L346
3758:../src/FreeRTOS/tasks.c ****             {
 4867              		.loc 1 3758 13 is_stmt 1 view .LVU1392
3758:../src/FreeRTOS/tasks.c ****             {
 4868              		.loc 1 3758 23 is_stmt 0 view .LVU1393
 4869 0050 000000E3 		movw	r0, #:lower16:.LANCHOR10
 4870 0054 000040E3 		movt	r0, #:upper16:.LANCHOR10
 4871 0058 002090E5 		ldr	r2, [r0]
3758:../src/FreeRTOS/tasks.c ****             {
 4872              		.loc 1 3758 15 view .LVU1394
 4873 005c 040052E1 		cmp	r2, r4
 4874 0060 0B00000A 		beq	.L354
3764:../src/FreeRTOS/tasks.c **** 
 4875              		.loc 1 3764 17 is_stmt 1 view .LVU1395
3764:../src/FreeRTOS/tasks.c **** 
 4876              		.loc 1 3764 45 is_stmt 0 view .LVU1396
 4877 0064 0C30C5E5 		strb	r3, [r5, #12]
3771:../src/FreeRTOS/tasks.c ****                         {
 4878              		.loc 1 3771 25 is_stmt 1 view .LVU1397
3771:../src/FreeRTOS/tasks.c ****                         {
 4879              		.loc 1 3771 27 is_stmt 0 view .LVU1398
 4880 0068 030053E3 		cmp	r3, #3
 4881 006c 0B00000A 		beq	.L355
 4882              	.LVL456:
 4883              	.L348:
3793:../src/FreeRTOS/tasks.c ****         {
 4884              		.loc 1 3793 9 is_stmt 1 view .LVU1399
3793:../src/FreeRTOS/tasks.c ****         {
 4885              		.loc 1 3793 11 is_stmt 0 view .LVU1400
 4886 0070 000056E3 		cmp	r6, #0
 4887 0074 1400001A 		bne	.L356
3807:../src/FreeRTOS/tasks.c ****         }
 4888              		.loc 1 3807 13 is_stmt 1 view .LVU1401
3807:../src/FreeRTOS/tasks.c ****         }
 4889              		.loc 1 3807 48 is_stmt 0 view .LVU1402
 4890 0078 0030A0E3 		mov	r3, #0
 4891 007c B032C5E1 		strh	r3, [r5, #32]	@ movhi
3809:../src/FreeRTOS/tasks.c **** 
 4892              		.loc 1 3809 5 view .LVU1403
 4893 0080 7080BDE8 		pop	{r4, r5, r6, pc}
 4894              	.LVL457:
 4895              	.L353:
3725:../src/FreeRTOS/tasks.c **** 
 4896              		.loc 1 3725 17 discriminator 1 view .LVU1404
 4897 0084 002000E3 		movw	r2, #:lower16:.LANCHOR10
 4898              	.LVL458:
3725:../src/FreeRTOS/tasks.c **** 
 4899              		.loc 1 3725 17 discriminator 1 view .LVU1405
 4900 0088 002040E3 		movt	r2, #:upper16:.LANCHOR10
 4901 008c 004092E5 		ldr	r4, [r2]
 4902              	.LVL459:
3725:../src/FreeRTOS/tasks.c **** 
 4903              		.loc 1 3725 17 discriminator 1 view .LVU1406
 4904 0090 DFFFFFEA 		b	.L345
 4905              	.LVL460:
 4906              	.L354:
3760:../src/FreeRTOS/tasks.c ****             }
 4907              		.loc 1 3760 17 is_stmt 1 view .LVU1407
3760:../src/FreeRTOS/tasks.c ****             }
 4908              		.loc 1 3760 45 is_stmt 0 view .LVU1408
 4909 0094 0030A0E3 		mov	r3, #0
 4910              	.LVL461:
3760:../src/FreeRTOS/tasks.c ****             }
 4911              		.loc 1 3760 45 view .LVU1409
 4912 0098 0C30C5E5 		strb	r3, [r5, #12]
 4913 009c F3FFFFEA 		b	.L348
 4914              	.LVL462:
 4915              	.L355:
3773:../src/FreeRTOS/tasks.c ****                             {
 4916              		.loc 1 3773 29 is_stmt 1 view .LVU1410
 4917 00a0 FEFFFFEB 		bl	vTaskSuspendAll
 4918              	.LVL463:
3775:../src/FreeRTOS/tasks.c ****                                 {
 4919              		.loc 1 3775 33 view .LVU1411
3775:../src/FreeRTOS/tasks.c ****                                 {
 4920              		.loc 1 3775 37 is_stmt 0 view .LVU1412
 4921 00a4 283094E5 		ldr	r3, [r4, #40]
3775:../src/FreeRTOS/tasks.c ****                                 {
 4922              		.loc 1 3775 35 view .LVU1413
 4923 00a8 000053E3 		cmp	r3, #0
3777:../src/FreeRTOS/tasks.c ****                                 }
 4924              		.loc 1 3777 37 is_stmt 1 view .LVU1414
3777:../src/FreeRTOS/tasks.c ****                                 }
 4925              		.loc 1 3777 65 is_stmt 0 view .LVU1415
 4926 00ac 0230A013 		movne	r3, #2
 4927 00b0 0C30C515 		strbne	r3, [r5, #12]
 4928              	.L349:
3780:../src/FreeRTOS/tasks.c ****                         }
 4929              		.loc 1 3780 29 is_stmt 1 view .LVU1416
3780:../src/FreeRTOS/tasks.c ****                         }
 4930              		.loc 1 3780 38 is_stmt 0 view .LVU1417
 4931 00b4 FEFFFFEB 		bl	xTaskResumeAll
 4932              	.LVL464:
 4933 00b8 ECFFFFEA 		b	.L348
 4934              	.LVL465:
 4935              	.L346:
3788:../src/FreeRTOS/tasks.c ****         }
 4936              		.loc 1 3788 13 is_stmt 1 view .LVU1418
3788:../src/FreeRTOS/tasks.c ****         }
 4937              		.loc 1 3788 43 is_stmt 0 view .LVU1419
 4938 00bc 0400A0E1 		mov	r0, r4
 4939 00c0 FEFFFFEB 		bl	eTaskGetState
 4940              	.LVL466:
3788:../src/FreeRTOS/tasks.c ****         }
 4941              		.loc 1 3788 41 view .LVU1420
 4942 00c4 0C00C5E5 		strb	r0, [r5, #12]
 4943 00c8 E8FFFFEA 		b	.L348
 4944              	.L356:
3801:../src/FreeRTOS/tasks.c ****                 }
 4945              		.loc 1 3801 21 is_stmt 1 view .LVU1421
3801:../src/FreeRTOS/tasks.c ****                 }
 4946              		.loc 1 3801 58 is_stmt 0 view .LVU1422
 4947 00cc 300094E5 		ldr	r0, [r4, #48]
 4948 00d0 FEFFFFEB 		bl	prvTaskCheckFreeStackSpace
 4949              	.LVL467:
3801:../src/FreeRTOS/tasks.c ****                 }
 4950              		.loc 1 3801 56 view .LVU1423
 4951 00d4 B002C5E1 		strh	r0, [r5, #32]	@ movhi
 4952 00d8 7080BDE8 		pop	{r4, r5, r6, pc}
 4953              		.cfi_endproc
 4954              	.LFE46:
 4956              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4957              		.align	2
 4958              		.syntax unified
 4959              		.arm
 4960              		.fpu neon
 4962              	prvListTasksWithinSingleList:
 4963              	.LVL468:
 4964              	.LFB47:
3819:../src/FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
 4965              		.loc 1 3819 5 is_stmt 1 view -0
 4966              		.cfi_startproc
 4967              		@ args = 0, pretend = 0, frame = 0
 4968              		@ frame_needed = 0, uses_anonymous_args = 0
3819:../src/FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
 4969              		.loc 1 3819 5 is_stmt 0 view .LVU1425
 4970 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4971              		.cfi_def_cfa_offset 32
 4972              		.cfi_offset 4, -32
 4973              		.cfi_offset 5, -28
 4974              		.cfi_offset 6, -24
 4975              		.cfi_offset 7, -20
 4976              		.cfi_offset 8, -16
 4977              		.cfi_offset 9, -12
 4978              		.cfi_offset 10, -8
 4979              		.cfi_offset 14, -4
3820:../src/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
 4980              		.loc 1 3820 29 is_stmt 1 view .LVU1426
3821:../src/FreeRTOS/tasks.c **** 
 4981              		.loc 1 3821 9 view .LVU1427
 4982              	.LVL469:
3823:../src/FreeRTOS/tasks.c ****         {
 4983              		.loc 1 3823 9 view .LVU1428
3823:../src/FreeRTOS/tasks.c ****         {
 4984              		.loc 1 3823 13 is_stmt 0 view .LVU1429
 4985 0004 004091E5 		ldr	r4, [r1]
3823:../src/FreeRTOS/tasks.c ****         {
 4986              		.loc 1 3823 11 view .LVU1430
 4987 0008 000054E3 		cmp	r4, #0
 4988 000c 2200000A 		beq	.L357
 4989 0010 0070A0E1 		mov	r7, r0
 4990 0014 0150A0E1 		mov	r5, r1
 4991 0018 0280A0E1 		mov	r8, r2
 4992              	.LBB30:
3825:../src/FreeRTOS/tasks.c **** 
 4993              		.loc 1 3825 13 is_stmt 1 view .LVU1431
 4994              	.LVL470:
3825:../src/FreeRTOS/tasks.c **** 
 4995              		.loc 1 3825 13 view .LVU1432
 4996 001c 043091E5 		ldr	r3, [r1, #4]
 4997 0020 043093E5 		ldr	r3, [r3, #4]
 4998 0024 043081E5 		str	r3, [r1, #4]
3825:../src/FreeRTOS/tasks.c **** 
 4999              		.loc 1 3825 13 view .LVU1433
 5000 0028 089081E2 		add	r9, r1, #8
 5001 002c 090053E1 		cmp	r3, r9
 5002 0030 0300000A 		beq	.L363
 5003              	.L359:
3825:../src/FreeRTOS/tasks.c **** 
 5004              		.loc 1 3825 13 discriminator 3 view .LVU1434
 5005 0034 043095E5 		ldr	r3, [r5, #4]
 5006 0038 0CA093E5 		ldr	r10, [r3, #12]
 5007              	.LVL471:
3825:../src/FreeRTOS/tasks.c **** 
 5008              		.loc 1 3825 13 is_stmt 0 discriminator 3 view .LVU1435
 5009              	.LBE30:
3821:../src/FreeRTOS/tasks.c **** 
 5010              		.loc 1 3821 21 discriminator 3 view .LVU1436
 5011 003c 0040A0E3 		mov	r4, #0
 5012 0040 0F0000EA 		b	.L361
 5013              	.LVL472:
 5014              	.L363:
 5015              	.LBB31:
3825:../src/FreeRTOS/tasks.c **** 
 5016              		.loc 1 3825 13 is_stmt 1 discriminator 1 view .LVU1437
 5017 0044 043093E5 		ldr	r3, [r3, #4]
 5018 0048 043081E5 		str	r3, [r1, #4]
 5019 004c F8FFFFEA 		b	.L359
 5020              	.LVL473:
 5021              	.L364:
3825:../src/FreeRTOS/tasks.c **** 
 5022              		.loc 1 3825 13 is_stmt 0 discriminator 1 view .LVU1438
 5023              	.LBE31:
 5024              	.LBB32:
3833:../src/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5025              		.loc 1 3833 17 is_stmt 1 discriminator 1 view .LVU1439
 5026 0050 043093E5 		ldr	r3, [r3, #4]
 5027 0054 043085E5 		str	r3, [r5, #4]
 5028              	.L360:
3833:../src/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5029              		.loc 1 3833 17 discriminator 3 view .LVU1440
 5030 0058 043095E5 		ldr	r3, [r5, #4]
 5031 005c 0C6093E5 		ldr	r6, [r3, #12]
 5032              	.LVL474:
3833:../src/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5033              		.loc 1 3833 17 is_stmt 0 discriminator 3 view .LVU1441
 5034              	.LBE32:
3833:../src/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5035              		.loc 1 3833 65 is_stmt 1 discriminator 3 view .LVU1442
3834:../src/FreeRTOS/tasks.c ****                 uxTask++;
 5036              		.loc 1 3834 17 discriminator 3 view .LVU1443
3834:../src/FreeRTOS/tasks.c ****                 uxTask++;
 5037              		.loc 1 3834 79 is_stmt 0 discriminator 3 view .LVU1444
 5038 0060 841184E0 		add	r1, r4, r4, lsl #3
3834:../src/FreeRTOS/tasks.c ****                 uxTask++;
 5039              		.loc 1 3834 17 discriminator 3 view .LVU1445
 5040 0064 0830A0E1 		mov	r3, r8
 5041 0068 0120A0E3 		mov	r2, #1
 5042 006c 011187E0 		add	r1, r7, r1, lsl #2
 5043 0070 0600A0E1 		mov	r0, r6
 5044 0074 FEFFFFEB 		bl	vTaskGetInfo
 5045              	.LVL475:
3835:../src/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 5046              		.loc 1 3835 17 is_stmt 1 discriminator 3 view .LVU1446
3835:../src/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 5047              		.loc 1 3835 23 is_stmt 0 discriminator 3 view .LVU1447
 5048 0078 014084E2 		add	r4, r4, #1
 5049              	.LVL476:
3836:../src/FreeRTOS/tasks.c ****         }
 5050              		.loc 1 3836 20 is_stmt 1 discriminator 3 view .LVU1448
3836:../src/FreeRTOS/tasks.c ****         }
 5051              		.loc 1 3836 13 is_stmt 0 discriminator 3 view .LVU1449
 5052 007c 06005AE1 		cmp	r10, r6
 5053 0080 0500000A 		beq	.L357
 5054              	.LVL477:
 5055              	.L361:
3825:../src/FreeRTOS/tasks.c **** 
 5056              		.loc 1 3825 62 is_stmt 1 discriminator 4 view .LVU1450
3831:../src/FreeRTOS/tasks.c ****             {
 5057              		.loc 1 3831 13 discriminator 4 view .LVU1451
 5058              	.LBB33:
3833:../src/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5059              		.loc 1 3833 17 discriminator 4 view .LVU1452
3833:../src/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5060              		.loc 1 3833 17 discriminator 4 view .LVU1453
 5061 0084 043095E5 		ldr	r3, [r5, #4]
 5062 0088 043093E5 		ldr	r3, [r3, #4]
 5063 008c 043085E5 		str	r3, [r5, #4]
3833:../src/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5064              		.loc 1 3833 17 discriminator 4 view .LVU1454
 5065 0090 030059E1 		cmp	r9, r3
 5066 0094 EFFFFF1A 		bne	.L360
 5067 0098 ECFFFFEA 		b	.L364
 5068              	.LVL478:
 5069              	.L357:
3833:../src/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5070              		.loc 1 3833 17 is_stmt 0 discriminator 4 view .LVU1455
 5071              	.LBE33:
3844:../src/FreeRTOS/tasks.c **** 
 5072              		.loc 1 3844 5 view .LVU1456
 5073 009c 0400A0E1 		mov	r0, r4
 5074 00a0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5075              		.cfi_endproc
 5076              	.LFE47:
 5078              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 5079              		.align	2
 5080              		.global	uxTaskGetSystemState
 5081              		.syntax unified
 5082              		.arm
 5083              		.fpu neon
 5085              	uxTaskGetSystemState:
 5086              	.LVL479:
 5087              	.LFB25:
2532:../src/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5088              		.loc 1 2532 5 is_stmt 1 view -0
 5089              		.cfi_startproc
 5090              		@ args = 0, pretend = 0, frame = 0
 5091              		@ frame_needed = 0, uses_anonymous_args = 0
2532:../src/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5092              		.loc 1 2532 5 is_stmt 0 view .LVU1458
 5093 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 5094              		.cfi_def_cfa_offset 24
 5095              		.cfi_offset 4, -24
 5096              		.cfi_offset 5, -20
 5097              		.cfi_offset 6, -16
 5098              		.cfi_offset 7, -12
 5099              		.cfi_offset 8, -8
 5100              		.cfi_offset 14, -4
 5101 0004 0070A0E1 		mov	r7, r0
 5102 0008 0140A0E1 		mov	r4, r1
 5103 000c 0260A0E1 		mov	r6, r2
2533:../src/FreeRTOS/tasks.c **** 
 5104              		.loc 1 2533 9 is_stmt 1 view .LVU1459
 5105              	.LVL480:
2535:../src/FreeRTOS/tasks.c ****         {
 5106              		.loc 1 2535 9 view .LVU1460
 5107 0010 FEFFFFEB 		bl	vTaskSuspendAll
 5108              	.LVL481:
2538:../src/FreeRTOS/tasks.c ****             {
 5109              		.loc 1 2538 13 view .LVU1461
2538:../src/FreeRTOS/tasks.c ****             {
 5110              		.loc 1 2538 29 is_stmt 0 view .LVU1462
 5111 0014 003000E3 		movw	r3, #:lower16:.LANCHOR9
 5112 0018 003040E3 		movt	r3, #:upper16:.LANCHOR9
 5113 001c 003093E5 		ldr	r3, [r3]
2538:../src/FreeRTOS/tasks.c ****             {
 5114              		.loc 1 2538 15 view .LVU1463
 5115 0020 040053E1 		cmp	r3, r4
 5116 0024 3000008A 		bhi	.L368
2533:../src/FreeRTOS/tasks.c **** 
 5117              		.loc 1 2533 33 view .LVU1464
 5118 0028 1440A0E3 		mov	r4, #20
 5119              	.LVL482:
2533:../src/FreeRTOS/tasks.c **** 
 5120              		.loc 1 2533 21 view .LVU1465
 5121 002c 0050A0E3 		mov	r5, #0
 5122              	.LVL483:
 5123              	.L367:
2542:../src/FreeRTOS/tasks.c ****                 {
 5124              		.loc 1 2542 17 is_stmt 1 discriminator 1 view .LVU1466
2544:../src/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5125              		.loc 1 2544 21 discriminator 1 view .LVU1467
2544:../src/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5126              		.loc 1 2544 28 is_stmt 0 discriminator 1 view .LVU1468
 5127 0030 014044E2 		sub	r4, r4, #1
 5128              	.LVL484:
2545:../src/FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5129              		.loc 1 2545 21 is_stmt 1 discriminator 1 view .LVU1469
2545:../src/FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5130              		.loc 1 2545 81 is_stmt 0 discriminator 1 view .LVU1470
 5131 0034 850185E0 		add	r0, r5, r5, lsl #3
2545:../src/FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5132              		.loc 1 2545 31 discriminator 1 view .LVU1471
 5133 0038 003000E3 		movw	r3, #:lower16:.LANCHOR4
 5134 003c 003040E3 		movt	r3, #:upper16:.LANCHOR4
 5135 0040 041184E0 		add	r1, r4, r4, lsl #2
 5136 0044 0120A0E3 		mov	r2, #1
 5137 0048 011183E0 		add	r1, r3, r1, lsl #2
 5138 004c 000187E0 		add	r0, r7, r0, lsl #2
 5139 0050 FEFFFFEB 		bl	prvListTasksWithinSingleList
 5140              	.LVL485:
2545:../src/FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5141              		.loc 1 2545 28 discriminator 1 view .LVU1472
 5142 0054 005085E0 		add	r5, r5, r0
 5143              	.LVL486:
2546:../src/FreeRTOS/tasks.c **** 
 5144              		.loc 1 2546 24 is_stmt 1 discriminator 1 view .LVU1473
2546:../src/FreeRTOS/tasks.c **** 
 5145              		.loc 1 2546 17 is_stmt 0 discriminator 1 view .LVU1474
 5146 0058 000054E3 		cmp	r4, #0
 5147 005c F3FFFF1A 		bne	.L367
2550:../src/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5148              		.loc 1 2550 17 is_stmt 1 view .LVU1475
2550:../src/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5149              		.loc 1 2550 77 is_stmt 0 view .LVU1476
 5150 0060 850185E0 		add	r0, r5, r5, lsl #3
2550:../src/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5151              		.loc 1 2550 27 view .LVU1477
 5152 0064 003000E3 		movw	r3, #:lower16:.LANCHOR0
 5153 0068 003040E3 		movt	r3, #:upper16:.LANCHOR0
 5154 006c 001093E5 		ldr	r1, [r3]
 5155 0070 0220A0E3 		mov	r2, #2
 5156 0074 100287E0 		add	r0, r7, r0, lsl r2
 5157 0078 FEFFFFEB 		bl	prvListTasksWithinSingleList
 5158              	.LVL487:
2550:../src/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5159              		.loc 1 2550 24 view .LVU1478
 5160 007c 005085E0 		add	r5, r5, r0
 5161              	.LVL488:
2551:../src/FreeRTOS/tasks.c **** 
 5162              		.loc 1 2551 17 is_stmt 1 view .LVU1479
2551:../src/FreeRTOS/tasks.c **** 
 5163              		.loc 1 2551 77 is_stmt 0 view .LVU1480
 5164 0080 850185E0 		add	r0, r5, r5, lsl #3
2551:../src/FreeRTOS/tasks.c **** 
 5165              		.loc 1 2551 27 view .LVU1481
 5166 0084 003000E3 		movw	r3, #:lower16:.LANCHOR8
 5167 0088 003040E3 		movt	r3, #:upper16:.LANCHOR8
 5168 008c 001093E5 		ldr	r1, [r3]
 5169 0090 0220A0E3 		mov	r2, #2
 5170 0094 100287E0 		add	r0, r7, r0, lsl r2
 5171 0098 FEFFFFEB 		bl	prvListTasksWithinSingleList
 5172              	.LVL489:
2551:../src/FreeRTOS/tasks.c **** 
 5173              		.loc 1 2551 24 view .LVU1482
 5174 009c 005085E0 		add	r5, r5, r0
 5175              	.LVL490:
2557:../src/FreeRTOS/tasks.c ****                     }
 5176              		.loc 1 2557 25 is_stmt 1 view .LVU1483
2557:../src/FreeRTOS/tasks.c ****                     }
 5177              		.loc 1 2557 85 is_stmt 0 view .LVU1484
 5178 00a0 850185E0 		add	r0, r5, r5, lsl #3
2557:../src/FreeRTOS/tasks.c ****                     }
 5179              		.loc 1 2557 35 view .LVU1485
 5180 00a4 0420A0E3 		mov	r2, #4
 5181 00a8 001000E3 		movw	r1, #:lower16:.LANCHOR7
 5182 00ac 001040E3 		movt	r1, #:upper16:.LANCHOR7
 5183 00b0 000187E0 		add	r0, r7, r0, lsl #2
 5184 00b4 FEFFFFEB 		bl	prvListTasksWithinSingleList
 5185              	.LVL491:
2557:../src/FreeRTOS/tasks.c ****                     }
 5186              		.loc 1 2557 32 view .LVU1486
 5187 00b8 005085E0 		add	r5, r5, r0
 5188              	.LVL492:
2565:../src/FreeRTOS/tasks.c ****                     }
 5189              		.loc 1 2565 25 is_stmt 1 view .LVU1487
2565:../src/FreeRTOS/tasks.c ****                     }
 5190              		.loc 1 2565 85 is_stmt 0 view .LVU1488
 5191 00bc 850185E0 		add	r0, r5, r5, lsl #3
2565:../src/FreeRTOS/tasks.c ****                     }
 5192              		.loc 1 2565 35 view .LVU1489
 5193 00c0 0320A0E3 		mov	r2, #3
 5194 00c4 001000E3 		movw	r1, #:lower16:.LANCHOR2
 5195 00c8 001040E3 		movt	r1, #:upper16:.LANCHOR2
 5196 00cc 000187E0 		add	r0, r7, r0, lsl #2
 5197 00d0 FEFFFFEB 		bl	prvListTasksWithinSingleList
 5198              	.LVL493:
2565:../src/FreeRTOS/tasks.c ****                     }
 5199              		.loc 1 2565 32 view .LVU1490
 5200 00d4 005085E0 		add	r5, r5, r0
 5201              	.LVL494:
2571:../src/FreeRTOS/tasks.c ****                         {
 5202              		.loc 1 2571 25 is_stmt 1 view .LVU1491
2571:../src/FreeRTOS/tasks.c ****                         {
 5203              		.loc 1 2571 27 is_stmt 0 view .LVU1492
 5204 00d8 000056E3 		cmp	r6, #0
 5205 00dc 0300000A 		beq	.L366
2576:../src/FreeRTOS/tasks.c ****                             #endif
 5206              		.loc 1 2576 33 is_stmt 1 view .LVU1493
2576:../src/FreeRTOS/tasks.c ****                             #endif
 5207              		.loc 1 2576 52 is_stmt 0 view .LVU1494
 5208 00e0 FEFFFFEB 		bl	ulGetRunTimeCounterValue
 5209              	.LVL495:
2576:../src/FreeRTOS/tasks.c ****                             #endif
 5210              		.loc 1 2576 50 view .LVU1495
 5211 00e4 000086E5 		str	r0, [r6]
 5212 00e8 000000EA 		b	.L366
 5213              	.LVL496:
 5214              	.L368:
2533:../src/FreeRTOS/tasks.c **** 
 5215              		.loc 1 2533 21 view .LVU1496
 5216 00ec 0050A0E3 		mov	r5, #0
 5217              	.LVL497:
 5218              	.L366:
2591:../src/FreeRTOS/tasks.c ****             }
 5219              		.loc 1 2591 41 is_stmt 1 view .LVU1497
2594:../src/FreeRTOS/tasks.c **** 
 5220              		.loc 1 2594 9 view .LVU1498
2594:../src/FreeRTOS/tasks.c **** 
 5221              		.loc 1 2594 18 is_stmt 0 view .LVU1499
 5222 00f0 FEFFFFEB 		bl	xTaskResumeAll
 5223              	.LVL498:
2596:../src/FreeRTOS/tasks.c ****     }
 5224              		.loc 1 2596 9 is_stmt 1 view .LVU1500
2597:../src/FreeRTOS/tasks.c **** 
 5225              		.loc 1 2597 5 is_stmt 0 view .LVU1501
 5226 00f4 0500A0E1 		mov	r0, r5
 5227 00f8 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 5228              		.cfi_endproc
 5229              	.LFE25:
 5231              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5232              		.align	2
 5233              		.global	uxTaskGetStackHighWaterMark
 5234              		.syntax unified
 5235              		.arm
 5236              		.fpu neon
 5238              	uxTaskGetStackHighWaterMark:
 5239              	.LVL499:
 5240              	.LFB49:
3912:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5241              		.loc 1 3912 5 is_stmt 1 view -0
 5242              		.cfi_startproc
 5243              		@ args = 0, pretend = 0, frame = 0
 5244              		@ frame_needed = 0, uses_anonymous_args = 0
3912:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5245              		.loc 1 3912 5 is_stmt 0 view .LVU1503
 5246 0000 10402DE9 		push	{r4, lr}
 5247              		.cfi_def_cfa_offset 8
 5248              		.cfi_offset 4, -8
 5249              		.cfi_offset 14, -4
3913:../src/FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
 5250              		.loc 1 3913 9 is_stmt 1 view .LVU1504
3914:../src/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 5251              		.loc 1 3914 9 view .LVU1505
3915:../src/FreeRTOS/tasks.c **** 
 5252              		.loc 1 3915 9 view .LVU1506
3917:../src/FreeRTOS/tasks.c **** 
 5253              		.loc 1 3917 9 view .LVU1507
3917:../src/FreeRTOS/tasks.c **** 
 5254              		.loc 1 3917 17 is_stmt 0 view .LVU1508
 5255 0004 000050E3 		cmp	r0, #0
3917:../src/FreeRTOS/tasks.c **** 
 5256              		.loc 1 3917 17 view .LVU1509
 5257 0008 0200000A 		beq	.L373
 5258              	.LVL500:
 5259              	.L371:
3921:../src/FreeRTOS/tasks.c ****             }
 5260              		.loc 1 3921 17 is_stmt 1 discriminator 4 view .LVU1510
3929:../src/FreeRTOS/tasks.c **** 
 5261              		.loc 1 3929 9 discriminator 4 view .LVU1511
3929:../src/FreeRTOS/tasks.c **** 
 5262              		.loc 1 3929 36 is_stmt 0 discriminator 4 view .LVU1512
 5263 000c 300090E5 		ldr	r0, [r0, #48]
 5264              	.LVL501:
3929:../src/FreeRTOS/tasks.c **** 
 5265              		.loc 1 3929 36 discriminator 4 view .LVU1513
 5266 0010 FEFFFFEB 		bl	prvTaskCheckFreeStackSpace
 5267              	.LVL502:
3931:../src/FreeRTOS/tasks.c ****     }
 5268              		.loc 1 3931 9 is_stmt 1 discriminator 4 view .LVU1514
3932:../src/FreeRTOS/tasks.c **** 
 5269              		.loc 1 3932 5 is_stmt 0 discriminator 4 view .LVU1515
 5270 0014 1080BDE8 		pop	{r4, pc}
 5271              	.LVL503:
 5272              	.L373:
3917:../src/FreeRTOS/tasks.c **** 
 5273              		.loc 1 3917 17 discriminator 1 view .LVU1516
 5274 0018 003000E3 		movw	r3, #:lower16:.LANCHOR10
 5275 001c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 5276 0020 000093E5 		ldr	r0, [r3]
 5277              	.LVL504:
3917:../src/FreeRTOS/tasks.c **** 
 5278              		.loc 1 3917 17 discriminator 1 view .LVU1517
 5279 0024 F8FFFFEA 		b	.L371
 5280              		.cfi_endproc
 5281              	.LFE49:
 5283              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5284              		.align	2
 5285              		.global	xTaskGetCurrentTaskHandle
 5286              		.syntax unified
 5287              		.arm
 5288              		.fpu neon
 5290              	xTaskGetCurrentTaskHandle:
 5291              	.LFB52:
4019:../src/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 5292              		.loc 1 4019 5 is_stmt 1 view -0
 5293              		.cfi_startproc
 5294              		@ args = 0, pretend = 0, frame = 0
 5295              		@ frame_needed = 0, uses_anonymous_args = 0
 5296              		@ link register save eliminated.
4020:../src/FreeRTOS/tasks.c **** 
 5297              		.loc 1 4020 9 view .LVU1519
4025:../src/FreeRTOS/tasks.c **** 
 5298              		.loc 1 4025 9 view .LVU1520
4025:../src/FreeRTOS/tasks.c **** 
 5299              		.loc 1 4025 17 is_stmt 0 view .LVU1521
 5300 0000 003000E3 		movw	r3, #:lower16:.LANCHOR10
 5301 0004 003040E3 		movt	r3, #:upper16:.LANCHOR10
 5302 0008 000093E5 		ldr	r0, [r3]
 5303              	.LVL505:
4027:../src/FreeRTOS/tasks.c ****     }
 5304              		.loc 1 4027 9 is_stmt 1 view .LVU1522
4028:../src/FreeRTOS/tasks.c **** 
 5305              		.loc 1 4028 5 is_stmt 0 view .LVU1523
 5306 000c 1EFF2FE1 		bx	lr
 5307              		.cfi_endproc
 5308              	.LFE52:
 5310              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5311              		.align	2
 5312              		.global	xTaskGetSchedulerState
 5313              		.syntax unified
 5314              		.arm
 5315              		.fpu neon
 5317              	xTaskGetSchedulerState:
 5318              	.LFB53:
4036:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 5319              		.loc 1 4036 5 is_stmt 1 view -0
 5320              		.cfi_startproc
 5321              		@ args = 0, pretend = 0, frame = 0
 5322              		@ frame_needed = 0, uses_anonymous_args = 0
 5323              		@ link register save eliminated.
4037:../src/FreeRTOS/tasks.c **** 
 5324              		.loc 1 4037 9 view .LVU1525
4039:../src/FreeRTOS/tasks.c ****         {
 5325              		.loc 1 4039 9 view .LVU1526
4039:../src/FreeRTOS/tasks.c ****         {
 5326              		.loc 1 4039 31 is_stmt 0 view .LVU1527
 5327 0000 003000E3 		movw	r3, #:lower16:.LANCHOR11
 5328 0004 003040E3 		movt	r3, #:upper16:.LANCHOR11
 5329 0008 003093E5 		ldr	r3, [r3]
4039:../src/FreeRTOS/tasks.c ****         {
 5330              		.loc 1 4039 11 view .LVU1528
 5331 000c 000053E3 		cmp	r3, #0
 5332 0010 0800000A 		beq	.L377
4045:../src/FreeRTOS/tasks.c ****             {
 5333              		.loc 1 4045 13 is_stmt 1 view .LVU1529
4045:../src/FreeRTOS/tasks.c ****             {
 5334              		.loc 1 4045 38 is_stmt 0 view .LVU1530
 5335 0014 003000E3 		movw	r3, #:lower16:.LANCHOR16
 5336 0018 003040E3 		movt	r3, #:upper16:.LANCHOR16
 5337 001c 003093E5 		ldr	r3, [r3]
4045:../src/FreeRTOS/tasks.c ****             {
 5338              		.loc 1 4045 15 view .LVU1531
 5339 0020 000053E3 		cmp	r3, #0
 5340 0024 0100000A 		beq	.L379
4051:../src/FreeRTOS/tasks.c ****             }
 5341              		.loc 1 4051 25 view .LVU1532
 5342 0028 0000A0E3 		mov	r0, #0
 5343              	.LVL506:
4055:../src/FreeRTOS/tasks.c ****     }
 5344              		.loc 1 4055 9 is_stmt 1 view .LVU1533
4056:../src/FreeRTOS/tasks.c **** 
 5345              		.loc 1 4056 5 is_stmt 0 view .LVU1534
 5346 002c 1EFF2FE1 		bx	lr
 5347              	.LVL507:
 5348              	.L379:
4047:../src/FreeRTOS/tasks.c ****             }
 5349              		.loc 1 4047 25 view .LVU1535
 5350 0030 0200A0E3 		mov	r0, #2
 5351 0034 1EFF2FE1 		bx	lr
 5352              	.L377:
4041:../src/FreeRTOS/tasks.c ****         }
 5353              		.loc 1 4041 21 view .LVU1536
 5354 0038 0100A0E3 		mov	r0, #1
 5355 003c 1EFF2FE1 		bx	lr
 5356              		.cfi_endproc
 5357              	.LFE53:
 5359              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 5360              		.align	2
 5361              		.global	xTaskPriorityInherit
 5362              		.syntax unified
 5363              		.arm
 5364              		.fpu neon
 5366              	xTaskPriorityInherit:
 5367              	.LVL508:
 5368              	.LFB54:
4064:../src/FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5369              		.loc 1 4064 5 is_stmt 1 view -0
 5370              		.cfi_startproc
 5371              		@ args = 0, pretend = 0, frame = 0
 5372              		@ frame_needed = 0, uses_anonymous_args = 0
4064:../src/FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5373              		.loc 1 4064 5 is_stmt 0 view .LVU1538
 5374 0000 70402DE9 		push	{r4, r5, r6, lr}
 5375              		.cfi_def_cfa_offset 16
 5376              		.cfi_offset 4, -16
 5377              		.cfi_offset 5, -12
 5378              		.cfi_offset 6, -8
 5379              		.cfi_offset 14, -4
4065:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 5380              		.loc 1 4065 9 is_stmt 1 view .LVU1539
 5381              	.LVL509:
4066:../src/FreeRTOS/tasks.c **** 
 5382              		.loc 1 4066 9 view .LVU1540
4071:../src/FreeRTOS/tasks.c ****         {
 5383              		.loc 1 4071 9 view .LVU1541
4071:../src/FreeRTOS/tasks.c ****         {
 5384              		.loc 1 4071 11 is_stmt 0 view .LVU1542
 5385 0004 004050E2 		subs	r4, r0, #0
 5386 0008 3D00000A 		beq	.L386
4076:../src/FreeRTOS/tasks.c ****             {
 5387              		.loc 1 4076 13 is_stmt 1 view .LVU1543
4076:../src/FreeRTOS/tasks.c ****             {
 5388              		.loc 1 4076 33 is_stmt 0 view .LVU1544
 5389 000c 2C3094E5 		ldr	r3, [r4, #44]
4076:../src/FreeRTOS/tasks.c ****             {
 5390              		.loc 1 4076 60 view .LVU1545
 5391 0010 002000E3 		movw	r2, #:lower16:.LANCHOR10
 5392 0014 002040E3 		movt	r2, #:upper16:.LANCHOR10
 5393 0018 002092E5 		ldr	r2, [r2]
 5394 001c 2C2092E5 		ldr	r2, [r2, #44]
4076:../src/FreeRTOS/tasks.c ****             {
 5395              		.loc 1 4076 15 view .LVU1546
 5396 0020 020053E1 		cmp	r3, r2
 5397 0024 2D00002A 		bcs	.L382
4081:../src/FreeRTOS/tasks.c ****                 {
 5398              		.loc 1 4081 17 is_stmt 1 view .LVU1547
4081:../src/FreeRTOS/tasks.c ****                 {
 5399              		.loc 1 4081 23 is_stmt 0 view .LVU1548
 5400 0028 182094E5 		ldr	r2, [r4, #24]
4081:../src/FreeRTOS/tasks.c ****                 {
 5401              		.loc 1 4081 19 view .LVU1549
 5402 002c 000052E3 		cmp	r2, #0
 5403 0030 050000BA 		blt	.L383
4083:../src/FreeRTOS/tasks.c ****                 }
 5404              		.loc 1 4083 21 is_stmt 1 view .LVU1550
 5405 0034 002000E3 		movw	r2, #:lower16:.LANCHOR10
 5406 0038 002040E3 		movt	r2, #:upper16:.LANCHOR10
 5407 003c 002092E5 		ldr	r2, [r2]
 5408 0040 2C2092E5 		ldr	r2, [r2, #44]
 5409 0044 142062E2 		rsb	r2, r2, #20
 5410 0048 182084E5 		str	r2, [r4, #24]
 5411              	.L383:
4087:../src/FreeRTOS/tasks.c ****                 }
 5412              		.loc 1 4087 45 view .LVU1551
4092:../src/FreeRTOS/tasks.c ****                 {
 5413              		.loc 1 4092 17 view .LVU1552
4092:../src/FreeRTOS/tasks.c ****                 {
 5414              		.loc 1 4092 21 is_stmt 0 view .LVU1553
 5415 004c 141094E5 		ldr	r1, [r4, #20]
 5416 0050 002000E3 		movw	r2, #:lower16:.LANCHOR4
 5417 0054 002040E3 		movt	r2, #:upper16:.LANCHOR4
 5418 0058 033183E0 		add	r3, r3, r3, lsl #2
 5419 005c 033182E0 		add	r3, r2, r3, lsl #2
4092:../src/FreeRTOS/tasks.c ****                 {
 5420              		.loc 1 4092 19 view .LVU1554
 5421 0060 030051E1 		cmp	r1, r3
 5422 0064 0600000A 		beq	.L389
4113:../src/FreeRTOS/tasks.c ****                 }
 5423              		.loc 1 4113 21 is_stmt 1 view .LVU1555
4113:../src/FreeRTOS/tasks.c ****                 }
 5424              		.loc 1 4113 64 is_stmt 0 view .LVU1556
 5425 0068 003000E3 		movw	r3, #:lower16:.LANCHOR10
 5426 006c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 5427 0070 003093E5 		ldr	r3, [r3]
 5428 0074 2C3093E5 		ldr	r3, [r3, #44]
4113:../src/FreeRTOS/tasks.c ****                 }
 5429              		.loc 1 4113 50 view .LVU1557
 5430 0078 2C3084E5 		str	r3, [r4, #44]
4119:../src/FreeRTOS/tasks.c ****             }
 5431              		.loc 1 4119 25 view .LVU1558
 5432 007c 0100A0E3 		mov	r0, #1
 5433              	.LVL510:
4119:../src/FreeRTOS/tasks.c ****             }
 5434              		.loc 1 4119 25 view .LVU1559
 5435 0080 7080BDE8 		pop	{r4, r5, r6, pc}
 5436              	.LVL511:
 5437              	.L389:
4094:../src/FreeRTOS/tasks.c ****                     {
 5438              		.loc 1 4094 21 is_stmt 1 view .LVU1560
4094:../src/FreeRTOS/tasks.c ****                     {
 5439              		.loc 1 4094 25 is_stmt 0 view .LVU1561
 5440 0084 045084E2 		add	r5, r4, #4
 5441 0088 0500A0E1 		mov	r0, r5
 5442              	.LVL512:
4094:../src/FreeRTOS/tasks.c ****                     {
 5443              		.loc 1 4094 25 view .LVU1562
 5444 008c FEFFFFEB 		bl	uxListRemove
 5445              	.LVL513:
4103:../src/FreeRTOS/tasks.c ****                     }
 5446              		.loc 1 4103 49 is_stmt 1 view .LVU1563
4107:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5447              		.loc 1 4107 21 view .LVU1564
4107:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5448              		.loc 1 4107 64 is_stmt 0 view .LVU1565
 5449 0090 003000E3 		movw	r3, #:lower16:.LANCHOR10
 5450 0094 003040E3 		movt	r3, #:upper16:.LANCHOR10
 5451 0098 003093E5 		ldr	r3, [r3]
 5452 009c 2C3093E5 		ldr	r3, [r3, #44]
4107:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5453              		.loc 1 4107 50 view .LVU1566
 5454 00a0 2C3084E5 		str	r3, [r4, #44]
4108:../src/FreeRTOS/tasks.c ****                 }
 5455              		.loc 1 4108 21 is_stmt 1 view .LVU1567
4108:../src/FreeRTOS/tasks.c ****                 }
 5456              		.loc 1 4108 21 view .LVU1568
 5457 00a4 002000E3 		movw	r2, #:lower16:.LANCHOR13
 5458 00a8 002040E3 		movt	r2, #:upper16:.LANCHOR13
 5459 00ac 002092E5 		ldr	r2, [r2]
 5460 00b0 020053E1 		cmp	r3, r2
4108:../src/FreeRTOS/tasks.c ****                 }
 5461              		.loc 1 4108 21 discriminator 1 view .LVU1569
 5462 00b4 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 5463 00b8 00204083 		movthi	r2, #:upper16:.LANCHOR13
 5464 00bc 00308285 		strhi	r3, [r2]
 5465              	.L385:
4108:../src/FreeRTOS/tasks.c ****                 }
 5466              		.loc 1 4108 21 discriminator 3 view .LVU1570
4108:../src/FreeRTOS/tasks.c ****                 }
 5467              		.loc 1 4108 21 discriminator 3 view .LVU1571
 5468 00c0 000000E3 		movw	r0, #:lower16:.LANCHOR4
 5469 00c4 000040E3 		movt	r0, #:upper16:.LANCHOR4
 5470 00c8 033183E0 		add	r3, r3, r3, lsl #2
 5471 00cc 0510A0E1 		mov	r1, r5
 5472 00d0 030180E0 		add	r0, r0, r3, lsl #2
 5473 00d4 FEFFFFEB 		bl	vListInsertEnd
 5474              	.LVL514:
4108:../src/FreeRTOS/tasks.c ****                 }
 5475              		.loc 1 4108 62 discriminator 3 view .LVU1572
4119:../src/FreeRTOS/tasks.c ****             }
 5476              		.loc 1 4119 25 is_stmt 0 discriminator 3 view .LVU1573
 5477 00d8 0100A0E3 		mov	r0, #1
 5478 00dc 7080BDE8 		pop	{r4, r5, r6, pc}
 5479              	.LVL515:
 5480              	.L382:
4123:../src/FreeRTOS/tasks.c ****                 {
 5481              		.loc 1 4123 17 is_stmt 1 view .LVU1574
4123:../src/FreeRTOS/tasks.c ****                 {
 5482              		.loc 1 4123 37 is_stmt 0 view .LVU1575
 5483 00e0 582094E5 		ldr	r2, [r4, #88]
4123:../src/FreeRTOS/tasks.c ****                 {
 5484              		.loc 1 4123 68 view .LVU1576
 5485 00e4 003000E3 		movw	r3, #:lower16:.LANCHOR10
 5486 00e8 003040E3 		movt	r3, #:upper16:.LANCHOR10
 5487 00ec 003093E5 		ldr	r3, [r3]
 5488 00f0 2C3093E5 		ldr	r3, [r3, #44]
4123:../src/FreeRTOS/tasks.c ****                 {
 5489              		.loc 1 4123 19 view .LVU1577
 5490 00f4 030052E1 		cmp	r2, r3
 5491 00f8 0300003A 		bcc	.L387
4066:../src/FreeRTOS/tasks.c **** 
 5492              		.loc 1 4066 20 view .LVU1578
 5493 00fc 0000A0E3 		mov	r0, #0
 5494              	.LVL516:
4066:../src/FreeRTOS/tasks.c **** 
 5495              		.loc 1 4066 20 view .LVU1579
 5496 0100 7080BDE8 		pop	{r4, r5, r6, pc}
 5497              	.LVL517:
 5498              	.L386:
4066:../src/FreeRTOS/tasks.c **** 
 5499              		.loc 1 4066 20 view .LVU1580
 5500 0104 0000A0E3 		mov	r0, #0
 5501              	.LVL518:
4066:../src/FreeRTOS/tasks.c **** 
 5502              		.loc 1 4066 20 view .LVU1581
 5503 0108 7080BDE8 		pop	{r4, r5, r6, pc}
 5504              	.LVL519:
 5505              	.L387:
4132:../src/FreeRTOS/tasks.c ****                 }
 5506              		.loc 1 4132 29 view .LVU1582
 5507 010c 0100A0E3 		mov	r0, #1
 5508              	.LVL520:
4142:../src/FreeRTOS/tasks.c ****         }
 5509              		.loc 1 4142 37 is_stmt 1 view .LVU1583
4145:../src/FreeRTOS/tasks.c ****     }
 5510              		.loc 1 4145 9 view .LVU1584
4146:../src/FreeRTOS/tasks.c **** 
 5511              		.loc 1 4146 5 is_stmt 0 view .LVU1585
 5512 0110 7080BDE8 		pop	{r4, r5, r6, pc}
 5513              		.cfi_endproc
 5514              	.LFE54:
 5516              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5517              		.align	2
 5518              		.global	xTaskPriorityDisinherit
 5519              		.syntax unified
 5520              		.arm
 5521              		.fpu neon
 5523              	xTaskPriorityDisinherit:
 5524              	.LVL521:
 5525              	.LFB55:
4154:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5526              		.loc 1 4154 5 is_stmt 1 view -0
 5527              		.cfi_startproc
 5528              		@ args = 0, pretend = 0, frame = 0
 5529              		@ frame_needed = 0, uses_anonymous_args = 0
4154:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5530              		.loc 1 4154 5 is_stmt 0 view .LVU1587
 5531 0000 70402DE9 		push	{r4, r5, r6, lr}
 5532              		.cfi_def_cfa_offset 16
 5533              		.cfi_offset 4, -16
 5534              		.cfi_offset 5, -12
 5535              		.cfi_offset 6, -8
 5536              		.cfi_offset 14, -4
4155:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 5537              		.loc 1 4155 9 is_stmt 1 view .LVU1588
 5538              	.LVL522:
4156:../src/FreeRTOS/tasks.c **** 
 5539              		.loc 1 4156 9 view .LVU1589
4158:../src/FreeRTOS/tasks.c ****         {
 5540              		.loc 1 4158 9 view .LVU1590
4158:../src/FreeRTOS/tasks.c ****         {
 5541              		.loc 1 4158 11 is_stmt 0 view .LVU1591
 5542 0004 004050E2 		subs	r4, r0, #0
 5543 0008 3100000A 		beq	.L395
4164:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5544              		.loc 1 4164 13 is_stmt 1 view .LVU1592
 5545 000c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 5546 0010 003040E3 		movt	r3, #:upper16:.LANCHOR10
 5547 0014 003093E5 		ldr	r3, [r3]
 5548 0018 040053E1 		cmp	r3, r4
 5549 001c 0300000A 		beq	.L392
4164:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5550              		.loc 1 4164 13 discriminator 1 view .LVU1593
 5551 0020 441001E3 		movw	r1, #4164
 5552 0024 000000E3 		movw	r0, #:lower16:.LC0
 5553              	.LVL523:
4164:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5554              		.loc 1 4164 13 is_stmt 0 discriminator 1 view .LVU1594
 5555 0028 000040E3 		movt	r0, #:upper16:.LC0
 5556 002c FEFFFFEB 		bl	R_OS_AssertCalled
 5557              	.LVL524:
 5558              	.L392:
4164:../src/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5559              		.loc 1 4164 50 is_stmt 1 discriminator 3 view .LVU1595
4165:../src/FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5560              		.loc 1 4165 13 discriminator 3 view .LVU1596
 5561 0030 5C3094E5 		ldr	r3, [r4, #92]
 5562 0034 000053E3 		cmp	r3, #0
 5563 0038 0A00000A 		beq	.L399
 5564              	.L393:
4165:../src/FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5565              		.loc 1 4165 49 discriminator 3 view .LVU1597
4166:../src/FreeRTOS/tasks.c **** 
 5566              		.loc 1 4166 13 discriminator 3 view .LVU1598
4166:../src/FreeRTOS/tasks.c **** 
 5567              		.loc 1 4166 20 is_stmt 0 discriminator 3 view .LVU1599
 5568 003c 5C3094E5 		ldr	r3, [r4, #92]
4166:../src/FreeRTOS/tasks.c **** 
 5569              		.loc 1 4166 37 discriminator 3 view .LVU1600
 5570 0040 013043E2 		sub	r3, r3, #1
 5571 0044 5C3084E5 		str	r3, [r4, #92]
4170:../src/FreeRTOS/tasks.c ****             {
 5572              		.loc 1 4170 13 is_stmt 1 discriminator 3 view .LVU1601
4170:../src/FreeRTOS/tasks.c ****             {
 5573              		.loc 1 4170 22 is_stmt 0 discriminator 3 view .LVU1602
 5574 0048 2C1094E5 		ldr	r1, [r4, #44]
4170:../src/FreeRTOS/tasks.c ****             {
 5575              		.loc 1 4170 43 discriminator 3 view .LVU1603
 5576 004c 582094E5 		ldr	r2, [r4, #88]
4170:../src/FreeRTOS/tasks.c ****             {
 5577              		.loc 1 4170 15 discriminator 3 view .LVU1604
 5578 0050 020051E1 		cmp	r1, r2
 5579 0054 2000000A 		beq	.L396
4173:../src/FreeRTOS/tasks.c ****                 {
 5580              		.loc 1 4173 17 is_stmt 1 view .LVU1605
4173:../src/FreeRTOS/tasks.c ****                 {
 5581              		.loc 1 4173 19 is_stmt 0 view .LVU1606
 5582 0058 000053E3 		cmp	r3, #0
 5583 005c 0600000A 		beq	.L400
4156:../src/FreeRTOS/tasks.c **** 
 5584              		.loc 1 4156 20 view .LVU1607
 5585 0060 0000A0E3 		mov	r0, #0
4222:../src/FreeRTOS/tasks.c ****         }
 5586              		.loc 1 4222 37 is_stmt 1 view .LVU1608
4225:../src/FreeRTOS/tasks.c ****     }
 5587              		.loc 1 4225 9 view .LVU1609
4226:../src/FreeRTOS/tasks.c **** 
 5588              		.loc 1 4226 5 is_stmt 0 view .LVU1610
 5589 0064 7080BDE8 		pop	{r4, r5, r6, pc}
 5590              	.L399:
4165:../src/FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5591              		.loc 1 4165 13 is_stmt 1 discriminator 1 view .LVU1611
 5592 0068 451001E3 		movw	r1, #4165
 5593 006c 000000E3 		movw	r0, #:lower16:.LC0
 5594 0070 000040E3 		movt	r0, #:upper16:.LC0
 5595 0074 FEFFFFEB 		bl	R_OS_AssertCalled
 5596              	.LVL525:
 5597 0078 EFFFFFEA 		b	.L393
 5598              	.L400:
4180:../src/FreeRTOS/tasks.c ****                     {
 5599              		.loc 1 4180 21 view .LVU1612
4180:../src/FreeRTOS/tasks.c ****                     {
 5600              		.loc 1 4180 25 is_stmt 0 view .LVU1613
 5601 007c 045084E2 		add	r5, r4, #4
 5602 0080 0500A0E1 		mov	r0, r5
 5603 0084 FEFFFFEB 		bl	uxListRemove
 5604              	.LVL526:
4186:../src/FreeRTOS/tasks.c ****                     }
 5605              		.loc 1 4186 49 is_stmt 1 view .LVU1614
4191:../src/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 5606              		.loc 1 4191 82 view .LVU1615
4192:../src/FreeRTOS/tasks.c **** 
 5607              		.loc 1 4192 21 view .LVU1616
4192:../src/FreeRTOS/tasks.c **** 
 5608              		.loc 1 4192 46 is_stmt 0 view .LVU1617
 5609 0088 583094E5 		ldr	r3, [r4, #88]
4192:../src/FreeRTOS/tasks.c **** 
 5610              		.loc 1 4192 39 view .LVU1618
 5611 008c 2C3084E5 		str	r3, [r4, #44]
4197:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5612              		.loc 1 4197 21 is_stmt 1 view .LVU1619
 5613 0090 142063E2 		rsb	r2, r3, #20
 5614 0094 182084E5 		str	r2, [r4, #24]
4198:../src/FreeRTOS/tasks.c **** 
 5615              		.loc 1 4198 21 view .LVU1620
4198:../src/FreeRTOS/tasks.c **** 
 5616              		.loc 1 4198 21 view .LVU1621
 5617 0098 002000E3 		movw	r2, #:lower16:.LANCHOR13
 5618 009c 002040E3 		movt	r2, #:upper16:.LANCHOR13
 5619 00a0 002092E5 		ldr	r2, [r2]
 5620 00a4 020053E1 		cmp	r3, r2
4198:../src/FreeRTOS/tasks.c **** 
 5621              		.loc 1 4198 21 discriminator 1 view .LVU1622
 5622 00a8 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 5623 00ac 00204083 		movthi	r2, #:upper16:.LANCHOR13
 5624 00b0 00308285 		strhi	r3, [r2]
 5625              	.L394:
4198:../src/FreeRTOS/tasks.c **** 
 5626              		.loc 1 4198 21 discriminator 3 view .LVU1623
4198:../src/FreeRTOS/tasks.c **** 
 5627              		.loc 1 4198 21 discriminator 3 view .LVU1624
 5628 00b4 000000E3 		movw	r0, #:lower16:.LANCHOR4
 5629 00b8 000040E3 		movt	r0, #:upper16:.LANCHOR4
 5630 00bc 033183E0 		add	r3, r3, r3, lsl #2
 5631 00c0 0510A0E1 		mov	r1, r5
 5632 00c4 030180E0 		add	r0, r0, r3, lsl #2
 5633 00c8 FEFFFFEB 		bl	vListInsertEnd
 5634              	.LVL527:
4198:../src/FreeRTOS/tasks.c **** 
 5635              		.loc 1 4198 51 discriminator 3 view .LVU1625
4208:../src/FreeRTOS/tasks.c ****                 }
 5636              		.loc 1 4208 21 discriminator 3 view .LVU1626
4208:../src/FreeRTOS/tasks.c ****                 }
 5637              		.loc 1 4208 29 is_stmt 0 discriminator 3 view .LVU1627
 5638 00cc 0100A0E3 		mov	r0, #1
 5639 00d0 7080BDE8 		pop	{r4, r5, r6, pc}
 5640              	.LVL528:
 5641              	.L395:
4156:../src/FreeRTOS/tasks.c **** 
 5642              		.loc 1 4156 20 view .LVU1628
 5643 00d4 0000A0E3 		mov	r0, #0
 5644              	.LVL529:
4156:../src/FreeRTOS/tasks.c **** 
 5645              		.loc 1 4156 20 view .LVU1629
 5646 00d8 7080BDE8 		pop	{r4, r5, r6, pc}
 5647              	.L396:
4156:../src/FreeRTOS/tasks.c **** 
 5648              		.loc 1 4156 20 view .LVU1630
 5649 00dc 0000A0E3 		mov	r0, #0
 5650 00e0 7080BDE8 		pop	{r4, r5, r6, pc}
 5651              		.cfi_endproc
 5652              	.LFE55:
 5654              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5655              		.align	2
 5656              		.global	vTaskPriorityDisinheritAfterTimeout
 5657              		.syntax unified
 5658              		.arm
 5659              		.fpu neon
 5661              	vTaskPriorityDisinheritAfterTimeout:
 5662              	.LVL530:
 5663              	.LFB56:
4235:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5664              		.loc 1 4235 5 is_stmt 1 view -0
 5665              		.cfi_startproc
 5666              		@ args = 0, pretend = 0, frame = 0
 5667              		@ frame_needed = 0, uses_anonymous_args = 0
4235:../src/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5668              		.loc 1 4235 5 is_stmt 0 view .LVU1632
 5669 0000 70402DE9 		push	{r4, r5, r6, lr}
 5670              		.cfi_def_cfa_offset 16
 5671              		.cfi_offset 4, -16
 5672              		.cfi_offset 5, -12
 5673              		.cfi_offset 6, -8
 5674              		.cfi_offset 14, -4
4236:../src/FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 5675              		.loc 1 4236 9 is_stmt 1 view .LVU1633
 5676              	.LVL531:
4237:../src/FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5677              		.loc 1 4237 9 view .LVU1634
4238:../src/FreeRTOS/tasks.c **** 
 5678              		.loc 1 4238 9 view .LVU1635
4240:../src/FreeRTOS/tasks.c ****         {
 5679              		.loc 1 4240 9 view .LVU1636
4240:../src/FreeRTOS/tasks.c ****         {
 5680              		.loc 1 4240 11 is_stmt 0 view .LVU1637
 5681 0004 004050E2 		subs	r4, r0, #0
 5682 0008 7080BD08 		popeq	{r4, r5, r6, pc}
 5683 000c 0150A0E1 		mov	r5, r1
4244:../src/FreeRTOS/tasks.c **** 
 5684              		.loc 1 4244 13 is_stmt 1 view .LVU1638
 5685 0010 5C3094E5 		ldr	r3, [r4, #92]
 5686 0014 000053E3 		cmp	r3, #0
 5687 0018 2C00000A 		beq	.L409
 5688              	.LVL532:
 5689              	.L403:
4244:../src/FreeRTOS/tasks.c **** 
 5690              		.loc 1 4244 49 discriminator 3 view .LVU1639
4250:../src/FreeRTOS/tasks.c ****             {
 5691              		.loc 1 4250 13 discriminator 3 view .LVU1640
4250:../src/FreeRTOS/tasks.c ****             {
 5692              		.loc 1 4250 22 is_stmt 0 discriminator 3 view .LVU1641
 5693 001c 586094E5 		ldr	r6, [r4, #88]
4250:../src/FreeRTOS/tasks.c ****             {
 5694              		.loc 1 4250 15 discriminator 3 view .LVU1642
 5695 0020 050056E1 		cmp	r6, r5
4252:../src/FreeRTOS/tasks.c ****             }
 5696              		.loc 1 4252 33 view .LVU1643
 5697 0024 0560A031 		movcc	r6, r5
 5698              	.L404:
 5699              	.LVL533:
4260:../src/FreeRTOS/tasks.c ****             {
 5700              		.loc 1 4260 13 is_stmt 1 view .LVU1644
4260:../src/FreeRTOS/tasks.c ****             {
 5701              		.loc 1 4260 22 is_stmt 0 view .LVU1645
 5702 0028 2C3094E5 		ldr	r3, [r4, #44]
4260:../src/FreeRTOS/tasks.c ****             {
 5703              		.loc 1 4260 15 view .LVU1646
 5704 002c 060053E1 		cmp	r3, r6
 5705 0030 7080BD08 		popeq	{r4, r5, r6, pc}
4266:../src/FreeRTOS/tasks.c ****                 {
 5706              		.loc 1 4266 17 is_stmt 1 view .LVU1647
4266:../src/FreeRTOS/tasks.c ****                 {
 5707              		.loc 1 4266 26 is_stmt 0 view .LVU1648
 5708 0034 5C3094E5 		ldr	r3, [r4, #92]
4266:../src/FreeRTOS/tasks.c ****                 {
 5709              		.loc 1 4266 19 view .LVU1649
 5710 0038 010053E3 		cmp	r3, #1
 5711 003c 7080BD18 		popne	{r4, r5, r6, pc}
4271:../src/FreeRTOS/tasks.c **** 
 5712              		.loc 1 4271 21 is_stmt 1 view .LVU1650
 5713 0040 003000E3 		movw	r3, #:lower16:.LANCHOR10
 5714 0044 003040E3 		movt	r3, #:upper16:.LANCHOR10
 5715 0048 003093E5 		ldr	r3, [r3]
 5716 004c 040053E1 		cmp	r3, r4
 5717 0050 2300000A 		beq	.L410
 5718              	.L405:
4271:../src/FreeRTOS/tasks.c **** 
 5719              		.loc 1 4271 58 discriminator 3 view .LVU1651
4276:../src/FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5720              		.loc 1 4276 76 discriminator 3 view .LVU1652
4277:../src/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 5721              		.loc 1 4277 21 discriminator 3 view .LVU1653
4277:../src/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 5722              		.loc 1 4277 43 is_stmt 0 discriminator 3 view .LVU1654
 5723 0054 2C2094E5 		ldr	r2, [r4, #44]
 5724              	.LVL534:
4278:../src/FreeRTOS/tasks.c **** 
 5725              		.loc 1 4278 21 is_stmt 1 discriminator 3 view .LVU1655
4278:../src/FreeRTOS/tasks.c **** 
 5726              		.loc 1 4278 39 is_stmt 0 discriminator 3 view .LVU1656
 5727 0058 2C6084E5 		str	r6, [r4, #44]
4282:../src/FreeRTOS/tasks.c ****                     {
 5728              		.loc 1 4282 21 is_stmt 1 discriminator 3 view .LVU1657
4282:../src/FreeRTOS/tasks.c ****                     {
 5729              		.loc 1 4282 27 is_stmt 0 discriminator 3 view .LVU1658
 5730 005c 183094E5 		ldr	r3, [r4, #24]
4282:../src/FreeRTOS/tasks.c ****                     {
 5731              		.loc 1 4282 23 discriminator 3 view .LVU1659
 5732 0060 000053E3 		cmp	r3, #0
4284:../src/FreeRTOS/tasks.c ****                     }
 5733              		.loc 1 4284 25 is_stmt 1 view .LVU1660
 5734 0064 146066A2 		rsbge	r6, r6, #20
 5735              	.LVL535:
4284:../src/FreeRTOS/tasks.c ****                     }
 5736              		.loc 1 4284 25 is_stmt 0 view .LVU1661
 5737 0068 186084A5 		strge	r6, [r4, #24]
 5738              	.L406:
4288:../src/FreeRTOS/tasks.c ****                     }
 5739              		.loc 1 4288 49 is_stmt 1 view .LVU1662
4297:../src/FreeRTOS/tasks.c ****                     {
 5740              		.loc 1 4297 21 view .LVU1663
4297:../src/FreeRTOS/tasks.c ****                     {
 5741              		.loc 1 4297 25 is_stmt 0 view .LVU1664
 5742 006c 141094E5 		ldr	r1, [r4, #20]
 5743 0070 003000E3 		movw	r3, #:lower16:.LANCHOR4
 5744 0074 003040E3 		movt	r3, #:upper16:.LANCHOR4
 5745 0078 022182E0 		add	r2, r2, r2, lsl #2
 5746              	.LVL536:
4297:../src/FreeRTOS/tasks.c ****                     {
 5747              		.loc 1 4297 25 view .LVU1665
 5748 007c 023183E0 		add	r3, r3, r2, lsl #2
4297:../src/FreeRTOS/tasks.c ****                     {
 5749              		.loc 1 4297 23 view .LVU1666
 5750 0080 030051E1 		cmp	r1, r3
 5751 0084 7080BD18 		popne	{r4, r5, r6, pc}
4299:../src/FreeRTOS/tasks.c ****                         {
 5752              		.loc 1 4299 25 is_stmt 1 view .LVU1667
4299:../src/FreeRTOS/tasks.c ****                         {
 5753              		.loc 1 4299 29 is_stmt 0 view .LVU1668
 5754 0088 045084E2 		add	r5, r4, #4
 5755              	.LVL537:
4299:../src/FreeRTOS/tasks.c ****                         {
 5756              		.loc 1 4299 29 view .LVU1669
 5757 008c 0500A0E1 		mov	r0, r5
 5758 0090 FEFFFFEB 		bl	uxListRemove
 5759              	.LVL538:
4308:../src/FreeRTOS/tasks.c ****                         }
 5760              		.loc 1 4308 53 is_stmt 1 view .LVU1670
4311:../src/FreeRTOS/tasks.c ****                     }
 5761              		.loc 1 4311 25 view .LVU1671
4311:../src/FreeRTOS/tasks.c ****                     }
 5762              		.loc 1 4311 25 view .LVU1672
 5763 0094 2C3094E5 		ldr	r3, [r4, #44]
 5764 0098 002000E3 		movw	r2, #:lower16:.LANCHOR13
 5765 009c 002040E3 		movt	r2, #:upper16:.LANCHOR13
 5766 00a0 002092E5 		ldr	r2, [r2]
 5767 00a4 020053E1 		cmp	r3, r2
4311:../src/FreeRTOS/tasks.c ****                     }
 5768              		.loc 1 4311 25 discriminator 1 view .LVU1673
 5769 00a8 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 5770 00ac 00204083 		movthi	r2, #:upper16:.LANCHOR13
 5771 00b0 00308285 		strhi	r3, [r2]
 5772              	.L407:
4311:../src/FreeRTOS/tasks.c ****                     }
 5773              		.loc 1 4311 25 discriminator 3 view .LVU1674
4311:../src/FreeRTOS/tasks.c ****                     }
 5774              		.loc 1 4311 25 discriminator 3 view .LVU1675
 5775 00b4 000000E3 		movw	r0, #:lower16:.LANCHOR4
 5776 00b8 000040E3 		movt	r0, #:upper16:.LANCHOR4
 5777 00bc 033183E0 		add	r3, r3, r3, lsl #2
 5778 00c0 0510A0E1 		mov	r1, r5
 5779 00c4 030180E0 		add	r0, r0, r3, lsl #2
 5780 00c8 FEFFFFEB 		bl	vListInsertEnd
 5781              	.LVL539:
4311:../src/FreeRTOS/tasks.c ****                     }
 5782              		.loc 1 4311 55 discriminator 3 view .LVU1676
4330:../src/FreeRTOS/tasks.c ****         }
 5783              		.loc 1 4330 37 discriminator 3 view .LVU1677
4332:../src/FreeRTOS/tasks.c **** 
 5784              		.loc 1 4332 5 is_stmt 0 discriminator 3 view .LVU1678
 5785 00cc 7080BDE8 		pop	{r4, r5, r6, pc}
 5786              	.LVL540:
 5787              	.L409:
4244:../src/FreeRTOS/tasks.c **** 
 5788              		.loc 1 4244 13 is_stmt 1 discriminator 1 view .LVU1679
 5789 00d0 941001E3 		movw	r1, #4244
 5790              	.LVL541:
4244:../src/FreeRTOS/tasks.c **** 
 5791              		.loc 1 4244 13 is_stmt 0 discriminator 1 view .LVU1680
 5792 00d4 000000E3 		movw	r0, #:lower16:.LC0
 5793              	.LVL542:
4244:../src/FreeRTOS/tasks.c **** 
 5794              		.loc 1 4244 13 discriminator 1 view .LVU1681
 5795 00d8 000040E3 		movt	r0, #:upper16:.LC0
 5796 00dc FEFFFFEB 		bl	R_OS_AssertCalled
 5797              	.LVL543:
 5798 00e0 CDFFFFEA 		b	.L403
 5799              	.LVL544:
 5800              	.L410:
4271:../src/FreeRTOS/tasks.c **** 
 5801              		.loc 1 4271 21 is_stmt 1 discriminator 1 view .LVU1682
 5802 00e4 AF1001E3 		movw	r1, #4271
 5803 00e8 000000E3 		movw	r0, #:lower16:.LC0
 5804 00ec 000040E3 		movt	r0, #:upper16:.LC0
 5805 00f0 FEFFFFEB 		bl	R_OS_AssertCalled
 5806              	.LVL545:
 5807 00f4 D6FFFFEA 		b	.L405
 5808              		.cfi_endproc
 5809              	.LFE56:
 5811              		.section	.rodata.vTaskList.str1.4,"aMS",%progbits,1
 5812              		.align	2
 5813              	.LC2:
 5814 0000 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 5814      25750925 
 5814      75092575 
 5814      0D0A00
 5815              		.section	.text.vTaskList,"ax",%progbits
 5816              		.align	2
 5817              		.global	vTaskList
 5818              		.syntax unified
 5819              		.arm
 5820              		.fpu neon
 5822              	vTaskList:
 5823              	.LVL546:
 5824              	.LFB58:
4430:../src/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
 5825              		.loc 1 4430 5 view -0
 5826              		.cfi_startproc
 5827              		@ args = 0, pretend = 0, frame = 0
 5828              		@ frame_needed = 0, uses_anonymous_args = 0
4430:../src/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
 5829              		.loc 1 4430 5 is_stmt 0 view .LVU1684
 5830 0000 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 5831              		.cfi_def_cfa_offset 28
 5832              		.cfi_offset 4, -28
 5833              		.cfi_offset 5, -24
 5834              		.cfi_offset 6, -20
 5835              		.cfi_offset 7, -16
 5836              		.cfi_offset 8, -12
 5837              		.cfi_offset 9, -8
 5838              		.cfi_offset 14, -4
 5839 0004 0CD04DE2 		sub	sp, sp, #12
 5840              		.cfi_def_cfa_offset 40
 5841 0008 0060A0E1 		mov	r6, r0
4431:../src/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
 5842              		.loc 1 4431 9 is_stmt 1 view .LVU1685
4432:../src/FreeRTOS/tasks.c ****         char cStatus;
 5843              		.loc 1 4432 9 view .LVU1686
4433:../src/FreeRTOS/tasks.c **** 
 5844              		.loc 1 4433 9 view .LVU1687
4461:../src/FreeRTOS/tasks.c **** 
 5845              		.loc 1 4461 9 view .LVU1688
4461:../src/FreeRTOS/tasks.c **** 
 5846              		.loc 1 4461 24 is_stmt 0 view .LVU1689
 5847 000c 0030A0E3 		mov	r3, #0
 5848 0010 0030C0E5 		strb	r3, [r0]
4465:../src/FreeRTOS/tasks.c **** 
 5849              		.loc 1 4465 9 is_stmt 1 view .LVU1690
4465:../src/FreeRTOS/tasks.c **** 
 5850              		.loc 1 4465 21 is_stmt 0 view .LVU1691
 5851 0014 003000E3 		movw	r3, #:lower16:.LANCHOR9
 5852 0018 003040E3 		movt	r3, #:upper16:.LANCHOR9
 5853 001c 004093E5 		ldr	r4, [r3]
 5854              	.LVL547:
4470:../src/FreeRTOS/tasks.c **** 
 5855              		.loc 1 4470 9 is_stmt 1 view .LVU1692
4470:../src/FreeRTOS/tasks.c **** 
 5856              		.loc 1 4470 29 is_stmt 0 view .LVU1693
 5857 0020 000093E5 		ldr	r0, [r3]
 5858              	.LVL548:
4470:../src/FreeRTOS/tasks.c **** 
 5859              		.loc 1 4470 66 view .LVU1694
 5860 0024 800180E0 		add	r0, r0, r0, lsl #3
4470:../src/FreeRTOS/tasks.c **** 
 5861              		.loc 1 4470 29 view .LVU1695
 5862 0028 0001A0E1 		lsl	r0, r0, #2
 5863 002c FEFFFFEB 		bl	pvPortMalloc
 5864              	.LVL549:
4472:../src/FreeRTOS/tasks.c ****         {
 5865              		.loc 1 4472 9 is_stmt 1 view .LVU1696
4472:../src/FreeRTOS/tasks.c ****         {
 5866              		.loc 1 4472 11 is_stmt 0 view .LVU1697
 5867 0030 007050E2 		subs	r7, r0, #0
 5868 0034 3100000A 		beq	.L411
4475:../src/FreeRTOS/tasks.c **** 
 5869              		.loc 1 4475 13 is_stmt 1 view .LVU1698
4475:../src/FreeRTOS/tasks.c **** 
 5870              		.loc 1 4475 27 is_stmt 0 view .LVU1699
 5871 0038 0020A0E3 		mov	r2, #0
 5872 003c 0410A0E1 		mov	r1, r4
 5873 0040 0700A0E1 		mov	r0, r7
4475:../src/FreeRTOS/tasks.c **** 
 5874              		.loc 1 4475 27 view .LVU1700
 5875 0044 FEFFFFEB 		bl	uxTaskGetSystemState
 5876              	.LVL550:
4475:../src/FreeRTOS/tasks.c **** 
 5877              		.loc 1 4475 27 view .LVU1701
 5878 0048 0080A0E1 		mov	r8, r0
 5879              	.LVL551:
4478:../src/FreeRTOS/tasks.c ****             {
 5880              		.loc 1 4478 13 is_stmt 1 view .LVU1702
4478:../src/FreeRTOS/tasks.c ****             {
 5881              		.loc 1 4478 20 is_stmt 0 view .LVU1703
 5882 004c 0050A0E3 		mov	r5, #0
4478:../src/FreeRTOS/tasks.c ****             {
 5883              		.loc 1 4478 13 view .LVU1704
 5884 0050 110000EA 		b	.L413
 5885              	.LVL552:
 5886              	.L420:
4480:../src/FreeRTOS/tasks.c ****                 {
 5887              		.loc 1 4480 47 view .LVU1705
 5888 0054 5890A0E3 		mov	r9, #88
 5889              	.L419:
 5890              	.LVL553:
4511:../src/FreeRTOS/tasks.c **** 
 5891              		.loc 1 4511 17 is_stmt 1 discriminator 2 view .LVU1706
4511:../src/FreeRTOS/tasks.c **** 
 5892              		.loc 1 4511 33 is_stmt 0 discriminator 2 view .LVU1707
 5893 0058 041094E5 		ldr	r1, [r4, #4]
 5894 005c 0600A0E1 		mov	r0, r6
 5895 0060 FEFFFFEB 		bl	prvWriteNameToBuffer
 5896              	.LVL554:
 5897 0064 0060A0E1 		mov	r6, r0
 5898              	.LVL555:
4514:../src/FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
 5899              		.loc 1 4514 17 is_stmt 1 discriminator 2 view .LVU1708
4514:../src/FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
 5900              		.loc 1 4514 113 is_stmt 0 discriminator 2 view .LVU1709
 5901 0068 103094E5 		ldr	r3, [r4, #16]
4514:../src/FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
 5902              		.loc 1 4514 172 discriminator 2 view .LVU1710
 5903 006c B022D4E1 		ldrh	r2, [r4, #32]
4514:../src/FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
 5904              		.loc 1 4514 234 discriminator 2 view .LVU1711
 5905 0070 081094E5 		ldr	r1, [r4, #8]
4514:../src/FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
 5906              		.loc 1 4514 17 discriminator 2 view .LVU1712
 5907 0074 04108DE5 		str	r1, [sp, #4]
 5908 0078 00208DE5 		str	r2, [sp]
 5909 007c 0920A0E1 		mov	r2, r9
 5910 0080 001000E3 		movw	r1, #:lower16:.LC2
 5911 0084 001040E3 		movt	r1, #:upper16:.LC2
 5912 0088 FEFFFFEB 		bl	sprintf
 5913              	.LVL556:
4515:../src/FreeRTOS/tasks.c ****             }
 5914              		.loc 1 4515 17 is_stmt 1 discriminator 2 view .LVU1713
4515:../src/FreeRTOS/tasks.c ****             }
 5915              		.loc 1 4515 34 is_stmt 0 discriminator 2 view .LVU1714
 5916 008c 0600A0E1 		mov	r0, r6
 5917 0090 FEFFFFEB 		bl	strlen
 5918              	.LVL557:
4515:../src/FreeRTOS/tasks.c ****             }
 5919              		.loc 1 4515 31 discriminator 2 view .LVU1715
 5920 0094 006086E0 		add	r6, r6, r0
 5921              	.LVL558:
4478:../src/FreeRTOS/tasks.c ****             {
 5922              		.loc 1 4478 42 is_stmt 1 discriminator 2 view .LVU1716
4478:../src/FreeRTOS/tasks.c ****             {
 5923              		.loc 1 4478 43 is_stmt 0 discriminator 2 view .LVU1717
 5924 0098 015085E2 		add	r5, r5, #1
 5925              	.LVL559:
 5926              	.L413:
4478:../src/FreeRTOS/tasks.c ****             {
 5927              		.loc 1 4478 25 is_stmt 1 discriminator 1 view .LVU1718
4478:../src/FreeRTOS/tasks.c ****             {
 5928              		.loc 1 4478 13 is_stmt 0 discriminator 1 view .LVU1719
 5929 009c 080055E1 		cmp	r5, r8
 5930 00a0 1400002A 		bcs	.L424
4480:../src/FreeRTOS/tasks.c ****                 {
 5931              		.loc 1 4480 17 is_stmt 1 view .LVU1720
4480:../src/FreeRTOS/tasks.c ****                 {
 5932              		.loc 1 4480 42 is_stmt 0 view .LVU1721
 5933 00a4 854185E0 		add	r4, r5, r5, lsl #3
 5934 00a8 044187E0 		add	r4, r7, r4, lsl #2
4480:../src/FreeRTOS/tasks.c ****                 {
 5935              		.loc 1 4480 47 view .LVU1722
 5936 00ac 0C30D4E5 		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 5937 00b0 040053E3 		cmp	r3, #4
 5938 00b4 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 5939 00b8 0A0000EA 		b	.L414
 5940              	.L416:
 5941 00bc 54000000 		.word	.L420
 5942 00c0 F0000000 		.word	.L422
 5943 00c4 D0000000 		.word	.L418
 5944 00c8 D8000000 		.word	.L417
 5945 00cc E0000000 		.word	.L415
 5946              	.L418:
4491:../src/FreeRTOS/tasks.c ****                         break;
 5947              		.loc 1 4491 25 is_stmt 1 view .LVU1723
 5948              	.LVL560:
4492:../src/FreeRTOS/tasks.c **** 
 5949              		.loc 1 4492 25 view .LVU1724
4491:../src/FreeRTOS/tasks.c ****                         break;
 5950              		.loc 1 4491 33 is_stmt 0 view .LVU1725
 5951 00d0 4290A0E3 		mov	r9, #66
4492:../src/FreeRTOS/tasks.c **** 
 5952              		.loc 1 4492 25 view .LVU1726
 5953 00d4 DFFFFFEA 		b	.L419
 5954              	.LVL561:
 5955              	.L417:
4495:../src/FreeRTOS/tasks.c ****                         break;
 5956              		.loc 1 4495 25 is_stmt 1 view .LVU1727
4496:../src/FreeRTOS/tasks.c **** 
 5957              		.loc 1 4496 25 view .LVU1728
4495:../src/FreeRTOS/tasks.c ****                         break;
 5958              		.loc 1 4495 33 is_stmt 0 view .LVU1729
 5959 00d8 5390A0E3 		mov	r9, #83
4496:../src/FreeRTOS/tasks.c **** 
 5960              		.loc 1 4496 25 view .LVU1730
 5961 00dc DDFFFFEA 		b	.L419
 5962              	.LVL562:
 5963              	.L415:
4499:../src/FreeRTOS/tasks.c ****                         break;
 5964              		.loc 1 4499 25 is_stmt 1 view .LVU1731
4500:../src/FreeRTOS/tasks.c **** 
 5965              		.loc 1 4500 25 view .LVU1732
4499:../src/FreeRTOS/tasks.c ****                         break;
 5966              		.loc 1 4499 33 is_stmt 0 view .LVU1733
 5967 00e0 4490A0E3 		mov	r9, #68
4500:../src/FreeRTOS/tasks.c **** 
 5968              		.loc 1 4500 25 view .LVU1734
 5969 00e4 DBFFFFEA 		b	.L419
 5970              	.LVL563:
 5971              	.L414:
4505:../src/FreeRTOS/tasks.c ****                         break;
 5972              		.loc 1 4505 25 is_stmt 1 view .LVU1735
4506:../src/FreeRTOS/tasks.c ****                 }
 5973              		.loc 1 4506 25 view .LVU1736
4505:../src/FreeRTOS/tasks.c ****                         break;
 5974              		.loc 1 4505 33 is_stmt 0 view .LVU1737
 5975 00e8 0090A0E3 		mov	r9, #0
4506:../src/FreeRTOS/tasks.c ****                 }
 5976              		.loc 1 4506 25 view .LVU1738
 5977 00ec D9FFFFEA 		b	.L419
 5978              	.LVL564:
 5979              	.L422:
4487:../src/FreeRTOS/tasks.c ****                         break;
 5980              		.loc 1 4487 33 view .LVU1739
 5981 00f0 5290A0E3 		mov	r9, #82
 5982 00f4 D7FFFFEA 		b	.L419
 5983              	.L424:
4520:../src/FreeRTOS/tasks.c ****         }
 5984              		.loc 1 4520 13 is_stmt 1 view .LVU1740
 5985 00f8 0700A0E1 		mov	r0, r7
 5986 00fc FEFFFFEB 		bl	vPortFree
 5987              	.LVL565:
4524:../src/FreeRTOS/tasks.c ****         }
 5988              		.loc 1 4524 37 view .LVU1741
 5989              	.L411:
4526:../src/FreeRTOS/tasks.c **** 
 5990              		.loc 1 4526 5 is_stmt 0 view .LVU1742
 5991 0100 0CD08DE2 		add	sp, sp, #12
 5992              		.cfi_def_cfa_offset 28
 5993              		@ sp needed
 5994 0104 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}
4526:../src/FreeRTOS/tasks.c **** 
 5995              		.loc 1 4526 5 view .LVU1743
 5996              		.cfi_endproc
 5997              	.LFE58:
 5999              		.global	__aeabi_uidiv
 6000              		.section	.rodata.vTaskGetRunTimeStats.str1.4,"aMS",%progbits,1
 6001              		.align	2
 6002              	.LC3:
 6003 0000 09257509 		.ascii	"\011%u\011\011%u%%\015\012\000"
 6003      09257525 
 6003      250D0A00 
 6004              		.align	2
 6005              	.LC4:
 6006 000c 09257509 		.ascii	"\011%u\011\011<1%%\015\012\000"
 6006      093C3125 
 6006      250D0A00 
 6007              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 6008              		.align	2
 6009              		.global	vTaskGetRunTimeStats
 6010              		.syntax unified
 6011              		.arm
 6012              		.fpu neon
 6014              	vTaskGetRunTimeStats:
 6015              	.LVL566:
 6016              	.LFB59:
4534:../src/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
 6017              		.loc 1 4534 5 is_stmt 1 view -0
 6018              		.cfi_startproc
 6019              		@ args = 0, pretend = 0, frame = 8
 6020              		@ frame_needed = 0, uses_anonymous_args = 0
4534:../src/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
 6021              		.loc 1 4534 5 is_stmt 0 view .LVU1745
 6022 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 6023              		.cfi_def_cfa_offset 36
 6024              		.cfi_offset 4, -36
 6025              		.cfi_offset 5, -32
 6026              		.cfi_offset 6, -28
 6027              		.cfi_offset 7, -24
 6028              		.cfi_offset 8, -20
 6029              		.cfi_offset 9, -16
 6030              		.cfi_offset 10, -12
 6031              		.cfi_offset 11, -8
 6032              		.cfi_offset 14, -4
 6033 0004 0CD04DE2 		sub	sp, sp, #12
 6034              		.cfi_def_cfa_offset 48
 6035 0008 0040A0E1 		mov	r4, r0
4535:../src/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
 6036              		.loc 1 4535 9 is_stmt 1 view .LVU1746
4536:../src/FreeRTOS/tasks.c ****         uint32_t ulTotalTime, ulStatsAsPercentage;
 6037              		.loc 1 4536 9 view .LVU1747
4537:../src/FreeRTOS/tasks.c **** 
 6038              		.loc 1 4537 9 view .LVU1748
4571:../src/FreeRTOS/tasks.c **** 
 6039              		.loc 1 4571 9 view .LVU1749
4571:../src/FreeRTOS/tasks.c **** 
 6040              		.loc 1 4571 24 is_stmt 0 view .LVU1750
 6041 000c 0030A0E3 		mov	r3, #0
 6042 0010 0030C0E5 		strb	r3, [r0]
4575:../src/FreeRTOS/tasks.c **** 
 6043              		.loc 1 4575 9 is_stmt 1 view .LVU1751
4575:../src/FreeRTOS/tasks.c **** 
 6044              		.loc 1 4575 21 is_stmt 0 view .LVU1752
 6045 0014 003000E3 		movw	r3, #:lower16:.LANCHOR9
 6046 0018 003040E3 		movt	r3, #:upper16:.LANCHOR9
 6047 001c 005093E5 		ldr	r5, [r3]
 6048              	.LVL567:
4580:../src/FreeRTOS/tasks.c **** 
 6049              		.loc 1 4580 9 is_stmt 1 view .LVU1753
4580:../src/FreeRTOS/tasks.c **** 
 6050              		.loc 1 4580 29 is_stmt 0 view .LVU1754
 6051 0020 000093E5 		ldr	r0, [r3]
 6052              	.LVL568:
4580:../src/FreeRTOS/tasks.c **** 
 6053              		.loc 1 4580 66 view .LVU1755
 6054 0024 800180E0 		add	r0, r0, r0, lsl #3
4580:../src/FreeRTOS/tasks.c **** 
 6055              		.loc 1 4580 29 view .LVU1756
 6056 0028 0001A0E1 		lsl	r0, r0, #2
 6057 002c FEFFFFEB 		bl	pvPortMalloc
 6058              	.LVL569:
4582:../src/FreeRTOS/tasks.c ****         {
 6059              		.loc 1 4582 9 is_stmt 1 view .LVU1757
4582:../src/FreeRTOS/tasks.c ****         {
 6060              		.loc 1 4582 11 is_stmt 0 view .LVU1758
 6061 0030 008050E2 		subs	r8, r0, #0
 6062 0034 0E00000A 		beq	.L425
4585:../src/FreeRTOS/tasks.c **** 
 6063              		.loc 1 4585 13 is_stmt 1 view .LVU1759
4585:../src/FreeRTOS/tasks.c **** 
 6064              		.loc 1 4585 27 is_stmt 0 view .LVU1760
 6065 0038 04208DE2 		add	r2, sp, #4
 6066 003c 0510A0E1 		mov	r1, r5
 6067 0040 0800A0E1 		mov	r0, r8
4585:../src/FreeRTOS/tasks.c **** 
 6068              		.loc 1 4585 27 view .LVU1761
 6069 0044 FEFFFFEB 		bl	uxTaskGetSystemState
 6070              	.LVL570:
4585:../src/FreeRTOS/tasks.c **** 
 6071              		.loc 1 4585 27 view .LVU1762
 6072 0048 00B0A0E1 		mov	fp, r0
 6073              	.LVL571:
4588:../src/FreeRTOS/tasks.c **** 
 6074              		.loc 1 4588 13 is_stmt 1 view .LVU1763
4588:../src/FreeRTOS/tasks.c **** 
 6075              		.loc 1 4588 25 is_stmt 0 view .LVU1764
 6076 004c 1F2508E3 		movw	r2, #34079
 6077 0050 EB2145E3 		movt	r2, 20971
 6078 0054 04309DE5 		ldr	r3, [sp, #4]
 6079 0058 922383E0 		umull	r2, r3, r2, r3
 6080 005c A332A0E1 		lsr	r3, r3, #5
 6081 0060 04308DE5 		str	r3, [sp, #4]
4591:../src/FreeRTOS/tasks.c ****             {
 6082              		.loc 1 4591 13 is_stmt 1 view .LVU1765
4591:../src/FreeRTOS/tasks.c ****             {
 6083              		.loc 1 4591 15 is_stmt 0 view .LVU1766
 6084 0064 000053E3 		cmp	r3, #0
 6085 0068 2100001A 		bne	.L432
 6086              	.LVL572:
 6087              	.L428:
4642:../src/FreeRTOS/tasks.c ****             }
 6088              		.loc 1 4642 41 is_stmt 1 view .LVU1767
4647:../src/FreeRTOS/tasks.c ****         }
 6089              		.loc 1 4647 13 view .LVU1768
 6090 006c 0800A0E1 		mov	r0, r8
 6091 0070 FEFFFFEB 		bl	vPortFree
 6092              	.LVL573:
4651:../src/FreeRTOS/tasks.c ****         }
 6093              		.loc 1 4651 37 view .LVU1769
 6094              	.L425:
4653:../src/FreeRTOS/tasks.c **** 
 6095              		.loc 1 4653 5 is_stmt 0 view .LVU1770
 6096 0074 0CD08DE2 		add	sp, sp, #12
 6097              		.cfi_remember_state
 6098              		.cfi_def_cfa_offset 36
 6099              		@ sp needed
 6100 0078 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 6101              	.LVL574:
 6102              	.L429:
 6103              		.cfi_restore_state
4632:../src/FreeRTOS/tasks.c ****                             }
 6104              		.loc 1 4632 33 is_stmt 1 view .LVU1771
 6105 007c 182095E5 		ldr	r2, [r5, #24]
 6106 0080 001000E3 		movw	r1, #:lower16:.LC4
 6107 0084 001040E3 		movt	r1, #:upper16:.LC4
 6108 0088 FEFFFFEB 		bl	sprintf
 6109              	.LVL575:
 6110              	.L430:
4637:../src/FreeRTOS/tasks.c ****                 }
 6111              		.loc 1 4637 21 discriminator 2 view .LVU1772
4637:../src/FreeRTOS/tasks.c ****                 }
 6112              		.loc 1 4637 38 is_stmt 0 discriminator 2 view .LVU1773
 6113 008c 0400A0E1 		mov	r0, r4
 6114 0090 FEFFFFEB 		bl	strlen
 6115              	.LVL576:
4637:../src/FreeRTOS/tasks.c ****                 }
 6116              		.loc 1 4637 35 discriminator 2 view .LVU1774
 6117 0094 004084E0 		add	r4, r4, r0
 6118              	.LVL577:
4594:../src/FreeRTOS/tasks.c ****                 {
 6119              		.loc 1 4594 46 is_stmt 1 discriminator 2 view .LVU1775
4594:../src/FreeRTOS/tasks.c ****                 {
 6120              		.loc 1 4594 47 is_stmt 0 discriminator 2 view .LVU1776
 6121 0098 016086E2 		add	r6, r6, #1
 6122              	.LVL578:
 6123              	.L427:
4594:../src/FreeRTOS/tasks.c ****                 {
 6124              		.loc 1 4594 29 is_stmt 1 discriminator 1 view .LVU1777
4594:../src/FreeRTOS/tasks.c ****                 {
 6125              		.loc 1 4594 17 is_stmt 0 discriminator 1 view .LVU1778
 6126 009c 0B0056E1 		cmp	r6, fp
 6127 00a0 F1FFFF2A 		bcs	.L428
4599:../src/FreeRTOS/tasks.c **** 
 6128              		.loc 1 4599 21 is_stmt 1 view .LVU1779
4599:../src/FreeRTOS/tasks.c **** 
 6129              		.loc 1 4599 60 is_stmt 0 view .LVU1780
 6130 00a4 865186E0 		add	r5, r6, r6, lsl #3
 6131 00a8 055188E0 		add	r5, r8, r5, lsl #2
4599:../src/FreeRTOS/tasks.c **** 
 6132              		.loc 1 4599 65 view .LVU1781
 6133 00ac 18A095E5 		ldr	r10, [r5, #24]
4599:../src/FreeRTOS/tasks.c **** 
 6134              		.loc 1 4599 83 view .LVU1782
 6135 00b0 04909DE5 		ldr	r9, [sp, #4]
4599:../src/FreeRTOS/tasks.c **** 
 6136              		.loc 1 4599 41 view .LVU1783
 6137 00b4 0910A0E1 		mov	r1, r9
 6138 00b8 0A00A0E1 		mov	r0, r10
 6139 00bc FEFFFFEB 		bl	__aeabi_uidiv
 6140              	.LVL579:
 6141 00c0 0070A0E1 		mov	r7, r0
 6142              	.LVL580:
4604:../src/FreeRTOS/tasks.c **** 
 6143              		.loc 1 4604 21 is_stmt 1 view .LVU1784
4604:../src/FreeRTOS/tasks.c **** 
 6144              		.loc 1 4604 37 is_stmt 0 view .LVU1785
 6145 00c4 041095E5 		ldr	r1, [r5, #4]
 6146 00c8 0400A0E1 		mov	r0, r4
 6147              	.LVL581:
4604:../src/FreeRTOS/tasks.c **** 
 6148              		.loc 1 4604 37 view .LVU1786
 6149 00cc FEFFFFEB 		bl	prvWriteNameToBuffer
 6150              	.LVL582:
 6151 00d0 0040A0E1 		mov	r4, r0
 6152              	.LVL583:
4606:../src/FreeRTOS/tasks.c ****                     {
 6153              		.loc 1 4606 21 is_stmt 1 view .LVU1787
4606:../src/FreeRTOS/tasks.c ****                     {
 6154              		.loc 1 4606 23 is_stmt 0 view .LVU1788
 6155 00d4 09005AE1 		cmp	r10, r9
 6156 00d8 E7FFFF3A 		bcc	.L429
4616:../src/FreeRTOS/tasks.c ****                             }
 6157              		.loc 1 4616 33 is_stmt 1 view .LVU1789
 6158 00dc 0730A0E1 		mov	r3, r7
 6159 00e0 182095E5 		ldr	r2, [r5, #24]
 6160 00e4 001000E3 		movw	r1, #:lower16:.LC3
 6161 00e8 001040E3 		movt	r1, #:upper16:.LC3
 6162 00ec FEFFFFEB 		bl	sprintf
 6163              	.LVL584:
4616:../src/FreeRTOS/tasks.c ****                             }
 6164              		.loc 1 4616 33 is_stmt 0 view .LVU1790
 6165 00f0 E5FFFFEA 		b	.L430
 6166              	.LVL585:
 6167              	.L432:
4594:../src/FreeRTOS/tasks.c ****                 {
 6168              		.loc 1 4594 24 view .LVU1791
 6169 00f4 0060A0E3 		mov	r6, #0
 6170 00f8 E7FFFFEA 		b	.L427
 6171              		.cfi_endproc
 6172              	.LFE59:
 6174              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6175              		.align	2
 6176              		.global	uxTaskResetEventItemValue
 6177              		.syntax unified
 6178              		.arm
 6179              		.fpu neon
 6181              	uxTaskResetEventItemValue:
 6182              	.LFB60:
4659:../src/FreeRTOS/tasks.c ****     TickType_t uxReturn;
 6183              		.loc 1 4659 1 is_stmt 1 view -0
 6184              		.cfi_startproc
 6185              		@ args = 0, pretend = 0, frame = 0
 6186              		@ frame_needed = 0, uses_anonymous_args = 0
 6187              		@ link register save eliminated.
4660:../src/FreeRTOS/tasks.c **** 
 6188              		.loc 1 4660 5 view .LVU1793
4662:../src/FreeRTOS/tasks.c **** 
 6189              		.loc 1 4662 5 view .LVU1794
4662:../src/FreeRTOS/tasks.c **** 
 6190              		.loc 1 4662 16 is_stmt 0 view .LVU1795
 6191 0000 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6192 0004 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6193 0008 002093E5 		ldr	r2, [r3]
4662:../src/FreeRTOS/tasks.c **** 
 6194              		.loc 1 4662 14 view .LVU1796
 6195 000c 180092E5 		ldr	r0, [r2, #24]
 6196              	.LVL586:
4666:../src/FreeRTOS/tasks.c **** 
 6197              		.loc 1 4666 5 is_stmt 1 view .LVU1797
 6198 0010 002093E5 		ldr	r2, [r3]
 6199 0014 2C2092E5 		ldr	r2, [r2, #44]
 6200 0018 001093E5 		ldr	r1, [r3]
 6201 001c 143062E2 		rsb	r3, r2, #20
 6202 0020 183081E5 		str	r3, [r1, #24]
4668:../src/FreeRTOS/tasks.c **** }
 6203              		.loc 1 4668 5 view .LVU1798
4669:../src/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 6204              		.loc 1 4669 1 is_stmt 0 view .LVU1799
 6205 0024 1EFF2FE1 		bx	lr
 6206              		.cfi_endproc
 6207              	.LFE60:
 6209              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6210              		.align	2
 6211              		.global	pvTaskIncrementMutexHeldCount
 6212              		.syntax unified
 6213              		.arm
 6214              		.fpu neon
 6216              	pvTaskIncrementMutexHeldCount:
 6217              	.LFB61:
4675:../src/FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
 6218              		.loc 1 4675 5 is_stmt 1 view -0
 6219              		.cfi_startproc
 6220              		@ args = 0, pretend = 0, frame = 0
 6221              		@ frame_needed = 0, uses_anonymous_args = 0
 6222              		@ link register save eliminated.
4678:../src/FreeRTOS/tasks.c ****         {
 6223              		.loc 1 4678 9 view .LVU1801
4678:../src/FreeRTOS/tasks.c ****         {
 6224              		.loc 1 4678 26 is_stmt 0 view .LVU1802
 6225 0000 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6226 0004 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6227 0008 003093E5 		ldr	r3, [r3]
4678:../src/FreeRTOS/tasks.c ****         {
 6228              		.loc 1 4678 11 view .LVU1803
 6229 000c 000053E3 		cmp	r3, #0
 6230 0010 0500000A 		beq	.L436
4680:../src/FreeRTOS/tasks.c ****         }
 6231              		.loc 1 4680 13 is_stmt 1 view .LVU1804
4680:../src/FreeRTOS/tasks.c ****         }
 6232              		.loc 1 4680 27 is_stmt 0 view .LVU1805
 6233 0014 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6234 0018 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6235 001c 002093E5 		ldr	r2, [r3]
 6236 0020 5C3092E5 		ldr	r3, [r2, #92]
4680:../src/FreeRTOS/tasks.c ****         }
 6237              		.loc 1 4680 44 view .LVU1806
 6238 0024 013083E2 		add	r3, r3, #1
 6239 0028 5C3082E5 		str	r3, [r2, #92]
 6240              	.L436:
4683:../src/FreeRTOS/tasks.c ****     }
 6241              		.loc 1 4683 9 is_stmt 1 view .LVU1807
4683:../src/FreeRTOS/tasks.c ****     }
 6242              		.loc 1 4683 16 is_stmt 0 view .LVU1808
 6243 002c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6244 0030 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6245 0034 000093E5 		ldr	r0, [r3]
4684:../src/FreeRTOS/tasks.c **** 
 6246              		.loc 1 4684 5 view .LVU1809
 6247 0038 1EFF2FE1 		bx	lr
 6248              		.cfi_endproc
 6249              	.LFE61:
 6251              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 6252              		.align	2
 6253              		.global	ulTaskGenericNotifyTake
 6254              		.syntax unified
 6255              		.arm
 6256              		.fpu neon
 6258              	ulTaskGenericNotifyTake:
 6259              	.LVL587:
 6260              	.LFB62:
4694:../src/FreeRTOS/tasks.c ****         uint32_t ulReturn;
 6261              		.loc 1 4694 5 is_stmt 1 view -0
 6262              		.cfi_startproc
 6263              		@ args = 0, pretend = 0, frame = 0
 6264              		@ frame_needed = 0, uses_anonymous_args = 0
4694:../src/FreeRTOS/tasks.c ****         uint32_t ulReturn;
 6265              		.loc 1 4694 5 is_stmt 0 view .LVU1811
 6266 0000 70402DE9 		push	{r4, r5, r6, lr}
 6267              		.cfi_def_cfa_offset 16
 6268              		.cfi_offset 4, -16
 6269              		.cfi_offset 5, -12
 6270              		.cfi_offset 6, -8
 6271              		.cfi_offset 14, -4
 6272 0004 0160A0E1 		mov	r6, r1
 6273 0008 0250A0E1 		mov	r5, r2
4695:../src/FreeRTOS/tasks.c **** 
 6274              		.loc 1 4695 9 is_stmt 1 view .LVU1812
4697:../src/FreeRTOS/tasks.c **** 
 6275              		.loc 1 4697 9 view .LVU1813
 6276 000c 004050E2 		subs	r4, r0, #0
 6277 0010 2900001A 		bne	.L443
 6278              	.LVL588:
 6279              	.L438:
4697:../src/FreeRTOS/tasks.c **** 
 6280              		.loc 1 4697 78 discriminator 3 view .LVU1814
4699:../src/FreeRTOS/tasks.c ****         {
 6281              		.loc 1 4699 9 discriminator 3 view .LVU1815
 6282 0014 FEFFFFEB 		bl	vPortEnterCritical
 6283              	.LVL589:
4699:../src/FreeRTOS/tasks.c ****         {
 6284              		.loc 1 4699 29 discriminator 3 view .LVU1816
4702:../src/FreeRTOS/tasks.c ****             {
 6285              		.loc 1 4702 13 discriminator 3 view .LVU1817
4702:../src/FreeRTOS/tasks.c ****             {
 6286              		.loc 1 4702 29 is_stmt 0 discriminator 3 view .LVU1818
 6287 0018 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6288 001c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6289 0020 003093E5 		ldr	r3, [r3]
4702:../src/FreeRTOS/tasks.c ****             {
 6290              		.loc 1 4702 46 discriminator 3 view .LVU1819
 6291 0024 1C2084E2 		add	r2, r4, #28
 6292 0028 023193E7 		ldr	r3, [r3, r2, lsl #2]
4702:../src/FreeRTOS/tasks.c ****             {
 6293              		.loc 1 4702 15 discriminator 3 view .LVU1820
 6294 002c 000053E3 		cmp	r3, #0
 6295 0030 0700001A 		bne	.L439
4705:../src/FreeRTOS/tasks.c **** 
 6296              		.loc 1 4705 17 is_stmt 1 view .LVU1821
4705:../src/FreeRTOS/tasks.c **** 
 6297              		.loc 1 4705 29 is_stmt 0 view .LVU1822
 6298 0034 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6299 0038 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6300 003c 003093E5 		ldr	r3, [r3]
4705:../src/FreeRTOS/tasks.c **** 
 6301              		.loc 1 4705 62 view .LVU1823
 6302 0040 043083E0 		add	r3, r3, r4
 6303 0044 0120A0E3 		mov	r2, #1
 6304 0048 7420C3E5 		strb	r2, [r3, #116]
4707:../src/FreeRTOS/tasks.c ****                 {
 6305              		.loc 1 4707 17 is_stmt 1 view .LVU1824
4707:../src/FreeRTOS/tasks.c ****                 {
 6306              		.loc 1 4707 19 is_stmt 0 view .LVU1825
 6307 004c 000055E3 		cmp	r5, #0
 6308 0050 1E00001A 		bne	.L444
 6309              	.L439:
4725:../src/FreeRTOS/tasks.c ****             }
 6310              		.loc 1 4725 41 is_stmt 1 view .LVU1826
4728:../src/FreeRTOS/tasks.c **** 
 6311              		.loc 1 4728 9 view .LVU1827
 6312 0054 FEFFFFEB 		bl	vPortExitCritical
 6313              	.LVL590:
4728:../src/FreeRTOS/tasks.c **** 
 6314              		.loc 1 4728 28 view .LVU1828
4730:../src/FreeRTOS/tasks.c ****         {
 6315              		.loc 1 4730 9 view .LVU1829
 6316 0058 FEFFFFEB 		bl	vPortEnterCritical
 6317              	.LVL591:
4730:../src/FreeRTOS/tasks.c ****         {
 6318              		.loc 1 4730 29 view .LVU1830
4732:../src/FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 6319              		.loc 1 4732 51 view .LVU1831
4733:../src/FreeRTOS/tasks.c **** 
 6320              		.loc 1 4733 13 view .LVU1832
4733:../src/FreeRTOS/tasks.c **** 
 6321              		.loc 1 4733 36 is_stmt 0 view .LVU1833
 6322 005c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6323 0060 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6324 0064 003093E5 		ldr	r3, [r3]
4733:../src/FreeRTOS/tasks.c **** 
 6325              		.loc 1 4733 22 view .LVU1834
 6326 0068 1C2084E2 		add	r2, r4, #28
 6327 006c 025193E7 		ldr	r5, [r3, r2, lsl #2]
 6328              	.LVL592:
4735:../src/FreeRTOS/tasks.c ****             {
 6329              		.loc 1 4735 13 is_stmt 1 view .LVU1835
4735:../src/FreeRTOS/tasks.c ****             {
 6330              		.loc 1 4735 15 is_stmt 0 view .LVU1836
 6331 0070 000055E3 		cmp	r5, #0
 6332 0074 0700000A 		beq	.L440
4737:../src/FreeRTOS/tasks.c ****                 {
 6333              		.loc 1 4737 17 is_stmt 1 view .LVU1837
4737:../src/FreeRTOS/tasks.c ****                 {
 6334              		.loc 1 4737 19 is_stmt 0 view .LVU1838
 6335 0078 000056E3 		cmp	r6, #0
 6336 007c 1800000A 		beq	.L441
4739:../src/FreeRTOS/tasks.c ****                 }
 6337              		.loc 1 4739 21 is_stmt 1 view .LVU1839
4739:../src/FreeRTOS/tasks.c ****                 }
 6338              		.loc 1 4739 33 is_stmt 0 view .LVU1840
 6339 0080 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6340 0084 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6341 0088 002093E5 		ldr	r2, [r3]
4739:../src/FreeRTOS/tasks.c ****                 }
 6342              		.loc 1 4739 68 view .LVU1841
 6343 008c 1C3084E2 		add	r3, r4, #28
 6344 0090 0010A0E3 		mov	r1, #0
 6345 0094 031182E7 		str	r1, [r2, r3, lsl #2]
 6346              	.L440:
4748:../src/FreeRTOS/tasks.c ****             }
 6347              		.loc 1 4748 41 is_stmt 1 view .LVU1842
4751:../src/FreeRTOS/tasks.c ****         }
 6348              		.loc 1 4751 13 view .LVU1843
4751:../src/FreeRTOS/tasks.c ****         }
 6349              		.loc 1 4751 25 is_stmt 0 view .LVU1844
 6350 0098 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6351 009c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6352 00a0 000093E5 		ldr	r0, [r3]
4751:../src/FreeRTOS/tasks.c ****         }
 6353              		.loc 1 4751 58 view .LVU1845
 6354 00a4 044080E0 		add	r4, r0, r4
 6355              	.LVL593:
4751:../src/FreeRTOS/tasks.c ****         }
 6356              		.loc 1 4751 58 view .LVU1846
 6357 00a8 0030A0E3 		mov	r3, #0
 6358 00ac 7430C4E5 		strb	r3, [r4, #116]
4753:../src/FreeRTOS/tasks.c **** 
 6359              		.loc 1 4753 9 is_stmt 1 view .LVU1847
 6360 00b0 FEFFFFEB 		bl	vPortExitCritical
 6361              	.LVL594:
4753:../src/FreeRTOS/tasks.c **** 
 6362              		.loc 1 4753 28 view .LVU1848
4755:../src/FreeRTOS/tasks.c ****     }
 6363              		.loc 1 4755 9 view .LVU1849
4756:../src/FreeRTOS/tasks.c **** 
 6364              		.loc 1 4756 5 is_stmt 0 view .LVU1850
 6365 00b4 0500A0E1 		mov	r0, r5
 6366 00b8 7080BDE8 		pop	{r4, r5, r6, pc}
 6367              	.LVL595:
 6368              	.L443:
4697:../src/FreeRTOS/tasks.c **** 
 6369              		.loc 1 4697 9 is_stmt 1 discriminator 1 view .LVU1851
 6370 00bc 591201E3 		movw	r1, #4697
 6371              	.LVL596:
4697:../src/FreeRTOS/tasks.c **** 
 6372              		.loc 1 4697 9 is_stmt 0 discriminator 1 view .LVU1852
 6373 00c0 000000E3 		movw	r0, #:lower16:.LC0
 6374              	.LVL597:
4697:../src/FreeRTOS/tasks.c **** 
 6375              		.loc 1 4697 9 discriminator 1 view .LVU1853
 6376 00c4 000040E3 		movt	r0, #:upper16:.LC0
 6377 00c8 FEFFFFEB 		bl	R_OS_AssertCalled
 6378              	.LVL598:
4697:../src/FreeRTOS/tasks.c **** 
 6379              		.loc 1 4697 9 discriminator 1 view .LVU1854
 6380 00cc D0FFFFEA 		b	.L438
 6381              	.L444:
4709:../src/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 6382              		.loc 1 4709 21 is_stmt 1 view .LVU1855
 6383 00d0 0210A0E1 		mov	r1, r2
 6384 00d4 0500A0E1 		mov	r0, r5
 6385 00d8 FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 6386              	.LVL599:
4710:../src/FreeRTOS/tasks.c **** 
 6387              		.loc 1 4710 65 view .LVU1856
4716:../src/FreeRTOS/tasks.c ****                 }
 6388              		.loc 1 4716 21 view .LVU1857
 6389              		.syntax divided
 6390              	@ 4716 "../src/FreeRTOS/tasks.c" 1
 6391 00dc 000000EF 		SWI 0
 6392              	@ 0 "" 2
4716:../src/FreeRTOS/tasks.c ****                 }
 6393              		.loc 1 4716 43 view .LVU1858
 6394              		.arm
 6395              		.syntax unified
 6396 00e0 DBFFFFEA 		b	.L439
 6397              	.LVL600:
 6398              	.L441:
4743:../src/FreeRTOS/tasks.c ****                 }
 6399              		.loc 1 4743 21 view .LVU1859
4743:../src/FreeRTOS/tasks.c ****                 }
 6400              		.loc 1 4743 33 is_stmt 0 view .LVU1860
 6401 00e4 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6402 00e8 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6403 00ec 002093E5 		ldr	r2, [r3]
4743:../src/FreeRTOS/tasks.c ****                 }
 6404              		.loc 1 4743 79 view .LVU1861
 6405 00f0 013045E2 		sub	r3, r5, #1
4743:../src/FreeRTOS/tasks.c ****                 }
 6406              		.loc 1 4743 68 view .LVU1862
 6407 00f4 1C1084E2 		add	r1, r4, #28
 6408 00f8 013182E7 		str	r3, [r2, r1, lsl #2]
 6409 00fc E5FFFFEA 		b	.L440
 6410              		.cfi_endproc
 6411              	.LFE62:
 6413              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 6414              		.align	2
 6415              		.global	xTaskGenericNotifyWait
 6416              		.syntax unified
 6417              		.arm
 6418              		.fpu neon
 6420              	xTaskGenericNotifyWait:
 6421              	.LVL601:
 6422              	.LFB63:
4768:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 6423              		.loc 1 4768 5 is_stmt 1 view -0
 6424              		.cfi_startproc
 6425              		@ args = 4, pretend = 0, frame = 0
 6426              		@ frame_needed = 0, uses_anonymous_args = 0
4768:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 6427              		.loc 1 4768 5 is_stmt 0 view .LVU1864
 6428 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 6429              		.cfi_def_cfa_offset 24
 6430              		.cfi_offset 4, -24
 6431              		.cfi_offset 5, -20
 6432              		.cfi_offset 6, -16
 6433              		.cfi_offset 7, -12
 6434              		.cfi_offset 8, -8
 6435              		.cfi_offset 14, -4
 6436 0004 0170A0E1 		mov	r7, r1
 6437 0008 0260A0E1 		mov	r6, r2
 6438 000c 0350A0E1 		mov	r5, r3
4769:../src/FreeRTOS/tasks.c **** 
 6439              		.loc 1 4769 9 is_stmt 1 view .LVU1865
4771:../src/FreeRTOS/tasks.c **** 
 6440              		.loc 1 4771 9 view .LVU1866
 6441 0010 004050E2 		subs	r4, r0, #0
 6442 0014 3200001A 		bne	.L452
 6443              	.LVL602:
 6444              	.L446:
4771:../src/FreeRTOS/tasks.c **** 
 6445              		.loc 1 4771 78 discriminator 3 view .LVU1867
4773:../src/FreeRTOS/tasks.c ****         {
 6446              		.loc 1 4773 9 discriminator 3 view .LVU1868
 6447 0018 FEFFFFEB 		bl	vPortEnterCritical
 6448              	.LVL603:
4773:../src/FreeRTOS/tasks.c ****         {
 6449              		.loc 1 4773 29 discriminator 3 view .LVU1869
4776:../src/FreeRTOS/tasks.c ****             {
 6450              		.loc 1 4776 13 discriminator 3 view .LVU1870
4776:../src/FreeRTOS/tasks.c ****             {
 6451              		.loc 1 4776 29 is_stmt 0 discriminator 3 view .LVU1871
 6452 001c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6453 0020 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6454 0024 003093E5 		ldr	r3, [r3]
4776:../src/FreeRTOS/tasks.c ****             {
 6455              		.loc 1 4776 44 discriminator 3 view .LVU1872
 6456 0028 043083E0 		add	r3, r3, r4
 6457 002c 7430D3E5 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 6458 0030 7330EFE6 		uxtb	r3, r3
4776:../src/FreeRTOS/tasks.c ****             {
 6459              		.loc 1 4776 15 discriminator 3 view .LVU1873
 6460 0034 020053E3 		cmp	r3, #2
 6461 0038 0D00000A 		beq	.L447
4781:../src/FreeRTOS/tasks.c **** 
 6462              		.loc 1 4781 17 is_stmt 1 view .LVU1874
4781:../src/FreeRTOS/tasks.c **** 
 6463              		.loc 1 4781 64 is_stmt 0 view .LVU1875
 6464 003c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6465 0040 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6466 0044 002093E5 		ldr	r2, [r3]
 6467 0048 1C0084E2 		add	r0, r4, #28
 6468 004c 001192E7 		ldr	r1, [r2, r0, lsl #2]
 6469 0050 0770C1E1 		bic	r7, r1, r7
 6470              	.LVL604:
4781:../src/FreeRTOS/tasks.c **** 
 6471              		.loc 1 4781 64 view .LVU1876
 6472 0054 007182E7 		str	r7, [r2, r0, lsl #2]
4784:../src/FreeRTOS/tasks.c **** 
 6473              		.loc 1 4784 17 is_stmt 1 view .LVU1877
4784:../src/FreeRTOS/tasks.c **** 
 6474              		.loc 1 4784 29 is_stmt 0 view .LVU1878
 6475 0058 003093E5 		ldr	r3, [r3]
4784:../src/FreeRTOS/tasks.c **** 
 6476              		.loc 1 4784 62 view .LVU1879
 6477 005c 043083E0 		add	r3, r3, r4
 6478 0060 0120A0E3 		mov	r2, #1
 6479 0064 7420C3E5 		strb	r2, [r3, #116]
4786:../src/FreeRTOS/tasks.c ****                 {
 6480              		.loc 1 4786 17 is_stmt 1 view .LVU1880
4786:../src/FreeRTOS/tasks.c ****                 {
 6481              		.loc 1 4786 19 is_stmt 0 view .LVU1881
 6482 0068 18309DE5 		ldr	r3, [sp, #24]
 6483 006c 000053E3 		cmp	r3, #0
 6484 0070 2000001A 		bne	.L453
 6485              	.L447:
4804:../src/FreeRTOS/tasks.c ****             }
 6486              		.loc 1 4804 41 is_stmt 1 view .LVU1882
4807:../src/FreeRTOS/tasks.c **** 
 6487              		.loc 1 4807 9 view .LVU1883
 6488 0074 FEFFFFEB 		bl	vPortExitCritical
 6489              	.LVL605:
4807:../src/FreeRTOS/tasks.c **** 
 6490              		.loc 1 4807 28 view .LVU1884
4809:../src/FreeRTOS/tasks.c ****         {
 6491              		.loc 1 4809 9 view .LVU1885
 6492 0078 FEFFFFEB 		bl	vPortEnterCritical
 6493              	.LVL606:
4809:../src/FreeRTOS/tasks.c ****         {
 6494              		.loc 1 4809 29 view .LVU1886
4811:../src/FreeRTOS/tasks.c **** 
 6495              		.loc 1 4811 51 view .LVU1887
4813:../src/FreeRTOS/tasks.c ****             {
 6496              		.loc 1 4813 13 view .LVU1888
4813:../src/FreeRTOS/tasks.c ****             {
 6497              		.loc 1 4813 15 is_stmt 0 view .LVU1889
 6498 007c 000055E3 		cmp	r5, #0
 6499 0080 0500000A 		beq	.L448
4817:../src/FreeRTOS/tasks.c ****             }
 6500              		.loc 1 4817 17 is_stmt 1 view .LVU1890
4817:../src/FreeRTOS/tasks.c ****             }
 6501              		.loc 1 4817 53 is_stmt 0 view .LVU1891
 6502 0084 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6503 0088 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6504 008c 003093E5 		ldr	r3, [r3]
4817:../src/FreeRTOS/tasks.c ****             }
 6505              		.loc 1 4817 70 view .LVU1892
 6506 0090 1C2084E2 		add	r2, r4, #28
 6507 0094 023193E7 		ldr	r3, [r3, r2, lsl #2]
4817:../src/FreeRTOS/tasks.c ****             }
 6508              		.loc 1 4817 39 view .LVU1893
 6509 0098 003085E5 		str	r3, [r5]
 6510              	.L448:
4824:../src/FreeRTOS/tasks.c ****             {
 6511              		.loc 1 4824 13 is_stmt 1 view .LVU1894
4824:../src/FreeRTOS/tasks.c ****             {
 6512              		.loc 1 4824 29 is_stmt 0 view .LVU1895
 6513 009c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6514 00a0 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6515 00a4 003093E5 		ldr	r3, [r3]
4824:../src/FreeRTOS/tasks.c ****             {
 6516              		.loc 1 4824 44 view .LVU1896
 6517 00a8 043083E0 		add	r3, r3, r4
 6518 00ac 7430D3E5 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 6519 00b0 7330EFE6 		uxtb	r3, r3
4824:../src/FreeRTOS/tasks.c ****             {
 6520              		.loc 1 4824 15 view .LVU1897
 6521 00b4 020053E3 		cmp	r3, #2
 6522 00b8 1300000A 		beq	.L454
4827:../src/FreeRTOS/tasks.c ****             }
 6523              		.loc 1 4827 25 view .LVU1898
 6524 00bc 0050A0E3 		mov	r5, #0
 6525              	.LVL607:
 6526              	.L449:
4837:../src/FreeRTOS/tasks.c ****         }
 6527              		.loc 1 4837 13 is_stmt 1 view .LVU1899
4837:../src/FreeRTOS/tasks.c ****         }
 6528              		.loc 1 4837 25 is_stmt 0 view .LVU1900
 6529 00c0 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6530 00c4 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6531 00c8 000093E5 		ldr	r0, [r3]
4837:../src/FreeRTOS/tasks.c ****         }
 6532              		.loc 1 4837 58 view .LVU1901
 6533 00cc 044080E0 		add	r4, r0, r4
 6534              	.LVL608:
4837:../src/FreeRTOS/tasks.c ****         }
 6535              		.loc 1 4837 58 view .LVU1902
 6536 00d0 0030A0E3 		mov	r3, #0
 6537 00d4 7430C4E5 		strb	r3, [r4, #116]
4839:../src/FreeRTOS/tasks.c **** 
 6538              		.loc 1 4839 9 is_stmt 1 view .LVU1903
 6539 00d8 FEFFFFEB 		bl	vPortExitCritical
 6540              	.LVL609:
4839:../src/FreeRTOS/tasks.c **** 
 6541              		.loc 1 4839 28 view .LVU1904
4841:../src/FreeRTOS/tasks.c ****     }
 6542              		.loc 1 4841 9 view .LVU1905
4842:../src/FreeRTOS/tasks.c **** 
 6543              		.loc 1 4842 5 is_stmt 0 view .LVU1906
 6544 00dc 0500A0E1 		mov	r0, r5
 6545 00e0 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 6546              	.LVL610:
 6547              	.L452:
4771:../src/FreeRTOS/tasks.c **** 
 6548              		.loc 1 4771 9 is_stmt 1 discriminator 1 view .LVU1907
 6549 00e4 A31201E3 		movw	r1, #4771
 6550              	.LVL611:
4771:../src/FreeRTOS/tasks.c **** 
 6551              		.loc 1 4771 9 is_stmt 0 discriminator 1 view .LVU1908
 6552 00e8 000000E3 		movw	r0, #:lower16:.LC0
 6553              	.LVL612:
4771:../src/FreeRTOS/tasks.c **** 
 6554              		.loc 1 4771 9 discriminator 1 view .LVU1909
 6555 00ec 000040E3 		movt	r0, #:upper16:.LC0
 6556 00f0 FEFFFFEB 		bl	R_OS_AssertCalled
 6557              	.LVL613:
4771:../src/FreeRTOS/tasks.c **** 
 6558              		.loc 1 4771 9 discriminator 1 view .LVU1910
 6559 00f4 C7FFFFEA 		b	.L446
 6560              	.LVL614:
 6561              	.L453:
4788:../src/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 6562              		.loc 1 4788 21 is_stmt 1 view .LVU1911
 6563 00f8 0210A0E1 		mov	r1, r2
 6564 00fc 0300A0E1 		mov	r0, r3
 6565 0100 FEFFFFEB 		bl	prvAddCurrentTaskToDelayedList
 6566              	.LVL615:
4789:../src/FreeRTOS/tasks.c **** 
 6567              		.loc 1 4789 65 view .LVU1912
4795:../src/FreeRTOS/tasks.c ****                 }
 6568              		.loc 1 4795 21 view .LVU1913
 6569              		.syntax divided
 6570              	@ 4795 "../src/FreeRTOS/tasks.c" 1
 6571 0104 000000EF 		SWI 0
 6572              	@ 0 "" 2
4795:../src/FreeRTOS/tasks.c ****                 }
 6573              		.loc 1 4795 43 view .LVU1914
 6574              		.arm
 6575              		.syntax unified
 6576 0108 D9FFFFEA 		b	.L447
 6577              	.L454:
4833:../src/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 6578              		.loc 1 4833 17 view .LVU1915
4833:../src/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 6579              		.loc 1 4833 64 is_stmt 0 view .LVU1916
 6580 010c 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6581 0110 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6582 0114 003093E5 		ldr	r3, [r3]
 6583 0118 1C1084E2 		add	r1, r4, #28
 6584 011c 012193E7 		ldr	r2, [r3, r1, lsl #2]
 6585 0120 0660C2E1 		bic	r6, r2, r6
 6586              	.LVL616:
4833:../src/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 6587              		.loc 1 4833 64 view .LVU1917
 6588 0124 016183E7 		str	r6, [r3, r1, lsl #2]
4834:../src/FreeRTOS/tasks.c ****             }
 6589              		.loc 1 4834 17 is_stmt 1 view .LVU1918
 6590              	.LVL617:
4834:../src/FreeRTOS/tasks.c ****             }
 6591              		.loc 1 4834 25 is_stmt 0 view .LVU1919
 6592 0128 0150A0E3 		mov	r5, #1
 6593              	.LVL618:
4834:../src/FreeRTOS/tasks.c ****             }
 6594              		.loc 1 4834 25 view .LVU1920
 6595 012c E3FFFFEA 		b	.L449
 6596              		.cfi_endproc
 6597              	.LFE63:
 6599              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6600              		.align	2
 6601              		.global	xTaskGenericNotify
 6602              		.syntax unified
 6603              		.arm
 6604              		.fpu neon
 6606              	xTaskGenericNotify:
 6607              	.LVL619:
 6608              	.LFB64:
4854:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6609              		.loc 1 4854 5 is_stmt 1 view -0
 6610              		.cfi_startproc
 6611              		@ args = 4, pretend = 0, frame = 0
 6612              		@ frame_needed = 0, uses_anonymous_args = 0
4854:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6613              		.loc 1 4854 5 is_stmt 0 view .LVU1922
 6614 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 6615              		.cfi_def_cfa_offset 24
 6616              		.cfi_offset 4, -24
 6617              		.cfi_offset 5, -20
 6618              		.cfi_offset 6, -16
 6619              		.cfi_offset 7, -12
 6620              		.cfi_offset 8, -8
 6621              		.cfi_offset 14, -4
 6622 0004 0060A0E1 		mov	r6, r0
 6623 0008 0280A0E1 		mov	r8, r2
 6624 000c 0370A0E1 		mov	r7, r3
 6625 0010 18509DE5 		ldr	r5, [sp, #24]
4855:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 6626              		.loc 1 4855 9 is_stmt 1 view .LVU1923
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6627              		.loc 1 4856 9 view .LVU1924
 6628              	.LVL620:
4857:../src/FreeRTOS/tasks.c **** 
 6629              		.loc 1 4857 9 view .LVU1925
4859:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 6630              		.loc 1 4859 9 view .LVU1926
 6631 0014 004051E2 		subs	r4, r1, #0
 6632 0018 1300001A 		bne	.L473
 6633              	.LVL621:
 6634              	.L456:
4859:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 6635              		.loc 1 4859 80 discriminator 3 view .LVU1927
4860:../src/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 6636              		.loc 1 4860 9 discriminator 3 view .LVU1928
 6637 001c 000056E3 		cmp	r6, #0
 6638 0020 1600000A 		beq	.L474
 6639              	.L457:
4860:../src/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 6640              		.loc 1 4860 38 discriminator 3 view .LVU1929
4861:../src/FreeRTOS/tasks.c **** 
 6641              		.loc 1 4861 9 discriminator 3 view .LVU1930
 6642              	.LVL622:
4863:../src/FreeRTOS/tasks.c ****         {
 6643              		.loc 1 4863 9 discriminator 3 view .LVU1931
 6644 0024 FEFFFFEB 		bl	vPortEnterCritical
 6645              	.LVL623:
4863:../src/FreeRTOS/tasks.c ****         {
 6646              		.loc 1 4863 29 discriminator 3 view .LVU1932
4865:../src/FreeRTOS/tasks.c ****             {
 6647              		.loc 1 4865 13 discriminator 3 view .LVU1933
4865:../src/FreeRTOS/tasks.c ****             {
 6648              		.loc 1 4865 15 is_stmt 0 discriminator 3 view .LVU1934
 6649 0028 000055E3 		cmp	r5, #0
4867:../src/FreeRTOS/tasks.c ****             }
 6650              		.loc 1 4867 17 is_stmt 1 view .LVU1935
4867:../src/FreeRTOS/tasks.c ****             }
 6651              		.loc 1 4867 71 is_stmt 0 view .LVU1936
 6652 002c 1C308412 		addne	r3, r4, #28
 6653 0030 03319617 		ldrne	r3, [r6, r3, lsl #2]
4867:../src/FreeRTOS/tasks.c ****             }
 6654              		.loc 1 4867 47 view .LVU1937
 6655 0034 00308515 		strne	r3, [r5]
 6656              	.L458:
4870:../src/FreeRTOS/tasks.c **** 
 6657              		.loc 1 4870 13 is_stmt 1 view .LVU1938
4870:../src/FreeRTOS/tasks.c **** 
 6658              		.loc 1 4870 35 is_stmt 0 view .LVU1939
 6659 0038 041086E0 		add	r1, r6, r4
 6660 003c 7450D1E5 		ldrb	r5, [r1, #116]	@ zero_extendqisi2
 6661 0040 7550EFE6 		uxtb	r5, r5
 6662              	.LVL624:
4872:../src/FreeRTOS/tasks.c **** 
 6663              		.loc 1 4872 13 is_stmt 1 view .LVU1940
4872:../src/FreeRTOS/tasks.c **** 
 6664              		.loc 1 4872 53 is_stmt 0 view .LVU1941
 6665 0044 0230A0E3 		mov	r3, #2
 6666 0048 7430C1E5 		strb	r3, [r1, #116]
4874:../src/FreeRTOS/tasks.c ****             {
 6667              		.loc 1 4874 13 is_stmt 1 view .LVU1942
 6668 004c 040057E3 		cmp	r7, #4
 6669 0050 07F19F97 		ldrls	pc, [pc, r7, asl #2]
 6670 0054 240000EA 		b	.L459
 6671              	.L461:
 6672 0058 18010000 		.word	.L469
 6673 005c 94000000 		.word	.L464
 6674 0060 AC000000 		.word	.L463
 6675 0064 C4000000 		.word	.L462
 6676 0068 D4000000 		.word	.L460
 6677              	.LVL625:
 6678              	.L473:
4859:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 6679              		.loc 1 4859 9 discriminator 1 view .LVU1943
 6680 006c FB1201E3 		movw	r1, #4859
 6681              	.LVL626:
4859:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 6682              		.loc 1 4859 9 is_stmt 0 discriminator 1 view .LVU1944
 6683 0070 000000E3 		movw	r0, #:lower16:.LC0
 6684              	.LVL627:
4859:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 6685              		.loc 1 4859 9 discriminator 1 view .LVU1945
 6686 0074 000040E3 		movt	r0, #:upper16:.LC0
 6687 0078 FEFFFFEB 		bl	R_OS_AssertCalled
 6688              	.LVL628:
4859:../src/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 6689              		.loc 1 4859 9 discriminator 1 view .LVU1946
 6690 007c E6FFFFEA 		b	.L456
 6691              	.L474:
4860:../src/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 6692              		.loc 1 4860 9 is_stmt 1 discriminator 1 view .LVU1947
 6693 0080 FC1201E3 		movw	r1, #4860
 6694 0084 000000E3 		movw	r0, #:lower16:.LC0
 6695 0088 000040E3 		movt	r0, #:upper16:.LC0
 6696 008c FEFFFFEB 		bl	R_OS_AssertCalled
 6697              	.LVL629:
 6698 0090 E3FFFFEA 		b	.L457
 6699              	.LVL630:
 6700              	.L464:
4877:../src/FreeRTOS/tasks.c ****                     break;
 6701              		.loc 1 4877 21 view .LVU1948
4877:../src/FreeRTOS/tasks.c ****                     break;
 6702              		.loc 1 4877 63 is_stmt 0 view .LVU1949
 6703 0094 1C4084E2 		add	r4, r4, #28
 6704              	.LVL631:
4877:../src/FreeRTOS/tasks.c ****                     break;
 6705              		.loc 1 4877 63 view .LVU1950
 6706 0098 042196E7 		ldr	r2, [r6, r4, lsl #2]
 6707 009c 088082E1 		orr	r8, r2, r8
 6708              	.LVL632:
4877:../src/FreeRTOS/tasks.c ****                     break;
 6709              		.loc 1 4877 63 view .LVU1951
 6710 00a0 048186E7 		str	r8, [r6, r4, lsl #2]
4878:../src/FreeRTOS/tasks.c **** 
 6711              		.loc 1 4878 21 is_stmt 1 view .LVU1952
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6712              		.loc 1 4856 20 is_stmt 0 view .LVU1953
 6713 00a4 0140A0E3 		mov	r4, #1
 6714              	.LVL633:
4878:../src/FreeRTOS/tasks.c **** 
 6715              		.loc 1 4878 21 view .LVU1954
 6716 00a8 1B0000EA 		b	.L465
 6717              	.LVL634:
 6718              	.L463:
4881:../src/FreeRTOS/tasks.c ****                     break;
 6719              		.loc 1 4881 21 is_stmt 1 view .LVU1955
4881:../src/FreeRTOS/tasks.c ****                     break;
 6720              		.loc 1 4881 45 is_stmt 0 view .LVU1956
 6721 00ac 1C4084E2 		add	r4, r4, #28
 6722              	.LVL635:
4881:../src/FreeRTOS/tasks.c ****                     break;
 6723              		.loc 1 4881 45 view .LVU1957
 6724 00b0 043196E7 		ldr	r3, [r6, r4, lsl #2]
4881:../src/FreeRTOS/tasks.c ****                     break;
 6725              		.loc 1 4881 66 view .LVU1958
 6726 00b4 013083E2 		add	r3, r3, #1
 6727 00b8 043186E7 		str	r3, [r6, r4, lsl #2]
4882:../src/FreeRTOS/tasks.c **** 
 6728              		.loc 1 4882 21 is_stmt 1 view .LVU1959
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6729              		.loc 1 4856 20 is_stmt 0 view .LVU1960
 6730 00bc 0140A0E3 		mov	r4, #1
 6731              	.LVL636:
4882:../src/FreeRTOS/tasks.c **** 
 6732              		.loc 1 4882 21 view .LVU1961
 6733 00c0 150000EA 		b	.L465
 6734              	.LVL637:
 6735              	.L462:
4885:../src/FreeRTOS/tasks.c ****                     break;
 6736              		.loc 1 4885 21 is_stmt 1 view .LVU1962
4885:../src/FreeRTOS/tasks.c ****                     break;
 6737              		.loc 1 4885 63 is_stmt 0 view .LVU1963
 6738 00c4 1C4084E2 		add	r4, r4, #28
 6739              	.LVL638:
4885:../src/FreeRTOS/tasks.c ****                     break;
 6740              		.loc 1 4885 63 view .LVU1964
 6741 00c8 048186E7 		str	r8, [r6, r4, lsl #2]
4886:../src/FreeRTOS/tasks.c **** 
 6742              		.loc 1 4886 21 is_stmt 1 view .LVU1965
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6743              		.loc 1 4856 20 is_stmt 0 view .LVU1966
 6744 00cc 0140A0E3 		mov	r4, #1
 6745              	.LVL639:
4886:../src/FreeRTOS/tasks.c **** 
 6746              		.loc 1 4886 21 view .LVU1967
 6747 00d0 110000EA 		b	.L465
 6748              	.LVL640:
 6749              	.L460:
4890:../src/FreeRTOS/tasks.c ****                     {
 6750              		.loc 1 4890 21 is_stmt 1 view .LVU1968
4890:../src/FreeRTOS/tasks.c ****                     {
 6751              		.loc 1 4890 23 is_stmt 0 view .LVU1969
 6752 00d4 020055E3 		cmp	r5, #2
 6753 00d8 1400000A 		beq	.L470
4892:../src/FreeRTOS/tasks.c ****                     }
 6754              		.loc 1 4892 25 is_stmt 1 view .LVU1970
4892:../src/FreeRTOS/tasks.c ****                     }
 6755              		.loc 1 4892 67 is_stmt 0 view .LVU1971
 6756 00dc 1C4084E2 		add	r4, r4, #28
 6757              	.LVL641:
4892:../src/FreeRTOS/tasks.c ****                     }
 6758              		.loc 1 4892 67 view .LVU1972
 6759 00e0 048186E7 		str	r8, [r6, r4, lsl #2]
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6760              		.loc 1 4856 20 view .LVU1973
 6761 00e4 0140A0E3 		mov	r4, #1
 6762              	.LVL642:
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6763              		.loc 1 4856 20 view .LVU1974
 6764 00e8 0B0000EA 		b	.L465
 6765              	.LVL643:
 6766              	.L459:
4913:../src/FreeRTOS/tasks.c **** 
 6767              		.loc 1 4913 21 is_stmt 1 view .LVU1975
 6768 00ec 003000E3 		movw	r3, #:lower16:.LANCHOR15
 6769 00f0 003040E3 		movt	r3, #:upper16:.LANCHOR15
 6770 00f4 003093E5 		ldr	r3, [r3]
 6771 00f8 000053E3 		cmp	r3, #0
 6772 00fc 0D00000A 		beq	.L471
4913:../src/FreeRTOS/tasks.c **** 
 6773              		.loc 1 4913 21 discriminator 1 view .LVU1976
 6774 0100 311301E3 		movw	r1, #4913
 6775 0104 000000E3 		movw	r0, #:lower16:.LC0
 6776 0108 000040E3 		movt	r0, #:upper16:.LC0
 6777 010c FEFFFFEB 		bl	R_OS_AssertCalled
 6778              	.LVL644:
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6779              		.loc 1 4856 20 is_stmt 0 discriminator 1 view .LVU1977
 6780 0110 0140A0E3 		mov	r4, #1
 6781              	.LVL645:
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6782              		.loc 1 4856 20 discriminator 1 view .LVU1978
 6783 0114 000000EA 		b	.L465
 6784              	.LVL646:
 6785              	.L469:
4872:../src/FreeRTOS/tasks.c **** 
 6786              		.loc 1 4872 53 view .LVU1979
 6787 0118 0140A0E3 		mov	r4, #1
 6788              	.LVL647:
 6789              	.L465:
4918:../src/FreeRTOS/tasks.c **** 
 6790              		.loc 1 4918 48 is_stmt 1 view .LVU1980
4922:../src/FreeRTOS/tasks.c ****             {
 6791              		.loc 1 4922 13 view .LVU1981
4922:../src/FreeRTOS/tasks.c ****             {
 6792              		.loc 1 4922 15 is_stmt 0 view .LVU1982
 6793 011c 010055E3 		cmp	r5, #1
 6794 0120 0600000A 		beq	.L475
 6795              	.LVL648:
 6796              	.L466:
4959:../src/FreeRTOS/tasks.c ****             }
 6797              		.loc 1 4959 41 is_stmt 1 view .LVU1983
4962:../src/FreeRTOS/tasks.c **** 
 6798              		.loc 1 4962 9 view .LVU1984
 6799 0124 FEFFFFEB 		bl	vPortExitCritical
 6800              	.LVL649:
4962:../src/FreeRTOS/tasks.c **** 
 6801              		.loc 1 4962 28 view .LVU1985
4964:../src/FreeRTOS/tasks.c ****     }
 6802              		.loc 1 4964 9 view .LVU1986
4965:../src/FreeRTOS/tasks.c **** 
 6803              		.loc 1 4965 5 is_stmt 0 view .LVU1987
 6804 0128 0400A0E1 		mov	r0, r4
 6805 012c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 6806              	.LVL650:
 6807              	.L470:
4897:../src/FreeRTOS/tasks.c ****                     }
 6808              		.loc 1 4897 33 view .LVU1988
 6809 0130 0040A0E3 		mov	r4, #0
 6810              	.LVL651:
4897:../src/FreeRTOS/tasks.c ****                     }
 6811              		.loc 1 4897 33 view .LVU1989
 6812 0134 F8FFFFEA 		b	.L465
 6813              	.LVL652:
 6814              	.L471:
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6815              		.loc 1 4856 20 view .LVU1990
 6816 0138 0140A0E3 		mov	r4, #1
 6817              	.LVL653:
4856:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6818              		.loc 1 4856 20 view .LVU1991
 6819 013c F6FFFFEA 		b	.L465
 6820              	.LVL654:
 6821              	.L475:
4924:../src/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6822              		.loc 1 4924 17 is_stmt 1 view .LVU1992
4924:../src/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6823              		.loc 1 4924 26 is_stmt 0 view .LVU1993
 6824 0140 045086E2 		add	r5, r6, #4
 6825              	.LVL655:
4924:../src/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6826              		.loc 1 4924 26 view .LVU1994
 6827 0144 0500A0E1 		mov	r0, r5
 6828 0148 FEFFFFEB 		bl	uxListRemove
 6829              	.LVL656:
4925:../src/FreeRTOS/tasks.c **** 
 6830              		.loc 1 4925 17 is_stmt 1 view .LVU1995
4925:../src/FreeRTOS/tasks.c **** 
 6831              		.loc 1 4925 17 view .LVU1996
 6832 014c 2C3096E5 		ldr	r3, [r6, #44]
 6833 0150 002000E3 		movw	r2, #:lower16:.LANCHOR13
 6834 0154 002040E3 		movt	r2, #:upper16:.LANCHOR13
 6835 0158 002092E5 		ldr	r2, [r2]
 6836 015c 020053E1 		cmp	r3, r2
4925:../src/FreeRTOS/tasks.c **** 
 6837              		.loc 1 4925 17 discriminator 1 view .LVU1997
 6838 0160 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 6839 0164 00204083 		movthi	r2, #:upper16:.LANCHOR13
 6840 0168 00308285 		strhi	r3, [r2]
 6841              	.L467:
4925:../src/FreeRTOS/tasks.c **** 
 6842              		.loc 1 4925 17 discriminator 3 view .LVU1998
4925:../src/FreeRTOS/tasks.c **** 
 6843              		.loc 1 4925 17 discriminator 3 view .LVU1999
 6844 016c 000000E3 		movw	r0, #:lower16:.LANCHOR4
 6845 0170 000040E3 		movt	r0, #:upper16:.LANCHOR4
 6846 0174 033183E0 		add	r3, r3, r3, lsl #2
 6847 0178 0510A0E1 		mov	r1, r5
 6848 017c 030180E0 		add	r0, r0, r3, lsl #2
 6849 0180 FEFFFFEB 		bl	vListInsertEnd
 6850              	.LVL657:
4925:../src/FreeRTOS/tasks.c **** 
 6851              		.loc 1 4925 47 discriminator 3 view .LVU2000
4928:../src/FreeRTOS/tasks.c **** 
 6852              		.loc 1 4928 17 discriminator 3 view .LVU2001
 6853 0184 283096E5 		ldr	r3, [r6, #40]
 6854 0188 000053E3 		cmp	r3, #0
 6855 018c 0300000A 		beq	.L468
4928:../src/FreeRTOS/tasks.c **** 
 6856              		.loc 1 4928 17 discriminator 1 view .LVU2002
 6857 0190 4D1DA0E3 		mov	r1, #4928
 6858 0194 000000E3 		movw	r0, #:lower16:.LC0
 6859 0198 000040E3 		movt	r0, #:upper16:.LC0
 6860 019c FEFFFFEB 		bl	R_OS_AssertCalled
 6861              	.LVL658:
 6862              	.L468:
4928:../src/FreeRTOS/tasks.c **** 
 6863              		.loc 1 4928 94 discriminator 3 view .LVU2003
4946:../src/FreeRTOS/tasks.c ****                 {
 6864              		.loc 1 4946 17 discriminator 3 view .LVU2004
4946:../src/FreeRTOS/tasks.c ****                 {
 6865              		.loc 1 4946 26 is_stmt 0 discriminator 3 view .LVU2005
 6866 01a0 2C2096E5 		ldr	r2, [r6, #44]
4946:../src/FreeRTOS/tasks.c ****                 {
 6867              		.loc 1 4946 53 discriminator 3 view .LVU2006
 6868 01a4 003000E3 		movw	r3, #:lower16:.LANCHOR10
 6869 01a8 003040E3 		movt	r3, #:upper16:.LANCHOR10
 6870 01ac 003093E5 		ldr	r3, [r3]
 6871 01b0 2C3093E5 		ldr	r3, [r3, #44]
4946:../src/FreeRTOS/tasks.c ****                 {
 6872              		.loc 1 4946 19 discriminator 3 view .LVU2007
 6873 01b4 030052E1 		cmp	r2, r3
 6874 01b8 D9FFFF9A 		bls	.L466
4950:../src/FreeRTOS/tasks.c ****                 }
 6875              		.loc 1 4950 21 is_stmt 1 view .LVU2008
 6876              		.syntax divided
 6877              	@ 4950 "../src/FreeRTOS/tasks.c" 1
 6878 01bc 000000EF 		SWI 0
 6879              	@ 0 "" 2
4950:../src/FreeRTOS/tasks.c ****                 }
 6880              		.loc 1 4950 52 view .LVU2009
 6881              		.arm
 6882              		.syntax unified
 6883 01c0 D7FFFFEA 		b	.L466
 6884              		.cfi_endproc
 6885              	.LFE64:
 6887              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6888              		.align	2
 6889              		.global	xTaskGenericNotifyFromISR
 6890              		.syntax unified
 6891              		.arm
 6892              		.fpu neon
 6894              	xTaskGenericNotifyFromISR:
 6895              	.LVL659:
 6896              	.LFB65:
4978:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6897              		.loc 1 4978 5 view -0
 6898              		.cfi_startproc
 6899              		@ args = 8, pretend = 0, frame = 0
 6900              		@ frame_needed = 0, uses_anonymous_args = 0
4978:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6901              		.loc 1 4978 5 is_stmt 0 view .LVU2011
 6902 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 6903              		.cfi_def_cfa_offset 32
 6904              		.cfi_offset 4, -32
 6905              		.cfi_offset 5, -28
 6906              		.cfi_offset 6, -24
 6907              		.cfi_offset 7, -20
 6908              		.cfi_offset 8, -16
 6909              		.cfi_offset 9, -12
 6910              		.cfi_offset 10, -8
 6911              		.cfi_offset 14, -4
 6912 0004 0140A0E1 		mov	r4, r1
 6913 0008 0280A0E1 		mov	r8, r2
 6914 000c 0390A0E1 		mov	r9, r3
 6915 0010 20609DE5 		ldr	r6, [sp, #32]
4979:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6916              		.loc 1 4979 9 is_stmt 1 view .LVU2012
4980:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 6917              		.loc 1 4980 9 view .LVU2013
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6918              		.loc 1 4981 9 view .LVU2014
 6919              	.LVL660:
4982:../src/FreeRTOS/tasks.c **** 
 6920              		.loc 1 4982 9 view .LVU2015
4984:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6921              		.loc 1 4984 9 view .LVU2016
 6922 0014 005050E2 		subs	r5, r0, #0
 6923 0018 1500000A 		beq	.L497
 6924              	.LVL661:
 6925              	.L477:
4984:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6926              		.loc 1 4984 38 discriminator 3 view .LVU2017
4985:../src/FreeRTOS/tasks.c **** 
 6927              		.loc 1 4985 9 discriminator 3 view .LVU2018
 6928 001c 000054E3 		cmp	r4, #0
 6929 0020 1800001A 		bne	.L498
 6930              	.L478:
4985:../src/FreeRTOS/tasks.c **** 
 6931              		.loc 1 4985 80 discriminator 3 view .LVU2019
5003:../src/FreeRTOS/tasks.c **** 
 6932              		.loc 1 5003 9 discriminator 3 view .LVU2020
 6933 0024 FEFFFFEB 		bl	vPortValidateInterruptPriority
 6934              	.LVL662:
5005:../src/FreeRTOS/tasks.c **** 
 6935              		.loc 1 5005 9 discriminator 3 view .LVU2021
5007:../src/FreeRTOS/tasks.c ****         {
 6936              		.loc 1 5007 9 discriminator 3 view .LVU2022
5007:../src/FreeRTOS/tasks.c ****         {
 6937              		.loc 1 5007 34 is_stmt 0 discriminator 3 view .LVU2023
 6938 0028 FEFFFFEB 		bl	ulPortSetInterruptMask
 6939              	.LVL663:
 6940 002c 0070A0E1 		mov	r7, r0
 6941              	.LVL664:
5009:../src/FreeRTOS/tasks.c ****             {
 6942              		.loc 1 5009 13 is_stmt 1 discriminator 3 view .LVU2024
5009:../src/FreeRTOS/tasks.c ****             {
 6943              		.loc 1 5009 15 is_stmt 0 discriminator 3 view .LVU2025
 6944 0030 000056E3 		cmp	r6, #0
5011:../src/FreeRTOS/tasks.c ****             }
 6945              		.loc 1 5011 17 is_stmt 1 view .LVU2026
5011:../src/FreeRTOS/tasks.c ****             }
 6946              		.loc 1 5011 71 is_stmt 0 view .LVU2027
 6947 0034 1C308412 		addne	r3, r4, #28
 6948 0038 03319517 		ldrne	r3, [r5, r3, lsl #2]
5011:../src/FreeRTOS/tasks.c ****             }
 6949              		.loc 1 5011 47 view .LVU2028
 6950 003c 00308615 		strne	r3, [r6]
 6951              	.L479:
5014:../src/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6952              		.loc 1 5014 13 is_stmt 1 view .LVU2029
5014:../src/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6953              		.loc 1 5014 35 is_stmt 0 view .LVU2030
 6954 0040 041085E0 		add	r1, r5, r4
 6955 0044 7460D1E5 		ldrb	r6, [r1, #116]	@ zero_extendqisi2
 6956 0048 7660EFE6 		uxtb	r6, r6
 6957              	.LVL665:
5015:../src/FreeRTOS/tasks.c **** 
 6958              		.loc 1 5015 13 is_stmt 1 view .LVU2031
5015:../src/FreeRTOS/tasks.c **** 
 6959              		.loc 1 5015 53 is_stmt 0 view .LVU2032
 6960 004c 0230A0E3 		mov	r3, #2
 6961 0050 7430C1E5 		strb	r3, [r1, #116]
5017:../src/FreeRTOS/tasks.c ****             {
 6962              		.loc 1 5017 13 is_stmt 1 view .LVU2033
 6963 0054 040059E3 		cmp	r9, #4
 6964 0058 09F19F97 		ldrls	pc, [pc, r9, asl #2]
 6965 005c 240000EA 		b	.L480
 6966              	.L482:
 6967 0060 20010000 		.word	.L493
 6968 0064 9C000000 		.word	.L485
 6969 0068 B4000000 		.word	.L484
 6970 006c CC000000 		.word	.L483
 6971 0070 DC000000 		.word	.L481
 6972              	.LVL666:
 6973              	.L497:
4984:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6974              		.loc 1 4984 9 discriminator 1 view .LVU2034
 6975 0074 781301E3 		movw	r1, #4984
 6976              	.LVL667:
4984:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6977              		.loc 1 4984 9 is_stmt 0 discriminator 1 view .LVU2035
 6978 0078 000000E3 		movw	r0, #:lower16:.LC0
 6979              	.LVL668:
4984:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6980              		.loc 1 4984 9 discriminator 1 view .LVU2036
 6981 007c 000040E3 		movt	r0, #:upper16:.LC0
 6982 0080 FEFFFFEB 		bl	R_OS_AssertCalled
 6983              	.LVL669:
4984:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6984              		.loc 1 4984 9 discriminator 1 view .LVU2037
 6985 0084 E4FFFFEA 		b	.L477
 6986              	.L498:
4985:../src/FreeRTOS/tasks.c **** 
 6987              		.loc 1 4985 9 is_stmt 1 discriminator 1 view .LVU2038
 6988 0088 791301E3 		movw	r1, #4985
 6989 008c 000000E3 		movw	r0, #:lower16:.LC0
 6990 0090 000040E3 		movt	r0, #:upper16:.LC0
 6991 0094 FEFFFFEB 		bl	R_OS_AssertCalled
 6992              	.LVL670:
 6993 0098 E1FFFFEA 		b	.L478
 6994              	.LVL671:
 6995              	.L485:
5020:../src/FreeRTOS/tasks.c ****                     break;
 6996              		.loc 1 5020 21 view .LVU2039
5020:../src/FreeRTOS/tasks.c ****                     break;
 6997              		.loc 1 5020 63 is_stmt 0 view .LVU2040
 6998 009c 1C4084E2 		add	r4, r4, #28
 6999              	.LVL672:
5020:../src/FreeRTOS/tasks.c ****                     break;
 7000              		.loc 1 5020 63 view .LVU2041
 7001 00a0 042195E7 		ldr	r2, [r5, r4, lsl #2]
 7002 00a4 088082E1 		orr	r8, r2, r8
 7003              	.LVL673:
5020:../src/FreeRTOS/tasks.c ****                     break;
 7004              		.loc 1 5020 63 view .LVU2042
 7005 00a8 048185E7 		str	r8, [r5, r4, lsl #2]
5021:../src/FreeRTOS/tasks.c **** 
 7006              		.loc 1 5021 21 is_stmt 1 view .LVU2043
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7007              		.loc 1 4981 20 is_stmt 0 view .LVU2044
 7008 00ac 0140A0E3 		mov	r4, #1
 7009              	.LVL674:
5021:../src/FreeRTOS/tasks.c **** 
 7010              		.loc 1 5021 21 view .LVU2045
 7011 00b0 1B0000EA 		b	.L486
 7012              	.LVL675:
 7013              	.L484:
5024:../src/FreeRTOS/tasks.c ****                     break;
 7014              		.loc 1 5024 21 is_stmt 1 view .LVU2046
5024:../src/FreeRTOS/tasks.c ****                     break;
 7015              		.loc 1 5024 45 is_stmt 0 view .LVU2047
 7016 00b4 1C4084E2 		add	r4, r4, #28
 7017              	.LVL676:
5024:../src/FreeRTOS/tasks.c ****                     break;
 7018              		.loc 1 5024 45 view .LVU2048
 7019 00b8 043195E7 		ldr	r3, [r5, r4, lsl #2]
5024:../src/FreeRTOS/tasks.c ****                     break;
 7020              		.loc 1 5024 66 view .LVU2049
 7021 00bc 013083E2 		add	r3, r3, #1
 7022 00c0 043185E7 		str	r3, [r5, r4, lsl #2]
5025:../src/FreeRTOS/tasks.c **** 
 7023              		.loc 1 5025 21 is_stmt 1 view .LVU2050
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7024              		.loc 1 4981 20 is_stmt 0 view .LVU2051
 7025 00c4 0140A0E3 		mov	r4, #1
 7026              	.LVL677:
5025:../src/FreeRTOS/tasks.c **** 
 7027              		.loc 1 5025 21 view .LVU2052
 7028 00c8 150000EA 		b	.L486
 7029              	.LVL678:
 7030              	.L483:
5028:../src/FreeRTOS/tasks.c ****                     break;
 7031              		.loc 1 5028 21 is_stmt 1 view .LVU2053
5028:../src/FreeRTOS/tasks.c ****                     break;
 7032              		.loc 1 5028 63 is_stmt 0 view .LVU2054
 7033 00cc 1C4084E2 		add	r4, r4, #28
 7034              	.LVL679:
5028:../src/FreeRTOS/tasks.c ****                     break;
 7035              		.loc 1 5028 63 view .LVU2055
 7036 00d0 048185E7 		str	r8, [r5, r4, lsl #2]
5029:../src/FreeRTOS/tasks.c **** 
 7037              		.loc 1 5029 21 is_stmt 1 view .LVU2056
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7038              		.loc 1 4981 20 is_stmt 0 view .LVU2057
 7039 00d4 0140A0E3 		mov	r4, #1
 7040              	.LVL680:
5029:../src/FreeRTOS/tasks.c **** 
 7041              		.loc 1 5029 21 view .LVU2058
 7042 00d8 110000EA 		b	.L486
 7043              	.LVL681:
 7044              	.L481:
5033:../src/FreeRTOS/tasks.c ****                     {
 7045              		.loc 1 5033 21 is_stmt 1 view .LVU2059
5033:../src/FreeRTOS/tasks.c ****                     {
 7046              		.loc 1 5033 23 is_stmt 0 view .LVU2060
 7047 00dc 020056E3 		cmp	r6, #2
 7048 00e0 1500000A 		beq	.L494
5035:../src/FreeRTOS/tasks.c ****                     }
 7049              		.loc 1 5035 25 is_stmt 1 view .LVU2061
5035:../src/FreeRTOS/tasks.c ****                     }
 7050              		.loc 1 5035 67 is_stmt 0 view .LVU2062
 7051 00e4 1C4084E2 		add	r4, r4, #28
 7052              	.LVL682:
5035:../src/FreeRTOS/tasks.c ****                     }
 7053              		.loc 1 5035 67 view .LVU2063
 7054 00e8 048185E7 		str	r8, [r5, r4, lsl #2]
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7055              		.loc 1 4981 20 view .LVU2064
 7056 00ec 0140A0E3 		mov	r4, #1
 7057              	.LVL683:
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7058              		.loc 1 4981 20 view .LVU2065
 7059 00f0 0B0000EA 		b	.L486
 7060              	.LVL684:
 7061              	.L480:
5056:../src/FreeRTOS/tasks.c ****                     break;
 7062              		.loc 1 5056 21 is_stmt 1 view .LVU2066
 7063 00f4 003000E3 		movw	r3, #:lower16:.LANCHOR15
 7064 00f8 003040E3 		movt	r3, #:upper16:.LANCHOR15
 7065 00fc 003093E5 		ldr	r3, [r3]
 7066 0100 000053E3 		cmp	r3, #0
 7067 0104 0E00000A 		beq	.L495
5056:../src/FreeRTOS/tasks.c ****                     break;
 7068              		.loc 1 5056 21 discriminator 1 view .LVU2067
 7069 0108 4F1DA0E3 		mov	r1, #5056
 7070 010c 000000E3 		movw	r0, #:lower16:.LC0
 7071              	.LVL685:
5056:../src/FreeRTOS/tasks.c ****                     break;
 7072              		.loc 1 5056 21 is_stmt 0 discriminator 1 view .LVU2068
 7073 0110 000040E3 		movt	r0, #:upper16:.LC0
 7074 0114 FEFFFFEB 		bl	R_OS_AssertCalled
 7075              	.LVL686:
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7076              		.loc 1 4981 20 discriminator 1 view .LVU2069
 7077 0118 0140A0E3 		mov	r4, #1
 7078              	.LVL687:
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7079              		.loc 1 4981 20 discriminator 1 view .LVU2070
 7080 011c 000000EA 		b	.L486
 7081              	.LVL688:
 7082              	.L493:
5015:../src/FreeRTOS/tasks.c **** 
 7083              		.loc 1 5015 53 view .LVU2071
 7084 0120 0140A0E3 		mov	r4, #1
 7085              	.LVL689:
 7086              	.L486:
5060:../src/FreeRTOS/tasks.c **** 
 7087              		.loc 1 5060 57 is_stmt 1 view .LVU2072
5064:../src/FreeRTOS/tasks.c ****             {
 7088              		.loc 1 5064 13 view .LVU2073
5064:../src/FreeRTOS/tasks.c ****             {
 7089              		.loc 1 5064 15 is_stmt 0 view .LVU2074
 7090 0124 010056E3 		cmp	r6, #1
 7091 0128 0700000A 		beq	.L499
 7092              	.LVL690:
 7093              	.L487:
5097:../src/FreeRTOS/tasks.c ****                 }
 7094              		.loc 1 5097 45 is_stmt 1 view .LVU2075
5101:../src/FreeRTOS/tasks.c **** 
 7095              		.loc 1 5101 9 view .LVU2076
 7096 012c 0700A0E1 		mov	r0, r7
 7097 0130 FEFFFFEB 		bl	vPortClearInterruptMask
 7098              	.LVL691:
5103:../src/FreeRTOS/tasks.c ****     }
 7099              		.loc 1 5103 9 view .LVU2077
5104:../src/FreeRTOS/tasks.c **** 
 7100              		.loc 1 5104 5 is_stmt 0 view .LVU2078
 7101 0134 0400A0E1 		mov	r0, r4
 7102 0138 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 7103              	.LVL692:
 7104              	.L494:
5040:../src/FreeRTOS/tasks.c ****                     }
 7105              		.loc 1 5040 33 view .LVU2079
 7106 013c 0040A0E3 		mov	r4, #0
 7107              	.LVL693:
5040:../src/FreeRTOS/tasks.c ****                     }
 7108              		.loc 1 5040 33 view .LVU2080
 7109 0140 F7FFFFEA 		b	.L486
 7110              	.LVL694:
 7111              	.L495:
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7112              		.loc 1 4981 20 view .LVU2081
 7113 0144 0140A0E3 		mov	r4, #1
 7114              	.LVL695:
4981:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7115              		.loc 1 4981 20 view .LVU2082
 7116 0148 F5FFFFEA 		b	.L486
 7117              	.LVL696:
 7118              	.L499:
5067:../src/FreeRTOS/tasks.c **** 
 7119              		.loc 1 5067 17 is_stmt 1 view .LVU2083
 7120 014c 283095E5 		ldr	r3, [r5, #40]
 7121 0150 000053E3 		cmp	r3, #0
 7122 0154 0300000A 		beq	.L488
5067:../src/FreeRTOS/tasks.c **** 
 7123              		.loc 1 5067 17 discriminator 1 view .LVU2084
 7124 0158 CB1301E3 		movw	r1, #5067
 7125 015c 000000E3 		movw	r0, #:lower16:.LC0
 7126 0160 000040E3 		movt	r0, #:upper16:.LC0
 7127 0164 FEFFFFEB 		bl	R_OS_AssertCalled
 7128              	.LVL697:
 7129              	.L488:
5067:../src/FreeRTOS/tasks.c **** 
 7130              		.loc 1 5067 94 discriminator 3 view .LVU2085
5069:../src/FreeRTOS/tasks.c ****                 {
 7131              		.loc 1 5069 17 discriminator 3 view .LVU2086
5069:../src/FreeRTOS/tasks.c ****                 {
 7132              		.loc 1 5069 42 is_stmt 0 discriminator 3 view .LVU2087
 7133 0168 003000E3 		movw	r3, #:lower16:.LANCHOR16
 7134 016c 003040E3 		movt	r3, #:upper16:.LANCHOR16
 7135 0170 003093E5 		ldr	r3, [r3]
5069:../src/FreeRTOS/tasks.c ****                 {
 7136              		.loc 1 5069 19 discriminator 3 view .LVU2088
 7137 0174 000053E3 		cmp	r3, #0
 7138 0178 2100001A 		bne	.L489
5071:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7139              		.loc 1 5071 21 is_stmt 1 view .LVU2089
5071:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7140              		.loc 1 5071 30 is_stmt 0 view .LVU2090
 7141 017c 046085E2 		add	r6, r5, #4
 7142              	.LVL698:
5071:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7143              		.loc 1 5071 30 view .LVU2091
 7144 0180 0600A0E1 		mov	r0, r6
 7145 0184 FEFFFFEB 		bl	uxListRemove
 7146              	.LVL699:
5072:../src/FreeRTOS/tasks.c ****                 }
 7147              		.loc 1 5072 21 is_stmt 1 view .LVU2092
5072:../src/FreeRTOS/tasks.c ****                 }
 7148              		.loc 1 5072 21 view .LVU2093
 7149 0188 2C3095E5 		ldr	r3, [r5, #44]
 7150 018c 002000E3 		movw	r2, #:lower16:.LANCHOR13
 7151 0190 002040E3 		movt	r2, #:upper16:.LANCHOR13
 7152 0194 002092E5 		ldr	r2, [r2]
 7153 0198 020053E1 		cmp	r3, r2
5072:../src/FreeRTOS/tasks.c ****                 }
 7154              		.loc 1 5072 21 discriminator 1 view .LVU2094
 7155 019c 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 7156 01a0 00204083 		movthi	r2, #:upper16:.LANCHOR13
 7157 01a4 00308285 		strhi	r3, [r2]
 7158              	.L490:
5072:../src/FreeRTOS/tasks.c ****                 }
 7159              		.loc 1 5072 21 discriminator 3 view .LVU2095
5072:../src/FreeRTOS/tasks.c ****                 }
 7160              		.loc 1 5072 21 discriminator 3 view .LVU2096
 7161 01a8 000000E3 		movw	r0, #:lower16:.LANCHOR4
 7162 01ac 000040E3 		movt	r0, #:upper16:.LANCHOR4
 7163 01b0 033183E0 		add	r3, r3, r3, lsl #2
 7164 01b4 0610A0E1 		mov	r1, r6
 7165 01b8 030180E0 		add	r0, r0, r3, lsl #2
 7166 01bc FEFFFFEB 		bl	vListInsertEnd
 7167              	.LVL700:
5072:../src/FreeRTOS/tasks.c ****                 }
 7168              		.loc 1 5072 51 discriminator 3 view .LVU2097
 7169              	.L491:
5081:../src/FreeRTOS/tasks.c ****                 {
 7170              		.loc 1 5081 17 view .LVU2098
5081:../src/FreeRTOS/tasks.c ****                 {
 7171              		.loc 1 5081 26 is_stmt 0 view .LVU2099
 7172 01c0 2C2095E5 		ldr	r2, [r5, #44]
5081:../src/FreeRTOS/tasks.c ****                 {
 7173              		.loc 1 5081 53 view .LVU2100
 7174 01c4 003000E3 		movw	r3, #:lower16:.LANCHOR10
 7175 01c8 003040E3 		movt	r3, #:upper16:.LANCHOR10
 7176 01cc 003093E5 		ldr	r3, [r3]
 7177 01d0 2C3093E5 		ldr	r3, [r3, #44]
5081:../src/FreeRTOS/tasks.c ****                 {
 7178              		.loc 1 5081 19 view .LVU2101
 7179 01d4 030052E1 		cmp	r2, r3
 7180 01d8 D3FFFF9A 		bls	.L487
5085:../src/FreeRTOS/tasks.c ****                     {
 7181              		.loc 1 5085 21 is_stmt 1 view .LVU2102
5085:../src/FreeRTOS/tasks.c ****                     {
 7182              		.loc 1 5085 23 is_stmt 0 view .LVU2103
 7183 01dc 24309DE5 		ldr	r3, [sp, #36]
 7184 01e0 000053E3 		cmp	r3, #0
5087:../src/FreeRTOS/tasks.c ****                     }
 7185              		.loc 1 5087 25 is_stmt 1 view .LVU2104
5087:../src/FreeRTOS/tasks.c ****                     }
 7186              		.loc 1 5087 52 is_stmt 0 view .LVU2105
 7187 01e4 0130A013 		movne	r3, #1
 7188 01e8 24209D15 		ldrne	r2, [sp, #36]
 7189 01ec 00308215 		strne	r3, [r2]
 7190              	.L492:
5093:../src/FreeRTOS/tasks.c ****                 }
 7191              		.loc 1 5093 21 is_stmt 1 view .LVU2106
5093:../src/FreeRTOS/tasks.c ****                 }
 7192              		.loc 1 5093 35 is_stmt 0 view .LVU2107
 7193 01f0 003000E3 		movw	r3, #:lower16:.LANCHOR17
 7194 01f4 003040E3 		movt	r3, #:upper16:.LANCHOR17
 7195 01f8 0120A0E3 		mov	r2, #1
 7196 01fc 002083E5 		str	r2, [r3]
 7197 0200 C9FFFFEA 		b	.L487
 7198              	.LVL701:
 7199              	.L489:
5078:../src/FreeRTOS/tasks.c ****                 }
 7200              		.loc 1 5078 21 is_stmt 1 view .LVU2108
 7201 0204 181085E2 		add	r1, r5, #24
 7202 0208 000000E3 		movw	r0, #:lower16:.LANCHOR3
 7203 020c 000040E3 		movt	r0, #:upper16:.LANCHOR3
 7204 0210 FEFFFFEB 		bl	vListInsertEnd
 7205              	.LVL702:
 7206 0214 E9FFFFEA 		b	.L491
 7207              		.cfi_endproc
 7208              	.LFE65:
 7210              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 7211              		.align	2
 7212              		.global	vTaskGenericNotifyGiveFromISR
 7213              		.syntax unified
 7214              		.arm
 7215              		.fpu neon
 7217              	vTaskGenericNotifyGiveFromISR:
 7218              	.LVL703:
 7219              	.LFB66:
5114:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7220              		.loc 1 5114 5 view -0
 7221              		.cfi_startproc
 7222              		@ args = 0, pretend = 0, frame = 0
 7223              		@ frame_needed = 0, uses_anonymous_args = 0
5114:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7224              		.loc 1 5114 5 is_stmt 0 view .LVU2110
 7225 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 7226              		.cfi_def_cfa_offset 24
 7227              		.cfi_offset 4, -24
 7228              		.cfi_offset 5, -20
 7229              		.cfi_offset 6, -16
 7230              		.cfi_offset 7, -12
 7231              		.cfi_offset 8, -8
 7232              		.cfi_offset 14, -4
 7233 0004 0140A0E1 		mov	r4, r1
 7234 0008 0270A0E1 		mov	r7, r2
5115:../src/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 7235              		.loc 1 5115 9 is_stmt 1 view .LVU2111
5116:../src/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7236              		.loc 1 5116 9 view .LVU2112
5117:../src/FreeRTOS/tasks.c **** 
 7237              		.loc 1 5117 9 view .LVU2113
5119:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7238              		.loc 1 5119 9 view .LVU2114
 7239 000c 005050E2 		subs	r5, r0, #0
 7240 0010 1200000A 		beq	.L510
 7241              	.LVL704:
 7242              	.L501:
5119:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7243              		.loc 1 5119 38 discriminator 3 view .LVU2115
5120:../src/FreeRTOS/tasks.c **** 
 7244              		.loc 1 5120 9 discriminator 3 view .LVU2116
 7245 0014 000054E3 		cmp	r4, #0
 7246 0018 1500001A 		bne	.L511
 7247              	.L502:
5120:../src/FreeRTOS/tasks.c **** 
 7248              		.loc 1 5120 80 discriminator 3 view .LVU2117
5138:../src/FreeRTOS/tasks.c **** 
 7249              		.loc 1 5138 9 discriminator 3 view .LVU2118
 7250 001c FEFFFFEB 		bl	vPortValidateInterruptPriority
 7251              	.LVL705:
5140:../src/FreeRTOS/tasks.c **** 
 7252              		.loc 1 5140 9 discriminator 3 view .LVU2119
5142:../src/FreeRTOS/tasks.c ****         {
 7253              		.loc 1 5142 9 discriminator 3 view .LVU2120
5142:../src/FreeRTOS/tasks.c ****         {
 7254              		.loc 1 5142 34 is_stmt 0 discriminator 3 view .LVU2121
 7255 0020 FEFFFFEB 		bl	ulPortSetInterruptMask
 7256              	.LVL706:
 7257 0024 0060A0E1 		mov	r6, r0
 7258              	.LVL707:
5144:../src/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7259              		.loc 1 5144 13 is_stmt 1 discriminator 3 view .LVU2122
5144:../src/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7260              		.loc 1 5144 35 is_stmt 0 discriminator 3 view .LVU2123
 7261 0028 042085E0 		add	r2, r5, r4
 7262 002c 7430D2E5 		ldrb	r3, [r2, #116]	@ zero_extendqisi2
 7263 0030 7330EFE6 		uxtb	r3, r3
 7264              	.LVL708:
5145:../src/FreeRTOS/tasks.c **** 
 7265              		.loc 1 5145 13 is_stmt 1 discriminator 3 view .LVU2124
5145:../src/FreeRTOS/tasks.c **** 
 7266              		.loc 1 5145 53 is_stmt 0 discriminator 3 view .LVU2125
 7267 0034 0210A0E3 		mov	r1, #2
 7268 0038 7410C2E5 		strb	r1, [r2, #116]
5149:../src/FreeRTOS/tasks.c **** 
 7269              		.loc 1 5149 13 is_stmt 1 discriminator 3 view .LVU2126
5149:../src/FreeRTOS/tasks.c **** 
 7270              		.loc 1 5149 37 is_stmt 0 discriminator 3 view .LVU2127
 7271 003c 1C4084E2 		add	r4, r4, #28
 7272              	.LVL709:
5149:../src/FreeRTOS/tasks.c **** 
 7273              		.loc 1 5149 37 discriminator 3 view .LVU2128
 7274 0040 041195E7 		ldr	r1, [r5, r4, lsl #2]
5149:../src/FreeRTOS/tasks.c **** 
 7275              		.loc 1 5149 58 discriminator 3 view .LVU2129
 7276 0044 011081E2 		add	r1, r1, #1
 7277 0048 041185E7 		str	r1, [r5, r4, lsl #2]
5151:../src/FreeRTOS/tasks.c **** 
 7278              		.loc 1 5151 62 is_stmt 1 discriminator 3 view .LVU2130
5155:../src/FreeRTOS/tasks.c ****             {
 7279              		.loc 1 5155 13 discriminator 3 view .LVU2131
5155:../src/FreeRTOS/tasks.c ****             {
 7280              		.loc 1 5155 15 is_stmt 0 discriminator 3 view .LVU2132
 7281 004c 010053E3 		cmp	r3, #1
 7282 0050 0C00000A 		beq	.L512
 7283              	.LVL710:
 7284              	.L503:
5188:../src/FreeRTOS/tasks.c ****                 }
 7285              		.loc 1 5188 45 is_stmt 1 view .LVU2133
5192:../src/FreeRTOS/tasks.c ****     }
 7286              		.loc 1 5192 9 view .LVU2134
 7287 0054 0600A0E1 		mov	r0, r6
 7288 0058 FEFFFFEB 		bl	vPortClearInterruptMask
 7289              	.LVL711:
5193:../src/FreeRTOS/tasks.c **** 
 7290              		.loc 1 5193 5 is_stmt 0 view .LVU2135
 7291 005c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 7292              	.LVL712:
 7293              	.L510:
5119:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7294              		.loc 1 5119 9 is_stmt 1 discriminator 1 view .LVU2136
 7295 0060 FF1301E3 		movw	r1, #5119
 7296              	.LVL713:
5119:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7297              		.loc 1 5119 9 is_stmt 0 discriminator 1 view .LVU2137
 7298 0064 000000E3 		movw	r0, #:lower16:.LC0
 7299              	.LVL714:
5119:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7300              		.loc 1 5119 9 discriminator 1 view .LVU2138
 7301 0068 000040E3 		movt	r0, #:upper16:.LC0
 7302 006c FEFFFFEB 		bl	R_OS_AssertCalled
 7303              	.LVL715:
5119:../src/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7304              		.loc 1 5119 9 discriminator 1 view .LVU2139
 7305 0070 E7FFFFEA 		b	.L501
 7306              	.L511:
5120:../src/FreeRTOS/tasks.c **** 
 7307              		.loc 1 5120 9 is_stmt 1 discriminator 1 view .LVU2140
 7308 0074 051BA0E3 		mov	r1, #5120
 7309 0078 000000E3 		movw	r0, #:lower16:.LC0
 7310 007c 000040E3 		movt	r0, #:upper16:.LC0
 7311 0080 FEFFFFEB 		bl	R_OS_AssertCalled
 7312              	.LVL716:
 7313 0084 E4FFFFEA 		b	.L502
 7314              	.LVL717:
 7315              	.L512:
5158:../src/FreeRTOS/tasks.c **** 
 7316              		.loc 1 5158 17 view .LVU2141
 7317 0088 283095E5 		ldr	r3, [r5, #40]
 7318              	.LVL718:
5158:../src/FreeRTOS/tasks.c **** 
 7319              		.loc 1 5158 17 is_stmt 0 view .LVU2142
 7320 008c 000053E3 		cmp	r3, #0
 7321 0090 0300000A 		beq	.L504
5158:../src/FreeRTOS/tasks.c **** 
 7322              		.loc 1 5158 17 is_stmt 1 discriminator 1 view .LVU2143
 7323 0094 261401E3 		movw	r1, #5158
 7324 0098 000000E3 		movw	r0, #:lower16:.LC0
 7325              	.LVL719:
5158:../src/FreeRTOS/tasks.c **** 
 7326              		.loc 1 5158 17 is_stmt 0 discriminator 1 view .LVU2144
 7327 009c 000040E3 		movt	r0, #:upper16:.LC0
 7328 00a0 FEFFFFEB 		bl	R_OS_AssertCalled
 7329              	.LVL720:
 7330              	.L504:
5158:../src/FreeRTOS/tasks.c **** 
 7331              		.loc 1 5158 94 is_stmt 1 discriminator 3 view .LVU2145
5160:../src/FreeRTOS/tasks.c ****                 {
 7332              		.loc 1 5160 17 discriminator 3 view .LVU2146
5160:../src/FreeRTOS/tasks.c ****                 {
 7333              		.loc 1 5160 42 is_stmt 0 discriminator 3 view .LVU2147
 7334 00a4 003000E3 		movw	r3, #:lower16:.LANCHOR16
 7335 00a8 003040E3 		movt	r3, #:upper16:.LANCHOR16
 7336 00ac 003093E5 		ldr	r3, [r3]
5160:../src/FreeRTOS/tasks.c ****                 {
 7337              		.loc 1 5160 19 discriminator 3 view .LVU2148
 7338 00b0 000053E3 		cmp	r3, #0
 7339 00b4 1F00001A 		bne	.L505
5162:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7340              		.loc 1 5162 21 is_stmt 1 view .LVU2149
5162:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7341              		.loc 1 5162 30 is_stmt 0 view .LVU2150
 7342 00b8 044085E2 		add	r4, r5, #4
 7343              	.LVL721:
5162:../src/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7344              		.loc 1 5162 30 view .LVU2151
 7345 00bc 0400A0E1 		mov	r0, r4
 7346 00c0 FEFFFFEB 		bl	uxListRemove
 7347              	.LVL722:
5163:../src/FreeRTOS/tasks.c ****                 }
 7348              		.loc 1 5163 21 is_stmt 1 view .LVU2152
5163:../src/FreeRTOS/tasks.c ****                 }
 7349              		.loc 1 5163 21 view .LVU2153
 7350 00c4 2C3095E5 		ldr	r3, [r5, #44]
 7351 00c8 002000E3 		movw	r2, #:lower16:.LANCHOR13
 7352 00cc 002040E3 		movt	r2, #:upper16:.LANCHOR13
 7353 00d0 002092E5 		ldr	r2, [r2]
 7354 00d4 020053E1 		cmp	r3, r2
5163:../src/FreeRTOS/tasks.c ****                 }
 7355              		.loc 1 5163 21 discriminator 1 view .LVU2154
 7356 00d8 00200083 		movwhi	r2, #:lower16:.LANCHOR13
 7357 00dc 00204083 		movthi	r2, #:upper16:.LANCHOR13
 7358 00e0 00308285 		strhi	r3, [r2]
 7359              	.L506:
5163:../src/FreeRTOS/tasks.c ****                 }
 7360              		.loc 1 5163 21 discriminator 3 view .LVU2155
5163:../src/FreeRTOS/tasks.c ****                 }
 7361              		.loc 1 5163 21 discriminator 3 view .LVU2156
 7362 00e4 000000E3 		movw	r0, #:lower16:.LANCHOR4
 7363 00e8 000040E3 		movt	r0, #:upper16:.LANCHOR4
 7364 00ec 033183E0 		add	r3, r3, r3, lsl #2
 7365 00f0 0410A0E1 		mov	r1, r4
 7366 00f4 030180E0 		add	r0, r0, r3, lsl #2
 7367 00f8 FEFFFFEB 		bl	vListInsertEnd
 7368              	.LVL723:
5163:../src/FreeRTOS/tasks.c ****                 }
 7369              		.loc 1 5163 51 discriminator 3 view .LVU2157
 7370              	.L507:
5172:../src/FreeRTOS/tasks.c ****                 {
 7371              		.loc 1 5172 17 view .LVU2158
5172:../src/FreeRTOS/tasks.c ****                 {
 7372              		.loc 1 5172 26 is_stmt 0 view .LVU2159
 7373 00fc 2C2095E5 		ldr	r2, [r5, #44]
5172:../src/FreeRTOS/tasks.c ****                 {
 7374              		.loc 1 5172 53 view .LVU2160
 7375 0100 003000E3 		movw	r3, #:lower16:.LANCHOR10
 7376 0104 003040E3 		movt	r3, #:upper16:.LANCHOR10
 7377 0108 003093E5 		ldr	r3, [r3]
 7378 010c 2C3093E5 		ldr	r3, [r3, #44]
5172:../src/FreeRTOS/tasks.c ****                 {
 7379              		.loc 1 5172 19 view .LVU2161
 7380 0110 030052E1 		cmp	r2, r3
 7381 0114 CEFFFF9A 		bls	.L503
5176:../src/FreeRTOS/tasks.c ****                     {
 7382              		.loc 1 5176 21 is_stmt 1 view .LVU2162
5176:../src/FreeRTOS/tasks.c ****                     {
 7383              		.loc 1 5176 23 is_stmt 0 view .LVU2163
 7384 0118 000057E3 		cmp	r7, #0
5178:../src/FreeRTOS/tasks.c ****                     }
 7385              		.loc 1 5178 25 is_stmt 1 view .LVU2164
5178:../src/FreeRTOS/tasks.c ****                     }
 7386              		.loc 1 5178 52 is_stmt 0 view .LVU2165
 7387 011c 0130A013 		movne	r3, #1
 7388 0120 00308715 		strne	r3, [r7]
 7389              	.L508:
5184:../src/FreeRTOS/tasks.c ****                 }
 7390              		.loc 1 5184 21 is_stmt 1 view .LVU2166
5184:../src/FreeRTOS/tasks.c ****                 }
 7391              		.loc 1 5184 35 is_stmt 0 view .LVU2167
 7392 0124 003000E3 		movw	r3, #:lower16:.LANCHOR17
 7393 0128 003040E3 		movt	r3, #:upper16:.LANCHOR17
 7394 012c 0120A0E3 		mov	r2, #1
 7395 0130 002083E5 		str	r2, [r3]
 7396 0134 C6FFFFEA 		b	.L503
 7397              	.L505:
5169:../src/FreeRTOS/tasks.c ****                 }
 7398              		.loc 1 5169 21 is_stmt 1 view .LVU2168
 7399 0138 181085E2 		add	r1, r5, #24
 7400 013c 000000E3 		movw	r0, #:lower16:.LANCHOR3
 7401 0140 000040E3 		movt	r0, #:upper16:.LANCHOR3
 7402 0144 FEFFFFEB 		bl	vListInsertEnd
 7403              	.LVL724:
 7404 0148 EBFFFFEA 		b	.L507
 7405              		.cfi_endproc
 7406              	.LFE66:
 7408              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 7409              		.align	2
 7410              		.global	xTaskGenericNotifyStateClear
 7411              		.syntax unified
 7412              		.arm
 7413              		.fpu neon
 7415              	xTaskGenericNotifyStateClear:
 7416              	.LVL725:
 7417              	.LFB67:
5202:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7418              		.loc 1 5202 5 view -0
 7419              		.cfi_startproc
 7420              		@ args = 0, pretend = 0, frame = 0
 7421              		@ frame_needed = 0, uses_anonymous_args = 0
5202:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7422              		.loc 1 5202 5 is_stmt 0 view .LVU2170
 7423 0000 70402DE9 		push	{r4, r5, r6, lr}
 7424              		.cfi_def_cfa_offset 16
 7425              		.cfi_offset 4, -16
 7426              		.cfi_offset 5, -12
 7427              		.cfi_offset 6, -8
 7428              		.cfi_offset 14, -4
 7429 0004 0040A0E1 		mov	r4, r0
5203:../src/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 7430              		.loc 1 5203 9 is_stmt 1 view .LVU2171
5204:../src/FreeRTOS/tasks.c **** 
 7431              		.loc 1 5204 9 view .LVU2172
5206:../src/FreeRTOS/tasks.c **** 
 7432              		.loc 1 5206 9 view .LVU2173
 7433 0008 005051E2 		subs	r5, r1, #0
 7434 000c 0B00001A 		bne	.L519
 7435              	.LVL726:
 7436              	.L514:
5206:../src/FreeRTOS/tasks.c **** 
 7437              		.loc 1 5206 79 discriminator 3 view .LVU2174
5210:../src/FreeRTOS/tasks.c **** 
 7438              		.loc 1 5210 9 discriminator 3 view .LVU2175
5210:../src/FreeRTOS/tasks.c **** 
 7439              		.loc 1 5210 17 is_stmt 0 discriminator 3 view .LVU2176
 7440 0010 000054E3 		cmp	r4, #0
 7441 0014 0E00000A 		beq	.L520
 7442              	.LVL727:
 7443              	.L515:
5212:../src/FreeRTOS/tasks.c ****         {
 7444              		.loc 1 5212 9 is_stmt 1 discriminator 4 view .LVU2177
 7445 0018 FEFFFFEB 		bl	vPortEnterCritical
 7446              	.LVL728:
5212:../src/FreeRTOS/tasks.c ****         {
 7447              		.loc 1 5212 29 discriminator 4 view .LVU2178
5214:../src/FreeRTOS/tasks.c ****             {
 7448              		.loc 1 5214 13 discriminator 4 view .LVU2179
5214:../src/FreeRTOS/tasks.c ****             {
 7449              		.loc 1 5214 37 is_stmt 0 discriminator 4 view .LVU2180
 7450 001c 053084E0 		add	r3, r4, r5
 7451 0020 7430D3E5 		ldrb	r3, [r3, #116]	@ zero_extendqisi2
 7452 0024 7330EFE6 		uxtb	r3, r3
5214:../src/FreeRTOS/tasks.c ****             {
 7453              		.loc 1 5214 15 discriminator 4 view .LVU2181
 7454 0028 020053E3 		cmp	r3, #2
 7455 002c 0C00000A 		beq	.L521
5221:../src/FreeRTOS/tasks.c ****             }
 7456              		.loc 1 5221 25 view .LVU2182
 7457 0030 0040A0E3 		mov	r4, #0
 7458              	.LVL729:
 7459              	.L516:
5224:../src/FreeRTOS/tasks.c **** 
 7460              		.loc 1 5224 9 is_stmt 1 view .LVU2183
 7461 0034 FEFFFFEB 		bl	vPortExitCritical
 7462              	.LVL730:
5224:../src/FreeRTOS/tasks.c **** 
 7463              		.loc 1 5224 28 view .LVU2184
5226:../src/FreeRTOS/tasks.c ****     }
 7464              		.loc 1 5226 9 view .LVU2185
5227:../src/FreeRTOS/tasks.c **** 
 7465              		.loc 1 5227 5 is_stmt 0 view .LVU2186
 7466 0038 0400A0E1 		mov	r0, r4
 7467 003c 7080BDE8 		pop	{r4, r5, r6, pc}
 7468              	.LVL731:
 7469              	.L519:
5206:../src/FreeRTOS/tasks.c **** 
 7470              		.loc 1 5206 9 is_stmt 1 discriminator 1 view .LVU2187
 7471 0040 561401E3 		movw	r1, #5206
 7472              	.LVL732:
5206:../src/FreeRTOS/tasks.c **** 
 7473              		.loc 1 5206 9 is_stmt 0 discriminator 1 view .LVU2188
 7474 0044 000000E3 		movw	r0, #:lower16:.LC0
 7475              	.LVL733:
5206:../src/FreeRTOS/tasks.c **** 
 7476              		.loc 1 5206 9 discriminator 1 view .LVU2189
 7477 0048 000040E3 		movt	r0, #:upper16:.LC0
 7478 004c FEFFFFEB 		bl	R_OS_AssertCalled
 7479              	.LVL734:
 7480 0050 EEFFFFEA 		b	.L514
 7481              	.L520:
5210:../src/FreeRTOS/tasks.c **** 
 7482              		.loc 1 5210 17 discriminator 1 view .LVU2190
 7483 0054 003000E3 		movw	r3, #:lower16:.LANCHOR10
 7484 0058 003040E3 		movt	r3, #:upper16:.LANCHOR10
 7485 005c 004093E5 		ldr	r4, [r3]
 7486              	.LVL735:
5210:../src/FreeRTOS/tasks.c **** 
 7487              		.loc 1 5210 17 discriminator 1 view .LVU2191
 7488 0060 ECFFFFEA 		b	.L515
 7489              	.LVL736:
 7490              	.L521:
5216:../src/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 7491              		.loc 1 5216 17 is_stmt 1 view .LVU2192
5216:../src/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 7492              		.loc 1 5216 56 is_stmt 0 view .LVU2193
 7493 0064 054084E0 		add	r4, r4, r5
 7494              	.LVL737:
5216:../src/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 7495              		.loc 1 5216 56 view .LVU2194
 7496 0068 0030A0E3 		mov	r3, #0
 7497 006c 7430C4E5 		strb	r3, [r4, #116]
5217:../src/FreeRTOS/tasks.c ****             }
 7498              		.loc 1 5217 17 is_stmt 1 view .LVU2195
 7499              	.LVL738:
5217:../src/FreeRTOS/tasks.c ****             }
 7500              		.loc 1 5217 25 is_stmt 0 view .LVU2196
 7501 0070 0140A0E3 		mov	r4, #1
 7502 0074 EEFFFFEA 		b	.L516
 7503              		.cfi_endproc
 7504              	.LFE67:
 7506              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 7507              		.align	2
 7508              		.global	ulTaskGenericNotifyValueClear
 7509              		.syntax unified
 7510              		.arm
 7511              		.fpu neon
 7513              	ulTaskGenericNotifyValueClear:
 7514              	.LVL739:
 7515              	.LFB68:
5237:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7516              		.loc 1 5237 5 is_stmt 1 view -0
 7517              		.cfi_startproc
 7518              		@ args = 0, pretend = 0, frame = 0
 7519              		@ frame_needed = 0, uses_anonymous_args = 0
5237:../src/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 7520              		.loc 1 5237 5 is_stmt 0 view .LVU2198
 7521 0000 70402DE9 		push	{r4, r5, r6, lr}
 7522              		.cfi_def_cfa_offset 16
 7523              		.cfi_offset 4, -16
 7524              		.cfi_offset 5, -12
 7525              		.cfi_offset 6, -8
 7526              		.cfi_offset 14, -4
 7527 0004 0140A0E1 		mov	r4, r1
 7528 0008 0260A0E1 		mov	r6, r2
5238:../src/FreeRTOS/tasks.c ****         uint32_t ulReturn;
 7529              		.loc 1 5238 9 is_stmt 1 view .LVU2199
5239:../src/FreeRTOS/tasks.c **** 
 7530              		.loc 1 5239 9 view .LVU2200
5243:../src/FreeRTOS/tasks.c **** 
 7531              		.loc 1 5243 9 view .LVU2201
5243:../src/FreeRTOS/tasks.c **** 
 7532              		.loc 1 5243 17 is_stmt 0 view .LVU2202
 7533 000c 005050E2 		subs	r5, r0, #0
 7534 0010 0800000A 		beq	.L525
 7535              	.LVL740:
 7536              	.L523:
5245:../src/FreeRTOS/tasks.c ****         {
 7537              		.loc 1 5245 9 is_stmt 1 discriminator 4 view .LVU2203
 7538 0014 FEFFFFEB 		bl	vPortEnterCritical
 7539              	.LVL741:
5245:../src/FreeRTOS/tasks.c ****         {
 7540              		.loc 1 5245 29 discriminator 4 view .LVU2204
5249:../src/FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 7541              		.loc 1 5249 13 discriminator 4 view .LVU2205
5249:../src/FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 7542              		.loc 1 5249 22 is_stmt 0 discriminator 4 view .LVU2206
 7543 0018 1C1084E2 		add	r1, r4, #28
 7544 001c 014195E7 		ldr	r4, [r5, r1, lsl #2]
 7545              	.LVL742:
5250:../src/FreeRTOS/tasks.c ****         }
 7546              		.loc 1 5250 13 is_stmt 1 discriminator 4 view .LVU2207
5250:../src/FreeRTOS/tasks.c ****         }
 7547              		.loc 1 5250 54 is_stmt 0 discriminator 4 view .LVU2208
 7548 0020 013195E7 		ldr	r3, [r5, r1, lsl #2]
 7549 0024 0620C3E1 		bic	r2, r3, r6
 7550 0028 012185E7 		str	r2, [r5, r1, lsl #2]
5252:../src/FreeRTOS/tasks.c **** 
 7551              		.loc 1 5252 9 is_stmt 1 discriminator 4 view .LVU2209
 7552 002c FEFFFFEB 		bl	vPortExitCritical
 7553              	.LVL743:
5252:../src/FreeRTOS/tasks.c **** 
 7554              		.loc 1 5252 28 discriminator 4 view .LVU2210
5254:../src/FreeRTOS/tasks.c ****     }
 7555              		.loc 1 5254 9 discriminator 4 view .LVU2211
5255:../src/FreeRTOS/tasks.c **** 
 7556              		.loc 1 5255 5 is_stmt 0 discriminator 4 view .LVU2212
 7557 0030 0400A0E1 		mov	r0, r4
 7558 0034 7080BDE8 		pop	{r4, r5, r6, pc}
 7559              	.LVL744:
 7560              	.L525:
5243:../src/FreeRTOS/tasks.c **** 
 7561              		.loc 1 5243 17 discriminator 1 view .LVU2213
 7562 0038 003000E3 		movw	r3, #:lower16:.LANCHOR10
 7563 003c 003040E3 		movt	r3, #:upper16:.LANCHOR10
 7564 0040 005093E5 		ldr	r5, [r3]
 7565              	.LVL745:
5243:../src/FreeRTOS/tasks.c **** 
 7566              		.loc 1 5243 17 discriminator 1 view .LVU2214
 7567 0044 F2FFFFEA 		b	.L523
 7568              		.cfi_endproc
 7569              	.LFE68:
 7571              		.global	uxTopUsedPriority
 7572              		.global	pxCurrentTCB
 7573              		.section	.bss.pxCurrentTCB,"aw",%nobits
 7574              		.align	2
 7575              		.set	.LANCHOR10,. + 0
 7578              	pxCurrentTCB:
 7579 0000 00000000 		.space	4
 7580              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 7581              		.align	2
 7582              		.set	.LANCHOR0,. + 0
 7585              	pxDelayedTaskList:
 7586 0000 00000000 		.space	4
 7587              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 7588              		.align	2
 7589              		.set	.LANCHOR8,. + 0
 7592              	pxOverflowDelayedTaskList:
 7593 0000 00000000 		.space	4
 7594              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 7595              		.align	2
 7596              		.set	.LANCHOR4,. + 0
 7599              	pxReadyTasksLists:
 7600 0000 00000000 		.space	400
 7600      00000000 
 7600      00000000 
 7600      00000000 
 7600      00000000 
 7601              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 7602              		.align	2
 7603              		.set	.LANCHOR23,. + 0
 7606              	ulTaskSwitchedInTime:
 7607 0000 00000000 		.space	4
 7608              		.section	.bss.ulTotalRunTime,"aw",%nobits
 7609              		.align	2
 7610              		.set	.LANCHOR22,. + 0
 7613              	ulTotalRunTime:
 7614 0000 00000000 		.space	4
 7615              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 7616              		.align	2
 7617              		.set	.LANCHOR9,. + 0
 7620              	uxCurrentNumberOfTasks:
 7621 0000 00000000 		.space	4
 7622              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 7623              		.align	2
 7624              		.set	.LANCHOR14,. + 0
 7627              	uxDeletedTasksWaitingCleanUp:
 7628 0000 00000000 		.space	4
 7629              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 7630              		.align	2
 7631              		.set	.LANCHOR16,. + 0
 7634              	uxSchedulerSuspended:
 7635 0000 00000000 		.space	4
 7636              		.section	.bss.uxTaskNumber,"aw",%nobits
 7637              		.align	2
 7638              		.set	.LANCHOR12,. + 0
 7641              	uxTaskNumber:
 7642 0000 00000000 		.space	4
 7643              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 7644              		.align	2
 7645              		.set	.LANCHOR13,. + 0
 7648              	uxTopReadyPriority:
 7649 0000 00000000 		.space	4
 7650              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 7651              		.align	2
 7652              		.set	.LANCHOR5,. + 0
 7655              	xDelayedTaskList1:
 7656 0000 00000000 		.space	20
 7656      00000000 
 7656      00000000 
 7656      00000000 
 7656      00000000 
 7657              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 7658              		.align	2
 7659              		.set	.LANCHOR6,. + 0
 7662              	xDelayedTaskList2:
 7663 0000 00000000 		.space	20
 7663      00000000 
 7663      00000000 
 7663      00000000 
 7663      00000000 
 7664              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 7665              		.align	2
 7666              		.set	.LANCHOR18,. + 0
 7669              	xIdleTaskHandle:
 7670 0000 00000000 		.space	4
 7671              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 7672              		.align	2
 7673              		.set	.LANCHOR1,. + 0
 7676              	xNextTaskUnblockTime:
 7677 0000 00000000 		.space	4
 7678              		.section	.bss.xNumOfOverflows,"aw",%nobits
 7679              		.align	2
 7680              		.set	.LANCHOR20,. + 0
 7683              	xNumOfOverflows:
 7684 0000 00000000 		.space	4
 7685              		.section	.bss.xPendedTicks,"aw",%nobits
 7686              		.align	2
 7687              		.set	.LANCHOR21,. + 0
 7690              	xPendedTicks:
 7691 0000 00000000 		.space	4
 7692              		.section	.bss.xPendingReadyList,"aw",%nobits
 7693              		.align	2
 7694              		.set	.LANCHOR3,. + 0
 7697              	xPendingReadyList:
 7698 0000 00000000 		.space	20
 7698      00000000 
 7698      00000000 
 7698      00000000 
 7698      00000000 
 7699              		.section	.bss.xSchedulerRunning,"aw",%nobits
 7700              		.align	2
 7701              		.set	.LANCHOR11,. + 0
 7704              	xSchedulerRunning:
 7705 0000 00000000 		.space	4
 7706              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 7707              		.align	2
 7708              		.set	.LANCHOR2,. + 0
 7711              	xSuspendedTaskList:
 7712 0000 00000000 		.space	20
 7712      00000000 
 7712      00000000 
 7712      00000000 
 7712      00000000 
 7713              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 7714              		.align	2
 7715              		.set	.LANCHOR7,. + 0
 7718              	xTasksWaitingTermination:
 7719 0000 00000000 		.space	20
 7719      00000000 
 7719      00000000 
 7719      00000000 
 7719      00000000 
 7720              		.section	.bss.xTickCount,"aw",%nobits
 7721              		.align	2
 7722              		.set	.LANCHOR15,. + 0
 7725              	xTickCount:
 7726 0000 00000000 		.space	4
 7727              		.section	.bss.xYieldPending,"aw",%nobits
 7728              		.align	2
 7729              		.set	.LANCHOR17,. + 0
 7732              	xYieldPending:
 7733 0000 00000000 		.space	4
 7734              		.section	.data.uxTopUsedPriority,"aw"
 7735              		.align	2
 7736              		.set	.LANCHOR19,. + 0
 7739              	uxTopUsedPriority:
 7740 0000 13000000 		.word	19
 7741              		.text
 7742              	.Letext0:
 7743              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 7744              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 7745              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 7746              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 7747              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 7748              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 7749              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 7750              		.file 9 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\in
 7751              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 7752              		.file 11 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\p
 7753              		.file 12 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 7754              		.file 13 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 7755              		.file 14 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\config_file
 7756              		.file 15 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 7757              		.file 16 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 7758              		.file 17 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 7759              		.file 18 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 7760              		.file 19 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:17     .text.prvTaskCheckFreeStackSpace:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:25     .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:68     .text.prvResetNextTaskUnblockTime:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:73     .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7582   .bss.pxDelayedTaskList:00000000 .LANCHOR0
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7673   .bss.xNextTaskUnblockTime:00000000 .LANCHOR1
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:114    .text.prvDeleteTCB:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:119    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:149    .rodata.prvTaskIsTaskSuspended.str1.4:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:150    .rodata.prvTaskIsTaskSuspended.str1.4:00000000 .LC0
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:153    .text.prvTaskIsTaskSuspended:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:158    .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7708   .bss.xSuspendedTaskList:00000000 .LANCHOR2
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7694   .bss.xPendingReadyList:00000000 .LANCHOR3
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:232    .text.prvInitialiseNewTask:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:237    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:420    .text.prvInitialiseTaskLists:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:425    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7596   .bss.pxReadyTasksLists:00000000 .LANCHOR4
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7652   .bss.xDelayedTaskList1:00000000 .LANCHOR5
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7659   .bss.xDelayedTaskList2:00000000 .LANCHOR6
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7715   .bss.xTasksWaitingTermination:00000000 .LANCHOR7
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7589   .bss.pxOverflowDelayedTaskList:00000000 .LANCHOR8
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:508    .text.prvAddNewTaskToReadyList:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:513    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7617   .bss.uxCurrentNumberOfTasks:00000000 .LANCHOR9
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7575   .bss.pxCurrentTCB:00000000 .LANCHOR10
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7701   .bss.xSchedulerRunning:00000000 .LANCHOR11
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7638   .bss.uxTaskNumber:00000000 .LANCHOR12
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7645   .bss.uxTopReadyPriority:00000000 .LANCHOR13
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:662    .text.prvCheckTasksWaitingTermination:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:667    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7624   .bss.uxDeletedTasksWaitingCleanUp:00000000 .LANCHOR14
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:732    .text.prvIdleTask:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:737    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:779    .text.prvAddCurrentTaskToDelayedList:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:784    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7722   .bss.xTickCount:00000000 .LANCHOR15
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:911    .text.prvWriteNameToBuffer:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:916    .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:967    .text.xTaskCreate:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:973    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1092   .text.vTaskDelete:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1098   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7631   .bss.uxSchedulerSuspended:00000000 .LANCHOR16
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1260   .text.eTaskGetState:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1266   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1436   .text.uxTaskPriorityGet:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1442   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1492   .text.uxTaskPriorityGetFromISR:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1498   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1550   .text.vTaskPrioritySet:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1556   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1786   .text.vTaskResume:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1792   .text.vTaskResume:00000000 vTaskResume
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1911   .text.xTaskResumeFromISR:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:1917   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7729   .bss.xYieldPending:00000000 .LANCHOR17
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2063   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2064   .rodata.vTaskStartScheduler.str1.4:00000000 .LC1
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2067   .text.vTaskStartScheduler:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2073   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7666   .bss.xIdleTaskHandle:00000000 .LANCHOR18
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7736   .data.uxTopUsedPriority:00000000 .LANCHOR19
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2181   .text.vTaskEndScheduler:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2187   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2215   .text.vTaskSuspendAll:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2221   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2242   .text.xTaskGetTickCount:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2248   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2271   .text.xTaskGetTickCountFromISR:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2277   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2307   .text.uxTaskGetNumberOfTasks:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2313   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2331   .text.pcTaskGetName:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2337   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2387   .text.xTaskIncrementTick:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2393   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7680   .bss.xNumOfOverflows:00000000 .LANCHOR20
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7687   .bss.xPendedTicks:00000000 .LANCHOR21
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2669   .text.xTaskResumeAll:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2675   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2905   .text.xTaskDelayUntil:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:2911   .text.xTaskDelayUntil:00000000 xTaskDelayUntil
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3106   .text.vTaskDelay:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3112   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3185   .text.xTaskCatchUpTicks:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3191   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3246   .text.xTaskAbortDelay:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3252   .text.xTaskAbortDelay:00000000 xTaskAbortDelay
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3396   .text.vTaskSwitchContext:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3402   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7610   .bss.ulTotalRunTime:00000000 .LANCHOR22
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7603   .bss.ulTaskSwitchedInTime:00000000 .LANCHOR23
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3626   .text.vTaskSuspend:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3632   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3833   .text.vTaskPlaceOnEventList:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3839   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3894   .text.vTaskPlaceOnUnorderedEventList:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3900   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3979   .text.vTaskPlaceOnEventListRestricted:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:3985   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4050   .text.xTaskRemoveFromEventList:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4056   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4177   .text.vTaskRemoveFromUnorderedEventList:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4183   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4302   .text.vTaskSetTimeOutState:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4308   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4363   .text.vTaskInternalSetTimeOutState:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4369   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4395   .text.xTaskCheckForTimeOut:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4401   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4576   .text.vTaskMissedYield:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4582   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4601   .text.uxTaskGetTaskNumber:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4607   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4642   .text.vTaskSetTaskNumber:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4648   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4672   .text.vTaskSetThreadLocalStoragePointer:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4678   .text.vTaskSetThreadLocalStoragePointer:00000000 vTaskSetThreadLocalStoragePointer
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4745   .text.pvTaskGetThreadLocalStoragePointer:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4751   .text.pvTaskGetThreadLocalStoragePointer:00000000 pvTaskGetThreadLocalStoragePointer
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4801   .text.vTaskGetInfo:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4807   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4957   .text.prvListTasksWithinSingleList:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:4962   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5079   .text.uxTaskGetSystemState:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5085   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5232   .text.uxTaskGetStackHighWaterMark:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5238   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5284   .text.xTaskGetCurrentTaskHandle:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5290   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5311   .text.xTaskGetSchedulerState:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5317   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5360   .text.xTaskPriorityInherit:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5366   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5517   .text.xTaskPriorityDisinherit:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5523   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5655   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5661   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5812   .rodata.vTaskList.str1.4:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5813   .rodata.vTaskList.str1.4:00000000 .LC2
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5816   .text.vTaskList:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5822   .text.vTaskList:00000000 vTaskList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5941   .text.vTaskList:000000bc $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:5951   .text.vTaskList:000000d0 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6001   .rodata.vTaskGetRunTimeStats.str1.4:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6002   .rodata.vTaskGetRunTimeStats.str1.4:00000000 .LC3
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6005   .rodata.vTaskGetRunTimeStats.str1.4:0000000c .LC4
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6008   .text.vTaskGetRunTimeStats:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6014   .text.vTaskGetRunTimeStats:00000000 vTaskGetRunTimeStats
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6175   .text.uxTaskResetEventItemValue:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6181   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6210   .text.pvTaskIncrementMutexHeldCount:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6216   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6252   .text.ulTaskGenericNotifyTake:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6258   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6414   .text.xTaskGenericNotifyWait:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6420   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6600   .text.xTaskGenericNotify:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6606   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6672   .text.xTaskGenericNotify:00000058 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6680   .text.xTaskGenericNotify:0000006c $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6888   .text.xTaskGenericNotifyFromISR:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6894   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6967   .text.xTaskGenericNotifyFromISR:00000060 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:6975   .text.xTaskGenericNotifyFromISR:00000074 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7211   .text.vTaskGenericNotifyGiveFromISR:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7217   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7409   .text.xTaskGenericNotifyStateClear:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7415   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7507   .text.ulTaskGenericNotifyValueClear:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7513   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7739   .data.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7578   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7574   .bss.pxCurrentTCB:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7581   .bss.pxDelayedTaskList:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7585   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7588   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7592   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7595   .bss.pxReadyTasksLists:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7599   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7602   .bss.ulTaskSwitchedInTime:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7606   .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7609   .bss.ulTotalRunTime:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7613   .bss.ulTotalRunTime:00000000 ulTotalRunTime
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7616   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7620   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7623   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7627   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7630   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7634   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7637   .bss.uxTaskNumber:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7641   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7644   .bss.uxTopReadyPriority:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7648   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7651   .bss.xDelayedTaskList1:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7655   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7658   .bss.xDelayedTaskList2:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7662   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7665   .bss.xIdleTaskHandle:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7669   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7672   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7676   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7679   .bss.xNumOfOverflows:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7683   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7686   .bss.xPendedTicks:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7690   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7693   .bss.xPendingReadyList:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7697   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7700   .bss.xSchedulerRunning:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7704   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7707   .bss.xSuspendedTaskList:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7711   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7714   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7718   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7721   .bss.xTickCount:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7725   .bss.xTickCount:00000000 xTickCount
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7728   .bss.xYieldPending:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7732   .bss.xYieldPending:00000000 xYieldPending
C:\Users\ryota\AppData\Local\Temp\ccyfwIom.s:7735   .data.uxTopUsedPriority:00000000 $d
                           .group:00000000 wm4.0.3d5c910ebb40df6df78b28e37cd67f3d
                           .group:00000000 wm4.ieeefp.h.77.3f06799abf5dd88bdddee084775a1223
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:00000000 wm4.stddef.h.39.cf3ebec0bc8c9e3d2f276a64e0fe5e7a
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.cdefs.h.49.6260d97adb8d27534cbdc0f868b8ea87
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.r_task_priority.h.26.416bb98a222bf391200df359bd0318d1
                           .group:00000000 wm4.FreeRTOSConfig.h.79.b5458a5c31689ea246b5d3a5f655ce5b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.math.h.13.97100c05caf9f40dd9f5a3cda48ccc01
                           .group:00000000 wm4.r_typedefs.h.38.e90d9de5300d9ae020e5db8c5af88b3e
                           .group:00000000 wm4.portmacro.h.32.440d21c040186908c7273660706c6bca
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.768974478c42e424045182d5a8740d87
                           .group:00000000 wm4.FreeRTOS.h.67.5b4462ac037a881bffd21a8fce4c91ce
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236
                           .group:00000000 wm4.task.h.47.5632d4e651ed85e40d7d5c5d13006d85
                           .group:00000000 wm4.timers.h.55.1df3af254715f59cef2c5320dd2873df
                           .group:00000000 wm4.stack_macros.h.28.21a93ce2cff7fdacae27dd8ec0e0c04c
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78

UNDEFINED SYMBOLS
vPortFree
R_OS_AssertCalled
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
strcpy
strlen
pvPortMalloc
vPortValidateInterruptPriority
ulPortSetInterruptMask
vPortClearInterruptMask
xTimerCreateTimerTask
vInitialiseRunTimeStats
xPortStartScheduler
vPortEndScheduler
ulGetRunTimeCounterValue
vApplicationStackOverflowHook
sprintf
__aeabi_uidiv
