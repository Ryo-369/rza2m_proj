   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"port.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  17              		.align	2
  18              		.global	pxPortInitialiseStack
  19              		.arch armv7-a
  20              		.arch_extension mp
  21              		.arch_extension sec
  22              		.syntax unified
  23              		.arm
  24              		.fpu neon
  26              	pxPortInitialiseStack:
  27              	.LVL0:
  28              	.LFB3:
  29              		.file 1 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c"
   1:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*
   2:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * FreeRTOS Kernel V10.0.0
   3:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  *
   5:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * the Software without restriction, including without limitation the rights to
   8:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * subject to the following conditions:
  11:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  *
  12:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * copies or substantial portions of the Software. If you wish to use our Amazon
  14:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * FreeRTOS name, please do so in a fair use way that does not cause confusion.
  15:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  *
  16:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  18:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  19:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  20:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  21:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  22:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  *
  23:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * http://www.FreeRTOS.org
  24:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * http://aws.amazon.com/freertos
  25:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  *
  26:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * 1 tab == 4 spaces!
  27:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  */
  28:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  29:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Standard includes. */
  30:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #include <stdlib.h>
  31:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  32:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Scheduler includes. */
  33:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #include "FreeRTOS.h"
  34:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #include "task.h"
  35:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #include "compiler_settings.h"
  36:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #include "r_intc_drv_api.h"
  37:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  38:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #ifndef configINTERRUPT_CONTROLLER_BASE_ADDRESS
  39:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#error configINTERRUPT_CONTROLLER_BASE_ADDRESS must be defined.  See http://www.freertos.org/Using
  40:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
  41:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  42:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #ifndef configINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET
  43:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#error configINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET must be defined.  See http://www.freertos.o
  44:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
  45:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  46:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #ifndef configUNIQUE_INTERRUPT_PRIORITIES
  47:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#error configUNIQUE_INTERRUPT_PRIORITIES must be defined.  See http://www.freertos.org/Using-FreeR
  48:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
  49:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  50:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #ifndef configSETUP_TICK_INTERRUPT
  51:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#error configSETUP_TICK_INTERRUPT() must be defined.  See http://www.freertos.org/Using-FreeRTOS-o
  52:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif /* configSETUP_TICK_INTERRUPT */
  53:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  54:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #ifndef configMAX_API_CALL_INTERRUPT_PRIORITY
  55:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#error configMAX_API_CALL_INTERRUPT_PRIORITY must be defined.  See http://www.freertos.org/Using-F
  56:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
  57:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  58:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #if configMAX_API_CALL_INTERRUPT_PRIORITY == 0
  59:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#error configMAX_API_CALL_INTERRUPT_PRIORITY must not be set to 0
  60:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
  61:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  62:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #if configMAX_API_CALL_INTERRUPT_PRIORITY > configUNIQUE_INTERRUPT_PRIORITIES
  63:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#error configMAX_API_CALL_INTERRUPT_PRIORITY must be less than or equal to configUNIQUE_INTERRUPT_
  64:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
  65:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  66:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
  67:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Check the configuration. */
  68:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#if( configMAX_PRIORITIES > 32 )
  69:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
  70:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#endif
  71:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
  72:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  73:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* In case security extensions are implemented. */
  74:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #if configMAX_API_CALL_INTERRUPT_PRIORITY <= ( configUNIQUE_INTERRUPT_PRIORITIES / 2 )
  75:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#error configMAX_API_CALL_INTERRUPT_PRIORITY must be greater than ( configUNIQUE_INTERRUPT_PRIORIT
  76:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
  77:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  78:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Some vendor specific files default configCLEAR_TICK_INTERRUPT() in
  79:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** portmacro.h. */
  80:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #ifndef configCLEAR_TICK_INTERRUPT
  81:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#define configCLEAR_TICK_INTERRUPT()
  82:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
  83:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  84:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* A critical section is exited when the critical section nesting count reaches
  85:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** this value. */
  86:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portNO_CRITICAL_NESTING			( ( uint32_t ) 0 )
  87:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  88:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* In all GICs 255 can be written to the priority mask register to unmask all
  89:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** (but the lowest) interrupt priority. */
  90:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portUNMASK_VALUE				( 0xFFUL )
  91:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  92:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Tasks are not created with a floating point context, but can be given a
  93:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** floating point context after they have been created.  A variable is stored as
  94:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** part of the tasks context that holds portNO_FLOATING_POINT_CONTEXT if the task
  95:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** does not have an FPU context, or any other value if the task does have an FPU
  96:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** context. */
  97:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portNO_FLOATING_POINT_CONTEXT	( ( StackType_t ) 0 )
  98:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
  99:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Constants required to setup the initial task context. */
 100:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portINITIAL_SPSR				( ( StackType_t ) 0x1f ) /* System mode, ARM mode, IRQ enabled FIQ enab
 101:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portTHUMB_MODE_BIT				( ( StackType_t ) 0x20 )
 102:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portINTERRUPT_ENABLE_BIT		( 0x80UL )
 103:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portTHUMB_MODE_ADDRESS			( 0x01UL )
 104:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 105:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Used by portASSERT_IF_INTERRUPT_PRIORITY_INVALID() when ensuring the binary
 106:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** point is zero. */
 107:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portBINARY_POINT_BITS			( ( uint8_t ) 0x03 )
 108:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 109:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Masks all bits in the APSR other than the mode bits. */
 110:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portAPSR_MODE_BITS_MASK			( 0x1F )
 111:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 112:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* The value of the mode bits in the APSR when the CPU is executing in user
 113:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** mode. */
 114:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portAPSR_USER_MODE				( 0x10 )
 115:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 116:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* The critical section macros only mask interrupts up to an application
 117:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** determined priority level.  Sometimes it is necessary to turn interrupt off in
 118:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** the CPU itself before modifying certain hardware registers. */
 119:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portCPU_IRQ_DISABLE()										\
 120:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	__asm volatile ( "CPSID i" ::: "memory" );						\
 121:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	__asm volatile ( "DSB" );										\
 122:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	__asm volatile ( "ISB" );
 123:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 124:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portCPU_IRQ_ENABLE()										\
 125:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	__asm volatile ( "CPSIE i" ::: "memory" );						\
 126:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	__asm volatile ( "DSB" );										\
 127:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	__asm volatile ( "ISB" );
 128:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 129:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 130:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Macro to unmask all interrupt priorities. */
 131:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portCLEAR_INTERRUPT_MASK()									\
 132:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {																	\
 133:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portCPU_IRQ_DISABLE();											\
 134:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portICCPMR_PRIORITY_MASK_REGISTER = portUNMASK_VALUE;			\
 135:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	__asm volatile (	"DSB		\n"								\
 136:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 						"ISB		\n" );							\
 137:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portCPU_IRQ_ENABLE();											\
 138:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 139:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 140:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portINTERRUPT_PRIORITY_REGISTER_OFFSET		0x400UL
 141:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portMAX_8_BIT_VALUE							( ( uint8_t ) 0xff )
 142:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portBIT_0_SET								( ( uint8_t ) 0x01 )
 143:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 144:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 145:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 146:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** debugger. */
 147:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #ifdef configTASK_RETURN_ADDRESS
 148:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 149:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #else
 150:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 151:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
 152:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 153:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* The space on the stack required to hold the FPU registers.  This is 32 64-bit
 154:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** registers, plus a 32-bit status register. */
 155:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #define portFPU_REGISTER_WORDS	( ( 32 * 2 ) + 1 )
 156:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 157:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Needed to overcome GCC inline ASM variable limitation */
 158:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** extern void set_fpscr(unsigned long);
 159:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** extern unsigned long get_apsr(void);
 160:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 161:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 162:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 163:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*
 164:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * Starts the first task executing.  This function is necessarily written in
 165:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * assembly code so is implemented in portASM.s.
 166:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  */
 167:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** extern void vPortRestoreTaskContext( void );
 168:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 169:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*
 170:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 171:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  */
 172:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** static void prvTaskExitError( void );
 173:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 174:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*
 175:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * If the application provides an implementation of vApplicationIRQHandler(),
 176:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * then it will get called directly without saving the FPU registers on
 177:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * interrupt entry, and this weak implementation of
 178:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * vApplicationFPUSafeIRQHandler() is just provided to remove linkage errors -
 179:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * it should never actually get called so its implementation contains a
 180:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * call to configASSERT() that will always fail.
 181:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  *
 182:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * If the application provides its own implementation of
 183:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * vApplicationFPUSafeIRQHandler() then the implementation of
 184:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * vApplicationIRQHandler() provided in portASM.S will save the FPU registers
 185:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * before calling it.
 186:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  *
 187:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * Therefore, if the application writer wants FPU registers to be saved on
 188:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * interrupt entry their IRQ handler must be called
 189:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * vApplicationFPUSafeIRQHandler(), and if the application writer does not want
 190:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * FPU registers to be saved on interrupt entry their IRQ handler must be
 191:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * called vApplicationIRQHandler().
 192:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  */
 193:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** void vApplicationFPUSafeIRQHandler( uint32_t ulICCIAR ) __attribute__((weak) );
 194:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 195:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 196:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 197:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* A variable is used to keep track of the critical section nesting.  This
 198:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** variable has to be stored as part of the task context and must be initialised to
 199:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** a non zero value to ensure interrupts don't inadvertently become unmasked before
 200:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** the scheduler starts.  As it is stored as part of the task context it will
 201:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** automatically be set to 0 when the first task is started. */
 202:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** volatile uint32_t ulCriticalNesting = 9999UL;
 203:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 204:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Saved as part of the task context.  If ulPortTaskHasFPUContext is non-zero then
 205:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** a floating point context must be saved and restored for the task. */
 206:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** volatile uint32_t ulPortTaskHasFPUContext = pdFALSE;
 207:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 208:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Set to 1 to pend a context switch from an ISR. */
 209:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** volatile uint32_t ulPortYieldRequired = pdFALSE;
 210:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 211:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Counts the interrupt nesting depth.  A context switch is only performed if
 212:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** if the nesting depth is 0. */
 213:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** volatile uint32_t ulPortInterruptNesting = 0UL;
 214:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 215:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /* Used in the asm file. */
 216:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** __attribute__(( used )) const uint32_t ulICCIAR = portICCIAR_INTERRUPT_ACKNOWLEDGE_REGISTER_ADDRESS
 217:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** __attribute__(( used )) const uint32_t ulICCEOIR = portICCEOIR_END_OF_INTERRUPT_REGISTER_ADDRESS;
 218:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** __attribute__(( used )) const uint32_t ulICCPMR	= portICCPMR_PRIORITY_MASK_REGISTER_ADDRESS;
 219:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** __attribute__(( used )) const uint32_t ulMaxAPIPriorityMask = ( configMAX_API_CALL_INTERRUPT_PRIORI
 220:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 221:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 222:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 223:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*
 224:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  * See header file for description.
 225:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****  */
 226:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 227:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
  30              		.loc 1 227 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 228:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Setup the initial stack of the task.  The stack is set exactly as
 229:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	expected by the portRESTORE_CONTEXT() macro.
 230:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 231:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	The fist real value on the stack is the status register, which is set for
 232:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	system mode, with interrupts enabled.  A few NULLs are added first to ensure
 233:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	GDB does not try decoding a non-existent return address. */
 234:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) NULL;
  35              		.loc 1 234 2 view .LVU1
  36              		.loc 1 234 16 is_stmt 0 view .LVU2
  37 0000 0030A0E3 		mov	r3, #0
  38 0004 003080E5 		str	r3, [r0]
 235:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
  39              		.loc 1 235 2 is_stmt 1 view .LVU3
  40              	.LVL1:
 236:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) NULL;
  41              		.loc 1 236 2 view .LVU4
  42              		.loc 1 236 16 is_stmt 0 view .LVU5
  43 0008 043000E5 		str	r3, [r0, #-4]
 237:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
  44              		.loc 1 237 2 is_stmt 1 view .LVU6
  45              	.LVL2:
 238:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) NULL;
  46              		.loc 1 238 2 view .LVU7
  47              		.loc 1 238 16 is_stmt 0 view .LVU8
  48 000c 083000E5 		str	r3, [r0, #-8]
 239:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
  49              		.loc 1 239 2 is_stmt 1 view .LVU9
  50              	.LVL3:
 240:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) portINITIAL_SPSR;
  51              		.loc 1 240 2 view .LVU10
  52              		.loc 1 240 16 is_stmt 0 view .LVU11
  53 0010 1F30A0E3 		mov	r3, #31
  54 0014 0C3000E5 		str	r3, [r0, #-12]
 241:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 242:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	if( ( ( uint32_t ) pxCode & portTHUMB_MODE_ADDRESS ) != 0x00UL )
  55              		.loc 1 242 2 is_stmt 1 view .LVU12
  56              		.loc 1 242 4 is_stmt 0 view .LVU13
  57 0018 010011E3 		tst	r1, #1
 243:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 244:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* The task will start in THUMB mode. */
 245:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		*pxTopOfStack |= portTHUMB_MODE_BIT;
  58              		.loc 1 245 3 is_stmt 1 view .LVU14
  59              		.loc 1 245 17 is_stmt 0 view .LVU15
  60 001c 3F30A013 		movne	r3, #63
  61 0020 0C300015 		strne	r3, [r0, #-12]
  62              	.L2:
 246:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 247:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 248:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
  63              		.loc 1 248 2 is_stmt 1 view .LVU16
  64              	.LVL4:
 249:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 250:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Next the return address, which in this case is the start of the task. */
 251:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) pxCode;
  65              		.loc 1 251 2 view .LVU17
  66              		.loc 1 251 16 is_stmt 0 view .LVU18
  67 0024 101000E5 		str	r1, [r0, #-16]
 252:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
  68              		.loc 1 252 2 is_stmt 1 view .LVU19
  69              	.LVL5:
 253:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 254:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Next all the registers other than the stack pointer. */
 255:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* R14 */
  70              		.loc 1 255 2 view .LVU20
  71              		.loc 1 255 18 is_stmt 0 view .LVU21
  72 0028 003000E3 		movw	r3, #:lower16:prvTaskExitError
  73 002c 003040E3 		movt	r3, #:upper16:prvTaskExitError
  74              		.loc 1 255 16 view .LVU22
  75 0030 143000E5 		str	r3, [r0, #-20]
 256:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
  76              		.loc 1 256 2 is_stmt 1 view .LVU23
  77              	.LVL6:
 257:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x12121212;	/* R12 */
  78              		.loc 1 257 2 view .LVU24
  79              		.loc 1 257 16 is_stmt 0 view .LVU25
  80 0034 123201E3 		movw	r3, #4626
  81 0038 1338DFE7 		bfi	r3, r3, #16, #16
  82 003c 183000E5 		str	r3, [r0, #-24]
 258:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
  83              		.loc 1 258 2 is_stmt 1 view .LVU26
  84              	.LVL7:
 259:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x11111111;	/* R11 */
  85              		.loc 1 259 2 view .LVU27
  86              		.loc 1 259 16 is_stmt 0 view .LVU28
  87 0040 113101E3 		movw	r3, #4369
  88 0044 1338DFE7 		bfi	r3, r3, #16, #16
  89 0048 1C3000E5 		str	r3, [r0, #-28]
 260:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
  90              		.loc 1 260 2 is_stmt 1 view .LVU29
  91              	.LVL8:
 261:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x10101010;	/* R10 */
  92              		.loc 1 261 2 view .LVU30
  93              		.loc 1 261 16 is_stmt 0 view .LVU31
  94 004c 103001E3 		movw	r3, #4112
  95 0050 1338DFE7 		bfi	r3, r3, #16, #16
  96 0054 203000E5 		str	r3, [r0, #-32]
 262:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
  97              		.loc 1 262 2 is_stmt 1 view .LVU32
  98              	.LVL9:
 263:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x09090909;	/* R9 */
  99              		.loc 1 263 2 view .LVU33
 100              		.loc 1 263 16 is_stmt 0 view .LVU34
 101 0058 093900E3 		movw	r3, #2313
 102 005c 1338DFE7 		bfi	r3, r3, #16, #16
 103 0060 243000E5 		str	r3, [r0, #-36]
 264:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 104              		.loc 1 264 2 is_stmt 1 view .LVU35
 105              	.LVL10:
 265:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x08080808;	/* R8 */
 106              		.loc 1 265 2 view .LVU36
 107              		.loc 1 265 16 is_stmt 0 view .LVU37
 108 0064 083800E3 		movw	r3, #2056
 109 0068 1338DFE7 		bfi	r3, r3, #16, #16
 110 006c 283000E5 		str	r3, [r0, #-40]
 266:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 111              		.loc 1 266 2 is_stmt 1 view .LVU38
 112              	.LVL11:
 267:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x07070707;	/* R7 */
 113              		.loc 1 267 2 view .LVU39
 114              		.loc 1 267 16 is_stmt 0 view .LVU40
 115 0070 073700E3 		movw	r3, #1799
 116 0074 1338DFE7 		bfi	r3, r3, #16, #16
 117 0078 2C3000E5 		str	r3, [r0, #-44]
 268:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 118              		.loc 1 268 2 is_stmt 1 view .LVU41
 119              	.LVL12:
 269:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x06060606;	/* R6 */
 120              		.loc 1 269 2 view .LVU42
 121              		.loc 1 269 16 is_stmt 0 view .LVU43
 122 007c 063600E3 		movw	r3, #1542
 123 0080 1338DFE7 		bfi	r3, r3, #16, #16
 124 0084 303000E5 		str	r3, [r0, #-48]
 270:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 125              		.loc 1 270 2 is_stmt 1 view .LVU44
 126              	.LVL13:
 271:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x05050505;	/* R5 */
 127              		.loc 1 271 2 view .LVU45
 128              		.loc 1 271 16 is_stmt 0 view .LVU46
 129 0088 053500E3 		movw	r3, #1285
 130 008c 1338DFE7 		bfi	r3, r3, #16, #16
 131 0090 343000E5 		str	r3, [r0, #-52]
 272:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 132              		.loc 1 272 2 is_stmt 1 view .LVU47
 133              	.LVL14:
 273:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x04040404;	/* R4 */
 134              		.loc 1 273 2 view .LVU48
 135              		.loc 1 273 16 is_stmt 0 view .LVU49
 136 0094 043400E3 		movw	r3, #1028
 137 0098 1338DFE7 		bfi	r3, r3, #16, #16
 138 009c 383000E5 		str	r3, [r0, #-56]
 274:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 139              		.loc 1 274 2 is_stmt 1 view .LVU50
 140              	.LVL15:
 275:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x03030303;	/* R3 */
 141              		.loc 1 275 2 view .LVU51
 142              		.loc 1 275 16 is_stmt 0 view .LVU52
 143 00a0 033300E3 		movw	r3, #771
 144 00a4 1338DFE7 		bfi	r3, r3, #16, #16
 145 00a8 3C3000E5 		str	r3, [r0, #-60]
 276:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 146              		.loc 1 276 2 is_stmt 1 view .LVU53
 147              	.LVL16:
 277:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x02020202;	/* R2 */
 148              		.loc 1 277 2 view .LVU54
 149              		.loc 1 277 16 is_stmt 0 view .LVU55
 150 00ac 023200E3 		movw	r3, #514
 151 00b0 1338DFE7 		bfi	r3, r3, #16, #16
 152 00b4 403000E5 		str	r3, [r0, #-64]
 278:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 153              		.loc 1 278 2 is_stmt 1 view .LVU56
 154              	.LVL17:
 279:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x01010101;	/* R1 */
 155              		.loc 1 279 2 view .LVU57
 156              		.loc 1 279 16 is_stmt 0 view .LVU58
 157 00b8 013100E3 		movw	r3, #257
 158 00bc 1338DFE7 		bfi	r3, r3, #16, #16
 159 00c0 443000E5 		str	r3, [r0, #-68]
 280:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 160              		.loc 1 280 2 is_stmt 1 view .LVU59
 161              	.LVL18:
 281:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 162              		.loc 1 281 2 view .LVU60
 163              		.loc 1 281 16 is_stmt 0 view .LVU61
 164 00c4 482000E5 		str	r2, [r0, #-72]
 282:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	pxTopOfStack--;
 165              		.loc 1 282 2 is_stmt 1 view .LVU62
 166              	.LVL19:
 283:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 284:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* The task will start with a critical nesting count of 0 as interrupts are
 285:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	enabled. */
 286:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	*pxTopOfStack = portNO_CRITICAL_NESTING;
 167              		.loc 1 286 2 view .LVU63
 168              		.loc 1 286 16 is_stmt 0 view .LVU64
 169 00c8 0030A0E3 		mov	r3, #0
 170 00cc 4C3000E5 		str	r3, [r0, #-76]
 287:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 288:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#if( configUSE_TASK_FPU_SUPPORT == 1 )
 289:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 290:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* The task will start without a floating point context.  A task that
 291:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		uses the floating point hardware must call vPortTaskUsesFPU() before
 292:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		executing any floating point instructions. */
 293:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		pxTopOfStack--;
 171              		.loc 1 293 3 is_stmt 1 view .LVU65
 172              	.LVL20:
 294:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		*pxTopOfStack = portNO_FLOATING_POINT_CONTEXT;
 173              		.loc 1 294 3 view .LVU66
 174              		.loc 1 294 17 is_stmt 0 view .LVU67
 175 00d0 503000E5 		str	r3, [r0, #-80]
 295:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 296:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#elif( configUSE_TASK_FPU_SUPPORT == 2 )
 297:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 298:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* The task will start with a floating point context.  Leave enough
 299:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		space for the registers - and ensure they are initialised to 0. */
 300:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		pxTopOfStack -= portFPU_REGISTER_WORDS;
 301:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		memset( pxTopOfStack, 0x00, portFPU_REGISTER_WORDS * sizeof( StackType_t ) );
 302:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 303:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		pxTopOfStack--;
 304:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		*pxTopOfStack = pdTRUE;
 305:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		ulPortTaskHasFPUContext = pdTRUE;
 306:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 307:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#else
 308:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 309:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		#error Invalid configUSE_TASK_FPU_SUPPORT setting - configUSE_TASK_FPU_SUPPORT must be set to 1, 
 310:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 311:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#endif
 312:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 313:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	return pxTopOfStack;
 176              		.loc 1 313 2 is_stmt 1 view .LVU68
 314:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 177              		.loc 1 314 1 is_stmt 0 view .LVU69
 178 00d4 500040E2 		sub	r0, r0, #80
 179              	.LVL21:
 180              		.loc 1 314 1 view .LVU70
 181 00d8 1EFF2FE1 		bx	lr
 182              		.cfi_endproc
 183              	.LFE3:
 185              		.section	.rodata.xPortStartScheduler.str1.4,"aMS",%progbits,1
 186              		.align	2
 187              	.LC0:
 188 0000 2E2E2F73 		.ascii	"../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c\000"
 188      72632F46 
 188      72656552 
 188      544F532F 
 188      706F7274 
 189              		.section	.text.xPortStartScheduler,"ax",%progbits
 190              		.align	2
 191              		.global	xPortStartScheduler
 192              		.syntax unified
 193              		.arm
 194              		.fpu neon
 196              	xPortStartScheduler:
 197              	.LFB5:
 315:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 316:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 317:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** static void prvTaskExitError( void )
 318:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 319:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 320:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 321:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	should instead call vTaskDelete( NULL ).
 322:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 323:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 324:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	defined, then stop here so application writers can catch the error. */
 325:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	configASSERT( ulPortInterruptNesting == ~0UL );
 326:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portDISABLE_INTERRUPTS();
 327:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	for( ;; );
 328:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 329:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 330:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 331:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** BaseType_t xPortStartScheduler( void )
 332:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 198              		.loc 1 332 1 is_stmt 1 view -0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 8
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202 0000 10402DE9 		push	{r4, lr}
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 4, -8
 205              		.cfi_offset 14, -4
 206 0004 08D04DE2 		sub	sp, sp, #8
 207              		.cfi_def_cfa_offset 16
 333:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** uint32_t ulAPSR;
 208              		.loc 1 333 1 view .LVU72
 209              	.LBB2:
 334:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 335:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#if( configASSERT_DEFINED == 1 )
 336:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 337:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		volatile uint32_t ulOriginalPriority;
 210              		.loc 1 337 3 view .LVU73
 338:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( configINTE
 211              		.loc 1 338 3 view .LVU74
 212              	.LVL22:
 339:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 213              		.loc 1 339 3 view .LVU75
 340:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 341:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Determine how many priority bits are implemented in the GIC.
 342:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 343:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 344:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 214              		.loc 1 344 3 view .LVU76
 215              		.loc 1 344 24 is_stmt 0 view .LVU77
 216 0008 053BA0E3 		mov	r3, #5120
 217 000c 22384EE3 		movt	r3, 59426
 218 0010 0020D3E5 		ldrb	r2, [r3]	@ zero_extendqisi2
 219 0014 7220EFE6 		uxtb	r2, r2
 220              		.loc 1 344 22 view .LVU78
 221 0018 04208DE5 		str	r2, [sp, #4]
 345:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 346:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Determine the number of priority bits available.  First write to
 347:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		all possible bits. */
 348:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 222              		.loc 1 348 3 is_stmt 1 view .LVU79
 223              		.loc 1 348 33 is_stmt 0 view .LVU80
 224 001c 0020E0E3 		mvn	r2, #0
 225 0020 0020C3E5 		strb	r2, [r3]
 349:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 350:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Read the value back to see how many bits stuck. */
 351:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 226              		.loc 1 351 3 is_stmt 1 view .LVU81
 227              		.loc 1 351 24 is_stmt 0 view .LVU82
 228 0024 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 229 0028 7330EFE6 		uxtb	r3, r3
 230              		.loc 1 351 22 view .LVU83
 231 002c 0330CDE5 		strb	r3, [sp, #3]
 352:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 353:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Shift to the least significant bits. */
 354:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		while( ( ucMaxPriorityValue & portBIT_0_SET ) != portBIT_0_SET )
 232              		.loc 1 354 3 is_stmt 1 view .LVU84
 233              	.L4:
 234              		.loc 1 354 8 view .LVU85
 235              		.loc 1 354 31 is_stmt 0 view .LVU86
 236 0030 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 237              		.loc 1 354 8 view .LVU87
 238 0034 010013E3 		tst	r3, #1
 355:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		{
 356:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			ucMaxPriorityValue >>= ( uint8_t ) 0x01;
 239              		.loc 1 356 4 is_stmt 1 view .LVU88
 240              		.loc 1 356 23 is_stmt 0 view .LVU89
 241 0038 0330DD05 		ldrbeq	r3, [sp, #3]	@ zero_extendqisi2
 242 003c A330A001 		lsreq	r3, r3, #1
 243 0040 0330CD05 		strbeq	r3, [sp, #3]
 244 0044 F9FFFF0A 		beq	.L4
 245              	.L11:
 357:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		}
 358:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 359:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Sanity check configUNIQUE_INTERRUPT_PRIORITIES matches the read
 360:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		value. */
 361:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		configASSERT( ucMaxPriorityValue == portLOWEST_INTERRUPT_PRIORITY );
 246              		.loc 1 361 3 is_stmt 1 view .LVU90
 247 0048 0330DDE5 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 248 004c 7330EFE6 		uxtb	r3, r3
 249 0050 1F0053E3 		cmp	r3, #31
 250 0054 1900001A 		bne	.L12
 251              	.L6:
 252              		.loc 1 361 70 discriminator 3 view .LVU91
 362:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 363:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 364:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		value. */
 365:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 253              		.loc 1 365 3 discriminator 3 view .LVU92
 254              		.loc 1 365 33 is_stmt 0 discriminator 3 view .LVU93
 255 0058 04309DE5 		ldr	r3, [sp, #4]
 256 005c 7330EFE6 		uxtb	r3, r3
 257 0060 052BA0E3 		mov	r2, #5120
 258 0064 22284EE3 		movt	r2, 59426
 259 0068 0030C2E5 		strb	r3, [r2]
 260              	.LBE2:
 366:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 367:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	#endif /* conifgASSERT_DEFINED */
 368:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 369:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 370:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Only continue if the CPU is not in User mode.  The CPU must be in a
 371:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	Privileged mode for the scheduler to start. */
 372:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #if 0
 373:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	__asm volatile ( "MRS %0, APSR" : "=r" ( ulAPSR ) );
 374:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #else
 375:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	ulAPSR = get_apsr();
 261              		.loc 1 375 2 is_stmt 1 discriminator 3 view .LVU94
 262              		.loc 1 375 11 is_stmt 0 discriminator 3 view .LVU95
 263 006c FEFFFFEB 		bl	get_apsr
 264              	.LVL23:
 376:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif
 377:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 378:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	ulAPSR &= portAPSR_MODE_BITS_MASK;
 265              		.loc 1 378 2 is_stmt 1 discriminator 3 view .LVU96
 266              		.loc 1 378 9 is_stmt 0 discriminator 3 view .LVU97
 267 0070 1F4000E2 		and	r4, r0, #31
 268              	.LVL24:
 379:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	configASSERT( ulAPSR != portAPSR_USER_MODE );
 269              		.loc 1 379 2 is_stmt 1 discriminator 3 view .LVU98
 270 0074 100054E3 		cmp	r4, #16
 271 0078 1500000A 		beq	.L13
 272              	.L7:
 273              		.loc 1 379 46 discriminator 3 view .LVU99
 380:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 381:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	if( ulAPSR != portAPSR_USER_MODE )
 274              		.loc 1 381 2 discriminator 3 view .LVU100
 275              		.loc 1 381 4 is_stmt 0 discriminator 3 view .LVU101
 276 007c 100054E3 		cmp	r4, #16
 277 0080 0B00000A 		beq	.L8
 382:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 383:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Only continue if the binary point value is set to its lowest possible
 384:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		setting.  See the comments in vPortValidateInterruptPriority() below for
 385:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		more information. */
 386:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		configASSERT( ( portICCBPR_BINARY_POINT_REGISTER & portBINARY_POINT_BITS ) <= portMAX_BINARY_POIN
 278              		.loc 1 386 3 is_stmt 1 view .LVU102
 279 0084 023AA0E3 		mov	r3, #8192
 280 0088 22384EE3 		movt	r3, 59426
 281 008c 083093E5 		ldr	r3, [r3, #8]
 282 0090 033003E2 		and	r3, r3, #3
 283 0094 020053E3 		cmp	r3, #2
 284 0098 1200008A 		bhi	.L14
 285              	.L9:
 286              		.loc 1 386 109 discriminator 3 view .LVU103
 387:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 388:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		if( ( portICCBPR_BINARY_POINT_REGISTER & portBINARY_POINT_BITS ) <= portMAX_BINARY_POINT_VALUE )
 287              		.loc 1 388 3 discriminator 3 view .LVU104
 288              		.loc 1 388 9 is_stmt 0 discriminator 3 view .LVU105
 289 009c 023AA0E3 		mov	r3, #8192
 290 00a0 22384EE3 		movt	r3, 59426
 291 00a4 083093E5 		ldr	r3, [r3, #8]
 292              		.loc 1 388 42 discriminator 3 view .LVU106
 293 00a8 033003E2 		and	r3, r3, #3
 294              		.loc 1 388 5 discriminator 3 view .LVU107
 295 00ac 020053E3 		cmp	r3, #2
 296 00b0 1100009A 		bls	.L15
 297              	.L8:
 389:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		{
 390:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			/* Interrupts are turned off in the CPU itself to ensure tick does
 391:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			not execute	while the scheduler is being started.  Interrupts are
 392:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			automatically turned back on in the CPU when the first task starts
 393:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			executing. */
 394:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			portCPU_IRQ_DISABLE();
 395:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 396:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			/* Start the timer that generates the tick ISR. */
 397:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			configSETUP_TICK_INTERRUPT();
 398:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 399:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			/* Start the first task executing. */
 400:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			vPortRestoreTaskContext();
 401:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		}
 402:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 403:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 404:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Will only get here if vTaskStartScheduler() was called with the CPU in
 405:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	a non-privileged mode or the binary point register was not set to its lowest
 406:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	possible value.  prvTaskExitError() is referenced to prevent a compiler
 407:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	warning about it being defined but not referenced in the case that the user
 408:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	defines their own exit address. */
 409:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	( void ) prvTaskExitError;
 298              		.loc 1 409 2 is_stmt 1 view .LVU108
 410:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	return 0;
 299              		.loc 1 410 2 view .LVU109
 411:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 300              		.loc 1 411 1 is_stmt 0 view .LVU110
 301 00b4 0000A0E3 		mov	r0, #0
 302 00b8 08D08DE2 		add	sp, sp, #8
 303              		.cfi_remember_state
 304              		.cfi_def_cfa_offset 8
 305              		@ sp needed
 306 00bc 1080BDE8 		pop	{r4, pc}
 307              	.LVL25:
 308              	.L12:
 309              		.cfi_restore_state
 310              	.LBB3:
 361:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 311              		.loc 1 361 3 is_stmt 1 discriminator 1 view .LVU111
 312 00c0 691100E3 		movw	r1, #361
 313 00c4 000000E3 		movw	r0, #:lower16:.LC0
 314 00c8 000040E3 		movt	r0, #:upper16:.LC0
 315 00cc FEFFFFEB 		bl	R_OS_AssertCalled
 316              	.LVL26:
 317 00d0 E0FFFFEA 		b	.L6
 318              	.LVL27:
 319              	.L13:
 361:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 320              		.loc 1 361 3 is_stmt 0 discriminator 1 view .LVU112
 321              	.LBE3:
 379:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 322              		.loc 1 379 2 is_stmt 1 discriminator 1 view .LVU113
 323 00d4 7B1100E3 		movw	r1, #379
 324 00d8 000000E3 		movw	r0, #:lower16:.LC0
 325 00dc 000040E3 		movt	r0, #:upper16:.LC0
 326 00e0 FEFFFFEB 		bl	R_OS_AssertCalled
 327              	.LVL28:
 328 00e4 E4FFFFEA 		b	.L7
 329              	.L14:
 386:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 330              		.loc 1 386 3 discriminator 1 view .LVU114
 331 00e8 821100E3 		movw	r1, #386
 332 00ec 000000E3 		movw	r0, #:lower16:.LC0
 333 00f0 000040E3 		movt	r0, #:upper16:.LC0
 334 00f4 FEFFFFEB 		bl	R_OS_AssertCalled
 335              	.LVL29:
 336 00f8 E7FFFFEA 		b	.L9
 337              	.L15:
 394:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 338              		.loc 1 394 4 view .LVU115
 339              		.syntax divided
 340              	@ 394 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 341 00fc 80000CF1 		CPSID i
 342              	@ 0 "" 2
 394:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 343              		.loc 1 394 4 view .LVU116
 344              	@ 394 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 345 0100 4FF07FF5 		DSB
 346              	@ 0 "" 2
 394:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 347              		.loc 1 394 4 view .LVU117
 348              	@ 394 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 349 0104 6FF07FF5 		ISB
 350              	@ 0 "" 2
 394:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 351              		.loc 1 394 25 view .LVU118
 397:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 352              		.loc 1 397 4 view .LVU119
 353              		.arm
 354              		.syntax unified
 355 0108 FEFFFFEB 		bl	vConfigureTickInterrupt
 356              	.LVL30:
 400:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		}
 357              		.loc 1 400 4 view .LVU120
 358 010c FEFFFFEB 		bl	vPortRestoreTaskContext
 359              	.LVL31:
 360 0110 E7FFFFEA 		b	.L8
 361              		.cfi_endproc
 362              	.LFE5:
 364              		.section	.text.vPortEndScheduler,"ax",%progbits
 365              		.align	2
 366              		.global	vPortEndScheduler
 367              		.syntax unified
 368              		.arm
 369              		.fpu neon
 371              	vPortEndScheduler:
 372              	.LFB6:
 412:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 413:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 414:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** void vPortEndScheduler( void )
 415:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 373              		.loc 1 415 1 view -0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 416:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 417:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	Artificially force an assert. */
 418:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	configASSERT( ulCriticalNesting == 1000UL );
 377              		.loc 1 418 2 view .LVU122
 378 0000 003000E3 		movw	r3, #:lower16:.LANCHOR0
 379 0004 003040E3 		movt	r3, #:upper16:.LANCHOR0
 380 0008 003093E5 		ldr	r3, [r3]
 381 000c FA0F53E3 		cmp	r3, #1000
 382 0010 1EFF2F01 		bxeq	lr
 415:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 383              		.loc 1 415 1 is_stmt 0 discriminator 1 view .LVU123
 384 0014 10402DE9 		push	{r4, lr}
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 4, -8
 387              		.cfi_offset 14, -4
 388              		.loc 1 418 2 is_stmt 1 discriminator 1 view .LVU124
 389 0018 A21100E3 		movw	r1, #418
 390 001c 000000E3 		movw	r0, #:lower16:.LC0
 391 0020 000040E3 		movt	r0, #:upper16:.LC0
 392 0024 FEFFFFEB 		bl	R_OS_AssertCalled
 393              	.LVL32:
 394              		.loc 1 418 45 discriminator 1 view .LVU125
 419:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 395              		.loc 1 419 1 is_stmt 0 discriminator 1 view .LVU126
 396 0028 1080BDE8 		pop	{r4, pc}
 397              		.cfi_endproc
 398              	.LFE6:
 400              		.section	.text.vPortExitCritical,"ax",%progbits
 401              		.align	2
 402              		.global	vPortExitCritical
 403              		.syntax unified
 404              		.arm
 405              		.fpu neon
 407              	vPortExitCritical:
 408              	.LFB8:
 420:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 421:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 422:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** void vPortEnterCritical( void )
 423:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 424:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Mask interrupts up to the max syscall interrupt priority. */
 425:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	ulPortSetInterruptMask();
 426:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 427:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Now interrupts are disabled ulCriticalNesting can be accessed
 428:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	directly.  Increment ulCriticalNesting to keep a count of how many times
 429:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portENTER_CRITICAL() has been called. */
 430:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	ulCriticalNesting++;
 431:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 432:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 433:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 434:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 435:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 436:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	assert function also uses a critical section. */
 437:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	if( ulCriticalNesting == 1 )
 438:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 439:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		configASSERT( ulPortInterruptNesting == 0 );
 440:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 441:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 442:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 443:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 444:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** void vPortExitCritical( void )
 445:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 409              		.loc 1 445 1 is_stmt 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 446:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
 414              		.loc 1 446 2 view .LVU128
 415              		.loc 1 446 24 is_stmt 0 view .LVU129
 416 0000 003000E3 		movw	r3, #:lower16:.LANCHOR0
 417 0004 003040E3 		movt	r3, #:upper16:.LANCHOR0
 418 0008 003093E5 		ldr	r3, [r3]
 419              		.loc 1 446 4 view .LVU130
 420 000c 000053E3 		cmp	r3, #0
 421 0010 1EFF2F01 		bxeq	lr
 447:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 448:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Decrement the nesting count as the critical section is being
 449:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		exited. */
 450:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		ulCriticalNesting--;
 422              		.loc 1 450 3 is_stmt 1 view .LVU131
 423              		.loc 1 450 20 is_stmt 0 view .LVU132
 424 0014 003000E3 		movw	r3, #:lower16:.LANCHOR0
 425 0018 003040E3 		movt	r3, #:upper16:.LANCHOR0
 426 001c 002093E5 		ldr	r2, [r3]
 427 0020 012042E2 		sub	r2, r2, #1
 428 0024 002083E5 		str	r2, [r3]
 451:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 452:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* If the nesting level has reached zero then all interrupt
 453:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		priorities must be re-enabled. */
 454:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
 429              		.loc 1 454 3 is_stmt 1 view .LVU133
 430              		.loc 1 454 25 is_stmt 0 view .LVU134
 431 0028 003093E5 		ldr	r3, [r3]
 432              		.loc 1 454 5 view .LVU135
 433 002c 000053E3 		cmp	r3, #0
 434 0030 1EFF2F11 		bxne	lr
 455:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		{
 456:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			/* Critical nesting has reached zero so all interrupt priorities
 457:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			should be unmasked. */
 458:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			portCLEAR_INTERRUPT_MASK();
 435              		.loc 1 458 4 is_stmt 1 view .LVU136
 436              		.syntax divided
 437              	@ 458 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 438 0034 80000CF1 		CPSID i
 439              	@ 0 "" 2
 440              		.loc 1 458 4 view .LVU137
 441              	@ 458 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 442 0038 4FF07FF5 		DSB
 443              	@ 0 "" 2
 444              		.loc 1 458 4 view .LVU138
 445              	@ 458 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 446 003c 6FF07FF5 		ISB
 447              	@ 0 "" 2
 448              		.loc 1 458 4 view .LVU139
 449              		.loc 1 458 4 view .LVU140
 450              		.arm
 451              		.syntax unified
 452 0040 023AA0E3 		mov	r3, #8192
 453 0044 22384EE3 		movt	r3, 59426
 454 0048 FF20A0E3 		mov	r2, #255
 455 004c 042083E5 		str	r2, [r3, #4]
 456              		.loc 1 458 4 view .LVU141
 457              		.syntax divided
 458              	@ 458 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 459 0050 4FF07FF5 		DSB		
 460 0054 6FF07FF5 	ISB		
 461              	
 462              	@ 0 "" 2
 463              		.loc 1 458 4 view .LVU142
 464              	@ 458 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 465 0058 800008F1 		CPSIE i
 466              	@ 0 "" 2
 467              		.loc 1 458 4 view .LVU143
 468              	@ 458 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 469 005c 4FF07FF5 		DSB
 470              	@ 0 "" 2
 471              		.loc 1 458 4 view .LVU144
 472              	@ 458 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 473 0060 6FF07FF5 		ISB
 474              	@ 0 "" 2
 475              		.loc 1 458 4 view .LVU145
 476              		.loc 1 458 30 view .LVU146
 459:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		}
 460:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 461:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 477              		.loc 1 461 1 is_stmt 0 view .LVU147
 478              		.arm
 479              		.syntax unified
 480 0064 1EFF2FE1 		bx	lr
 481              		.cfi_endproc
 482              	.LFE8:
 484              		.section	.text.FreeRTOS_Tick_Handler,"ax",%progbits
 485              		.align	2
 486              		.global	FreeRTOS_Tick_Handler
 487              		.syntax unified
 488              		.arm
 489              		.fpu neon
 491              	FreeRTOS_Tick_Handler:
 492              	.LFB9:
 462:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 463:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 464:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** void FreeRTOS_Tick_Handler( void )
 465:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 493              		.loc 1 465 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497 0000 10402DE9 		push	{r4, lr}
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 4, -8
 500              		.cfi_offset 14, -4
 466:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Set interrupt mask before altering scheduler structures.   The tick
 467:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	handler runs at the lowest priority, so interrupts cannot already be masked,
 468:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	so there is no need to save and restore the current mask value.  It is
 469:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	necessary to turn off interrupts in the CPU itself while the ICCPMR is being
 470:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	updated. */
 471:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portCPU_IRQ_DISABLE();
 501              		.loc 1 471 2 view .LVU149
 502              		.syntax divided
 503              	@ 471 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 504 0004 80000CF1 		CPSID i
 505              	@ 0 "" 2
 506              		.loc 1 471 2 view .LVU150
 507              	@ 471 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 508 0008 4FF07FF5 		DSB
 509              	@ 0 "" 2
 510              		.loc 1 471 2 view .LVU151
 511              	@ 471 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 512 000c 6FF07FF5 		ISB
 513              	@ 0 "" 2
 514              		.loc 1 471 23 view .LVU152
 472:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portICCPMR_PRIORITY_MASK_REGISTER = ( uint32_t ) ( configMAX_API_CALL_INTERRUPT_PRIORITY << portPR
 515              		.loc 1 472 2 view .LVU153
 516              		.loc 1 472 36 is_stmt 0 view .LVU154
 517              		.arm
 518              		.syntax unified
 519 0010 023AA0E3 		mov	r3, #8192
 520 0014 22384EE3 		movt	r3, 59426
 521 0018 C820A0E3 		mov	r2, #200
 522 001c 042083E5 		str	r2, [r3, #4]
 473:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	__asm volatile (	"dsb		\n"
 523              		.loc 1 473 2 is_stmt 1 view .LVU155
 524              		.syntax divided
 525              	@ 473 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 526 0020 4FF07FF5 		dsb		
 527 0024 6FF07FF5 	isb		
 528              	
 529              	@ 0 "" 2
 474:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 						"isb		\n" ::: "memory" );
 475:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portCPU_IRQ_ENABLE();
 530              		.loc 1 475 2 view .LVU156
 531              	@ 475 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 532 0028 800008F1 		CPSIE i
 533              	@ 0 "" 2
 534              		.loc 1 475 2 view .LVU157
 535              	@ 475 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 536 002c 4FF07FF5 		DSB
 537              	@ 0 "" 2
 538              		.loc 1 475 2 view .LVU158
 539              	@ 475 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 540 0030 6FF07FF5 		ISB
 541              	@ 0 "" 2
 542              		.loc 1 475 22 view .LVU159
 476:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 477:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Increment the RTOS tick. */
 478:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	if( xTaskIncrementTick() != pdFALSE )
 543              		.loc 1 478 2 view .LVU160
 544              		.loc 1 478 6 is_stmt 0 view .LVU161
 545              		.arm
 546              		.syntax unified
 547 0034 FEFFFFEB 		bl	xTaskIncrementTick
 548              	.LVL33:
 549              		.loc 1 478 4 view .LVU162
 550 0038 000050E3 		cmp	r0, #0
 479:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 480:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		ulPortYieldRequired = pdTRUE;
 551              		.loc 1 480 3 is_stmt 1 view .LVU163
 552              		.loc 1 480 23 is_stmt 0 view .LVU164
 553 003c 00300013 		movwne	r3, #:lower16:.LANCHOR1
 554 0040 00304013 		movtne	r3, #:upper16:.LANCHOR1
 555 0044 0120A013 		movne	r2, #1
 556 0048 00208315 		strne	r2, [r3]
 557              	.L25:
 481:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 482:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 483:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Ensure all interrupt priorities are active again. */
 484:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portCLEAR_INTERRUPT_MASK();
 558              		.loc 1 484 2 is_stmt 1 view .LVU165
 559              		.syntax divided
 560              	@ 484 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 561 004c 80000CF1 		CPSID i
 562              	@ 0 "" 2
 563              		.loc 1 484 2 view .LVU166
 564              	@ 484 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 565 0050 4FF07FF5 		DSB
 566              	@ 0 "" 2
 567              		.loc 1 484 2 view .LVU167
 568              	@ 484 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 569 0054 6FF07FF5 		ISB
 570              	@ 0 "" 2
 571              		.loc 1 484 2 view .LVU168
 572              		.loc 1 484 2 view .LVU169
 573              		.arm
 574              		.syntax unified
 575 0058 023AA0E3 		mov	r3, #8192
 576 005c 22384EE3 		movt	r3, 59426
 577 0060 FF20A0E3 		mov	r2, #255
 578 0064 042083E5 		str	r2, [r3, #4]
 579              		.loc 1 484 2 view .LVU170
 580              		.syntax divided
 581              	@ 484 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 582 0068 4FF07FF5 		DSB		
 583 006c 6FF07FF5 	ISB		
 584              	
 585              	@ 0 "" 2
 586              		.loc 1 484 2 view .LVU171
 587              	@ 484 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 588 0070 800008F1 		CPSIE i
 589              	@ 0 "" 2
 590              		.loc 1 484 2 view .LVU172
 591              	@ 484 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 592 0074 4FF07FF5 		DSB
 593              	@ 0 "" 2
 594              		.loc 1 484 2 view .LVU173
 595              	@ 484 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 596 0078 6FF07FF5 		ISB
 597              	@ 0 "" 2
 598              		.loc 1 484 2 view .LVU174
 599              		.loc 1 484 28 view .LVU175
 485:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	configCLEAR_TICK_INTERRUPT();
 600              		.loc 1 485 30 view .LVU176
 486:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 601              		.loc 1 486 1 is_stmt 0 view .LVU177
 602              		.arm
 603              		.syntax unified
 604 007c 1080BDE8 		pop	{r4, pc}
 605              		.cfi_endproc
 606              	.LFE9:
 608              		.section	.text.vPortTaskUsesFPU,"ax",%progbits
 609              		.align	2
 610              		.global	vPortTaskUsesFPU
 611              		.syntax unified
 612              		.arm
 613              		.fpu neon
 615              	vPortTaskUsesFPU:
 616              	.LFB10:
 487:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 488:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 489:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #if( configUSE_TASK_FPU_SUPPORT != 2 )
 490:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 491:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	void vPortTaskUsesFPU( void )
 492:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 617              		.loc 1 492 2 is_stmt 1 view -0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621 0000 10402DE9 		push	{r4, lr}
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 4, -8
 624              		.cfi_offset 14, -4
 493:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	uint32_t ulInitialFPSCR = 0;
 625              		.loc 1 493 2 view .LVU179
 626              	.LVL34:
 494:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 495:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* A task is registering the fact that it needs an FPU context.  Set the
 496:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		FPU flag (which is saved as part of the task context). */
 497:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		ulPortTaskHasFPUContext = pdTRUE;
 627              		.loc 1 497 3 view .LVU180
 628              		.loc 1 497 27 is_stmt 0 view .LVU181
 629 0004 003000E3 		movw	r3, #:lower16:.LANCHOR2
 630 0008 003040E3 		movt	r3, #:upper16:.LANCHOR2
 631 000c 0120A0E3 		mov	r2, #1
 632 0010 002083E5 		str	r2, [r3]
 498:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 499:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Initialise the floating point status register. */
 500:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		#if 0
 501:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			__asm volatile ( "FMXR 	FPSCR, %0" :: "r" (ulInitialFPSCR) );
 502:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		#else
 503:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 			set_fpscr(ulInitialFPSCR);
 633              		.loc 1 503 4 is_stmt 1 view .LVU182
 634 0014 0000A0E3 		mov	r0, #0
 635 0018 FEFFFFEB 		bl	set_fpscr
 636              	.LVL35:
 504:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		#endif
 505:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 506:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 637              		.loc 1 506 2 is_stmt 0 view .LVU183
 638 001c 1080BDE8 		pop	{r4, pc}
 639              		.cfi_endproc
 640              	.LFE10:
 642              		.section	.text.vPortClearInterruptMask,"ax",%progbits
 643              		.align	2
 644              		.global	vPortClearInterruptMask
 645              		.syntax unified
 646              		.arm
 647              		.fpu neon
 649              	vPortClearInterruptMask:
 650              	.LVL36:
 651              	.LFB11:
 507:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 508:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif /* configUSE_TASK_FPU_SUPPORT */
 509:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 510:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 511:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** void vPortClearInterruptMask( uint32_t ulNewMaskValue )
 512:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 652              		.loc 1 512 1 is_stmt 1 view -0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 513:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	if( ulNewMaskValue == pdFALSE )
 657              		.loc 1 513 2 view .LVU185
 658              		.loc 1 513 4 is_stmt 0 view .LVU186
 659 0000 000050E3 		cmp	r0, #0
 660 0004 1EFF2F11 		bxne	lr
 514:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 515:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		portCLEAR_INTERRUPT_MASK();
 661              		.loc 1 515 3 is_stmt 1 view .LVU187
 662              		.syntax divided
 663              	@ 515 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 664 0008 80000CF1 		CPSID i
 665              	@ 0 "" 2
 666              		.loc 1 515 3 view .LVU188
 667              	@ 515 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 668 000c 4FF07FF5 		DSB
 669              	@ 0 "" 2
 670              		.loc 1 515 3 view .LVU189
 671              	@ 515 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 672 0010 6FF07FF5 		ISB
 673              	@ 0 "" 2
 674              		.loc 1 515 3 view .LVU190
 675              		.loc 1 515 3 view .LVU191
 676              		.arm
 677              		.syntax unified
 678 0014 023AA0E3 		mov	r3, #8192
 679 0018 22384EE3 		movt	r3, 59426
 680 001c FF20A0E3 		mov	r2, #255
 681 0020 042083E5 		str	r2, [r3, #4]
 682              		.loc 1 515 3 view .LVU192
 683              		.syntax divided
 684              	@ 515 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 685 0024 4FF07FF5 		DSB		
 686 0028 6FF07FF5 	ISB		
 687              	
 688              	@ 0 "" 2
 689              		.loc 1 515 3 view .LVU193
 690              	@ 515 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 691 002c 800008F1 		CPSIE i
 692              	@ 0 "" 2
 693              		.loc 1 515 3 view .LVU194
 694              	@ 515 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 695 0030 4FF07FF5 		DSB
 696              	@ 0 "" 2
 697              		.loc 1 515 3 view .LVU195
 698              	@ 515 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 699 0034 6FF07FF5 		ISB
 700              	@ 0 "" 2
 701              		.loc 1 515 3 view .LVU196
 702              		.loc 1 515 29 view .LVU197
 516:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 517:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 703              		.loc 1 517 1 is_stmt 0 view .LVU198
 704              		.arm
 705              		.syntax unified
 706 0038 1EFF2FE1 		bx	lr
 707              		.cfi_endproc
 708              	.LFE11:
 710              		.section	.text.ulPortSetInterruptMask,"ax",%progbits
 711              		.align	2
 712              		.global	ulPortSetInterruptMask
 713              		.syntax unified
 714              		.arm
 715              		.fpu neon
 717              	ulPortSetInterruptMask:
 718              	.LFB12:
 518:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 519:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 520:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** uint32_t ulPortSetInterruptMask( void )
 521:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 719              		.loc 1 521 1 is_stmt 1 view -0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              		@ link register save eliminated.
 522:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** uint32_t ulReturn;
 724              		.loc 1 522 1 view .LVU200
 523:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 524:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Interrupt in the CPU must be turned off while the ICCPMR is being
 525:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	updated. */
 526:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portCPU_IRQ_DISABLE();
 725              		.loc 1 526 2 view .LVU201
 726              		.syntax divided
 727              	@ 526 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 728 0000 80000CF1 		CPSID i
 729              	@ 0 "" 2
 730              		.loc 1 526 2 view .LVU202
 731              	@ 526 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 732 0004 4FF07FF5 		DSB
 733              	@ 0 "" 2
 734              		.loc 1 526 2 view .LVU203
 735              	@ 526 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 736 0008 6FF07FF5 		ISB
 737              	@ 0 "" 2
 738              		.loc 1 526 23 view .LVU204
 527:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	if( portICCPMR_PRIORITY_MASK_REGISTER == ( uint32_t ) ( configMAX_API_CALL_INTERRUPT_PRIORITY << p
 739              		.loc 1 527 2 view .LVU205
 740              		.loc 1 527 6 is_stmt 0 view .LVU206
 741              		.arm
 742              		.syntax unified
 743 000c 023AA0E3 		mov	r3, #8192
 744 0010 22384EE3 		movt	r3, 59426
 745 0014 043093E5 		ldr	r3, [r3, #4]
 746              		.loc 1 527 4 view .LVU207
 747 0018 C80053E3 		cmp	r3, #200
 748 001c 0A00000A 		beq	.L33
 528:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 529:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Interrupts were already masked. */
 530:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		ulReturn = pdTRUE;
 531:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 532:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	else
 533:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 534:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		ulReturn = pdFALSE;
 749              		.loc 1 534 3 is_stmt 1 view .LVU208
 750              	.LVL37:
 535:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		portICCPMR_PRIORITY_MASK_REGISTER = ( uint32_t ) ( configMAX_API_CALL_INTERRUPT_PRIORITY << portP
 751              		.loc 1 535 3 view .LVU209
 752              		.loc 1 535 37 is_stmt 0 view .LVU210
 753 0020 023AA0E3 		mov	r3, #8192
 754 0024 22384EE3 		movt	r3, 59426
 755 0028 C820A0E3 		mov	r2, #200
 756 002c 042083E5 		str	r2, [r3, #4]
 536:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		__asm volatile (	"dsb		\n"
 757              		.loc 1 536 3 is_stmt 1 view .LVU211
 758              		.syntax divided
 759              	@ 536 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 760 0030 4FF07FF5 		dsb		
 761 0034 6FF07FF5 	isb		
 762              	
 763              	@ 0 "" 2
 534:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		portICCPMR_PRIORITY_MASK_REGISTER = ( uint32_t ) ( configMAX_API_CALL_INTERRUPT_PRIORITY << portP
 764              		.loc 1 534 12 is_stmt 0 view .LVU212
 765              		.arm
 766              		.syntax unified
 767 0038 0000A0E3 		mov	r0, #0
 768              	.LVL38:
 769              	.L32:
 537:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 							"isb		\n" ::: "memory" );
 538:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 539:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portCPU_IRQ_ENABLE();
 770              		.loc 1 539 2 is_stmt 1 view .LVU213
 771              		.syntax divided
 772              	@ 539 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 773 003c 800008F1 		CPSIE i
 774              	@ 0 "" 2
 775              		.loc 1 539 2 view .LVU214
 776              	@ 539 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 777 0040 4FF07FF5 		DSB
 778              	@ 0 "" 2
 779              		.loc 1 539 2 view .LVU215
 780              	@ 539 "../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c" 1
 781 0044 6FF07FF5 		ISB
 782              	@ 0 "" 2
 783              		.loc 1 539 22 view .LVU216
 540:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 541:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	return ulReturn;
 784              		.loc 1 541 2 view .LVU217
 542:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 785              		.loc 1 542 1 is_stmt 0 view .LVU218
 786              		.arm
 787              		.syntax unified
 788 0048 1EFF2FE1 		bx	lr
 789              	.LVL39:
 790              	.L33:
 530:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 791              		.loc 1 530 12 view .LVU219
 792 004c 0100A0E3 		mov	r0, #1
 793 0050 F9FFFFEA 		b	.L32
 794              		.cfi_endproc
 795              	.LFE12:
 797              		.section	.text.prvTaskExitError,"ax",%progbits
 798              		.align	2
 799              		.syntax unified
 800              		.arm
 801              		.fpu neon
 803              	prvTaskExitError:
 804              	.LFB4:
 318:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 805              		.loc 1 318 1 is_stmt 1 view -0
 806              		.cfi_startproc
 807              		@ Volatile: function does not return.
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810 0000 10402DE9 		push	{r4, lr}
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 4, -8
 813              		.cfi_offset 14, -4
 325:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portDISABLE_INTERRUPTS();
 814              		.loc 1 325 2 view .LVU221
 815 0004 003000E3 		movw	r3, #:lower16:.LANCHOR3
 816 0008 003040E3 		movt	r3, #:upper16:.LANCHOR3
 817 000c 003093E5 		ldr	r3, [r3]
 818 0010 010073E3 		cmn	r3, #1
 819 0014 0100001A 		bne	.L38
 820              	.L35:
 325:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portDISABLE_INTERRUPTS();
 821              		.loc 1 325 48 discriminator 3 view .LVU222
 326:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	for( ;; );
 822              		.loc 1 326 2 discriminator 3 view .LVU223
 823 0018 FEFFFFEB 		bl	ulPortSetInterruptMask
 824              	.LVL40:
 825              	.L36:
 327:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 826              		.loc 1 327 2 discriminator 1 view .LVU224
 327:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 827              		.loc 1 327 11 discriminator 1 view .LVU225
 327:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 828              		.loc 1 327 8 discriminator 1 view .LVU226
 829 001c FEFFFFEA 		b	.L36
 830              	.L38:
 325:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	portDISABLE_INTERRUPTS();
 831              		.loc 1 325 2 discriminator 1 view .LVU227
 832 0020 451100E3 		movw	r1, #325
 833 0024 000000E3 		movw	r0, #:lower16:.LC0
 834 0028 000040E3 		movt	r0, #:upper16:.LC0
 835 002c FEFFFFEB 		bl	R_OS_AssertCalled
 836              	.LVL41:
 837 0030 F8FFFFEA 		b	.L35
 838              		.cfi_endproc
 839              	.LFE4:
 841              		.section	.text.vPortEnterCritical,"ax",%progbits
 842              		.align	2
 843              		.global	vPortEnterCritical
 844              		.syntax unified
 845              		.arm
 846              		.fpu neon
 848              	vPortEnterCritical:
 849              	.LFB7:
 423:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	/* Mask interrupts up to the max syscall interrupt priority. */
 850              		.loc 1 423 1 view -0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854 0000 10402DE9 		push	{r4, lr}
 855              		.cfi_def_cfa_offset 8
 856              		.cfi_offset 4, -8
 857              		.cfi_offset 14, -4
 425:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 858              		.loc 1 425 2 view .LVU229
 859 0004 FEFFFFEB 		bl	ulPortSetInterruptMask
 860              	.LVL42:
 430:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 861              		.loc 1 430 2 view .LVU230
 430:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 862              		.loc 1 430 19 is_stmt 0 view .LVU231
 863 0008 003000E3 		movw	r3, #:lower16:.LANCHOR0
 864 000c 003040E3 		movt	r3, #:upper16:.LANCHOR0
 865 0010 002093E5 		ldr	r2, [r3]
 866 0014 012082E2 		add	r2, r2, #1
 867 0018 002083E5 		str	r2, [r3]
 437:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 868              		.loc 1 437 2 is_stmt 1 view .LVU232
 437:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 869              		.loc 1 437 24 is_stmt 0 view .LVU233
 870 001c 003093E5 		ldr	r3, [r3]
 437:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 871              		.loc 1 437 4 view .LVU234
 872 0020 010053E3 		cmp	r3, #1
 873 0024 1080BD18 		popne	{r4, pc}
 439:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 874              		.loc 1 439 3 is_stmt 1 view .LVU235
 875 0028 003000E3 		movw	r3, #:lower16:.LANCHOR3
 876 002c 003040E3 		movt	r3, #:upper16:.LANCHOR3
 877 0030 003093E5 		ldr	r3, [r3]
 878 0034 000053E3 		cmp	r3, #0
 879 0038 1080BD08 		popeq	{r4, pc}
 439:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 880              		.loc 1 439 3 discriminator 1 view .LVU236
 881 003c B71100E3 		movw	r1, #439
 882 0040 000000E3 		movw	r0, #:lower16:.LC0
 883 0044 000040E3 		movt	r0, #:upper16:.LC0
 884 0048 FEFFFFEB 		bl	R_OS_AssertCalled
 885              	.LVL43:
 439:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 886              		.loc 1 439 46 discriminator 1 view .LVU237
 441:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 887              		.loc 1 441 1 is_stmt 0 discriminator 1 view .LVU238
 888 004c 1080BDE8 		pop	{r4, pc}
 889              		.cfi_endproc
 890              	.LFE7:
 892              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 893              		.align	2
 894              		.global	vPortValidateInterruptPriority
 895              		.syntax unified
 896              		.arm
 897              		.fpu neon
 899              	vPortValidateInterruptPriority:
 900              	.LFB13:
 543:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 544:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 545:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #if( configASSERT_DEFINED == 1 )
 546:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 547:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	void vPortValidateInterruptPriority( void )
 548:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	{
 901              		.loc 1 548 2 is_stmt 1 view -0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905 0000 10402DE9 		push	{r4, lr}
 906              		.cfi_def_cfa_offset 8
 907              		.cfi_offset 4, -8
 908              		.cfi_offset 14, -4
 549:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* The following assertion will fail if a service routine (ISR) for
 550:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		an interrupt that has been assigned a priority above
 551:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 552:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		function.  ISR safe FreeRTOS API functions must *only* be called
 553:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		from interrupts that have been assigned a priority at or below
 554:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		configMAX_SYSCALL_INTERRUPT_PRIORITY.
 555:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 556:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		Numerically low interrupt priority numbers represent logically high
 557:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		interrupt priorities, therefore the priority of the interrupt must
 558:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		be set to a value equal to or numerically *higher* than
 559:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		configMAX_SYSCALL_INTERRUPT_PRIORITY.
 560:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 561:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		FreeRTOS maintains separate thread and ISR API functions to ensure
 562:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		interrupt entry is as fast and simple as possible. */
 563:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		configASSERT( portICCRPR_RUNNING_PRIORITY_REGISTER >= ( uint32_t ) ( configMAX_API_CALL_INTERRUPT
 909              		.loc 1 563 3 view .LVU240
 910 0004 023AA0E3 		mov	r3, #8192
 911 0008 22384EE3 		movt	r3, 59426
 912 000c 143093E5 		ldr	r3, [r3, #20]
 913 0010 C70053E3 		cmp	r3, #199
 914 0014 0A00009A 		bls	.L46
 915              	.L43:
 916              		.loc 1 563 135 discriminator 3 view .LVU241
 564:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 565:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		/* Priority grouping:  The interrupt controller (GIC) allows the bits
 566:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		that define each interrupt's priority to be split between bits that
 567:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 568:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 569:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 570:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		this is not the case (if some bits represent a sub-priority).
 571:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 572:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		The priority grouping is configured by the GIC's binary point register
 573:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		(ICCBPR).  Writting 0 to ICCBPR will ensure it is set to its lowest
 574:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		possible value (which may be above 0). */
 575:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 		configASSERT( ( portICCBPR_BINARY_POINT_REGISTER & portBINARY_POINT_BITS ) <= portMAX_BINARY_POIN
 917              		.loc 1 575 3 discriminator 3 view .LVU242
 918 0018 023AA0E3 		mov	r3, #8192
 919 001c 22384EE3 		movt	r3, 59426
 920 0020 083093E5 		ldr	r3, [r3, #8]
 921 0024 033003E2 		and	r3, r3, #3
 922 0028 020053E3 		cmp	r3, #2
 923 002c 1080BD98 		popls	{r4, pc}
 924              		.loc 1 575 3 discriminator 1 view .LVU243
 925 0030 3F1200E3 		movw	r1, #575
 926 0034 000000E3 		movw	r0, #:lower16:.LC0
 927 0038 000040E3 		movt	r0, #:upper16:.LC0
 928 003c FEFFFFEB 		bl	R_OS_AssertCalled
 929              	.LVL44:
 930              		.loc 1 575 109 discriminator 1 view .LVU244
 576:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	}
 931              		.loc 1 576 2 is_stmt 0 discriminator 1 view .LVU245
 932 0040 1080BDE8 		pop	{r4, pc}
 933              	.L46:
 563:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 934              		.loc 1 563 3 is_stmt 1 discriminator 1 view .LVU246
 935 0044 331200E3 		movw	r1, #563
 936 0048 000000E3 		movw	r0, #:lower16:.LC0
 937 004c 000040E3 		movt	r0, #:upper16:.LC0
 938 0050 FEFFFFEB 		bl	R_OS_AssertCalled
 939              	.LVL45:
 940 0054 EFFFFFEA 		b	.L43
 941              		.cfi_endproc
 942              	.LFE13:
 944              		.section	.text.vApplicationFPUSafeIRQHandler,"ax",%progbits
 945              		.align	2
 946              		.weak	vApplicationFPUSafeIRQHandler
 947              		.syntax unified
 948              		.arm
 949              		.fpu neon
 951              	vApplicationFPUSafeIRQHandler:
 952              	.LVL46:
 953              	.LFB14:
 577:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 578:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** #endif /* configASSERT_DEFINED */
 579:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** /*-----------------------------------------------------------*/
 580:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 581:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** void vApplicationFPUSafeIRQHandler( uint32_t ulICCIAR )
 582:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 954              		.loc 1 582 1 view -0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 958              		.loc 1 582 1 is_stmt 0 view .LVU248
 959 0000 10402DE9 		push	{r4, lr}
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 4, -8
 962              		.cfi_offset 14, -4
 583:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	( void ) ulICCIAR;
 963              		.loc 1 583 2 is_stmt 1 view .LVU249
 584:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	configASSERT( ( volatile void * ) NULL );
 964              		.loc 1 584 2 view .LVU250
 965              		.loc 1 584 2 view .LVU251
 966 0004 921FA0E3 		mov	r1, #584
 967 0008 000000E3 		movw	r0, #:lower16:.LC0
 968              	.LVL47:
 969              		.loc 1 584 2 is_stmt 0 view .LVU252
 970 000c 000040E3 		movt	r0, #:upper16:.LC0
 971 0010 FEFFFFEB 		bl	R_OS_AssertCalled
 972              	.LVL48:
 973              		.loc 1 584 42 is_stmt 1 view .LVU253
 585:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 974              		.loc 1 585 1 is_stmt 0 view .LVU254
 975 0014 1080BDE8 		pop	{r4, pc}
 976              		.cfi_endproc
 977              	.LFE14:
 979              		.section	.text.vApplicationIRQHandler,"ax",%progbits
 980              		.align	2
 981              		.global	vApplicationIRQHandler
 982              		.syntax unified
 983              		.arm
 984              		.fpu neon
 986              	vApplicationIRQHandler:
 987              	.LVL49:
 988              	.LFB15:
 586:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 587:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** void vApplicationIRQHandler( uint32_t ulICCIAR )
 588:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** {
 989              		.loc 1 588 1 is_stmt 1 view -0
 990              		.cfi_startproc
 991              		@ args = 0, pretend = 0, frame = 0
 992              		@ frame_needed = 0, uses_anonymous_args = 0
 993              		.loc 1 588 1 is_stmt 0 view .LVU256
 994 0000 10402DE9 		push	{r4, lr}
 995              		.cfi_def_cfa_offset 8
 996              		.cfi_offset 4, -8
 997              		.cfi_offset 14, -4
 998 0004 0040A0E1 		mov	r4, r0
 589:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** uint32_t ulInterruptID;
 999              		.loc 1 589 1 is_stmt 1 view .LVU257
 590:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 591:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****    /* Re-enable interrupts. */
 592:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****     __enable_irq();
 1000              		.loc 1 592 5 view .LVU258
 1001 0008 FEFFFFEB 		bl	__enable_irq
 1002              	.LVL50:
 593:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 594:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****    /* The ID of the interrupt can be obtained by bitwise anding the ICCIAR value
 595:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****    with 0x3FF. */
 596:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****    ulInterruptID = ulICCIAR & 0x3FFUL;
 1003              		.loc 1 596 4 view .LVU259
 1004              		.loc 1 596 18 is_stmt 0 view .LVU260
 1005 000c 5420E9E7 		ubfx	r2, r4, #0, #10
 1006              	.LVL51:
 597:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 
 598:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****    /* Properly handle spurious interrupts */
 599:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****    if(ulInterruptID < INTC_GIC_ID_TOTAL)
 1007              		.loc 1 599 4 is_stmt 1 view .LVU261
 1008              		.loc 1 599 6 is_stmt 0 view .LVU262
 1009 0010 020C14E3 		tst	r4, #512
 1010 0014 1080BD18 		popne	{r4, pc}
 600:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****    {
 601:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****       /* Call the function installed in the array of installed handler functions. */
 602:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** 	   g_intc_func_table[ ulInterruptID ]( 0 );
 1011              		.loc 1 602 5 is_stmt 1 view .LVU263
 1012              		.loc 1 602 22 is_stmt 0 view .LVU264
 1013 0018 003000E3 		movw	r3, #:lower16:g_intc_func_table
 1014 001c 003040E3 		movt	r3, #:upper16:g_intc_func_table
 1015 0020 023193E7 		ldr	r3, [r3, r2, lsl #2]
 1016              		.loc 1 602 5 view .LVU265
 1017 0024 0000A0E3 		mov	r0, #0
 1018 0028 33FF2FE1 		blx	r3
 1019              	.LVL52:
 603:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c ****    }
 604:../src/FreeRTOS/portable/GCC/ARM_CA9_RZA2M/port.c **** }
 1020              		.loc 1 604 1 view .LVU266
 1021 002c 1080BDE8 		pop	{r4, pc}
 1022              		.cfi_endproc
 1023              	.LFE15:
 1025              		.global	ulMaxAPIPriorityMask
 1026              		.global	ulICCPMR
 1027              		.global	ulICCEOIR
 1028              		.global	ulICCIAR
 1029              		.global	ulPortInterruptNesting
 1030              		.global	ulPortYieldRequired
 1031              		.global	ulPortTaskHasFPUContext
 1032              		.global	ulCriticalNesting
 1033              		.section	.bss.ulPortInterruptNesting,"aw",%nobits
 1034              		.align	2
 1035              		.set	.LANCHOR3,. + 0
 1038              	ulPortInterruptNesting:
 1039 0000 00000000 		.space	4
 1040              		.section	.bss.ulPortTaskHasFPUContext,"aw",%nobits
 1041              		.align	2
 1042              		.set	.LANCHOR2,. + 0
 1045              	ulPortTaskHasFPUContext:
 1046 0000 00000000 		.space	4
 1047              		.section	.bss.ulPortYieldRequired,"aw",%nobits
 1048              		.align	2
 1049              		.set	.LANCHOR1,. + 0
 1052              	ulPortYieldRequired:
 1053 0000 00000000 		.space	4
 1054              		.section	.data.ulCriticalNesting,"aw"
 1055              		.align	2
 1056              		.set	.LANCHOR0,. + 0
 1059              	ulCriticalNesting:
 1060 0000 0F270000 		.word	9999
 1061              		.section	.rodata.ulICCEOIR,"a"
 1062              		.align	2
 1065              	ulICCEOIR:
 1066 0000 102022E8 		.word	-400416752
 1067              		.section	.rodata.ulICCIAR,"a"
 1068              		.align	2
 1071              	ulICCIAR:
 1072 0000 0C2022E8 		.word	-400416756
 1073              		.section	.rodata.ulICCPMR,"a"
 1074              		.align	2
 1077              	ulICCPMR:
 1078 0000 042022E8 		.word	-400416764
 1079              		.section	.rodata.ulMaxAPIPriorityMask,"a"
 1080              		.align	2
 1083              	ulMaxAPIPriorityMask:
 1084 0000 C8000000 		.word	200
 1085              		.text
 1086              	.Letext0:
 1087              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 1088              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1089              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1090              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1091              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1092              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1093              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1094              		.file 9 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\in
 1095              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 1096              		.file 11 "C:/Users/ryota/e2_studio/workspace/rza2m_ssif_sample_freertos_gcc/generate/system/inc/r_
 1097              		.file 12 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\p
 1098              		.file 13 "C:/Users/ryota/e2_studio/workspace/rza2m_ssif_sample_freertos_gcc/generate/system/inc/dr
 1099              		.file 14 "C:/Users/ryota/e2_studio/workspace/rza2m_ssif_sample_freertos_gcc/generate/os_abstractio
 1100              		.file 15 "C:/Users/ryota/e2_studio/workspace/rza2m_ssif_sample_freertos_gcc/generate/drivers/r_int
 1101              		.file 16 "C:/Users/ryota/e2_studio/workspace/rza2m_ssif_sample_freertos_gcc/generate/compiler/inc/
 1102              		.file 17 "C:/Users/ryota/e2_studio/workspace/rza2m_ssif_sample_freertos_gcc/generate/os_abstractio
 1103              		.file 18 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 1104              		.file 19 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\config_file
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:17     .text.pxPortInitialiseStack:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:26     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:803    .text.prvTaskExitError:00000000 prvTaskExitError
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:186    .rodata.xPortStartScheduler.str1.4:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:187    .rodata.xPortStartScheduler.str1.4:00000000 .LC0
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:190    .text.xPortStartScheduler:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:196    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:365    .text.vPortEndScheduler:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:371    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1056   .data.ulCriticalNesting:00000000 .LANCHOR0
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:401    .text.vPortExitCritical:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:407    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:485    .text.FreeRTOS_Tick_Handler:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:491    .text.FreeRTOS_Tick_Handler:00000000 FreeRTOS_Tick_Handler
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1049   .bss.ulPortYieldRequired:00000000 .LANCHOR1
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:609    .text.vPortTaskUsesFPU:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:615    .text.vPortTaskUsesFPU:00000000 vPortTaskUsesFPU
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1042   .bss.ulPortTaskHasFPUContext:00000000 .LANCHOR2
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:643    .text.vPortClearInterruptMask:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:649    .text.vPortClearInterruptMask:00000000 vPortClearInterruptMask
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:711    .text.ulPortSetInterruptMask:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:717    .text.ulPortSetInterruptMask:00000000 ulPortSetInterruptMask
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:798    .text.prvTaskExitError:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1035   .bss.ulPortInterruptNesting:00000000 .LANCHOR3
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:842    .text.vPortEnterCritical:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:848    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:893    .text.vPortValidateInterruptPriority:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:899    .text.vPortValidateInterruptPriority:00000000 vPortValidateInterruptPriority
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:945    .text.vApplicationFPUSafeIRQHandler:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:951    .text.vApplicationFPUSafeIRQHandler:00000000 vApplicationFPUSafeIRQHandler
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:980    .text.vApplicationIRQHandler:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:986    .text.vApplicationIRQHandler:00000000 vApplicationIRQHandler
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1083   .rodata.ulMaxAPIPriorityMask:00000000 ulMaxAPIPriorityMask
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1077   .rodata.ulICCPMR:00000000 ulICCPMR
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1065   .rodata.ulICCEOIR:00000000 ulICCEOIR
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1071   .rodata.ulICCIAR:00000000 ulICCIAR
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1038   .bss.ulPortInterruptNesting:00000000 ulPortInterruptNesting
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1052   .bss.ulPortYieldRequired:00000000 ulPortYieldRequired
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1045   .bss.ulPortTaskHasFPUContext:00000000 ulPortTaskHasFPUContext
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1059   .data.ulCriticalNesting:00000000 ulCriticalNesting
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1034   .bss.ulPortInterruptNesting:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1041   .bss.ulPortTaskHasFPUContext:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1048   .bss.ulPortYieldRequired:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1055   .data.ulCriticalNesting:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1062   .rodata.ulICCEOIR:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1068   .rodata.ulICCIAR:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1074   .rodata.ulICCPMR:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccQzRi4o.s:1080   .rodata.ulMaxAPIPriorityMask:00000000 $d
                           .group:00000000 wm4.0.3d5c910ebb40df6df78b28e37cd67f3d
                           .group:00000000 wm4.ieeefp.h.77.3f06799abf5dd88bdddee084775a1223
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:00000000 wm4.stddef.h.39.cf3ebec0bc8c9e3d2f276a64e0fe5e7a
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.cdefs.h.49.6260d97adb8d27534cbdc0f868b8ea87
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.r_task_priority.h.26.416bb98a222bf391200df359bd0318d1
                           .group:00000000 wm4.FreeRTOSConfig.h.79.b5458a5c31689ea246b5d3a5f655ce5b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.math.h.13.97100c05caf9f40dd9f5a3cda48ccc01
                           .group:00000000 wm4.r_typedefs.h.38.e90d9de5300d9ae020e5db8c5af88b3e
                           .group:00000000 wm4.portmacro.h.32.440d21c040186908c7273660706c6bca
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.768974478c42e424045182d5a8740d87
                           .group:00000000 wm4.FreeRTOS.h.67.5b4462ac037a881bffd21a8fce4c91ce
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236
                           .group:00000000 wm4.task.h.47.5632d4e651ed85e40d7d5c5d13006d85
                           .group:00000000 wm4.r_startup_config.h.28.41a2bd9676f9208cac4163ceb2eb9006
                           .group:00000000 wm4.r_compiler_abstraction_api.h.26.bb21b39b83806cb7bb8838b6f825dcff
                           .group:00000000 wm4.driver.h.34.180df73e0731406f5e50150641059ede
                           .group:00000000 wm4.r_os_abstraction_api.h.60.0331cc3a2f471de784d61b225d2e9127
                           .group:00000000 wm4.compiler_settings.h.55.412db3588640e7e83336e77c1cd11233
                           .group:00000000 wm4.r_intc_lld_rza2m.h.35.148dee33e6a963828fdce2545668b517

UNDEFINED SYMBOLS
get_apsr
R_OS_AssertCalled
vConfigureTickInterrupt
vPortRestoreTaskContext
xTaskIncrementTick
set_fpscr
__enable_irq
g_intc_func_table
