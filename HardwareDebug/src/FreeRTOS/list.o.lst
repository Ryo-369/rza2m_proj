   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"list.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.vListInitialise,"ax",%progbits
  17              		.align	2
  18              		.global	vListInitialise
  19              		.arch armv7-a
  20              		.arch_extension mp
  21              		.arch_extension sec
  22              		.syntax unified
  23              		.arm
  24              		.fpu neon
  26              	vListInitialise:
  27              	.LVL0:
  28              	.LFB0:
  29              		.file 1 "../src/FreeRTOS/list.c"
   1:../src/FreeRTOS/list.c **** /*
   2:../src/FreeRTOS/list.c ****  * FreeRTOS Kernel V10.4.3 LTS Patch 1
   3:../src/FreeRTOS/list.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../src/FreeRTOS/list.c ****  *
   5:../src/FreeRTOS/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../src/FreeRTOS/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../src/FreeRTOS/list.c ****  * the Software without restriction, including without limitation the rights to
   8:../src/FreeRTOS/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../src/FreeRTOS/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../src/FreeRTOS/list.c ****  * subject to the following conditions:
  11:../src/FreeRTOS/list.c ****  *
  12:../src/FreeRTOS/list.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../src/FreeRTOS/list.c ****  * copies or substantial portions of the Software.
  14:../src/FreeRTOS/list.c ****  *
  15:../src/FreeRTOS/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../src/FreeRTOS/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../src/FreeRTOS/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../src/FreeRTOS/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../src/FreeRTOS/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../src/FreeRTOS/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../src/FreeRTOS/list.c ****  *
  22:../src/FreeRTOS/list.c ****  * https://www.FreeRTOS.org
  23:../src/FreeRTOS/list.c ****  * https://github.com/FreeRTOS
  24:../src/FreeRTOS/list.c ****  *
  25:../src/FreeRTOS/list.c ****  */
  26:../src/FreeRTOS/list.c **** 
  27:../src/FreeRTOS/list.c **** 
  28:../src/FreeRTOS/list.c **** #include <stdlib.h>
  29:../src/FreeRTOS/list.c **** 
  30:../src/FreeRTOS/list.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  31:../src/FreeRTOS/list.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:../src/FreeRTOS/list.c ****  * task.h is included from an application file. */
  33:../src/FreeRTOS/list.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:../src/FreeRTOS/list.c **** 
  35:../src/FreeRTOS/list.c **** #include "FreeRTOS.h"
  36:../src/FreeRTOS/list.c **** #include "list.h"
  37:../src/FreeRTOS/list.c **** 
  38:../src/FreeRTOS/list.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  39:../src/FreeRTOS/list.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
  40:../src/FreeRTOS/list.c ****  * defined for the header files above, but not in this file, in order to
  41:../src/FreeRTOS/list.c ****  * generate the correct privileged Vs unprivileged linkage and placement. */
  42:../src/FreeRTOS/list.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  43:../src/FreeRTOS/list.c **** 
  44:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------
  45:../src/FreeRTOS/list.c **** * PUBLIC LIST API documented in list.h
  46:../src/FreeRTOS/list.c **** *----------------------------------------------------------*/
  47:../src/FreeRTOS/list.c **** 
  48:../src/FreeRTOS/list.c **** void vListInitialise( List_t * const pxList )
  49:../src/FreeRTOS/list.c **** {
  30              		.loc 1 49 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  50:../src/FreeRTOS/list.c ****     /* The list structure contains a list item which is used to mark the
  51:../src/FreeRTOS/list.c ****      * end of the list.  To initialise the list the list end is inserted
  52:../src/FreeRTOS/list.c ****      * as the only list entry. */
  53:../src/FreeRTOS/list.c ****     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini li
  35              		.loc 1 53 5 view .LVU1
  36              		.loc 1 53 40 is_stmt 0 view .LVU2
  37 0000 083080E2 		add	r3, r0, #8
  38              		.loc 1 53 21 view .LVU3
  39 0004 043080E5 		str	r3, [r0, #4]
  54:../src/FreeRTOS/list.c **** 
  55:../src/FreeRTOS/list.c ****     /* The list end value is the highest possible value in the list to
  56:../src/FreeRTOS/list.c ****      * ensure it remains at the end of the list. */
  57:../src/FreeRTOS/list.c ****     pxList->xListEnd.xItemValue = portMAX_DELAY;
  40              		.loc 1 57 5 is_stmt 1 view .LVU4
  41              		.loc 1 57 33 is_stmt 0 view .LVU5
  42 0008 0020E0E3 		mvn	r2, #0
  43 000c 082080E5 		str	r2, [r0, #8]
  58:../src/FreeRTOS/list.c **** 
  59:../src/FreeRTOS/list.c ****     /* The list end next and previous pointers point to itself so we know
  60:../src/FreeRTOS/list.c ****      * when the list is empty. */
  61:../src/FreeRTOS/list.c ****     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087
  44              		.loc 1 61 5 is_stmt 1 view .LVU6
  45              		.loc 1 61 29 is_stmt 0 view .LVU7
  46 0010 0C3080E5 		str	r3, [r0, #12]
  62:../src/FreeRTOS/list.c ****     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087
  47              		.loc 1 62 5 is_stmt 1 view .LVU8
  48              		.loc 1 62 33 is_stmt 0 view .LVU9
  49 0014 103080E5 		str	r3, [r0, #16]
  63:../src/FreeRTOS/list.c **** 
  64:../src/FreeRTOS/list.c ****     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  50              		.loc 1 64 5 is_stmt 1 view .LVU10
  51              		.loc 1 64 29 is_stmt 0 view .LVU11
  52 0018 0030A0E3 		mov	r3, #0
  53 001c 003080E5 		str	r3, [r0]
  65:../src/FreeRTOS/list.c **** 
  66:../src/FreeRTOS/list.c ****     /* Write known values into the list if
  67:../src/FreeRTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  68:../src/FreeRTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  54              		.loc 1 68 51 is_stmt 1 view .LVU12
  69:../src/FreeRTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  55              		.loc 1 69 51 view .LVU13
  70:../src/FreeRTOS/list.c **** }
  56              		.loc 1 70 1 is_stmt 0 view .LVU14
  57 0020 1EFF2FE1 		bx	lr
  58              		.cfi_endproc
  59              	.LFE0:
  61              		.section	.text.vListInitialiseItem,"ax",%progbits
  62              		.align	2
  63              		.global	vListInitialiseItem
  64              		.syntax unified
  65              		.arm
  66              		.fpu neon
  68              	vListInitialiseItem:
  69              	.LVL1:
  70              	.LFB1:
  71:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  72:../src/FreeRTOS/list.c **** 
  73:../src/FreeRTOS/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  74:../src/FreeRTOS/list.c **** {
  71              		.loc 1 74 1 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  75:../src/FreeRTOS/list.c ****     /* Make sure the list item is not recorded as being on a list. */
  76:../src/FreeRTOS/list.c ****     pxItem->pxContainer = NULL;
  76              		.loc 1 76 5 view .LVU16
  77              		.loc 1 76 25 is_stmt 0 view .LVU17
  78 0000 0030A0E3 		mov	r3, #0
  79 0004 103080E5 		str	r3, [r0, #16]
  77:../src/FreeRTOS/list.c **** 
  78:../src/FreeRTOS/list.c ****     /* Write known values into the list item if
  79:../src/FreeRTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  80:../src/FreeRTOS/list.c ****     listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  80              		.loc 1 80 60 is_stmt 1 view .LVU18
  81:../src/FreeRTOS/list.c ****     listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  81              		.loc 1 81 61 view .LVU19
  82:../src/FreeRTOS/list.c **** }
  82              		.loc 1 82 1 is_stmt 0 view .LVU20
  83 0008 1EFF2FE1 		bx	lr
  84              		.cfi_endproc
  85              	.LFE1:
  87              		.section	.text.vListInsertEnd,"ax",%progbits
  88              		.align	2
  89              		.global	vListInsertEnd
  90              		.syntax unified
  91              		.arm
  92              		.fpu neon
  94              	vListInsertEnd:
  95              	.LVL2:
  96              	.LFB2:
  83:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
  84:../src/FreeRTOS/list.c **** 
  85:../src/FreeRTOS/list.c **** void vListInsertEnd( List_t * const pxList,
  86:../src/FreeRTOS/list.c ****                      ListItem_t * const pxNewListItem )
  87:../src/FreeRTOS/list.c **** {
  97              		.loc 1 87 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
  88:../src/FreeRTOS/list.c ****     ListItem_t * const pxIndex = pxList->pxIndex;
 102              		.loc 1 88 5 view .LVU22
 103              		.loc 1 88 24 is_stmt 0 view .LVU23
 104 0000 043090E5 		ldr	r3, [r0, #4]
 105              	.LVL3:
  89:../src/FreeRTOS/list.c **** 
  90:../src/FreeRTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
  91:../src/FreeRTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
  92:../src/FreeRTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
  93:../src/FreeRTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
 106              		.loc 1 93 38 is_stmt 1 view .LVU24
  94:../src/FreeRTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 107              		.loc 1 94 50 view .LVU25
  95:../src/FreeRTOS/list.c **** 
  96:../src/FreeRTOS/list.c ****     /* Insert a new list item into pxList, but rather than sort the list,
  97:../src/FreeRTOS/list.c ****      * makes the new list item the last item to be removed by a call to
  98:../src/FreeRTOS/list.c ****      * listGET_OWNER_OF_NEXT_ENTRY(). */
  99:../src/FreeRTOS/list.c ****     pxNewListItem->pxNext = pxIndex;
 108              		.loc 1 99 5 view .LVU26
 109              		.loc 1 99 27 is_stmt 0 view .LVU27
 110 0004 043081E5 		str	r3, [r1, #4]
 100:../src/FreeRTOS/list.c ****     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 111              		.loc 1 100 5 is_stmt 1 view .LVU28
 112              		.loc 1 100 40 is_stmt 0 view .LVU29
 113 0008 082093E5 		ldr	r2, [r3, #8]
 114              		.loc 1 100 31 view .LVU30
 115 000c 082081E5 		str	r2, [r1, #8]
 101:../src/FreeRTOS/list.c **** 
 102:../src/FreeRTOS/list.c ****     /* Only used during decision coverage testing. */
 103:../src/FreeRTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 116              		.loc 1 103 28 is_stmt 1 view .LVU31
 104:../src/FreeRTOS/list.c **** 
 105:../src/FreeRTOS/list.c ****     pxIndex->pxPrevious->pxNext = pxNewListItem;
 117              		.loc 1 105 5 view .LVU32
 118              		.loc 1 105 33 is_stmt 0 view .LVU33
 119 0010 041082E5 		str	r1, [r2, #4]
 106:../src/FreeRTOS/list.c ****     pxIndex->pxPrevious = pxNewListItem;
 120              		.loc 1 106 5 is_stmt 1 view .LVU34
 121              		.loc 1 106 25 is_stmt 0 view .LVU35
 122 0014 081083E5 		str	r1, [r3, #8]
 107:../src/FreeRTOS/list.c **** 
 108:../src/FreeRTOS/list.c ****     /* Remember which list the item is in. */
 109:../src/FreeRTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 123              		.loc 1 109 5 is_stmt 1 view .LVU36
 124              		.loc 1 109 32 is_stmt 0 view .LVU37
 125 0018 100081E5 		str	r0, [r1, #16]
 110:../src/FreeRTOS/list.c **** 
 111:../src/FreeRTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 126              		.loc 1 111 5 is_stmt 1 view .LVU38
 127              		.loc 1 111 13 is_stmt 0 view .LVU39
 128 001c 003090E5 		ldr	r3, [r0]
 129              	.LVL4:
 130              		.loc 1 111 32 view .LVU40
 131 0020 013083E2 		add	r3, r3, #1
 132 0024 003080E5 		str	r3, [r0]
 112:../src/FreeRTOS/list.c **** }
 133              		.loc 1 112 1 view .LVU41
 134 0028 1EFF2FE1 		bx	lr
 135              		.cfi_endproc
 136              	.LFE2:
 138              		.section	.text.vListInsert,"ax",%progbits
 139              		.align	2
 140              		.global	vListInsert
 141              		.syntax unified
 142              		.arm
 143              		.fpu neon
 145              	vListInsert:
 146              	.LVL5:
 147              	.LFB3:
 113:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 114:../src/FreeRTOS/list.c **** 
 115:../src/FreeRTOS/list.c **** void vListInsert( List_t * const pxList,
 116:../src/FreeRTOS/list.c ****                   ListItem_t * const pxNewListItem )
 117:../src/FreeRTOS/list.c **** {
 148              		.loc 1 117 1 is_stmt 1 view -0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		.loc 1 117 1 is_stmt 0 view .LVU43
 153 0000 04E02DE5 		str	lr, [sp, #-4]!
 154              		.cfi_def_cfa_offset 4
 155              		.cfi_offset 14, -4
 118:../src/FreeRTOS/list.c ****     ListItem_t * pxIterator;
 156              		.loc 1 118 5 is_stmt 1 view .LVU44
 119:../src/FreeRTOS/list.c ****     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 157              		.loc 1 119 5 view .LVU45
 158              		.loc 1 119 22 is_stmt 0 view .LVU46
 159 0004 00E091E5 		ldr	lr, [r1]
 160              	.LVL6:
 120:../src/FreeRTOS/list.c **** 
 121:../src/FreeRTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
 122:../src/FreeRTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
 123:../src/FreeRTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
 124:../src/FreeRTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
 161              		.loc 1 124 38 is_stmt 1 view .LVU47
 125:../src/FreeRTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 162              		.loc 1 125 50 view .LVU48
 126:../src/FreeRTOS/list.c **** 
 127:../src/FreeRTOS/list.c ****     /* Insert the new list item into the list, sorted in xItemValue order.
 128:../src/FreeRTOS/list.c ****      *
 129:../src/FreeRTOS/list.c ****      * If the list already contains a list item with the same item value then the
 130:../src/FreeRTOS/list.c ****      * new list item should be placed after it.  This ensures that TCBs which are
 131:../src/FreeRTOS/list.c ****      * stored in ready lists (all of which have the same xItemValue value) get a
 132:../src/FreeRTOS/list.c ****      * share of the CPU.  However, if the xItemValue is the same as the back marker
 133:../src/FreeRTOS/list.c ****      * the iteration loop below will not end.  Therefore the value is checked
 134:../src/FreeRTOS/list.c ****      * first, and the algorithm slightly modified if necessary. */
 135:../src/FreeRTOS/list.c ****     if( xValueOfInsertion == portMAX_DELAY )
 163              		.loc 1 135 5 view .LVU49
 164              		.loc 1 135 7 is_stmt 0 view .LVU50
 165 0008 01007EE3 		cmn	lr, #1
 166 000c 0F00000A 		beq	.L9
 136:../src/FreeRTOS/list.c ****     {
 137:../src/FreeRTOS/list.c ****         pxIterator = pxList->xListEnd.pxPrevious;
 138:../src/FreeRTOS/list.c ****     }
 139:../src/FreeRTOS/list.c ****     else
 140:../src/FreeRTOS/list.c ****     {
 141:../src/FreeRTOS/list.c ****         /* *** NOTE ***********************************************************
 142:../src/FreeRTOS/list.c ****         *  If you find your application is crashing here then likely causes are
 143:../src/FreeRTOS/list.c ****         *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
 144:../src/FreeRTOS/list.c ****         *  more tips, and ensure configASSERT() is defined!
 145:../src/FreeRTOS/list.c ****         *  https://www.FreeRTOS.org/a00110.html#configASSERT
 146:../src/FreeRTOS/list.c ****         *
 147:../src/FreeRTOS/list.c ****         *   1) Stack overflow -
 148:../src/FreeRTOS/list.c ****         *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
 149:../src/FreeRTOS/list.c ****         *   2) Incorrect interrupt priority assignment, especially on Cortex-M
 150:../src/FreeRTOS/list.c ****         *      parts where numerically high priority values denote low actual
 151:../src/FreeRTOS/list.c ****         *      interrupt priorities, which can seem counter intuitive.  See
 152:../src/FreeRTOS/list.c ****         *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
 153:../src/FreeRTOS/list.c ****         *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 154:../src/FreeRTOS/list.c ****         *      https://www.FreeRTOS.org/a00110.html
 155:../src/FreeRTOS/list.c ****         *   3) Calling an API function from within a critical section or when
 156:../src/FreeRTOS/list.c ****         *      the scheduler is suspended, or calling an API function that does
 157:../src/FreeRTOS/list.c ****         *      not end in "FromISR" from an interrupt.
 158:../src/FreeRTOS/list.c ****         *   4) Using a queue or semaphore before it has been initialised or
 159:../src/FreeRTOS/list.c ****         *      before the scheduler has been started (are interrupts firing
 160:../src/FreeRTOS/list.c ****         *      before vTaskStartScheduler() has been called?).
 161:../src/FreeRTOS/list.c ****         **********************************************************************/
 162:../src/FreeRTOS/list.c **** 
 163:../src/FreeRTOS/list.c ****         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <=
 167              		.loc 1 163 9 is_stmt 1 view .LVU51
 168              		.loc 1 163 25 is_stmt 0 view .LVU52
 169 0010 083080E2 		add	r3, r0, #8
 170              	.LVL7:
 171              	.L7:
 172              		.loc 1 163 67 is_stmt 1 discriminator 1 view .LVU53
 173 0014 03C0A0E1 		mov	ip, r3
 174              		.loc 1 163 77 is_stmt 0 discriminator 1 view .LVU54
 175 0018 043093E5 		ldr	r3, [r3, #4]
 176              	.LVL8:
 177              		.loc 1 163 85 discriminator 1 view .LVU55
 178 001c 002093E5 		ldr	r2, [r3]
 179              		.loc 1 163 9 discriminator 1 view .LVU56
 180 0020 0E0052E1 		cmp	r2, lr
 181 0024 FAFFFF9A 		bls	.L7
 182              	.L6:
 164:../src/FreeRTOS/list.c ****         {
 165:../src/FreeRTOS/list.c ****             /* There is nothing to do here, just iterating to the wanted
 166:../src/FreeRTOS/list.c ****              * insertion position. */
 167:../src/FreeRTOS/list.c ****         }
 168:../src/FreeRTOS/list.c ****     }
 169:../src/FreeRTOS/list.c **** 
 170:../src/FreeRTOS/list.c ****     pxNewListItem->pxNext = pxIterator->pxNext;
 183              		.loc 1 170 5 is_stmt 1 view .LVU57
 184              		.loc 1 170 39 is_stmt 0 view .LVU58
 185 0028 04309CE5 		ldr	r3, [ip, #4]
 186              		.loc 1 170 27 view .LVU59
 187 002c 043081E5 		str	r3, [r1, #4]
 171:../src/FreeRTOS/list.c ****     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 188              		.loc 1 171 5 is_stmt 1 view .LVU60
 189              		.loc 1 171 39 is_stmt 0 view .LVU61
 190 0030 081083E5 		str	r1, [r3, #8]
 172:../src/FreeRTOS/list.c ****     pxNewListItem->pxPrevious = pxIterator;
 191              		.loc 1 172 5 is_stmt 1 view .LVU62
 192              		.loc 1 172 31 is_stmt 0 view .LVU63
 193 0034 08C081E5 		str	ip, [r1, #8]
 173:../src/FreeRTOS/list.c ****     pxIterator->pxNext = pxNewListItem;
 194              		.loc 1 173 5 is_stmt 1 view .LVU64
 195              		.loc 1 173 24 is_stmt 0 view .LVU65
 196 0038 04108CE5 		str	r1, [ip, #4]
 174:../src/FreeRTOS/list.c **** 
 175:../src/FreeRTOS/list.c ****     /* Remember which list the item is in.  This allows fast removal of the
 176:../src/FreeRTOS/list.c ****      * item later. */
 177:../src/FreeRTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 197              		.loc 1 177 5 is_stmt 1 view .LVU66
 198              		.loc 1 177 32 is_stmt 0 view .LVU67
 199 003c 100081E5 		str	r0, [r1, #16]
 178:../src/FreeRTOS/list.c **** 
 179:../src/FreeRTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 200              		.loc 1 179 5 is_stmt 1 view .LVU68
 201              		.loc 1 179 13 is_stmt 0 view .LVU69
 202 0040 003090E5 		ldr	r3, [r0]
 203              		.loc 1 179 32 view .LVU70
 204 0044 013083E2 		add	r3, r3, #1
 205 0048 003080E5 		str	r3, [r0]
 180:../src/FreeRTOS/list.c **** }
 206              		.loc 1 180 1 view .LVU71
 207 004c 04F09DE4 		ldr	pc, [sp], #4
 208              	.LVL9:
 209              	.L9:
 137:../src/FreeRTOS/list.c ****     }
 210              		.loc 1 137 9 is_stmt 1 view .LVU72
 137:../src/FreeRTOS/list.c ****     }
 211              		.loc 1 137 20 is_stmt 0 view .LVU73
 212 0050 10C090E5 		ldr	ip, [r0, #16]
 213              	.LVL10:
 137:../src/FreeRTOS/list.c ****     }
 214              		.loc 1 137 20 view .LVU74
 215 0054 F3FFFFEA 		b	.L6
 216              		.cfi_endproc
 217              	.LFE3:
 219              		.section	.text.uxListRemove,"ax",%progbits
 220              		.align	2
 221              		.global	uxListRemove
 222              		.syntax unified
 223              		.arm
 224              		.fpu neon
 226              	uxListRemove:
 227              	.LVL11:
 228              	.LFB4:
 181:../src/FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 182:../src/FreeRTOS/list.c **** 
 183:../src/FreeRTOS/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 184:../src/FreeRTOS/list.c **** {
 229              		.loc 1 184 1 is_stmt 1 view -0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 185:../src/FreeRTOS/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 186:../src/FreeRTOS/list.c ****  * item. */
 187:../src/FreeRTOS/list.c ****     List_t * const pxList = pxItemToRemove->pxContainer;
 234              		.loc 1 187 5 view .LVU76
 235              		.loc 1 187 20 is_stmt 0 view .LVU77
 236 0000 103090E5 		ldr	r3, [r0, #16]
 237              	.LVL12:
 188:../src/FreeRTOS/list.c **** 
 189:../src/FreeRTOS/list.c ****     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 238              		.loc 1 189 5 is_stmt 1 view .LVU78
 239              		.loc 1 189 19 is_stmt 0 view .LVU79
 240 0004 041090E5 		ldr	r1, [r0, #4]
 241              		.loc 1 189 56 view .LVU80
 242 0008 082090E5 		ldr	r2, [r0, #8]
 243              		.loc 1 189 40 view .LVU81
 244 000c 082081E5 		str	r2, [r1, #8]
 190:../src/FreeRTOS/list.c ****     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 245              		.loc 1 190 5 is_stmt 1 view .LVU82
 246              		.loc 1 190 56 is_stmt 0 view .LVU83
 247 0010 041090E5 		ldr	r1, [r0, #4]
 248              		.loc 1 190 40 view .LVU84
 249 0014 041082E5 		str	r1, [r2, #4]
 191:../src/FreeRTOS/list.c **** 
 192:../src/FreeRTOS/list.c ****     /* Only used during decision coverage testing. */
 193:../src/FreeRTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 250              		.loc 1 193 28 is_stmt 1 view .LVU85
 194:../src/FreeRTOS/list.c **** 
 195:../src/FreeRTOS/list.c ****     /* Make sure the index is left pointing to a valid item. */
 196:../src/FreeRTOS/list.c ****     if( pxList->pxIndex == pxItemToRemove )
 251              		.loc 1 196 5 view .LVU86
 252              		.loc 1 196 15 is_stmt 0 view .LVU87
 253 0018 042093E5 		ldr	r2, [r3, #4]
 254              		.loc 1 196 7 view .LVU88
 255 001c 000052E1 		cmp	r2, r0
 256 0020 0600000A 		beq	.L12
 257              	.L11:
 197:../src/FreeRTOS/list.c ****     {
 198:../src/FreeRTOS/list.c ****         pxList->pxIndex = pxItemToRemove->pxPrevious;
 199:../src/FreeRTOS/list.c ****     }
 200:../src/FreeRTOS/list.c ****     else
 201:../src/FreeRTOS/list.c ****     {
 202:../src/FreeRTOS/list.c ****         mtCOVERAGE_TEST_MARKER();
 258              		.loc 1 202 33 is_stmt 1 view .LVU89
 203:../src/FreeRTOS/list.c ****     }
 204:../src/FreeRTOS/list.c **** 
 205:../src/FreeRTOS/list.c ****     pxItemToRemove->pxContainer = NULL;
 259              		.loc 1 205 5 view .LVU90
 260              		.loc 1 205 33 is_stmt 0 view .LVU91
 261 0024 0020A0E3 		mov	r2, #0
 262 0028 102080E5 		str	r2, [r0, #16]
 206:../src/FreeRTOS/list.c ****     ( pxList->uxNumberOfItems )--;
 263              		.loc 1 206 5 is_stmt 1 view .LVU92
 264              		.loc 1 206 13 is_stmt 0 view .LVU93
 265 002c 002093E5 		ldr	r2, [r3]
 266              		.loc 1 206 32 view .LVU94
 267 0030 012042E2 		sub	r2, r2, #1
 268 0034 002083E5 		str	r2, [r3]
 207:../src/FreeRTOS/list.c **** 
 208:../src/FreeRTOS/list.c ****     return pxList->uxNumberOfItems;
 269              		.loc 1 208 5 is_stmt 1 view .LVU95
 270              		.loc 1 208 18 is_stmt 0 view .LVU96
 271 0038 000093E5 		ldr	r0, [r3]
 272              	.LVL13:
 209:../src/FreeRTOS/list.c **** }
 273              		.loc 1 209 1 view .LVU97
 274 003c 1EFF2FE1 		bx	lr
 275              	.LVL14:
 276              	.L12:
 198:../src/FreeRTOS/list.c ****     }
 277              		.loc 1 198 9 is_stmt 1 view .LVU98
 198:../src/FreeRTOS/list.c ****     }
 278              		.loc 1 198 41 is_stmt 0 view .LVU99
 279 0040 082090E5 		ldr	r2, [r0, #8]
 198:../src/FreeRTOS/list.c ****     }
 280              		.loc 1 198 25 view .LVU100
 281 0044 042083E5 		str	r2, [r3, #4]
 282 0048 F5FFFFEA 		b	.L11
 283              		.cfi_endproc
 284              	.LFE4:
 286              		.text
 287              	.Letext0:
 288              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 289              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 290              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 291              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 292              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 293              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 294              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 295              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 296              		.file 10 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\p
 297              		.file 11 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:17     .text.vListInitialise:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:26     .text.vListInitialise:00000000 vListInitialise
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:62     .text.vListInitialiseItem:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:68     .text.vListInitialiseItem:00000000 vListInitialiseItem
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:88     .text.vListInsertEnd:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:94     .text.vListInsertEnd:00000000 vListInsertEnd
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:139    .text.vListInsert:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:145    .text.vListInsert:00000000 vListInsert
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:220    .text.uxListRemove:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cc65peFs.s:226    .text.uxListRemove:00000000 uxListRemove
                           .group:00000000 wm4.0.3d5c910ebb40df6df78b28e37cd67f3d
                           .group:00000000 wm4.ieeefp.h.77.3f06799abf5dd88bdddee084775a1223
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:00000000 wm4.stddef.h.39.cf3ebec0bc8c9e3d2f276a64e0fe5e7a
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.cdefs.h.49.6260d97adb8d27534cbdc0f868b8ea87
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.r_task_priority.h.26.416bb98a222bf391200df359bd0318d1
                           .group:00000000 wm4.FreeRTOSConfig.h.79.b5458a5c31689ea246b5d3a5f655ce5b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.math.h.13.97100c05caf9f40dd9f5a3cda48ccc01
                           .group:00000000 wm4.r_typedefs.h.38.e90d9de5300d9ae020e5db8c5af88b3e
                           .group:00000000 wm4.portmacro.h.32.440d21c040186908c7273660706c6bca
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.768974478c42e424045182d5a8740d87
                           .group:00000000 wm4.FreeRTOS.h.67.5b4462ac037a881bffd21a8fce4c91ce
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236

NO UNDEFINED SYMBOLS
