   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"event_groups.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvTestWaitCondition,"ax",%progbits
  17              		.align	2
  18              		.arch armv7-a
  19              		.arch_extension mp
  20              		.arch_extension sec
  21              		.syntax unified
  22              		.arm
  23              		.fpu neon
  25              	prvTestWaitCondition:
  26              	.LVL0:
  27              	.LFB10:
  28              		.file 1 "../src/FreeRTOS/event_groups.c"
   1:../src/FreeRTOS/event_groups.c **** /*
   2:../src/FreeRTOS/event_groups.c ****  * FreeRTOS Kernel V10.4.3 LTS Patch 1
   3:../src/FreeRTOS/event_groups.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../src/FreeRTOS/event_groups.c ****  *
   5:../src/FreeRTOS/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../src/FreeRTOS/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../src/FreeRTOS/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:../src/FreeRTOS/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../src/FreeRTOS/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../src/FreeRTOS/event_groups.c ****  * subject to the following conditions:
  11:../src/FreeRTOS/event_groups.c ****  *
  12:../src/FreeRTOS/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../src/FreeRTOS/event_groups.c ****  * copies or substantial portions of the Software.
  14:../src/FreeRTOS/event_groups.c ****  *
  15:../src/FreeRTOS/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../src/FreeRTOS/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../src/FreeRTOS/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../src/FreeRTOS/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../src/FreeRTOS/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../src/FreeRTOS/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../src/FreeRTOS/event_groups.c ****  *
  22:../src/FreeRTOS/event_groups.c ****  * https://www.FreeRTOS.org
  23:../src/FreeRTOS/event_groups.c ****  * https://github.com/FreeRTOS
  24:../src/FreeRTOS/event_groups.c ****  *
  25:../src/FreeRTOS/event_groups.c ****  */
  26:../src/FreeRTOS/event_groups.c **** 
  27:../src/FreeRTOS/event_groups.c **** /* Standard includes. */
  28:../src/FreeRTOS/event_groups.c **** #include <stdlib.h>
  29:../src/FreeRTOS/event_groups.c **** 
  30:../src/FreeRTOS/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  31:../src/FreeRTOS/event_groups.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:../src/FreeRTOS/event_groups.c ****  * task.h is included from an application file. */
  33:../src/FreeRTOS/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:../src/FreeRTOS/event_groups.c **** 
  35:../src/FreeRTOS/event_groups.c **** /* FreeRTOS includes. */
  36:../src/FreeRTOS/event_groups.c **** #include "FreeRTOS.h"
  37:../src/FreeRTOS/event_groups.c **** #include "task.h"
  38:../src/FreeRTOS/event_groups.c **** #include "timers.h"
  39:../src/FreeRTOS/event_groups.c **** #include "event_groups.h"
  40:../src/FreeRTOS/event_groups.c **** 
  41:../src/FreeRTOS/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  42:../src/FreeRTOS/event_groups.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  43:../src/FreeRTOS/event_groups.c ****  * for the header files above, but not in this file, in order to generate the
  44:../src/FreeRTOS/event_groups.c ****  * correct privileged Vs unprivileged linkage and placement. */
  45:../src/FreeRTOS/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  46:../src/FreeRTOS/event_groups.c **** 
  47:../src/FreeRTOS/event_groups.c **** /* The following bit fields convey control information in a task's event list
  48:../src/FreeRTOS/event_groups.c ****  * item value.  It is important they don't clash with the
  49:../src/FreeRTOS/event_groups.c ****  * taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  50:../src/FreeRTOS/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  51:../src/FreeRTOS/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x0100U
  52:../src/FreeRTOS/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x0200U
  53:../src/FreeRTOS/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x0400U
  54:../src/FreeRTOS/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff00U
  55:../src/FreeRTOS/event_groups.c **** #else
  56:../src/FreeRTOS/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x01000000UL
  57:../src/FreeRTOS/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x02000000UL
  58:../src/FreeRTOS/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x04000000UL
  59:../src/FreeRTOS/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff000000UL
  60:../src/FreeRTOS/event_groups.c **** #endif
  61:../src/FreeRTOS/event_groups.c **** 
  62:../src/FreeRTOS/event_groups.c **** typedef struct EventGroupDef_t
  63:../src/FreeRTOS/event_groups.c **** {
  64:../src/FreeRTOS/event_groups.c ****     EventBits_t uxEventBits;
  65:../src/FreeRTOS/event_groups.c ****     List_t xTasksWaitingForBits; /*< List of tasks waiting for a bit to be set. */
  66:../src/FreeRTOS/event_groups.c **** 
  67:../src/FreeRTOS/event_groups.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
  68:../src/FreeRTOS/event_groups.c ****         UBaseType_t uxEventGroupNumber;
  69:../src/FreeRTOS/event_groups.c ****     #endif
  70:../src/FreeRTOS/event_groups.c **** 
  71:../src/FreeRTOS/event_groups.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  72:../src/FreeRTOS/event_groups.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated
  73:../src/FreeRTOS/event_groups.c ****     #endif
  74:../src/FreeRTOS/event_groups.c **** } EventGroup_t;
  75:../src/FreeRTOS/event_groups.c **** 
  76:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
  77:../src/FreeRTOS/event_groups.c **** 
  78:../src/FreeRTOS/event_groups.c **** /*
  79:../src/FreeRTOS/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  80:../src/FreeRTOS/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  81:../src/FreeRTOS/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  82:../src/FreeRTOS/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  83:../src/FreeRTOS/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  84:../src/FreeRTOS/event_groups.c ****  * in uxCurrentEventBits.
  85:../src/FreeRTOS/event_groups.c ****  */
  86:../src/FreeRTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
  87:../src/FreeRTOS/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
  88:../src/FreeRTOS/event_groups.c ****                                         const BaseType_t xWaitForAllBits ) PRIVILEGED_FUNCTION;
  89:../src/FreeRTOS/event_groups.c **** 
  90:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
  91:../src/FreeRTOS/event_groups.c **** 
  92:../src/FreeRTOS/event_groups.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
  93:../src/FreeRTOS/event_groups.c **** 
  94:../src/FreeRTOS/event_groups.c ****     EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
  95:../src/FreeRTOS/event_groups.c ****     {
  96:../src/FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
  97:../src/FreeRTOS/event_groups.c **** 
  98:../src/FreeRTOS/event_groups.c ****         /* A StaticEventGroup_t object must be provided. */
  99:../src/FreeRTOS/event_groups.c ****         configASSERT( pxEventGroupBuffer );
 100:../src/FreeRTOS/event_groups.c **** 
 101:../src/FreeRTOS/event_groups.c ****         #if ( configASSERT_DEFINED == 1 )
 102:../src/FreeRTOS/event_groups.c ****             {
 103:../src/FreeRTOS/event_groups.c ****                 /* Sanity check that the size of the structure used to declare a
 104:../src/FreeRTOS/event_groups.c ****                  * variable of type StaticEventGroup_t equals the size of the real
 105:../src/FreeRTOS/event_groups.c ****                  * event group structure. */
 106:../src/FreeRTOS/event_groups.c ****                 volatile size_t xSize = sizeof( StaticEventGroup_t );
 107:../src/FreeRTOS/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 108:../src/FreeRTOS/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 109:../src/FreeRTOS/event_groups.c ****         #endif /* configASSERT_DEFINED */
 110:../src/FreeRTOS/event_groups.c **** 
 111:../src/FreeRTOS/event_groups.c ****         /* The user has provided a statically allocated event group - use it. */
 112:../src/FreeRTOS/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and S
 113:../src/FreeRTOS/event_groups.c **** 
 114:../src/FreeRTOS/event_groups.c ****         if( pxEventBits != NULL )
 115:../src/FreeRTOS/event_groups.c ****         {
 116:../src/FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits = 0;
 117:../src/FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 118:../src/FreeRTOS/event_groups.c **** 
 119:../src/FreeRTOS/event_groups.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 120:../src/FreeRTOS/event_groups.c ****                 {
 121:../src/FreeRTOS/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note that
 122:../src/FreeRTOS/event_groups.c ****                      * this event group was created statically in case the event group
 123:../src/FreeRTOS/event_groups.c ****                      * is later deleted. */
 124:../src/FreeRTOS/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdTRUE;
 125:../src/FreeRTOS/event_groups.c ****                 }
 126:../src/FreeRTOS/event_groups.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 127:../src/FreeRTOS/event_groups.c **** 
 128:../src/FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 129:../src/FreeRTOS/event_groups.c ****         }
 130:../src/FreeRTOS/event_groups.c ****         else
 131:../src/FreeRTOS/event_groups.c ****         {
 132:../src/FreeRTOS/event_groups.c ****             /* xEventGroupCreateStatic should only ever be called with
 133:../src/FreeRTOS/event_groups.c ****              * pxEventGroupBuffer pointing to a pre-allocated (compile time
 134:../src/FreeRTOS/event_groups.c ****              * allocated) StaticEventGroup_t variable. */
 135:../src/FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED();
 136:../src/FreeRTOS/event_groups.c ****         }
 137:../src/FreeRTOS/event_groups.c **** 
 138:../src/FreeRTOS/event_groups.c ****         return pxEventBits;
 139:../src/FreeRTOS/event_groups.c ****     }
 140:../src/FreeRTOS/event_groups.c **** 
 141:../src/FreeRTOS/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 142:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 143:../src/FreeRTOS/event_groups.c **** 
 144:../src/FreeRTOS/event_groups.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 145:../src/FreeRTOS/event_groups.c **** 
 146:../src/FreeRTOS/event_groups.c ****     EventGroupHandle_t xEventGroupCreate( void )
 147:../src/FreeRTOS/event_groups.c ****     {
 148:../src/FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
 149:../src/FreeRTOS/event_groups.c **** 
 150:../src/FreeRTOS/event_groups.c ****         /* Allocate the event group.  Justification for MISRA deviation as
 151:../src/FreeRTOS/event_groups.c ****          * follows:  pvPortMalloc() always ensures returned memory blocks are
 152:../src/FreeRTOS/event_groups.c ****          * aligned per the requirements of the MCU stack.  In this case
 153:../src/FreeRTOS/event_groups.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 154:../src/FreeRTOS/event_groups.c ****          * alignment requirements of the EventGroup_t structure - which (if you
 155:../src/FreeRTOS/event_groups.c ****          * follow it through) is the alignment requirements of the TickType_t type
 156:../src/FreeRTOS/event_groups.c ****          * (EventBits_t being of TickType_t itself).  Therefore, whenever the
 157:../src/FreeRTOS/event_groups.c ****          * stack alignment requirements are greater than or equal to the
 158:../src/FreeRTOS/event_groups.c ****          * TickType_t alignment requirements the cast is safe.  In other cases,
 159:../src/FreeRTOS/event_groups.c ****          * where the natural word size of the architecture is less than
 160:../src/FreeRTOS/event_groups.c ****          * sizeof( TickType_t ), the TickType_t variables will be accessed in two
 161:../src/FreeRTOS/event_groups.c ****          * or more reads operations, and the alignment requirements is only that
 162:../src/FreeRTOS/event_groups.c ****          * of each individual read. */
 163:../src/FreeRTOS/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e90
 164:../src/FreeRTOS/event_groups.c **** 
 165:../src/FreeRTOS/event_groups.c ****         if( pxEventBits != NULL )
 166:../src/FreeRTOS/event_groups.c ****         {
 167:../src/FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits = 0;
 168:../src/FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 169:../src/FreeRTOS/event_groups.c **** 
 170:../src/FreeRTOS/event_groups.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 171:../src/FreeRTOS/event_groups.c ****                 {
 172:../src/FreeRTOS/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note this
 173:../src/FreeRTOS/event_groups.c ****                      * event group was allocated statically in case the event group is
 174:../src/FreeRTOS/event_groups.c ****                      * later deleted. */
 175:../src/FreeRTOS/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdFALSE;
 176:../src/FreeRTOS/event_groups.c ****                 }
 177:../src/FreeRTOS/event_groups.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 178:../src/FreeRTOS/event_groups.c **** 
 179:../src/FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 180:../src/FreeRTOS/event_groups.c ****         }
 181:../src/FreeRTOS/event_groups.c ****         else
 182:../src/FreeRTOS/event_groups.c ****         {
 183:../src/FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracin
 184:../src/FreeRTOS/event_groups.c ****         }
 185:../src/FreeRTOS/event_groups.c **** 
 186:../src/FreeRTOS/event_groups.c ****         return pxEventBits;
 187:../src/FreeRTOS/event_groups.c ****     }
 188:../src/FreeRTOS/event_groups.c **** 
 189:../src/FreeRTOS/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 190:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 191:../src/FreeRTOS/event_groups.c **** 
 192:../src/FreeRTOS/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
 193:../src/FreeRTOS/event_groups.c ****                              const EventBits_t uxBitsToSet,
 194:../src/FreeRTOS/event_groups.c ****                              const EventBits_t uxBitsToWaitFor,
 195:../src/FreeRTOS/event_groups.c ****                              TickType_t xTicksToWait )
 196:../src/FreeRTOS/event_groups.c **** {
 197:../src/FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 198:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 199:../src/FreeRTOS/event_groups.c ****     BaseType_t xAlreadyYielded;
 200:../src/FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 201:../src/FreeRTOS/event_groups.c **** 
 202:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 203:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 204:../src/FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 205:../src/FreeRTOS/event_groups.c ****         {
 206:../src/FreeRTOS/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 207:../src/FreeRTOS/event_groups.c ****         }
 208:../src/FreeRTOS/event_groups.c ****     #endif
 209:../src/FreeRTOS/event_groups.c **** 
 210:../src/FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 211:../src/FreeRTOS/event_groups.c ****     {
 212:../src/FreeRTOS/event_groups.c ****         uxOriginalBitValue = pxEventBits->uxEventBits;
 213:../src/FreeRTOS/event_groups.c **** 
 214:../src/FreeRTOS/event_groups.c ****         ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 215:../src/FreeRTOS/event_groups.c **** 
 216:../src/FreeRTOS/event_groups.c ****         if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 217:../src/FreeRTOS/event_groups.c ****         {
 218:../src/FreeRTOS/event_groups.c ****             /* All the rendezvous bits are now set - no need to block. */
 219:../src/FreeRTOS/event_groups.c ****             uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 220:../src/FreeRTOS/event_groups.c **** 
 221:../src/FreeRTOS/event_groups.c ****             /* Rendezvous always clear the bits.  They will have been cleared
 222:../src/FreeRTOS/event_groups.c ****              * already unless this is the only task in the rendezvous. */
 223:../src/FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 224:../src/FreeRTOS/event_groups.c **** 
 225:../src/FreeRTOS/event_groups.c ****             xTicksToWait = 0;
 226:../src/FreeRTOS/event_groups.c ****         }
 227:../src/FreeRTOS/event_groups.c ****         else
 228:../src/FreeRTOS/event_groups.c ****         {
 229:../src/FreeRTOS/event_groups.c ****             if( xTicksToWait != ( TickType_t ) 0 )
 230:../src/FreeRTOS/event_groups.c ****             {
 231:../src/FreeRTOS/event_groups.c ****                 traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 232:../src/FreeRTOS/event_groups.c **** 
 233:../src/FreeRTOS/event_groups.c ****                 /* Store the bits that the calling task is waiting for in the
 234:../src/FreeRTOS/event_groups.c ****                  * task's event list item so the kernel knows when a match is
 235:../src/FreeRTOS/event_groups.c ****                  * found.  Then enter the blocked state. */
 236:../src/FreeRTOS/event_groups.c ****                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToW
 237:../src/FreeRTOS/event_groups.c **** 
 238:../src/FreeRTOS/event_groups.c ****                 /* This assignment is obsolete as uxReturn will get set after
 239:../src/FreeRTOS/event_groups.c ****                  * the task unblocks, but some compilers mistakenly generate a
 240:../src/FreeRTOS/event_groups.c ****                  * warning about uxReturn being returned without being set if the
 241:../src/FreeRTOS/event_groups.c ****                  * assignment is omitted. */
 242:../src/FreeRTOS/event_groups.c ****                 uxReturn = 0;
 243:../src/FreeRTOS/event_groups.c ****             }
 244:../src/FreeRTOS/event_groups.c ****             else
 245:../src/FreeRTOS/event_groups.c ****             {
 246:../src/FreeRTOS/event_groups.c ****                 /* The rendezvous bits were not set, but no block time was
 247:../src/FreeRTOS/event_groups.c ****                  * specified - just return the current event bit value. */
 248:../src/FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 249:../src/FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 250:../src/FreeRTOS/event_groups.c ****             }
 251:../src/FreeRTOS/event_groups.c ****         }
 252:../src/FreeRTOS/event_groups.c ****     }
 253:../src/FreeRTOS/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 254:../src/FreeRTOS/event_groups.c **** 
 255:../src/FreeRTOS/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 256:../src/FreeRTOS/event_groups.c ****     {
 257:../src/FreeRTOS/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 258:../src/FreeRTOS/event_groups.c ****         {
 259:../src/FreeRTOS/event_groups.c ****             portYIELD_WITHIN_API();
 260:../src/FreeRTOS/event_groups.c ****         }
 261:../src/FreeRTOS/event_groups.c ****         else
 262:../src/FreeRTOS/event_groups.c ****         {
 263:../src/FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 264:../src/FreeRTOS/event_groups.c ****         }
 265:../src/FreeRTOS/event_groups.c **** 
 266:../src/FreeRTOS/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 267:../src/FreeRTOS/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 268:../src/FreeRTOS/event_groups.c ****          * the required bits were set they will have been stored in the task's
 269:../src/FreeRTOS/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 270:../src/FreeRTOS/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 271:../src/FreeRTOS/event_groups.c **** 
 272:../src/FreeRTOS/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 273:../src/FreeRTOS/event_groups.c ****         {
 274:../src/FreeRTOS/event_groups.c ****             /* The task timed out, just return the current event bit value. */
 275:../src/FreeRTOS/event_groups.c ****             taskENTER_CRITICAL();
 276:../src/FreeRTOS/event_groups.c ****             {
 277:../src/FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 278:../src/FreeRTOS/event_groups.c **** 
 279:../src/FreeRTOS/event_groups.c ****                 /* Although the task got here because it timed out before the
 280:../src/FreeRTOS/event_groups.c ****                  * bits it was waiting for were set, it is possible that since it
 281:../src/FreeRTOS/event_groups.c ****                  * unblocked another task has set the bits.  If this is the case
 282:../src/FreeRTOS/event_groups.c ****                  * then it needs to clear the bits before exiting. */
 283:../src/FreeRTOS/event_groups.c ****                 if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 284:../src/FreeRTOS/event_groups.c ****                 {
 285:../src/FreeRTOS/event_groups.c ****                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 286:../src/FreeRTOS/event_groups.c ****                 }
 287:../src/FreeRTOS/event_groups.c ****                 else
 288:../src/FreeRTOS/event_groups.c ****                 {
 289:../src/FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 290:../src/FreeRTOS/event_groups.c ****                 }
 291:../src/FreeRTOS/event_groups.c ****             }
 292:../src/FreeRTOS/event_groups.c ****             taskEXIT_CRITICAL();
 293:../src/FreeRTOS/event_groups.c **** 
 294:../src/FreeRTOS/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 295:../src/FreeRTOS/event_groups.c ****         }
 296:../src/FreeRTOS/event_groups.c ****         else
 297:../src/FreeRTOS/event_groups.c ****         {
 298:../src/FreeRTOS/event_groups.c ****             /* The task unblocked because the bits were set. */
 299:../src/FreeRTOS/event_groups.c ****         }
 300:../src/FreeRTOS/event_groups.c **** 
 301:../src/FreeRTOS/event_groups.c ****         /* Control bits might be set as the task had blocked should not be
 302:../src/FreeRTOS/event_groups.c ****          * returned. */
 303:../src/FreeRTOS/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 304:../src/FreeRTOS/event_groups.c ****     }
 305:../src/FreeRTOS/event_groups.c **** 
 306:../src/FreeRTOS/event_groups.c ****     traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 307:../src/FreeRTOS/event_groups.c **** 
 308:../src/FreeRTOS/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 309:../src/FreeRTOS/event_groups.c ****     ( void ) xTimeoutOccurred;
 310:../src/FreeRTOS/event_groups.c **** 
 311:../src/FreeRTOS/event_groups.c ****     return uxReturn;
 312:../src/FreeRTOS/event_groups.c **** }
 313:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 314:../src/FreeRTOS/event_groups.c **** 
 315:../src/FreeRTOS/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
 316:../src/FreeRTOS/event_groups.c ****                                  const EventBits_t uxBitsToWaitFor,
 317:../src/FreeRTOS/event_groups.c ****                                  const BaseType_t xClearOnExit,
 318:../src/FreeRTOS/event_groups.c ****                                  const BaseType_t xWaitForAllBits,
 319:../src/FreeRTOS/event_groups.c ****                                  TickType_t xTicksToWait )
 320:../src/FreeRTOS/event_groups.c **** {
 321:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 322:../src/FreeRTOS/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
 323:../src/FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 324:../src/FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 325:../src/FreeRTOS/event_groups.c **** 
 326:../src/FreeRTOS/event_groups.c ****     /* Check the user is not attempting to wait on the bits used by the kernel
 327:../src/FreeRTOS/event_groups.c ****      * itself, and that at least one bit is being requested. */
 328:../src/FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 329:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 330:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 331:../src/FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 332:../src/FreeRTOS/event_groups.c ****         {
 333:../src/FreeRTOS/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 334:../src/FreeRTOS/event_groups.c ****         }
 335:../src/FreeRTOS/event_groups.c ****     #endif
 336:../src/FreeRTOS/event_groups.c **** 
 337:../src/FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 338:../src/FreeRTOS/event_groups.c ****     {
 339:../src/FreeRTOS/event_groups.c ****         const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 340:../src/FreeRTOS/event_groups.c **** 
 341:../src/FreeRTOS/event_groups.c ****         /* Check to see if the wait condition is already met or not. */
 342:../src/FreeRTOS/event_groups.c ****         xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllB
 343:../src/FreeRTOS/event_groups.c **** 
 344:../src/FreeRTOS/event_groups.c ****         if( xWaitConditionMet != pdFALSE )
 345:../src/FreeRTOS/event_groups.c ****         {
 346:../src/FreeRTOS/event_groups.c ****             /* The wait condition has already been met so there is no need to
 347:../src/FreeRTOS/event_groups.c ****              * block. */
 348:../src/FreeRTOS/event_groups.c ****             uxReturn = uxCurrentEventBits;
 349:../src/FreeRTOS/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 350:../src/FreeRTOS/event_groups.c **** 
 351:../src/FreeRTOS/event_groups.c ****             /* Clear the wait bits if requested to do so. */
 352:../src/FreeRTOS/event_groups.c ****             if( xClearOnExit != pdFALSE )
 353:../src/FreeRTOS/event_groups.c ****             {
 354:../src/FreeRTOS/event_groups.c ****                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 355:../src/FreeRTOS/event_groups.c ****             }
 356:../src/FreeRTOS/event_groups.c ****             else
 357:../src/FreeRTOS/event_groups.c ****             {
 358:../src/FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 359:../src/FreeRTOS/event_groups.c ****             }
 360:../src/FreeRTOS/event_groups.c ****         }
 361:../src/FreeRTOS/event_groups.c ****         else if( xTicksToWait == ( TickType_t ) 0 )
 362:../src/FreeRTOS/event_groups.c ****         {
 363:../src/FreeRTOS/event_groups.c ****             /* The wait condition has not been met, but no block time was
 364:../src/FreeRTOS/event_groups.c ****              * specified, so just return the current value. */
 365:../src/FreeRTOS/event_groups.c ****             uxReturn = uxCurrentEventBits;
 366:../src/FreeRTOS/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 367:../src/FreeRTOS/event_groups.c ****         }
 368:../src/FreeRTOS/event_groups.c ****         else
 369:../src/FreeRTOS/event_groups.c ****         {
 370:../src/FreeRTOS/event_groups.c ****             /* The task is going to block to wait for its required bits to be
 371:../src/FreeRTOS/event_groups.c ****              * set.  uxControlBits are used to remember the specified behaviour of
 372:../src/FreeRTOS/event_groups.c ****              * this call to xEventGroupWaitBits() - for use when the event bits
 373:../src/FreeRTOS/event_groups.c ****              * unblock the task. */
 374:../src/FreeRTOS/event_groups.c ****             if( xClearOnExit != pdFALSE )
 375:../src/FreeRTOS/event_groups.c ****             {
 376:../src/FreeRTOS/event_groups.c ****                 uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 377:../src/FreeRTOS/event_groups.c ****             }
 378:../src/FreeRTOS/event_groups.c ****             else
 379:../src/FreeRTOS/event_groups.c ****             {
 380:../src/FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 381:../src/FreeRTOS/event_groups.c ****             }
 382:../src/FreeRTOS/event_groups.c **** 
 383:../src/FreeRTOS/event_groups.c ****             if( xWaitForAllBits != pdFALSE )
 384:../src/FreeRTOS/event_groups.c ****             {
 385:../src/FreeRTOS/event_groups.c ****                 uxControlBits |= eventWAIT_FOR_ALL_BITS;
 386:../src/FreeRTOS/event_groups.c ****             }
 387:../src/FreeRTOS/event_groups.c ****             else
 388:../src/FreeRTOS/event_groups.c ****             {
 389:../src/FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 390:../src/FreeRTOS/event_groups.c ****             }
 391:../src/FreeRTOS/event_groups.c **** 
 392:../src/FreeRTOS/event_groups.c ****             /* Store the bits that the calling task is waiting for in the
 393:../src/FreeRTOS/event_groups.c ****              * task's event list item so the kernel knows when a match is
 394:../src/FreeRTOS/event_groups.c ****              * found.  Then enter the blocked state. */
 395:../src/FreeRTOS/event_groups.c ****             vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitF
 396:../src/FreeRTOS/event_groups.c **** 
 397:../src/FreeRTOS/event_groups.c ****             /* This is obsolete as it will get set after the task unblocks, but
 398:../src/FreeRTOS/event_groups.c ****              * some compilers mistakenly generate a warning about the variable
 399:../src/FreeRTOS/event_groups.c ****              * being returned without being set if it is not done. */
 400:../src/FreeRTOS/event_groups.c ****             uxReturn = 0;
 401:../src/FreeRTOS/event_groups.c **** 
 402:../src/FreeRTOS/event_groups.c ****             traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 403:../src/FreeRTOS/event_groups.c ****         }
 404:../src/FreeRTOS/event_groups.c ****     }
 405:../src/FreeRTOS/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 406:../src/FreeRTOS/event_groups.c **** 
 407:../src/FreeRTOS/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 408:../src/FreeRTOS/event_groups.c ****     {
 409:../src/FreeRTOS/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 410:../src/FreeRTOS/event_groups.c ****         {
 411:../src/FreeRTOS/event_groups.c ****             portYIELD_WITHIN_API();
 412:../src/FreeRTOS/event_groups.c ****         }
 413:../src/FreeRTOS/event_groups.c ****         else
 414:../src/FreeRTOS/event_groups.c ****         {
 415:../src/FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 416:../src/FreeRTOS/event_groups.c ****         }
 417:../src/FreeRTOS/event_groups.c **** 
 418:../src/FreeRTOS/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 419:../src/FreeRTOS/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 420:../src/FreeRTOS/event_groups.c ****          * the required bits were set they will have been stored in the task's
 421:../src/FreeRTOS/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 422:../src/FreeRTOS/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 423:../src/FreeRTOS/event_groups.c **** 
 424:../src/FreeRTOS/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 425:../src/FreeRTOS/event_groups.c ****         {
 426:../src/FreeRTOS/event_groups.c ****             taskENTER_CRITICAL();
 427:../src/FreeRTOS/event_groups.c ****             {
 428:../src/FreeRTOS/event_groups.c ****                 /* The task timed out, just return the current event bit value. */
 429:../src/FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 430:../src/FreeRTOS/event_groups.c **** 
 431:../src/FreeRTOS/event_groups.c ****                 /* It is possible that the event bits were updated between this
 432:../src/FreeRTOS/event_groups.c ****                  * task leaving the Blocked state and running again. */
 433:../src/FreeRTOS/event_groups.c ****                 if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 434:../src/FreeRTOS/event_groups.c ****                 {
 435:../src/FreeRTOS/event_groups.c ****                     if( xClearOnExit != pdFALSE )
 436:../src/FreeRTOS/event_groups.c ****                     {
 437:../src/FreeRTOS/event_groups.c ****                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 438:../src/FreeRTOS/event_groups.c ****                     }
 439:../src/FreeRTOS/event_groups.c ****                     else
 440:../src/FreeRTOS/event_groups.c ****                     {
 441:../src/FreeRTOS/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 442:../src/FreeRTOS/event_groups.c ****                     }
 443:../src/FreeRTOS/event_groups.c ****                 }
 444:../src/FreeRTOS/event_groups.c ****                 else
 445:../src/FreeRTOS/event_groups.c ****                 {
 446:../src/FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 447:../src/FreeRTOS/event_groups.c ****                 }
 448:../src/FreeRTOS/event_groups.c **** 
 449:../src/FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 450:../src/FreeRTOS/event_groups.c ****             }
 451:../src/FreeRTOS/event_groups.c ****             taskEXIT_CRITICAL();
 452:../src/FreeRTOS/event_groups.c ****         }
 453:../src/FreeRTOS/event_groups.c ****         else
 454:../src/FreeRTOS/event_groups.c ****         {
 455:../src/FreeRTOS/event_groups.c ****             /* The task unblocked because the bits were set. */
 456:../src/FreeRTOS/event_groups.c ****         }
 457:../src/FreeRTOS/event_groups.c **** 
 458:../src/FreeRTOS/event_groups.c ****         /* The task blocked so control bits may have been set. */
 459:../src/FreeRTOS/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 460:../src/FreeRTOS/event_groups.c ****     }
 461:../src/FreeRTOS/event_groups.c **** 
 462:../src/FreeRTOS/event_groups.c ****     traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 463:../src/FreeRTOS/event_groups.c **** 
 464:../src/FreeRTOS/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 465:../src/FreeRTOS/event_groups.c ****     ( void ) xTimeoutOccurred;
 466:../src/FreeRTOS/event_groups.c **** 
 467:../src/FreeRTOS/event_groups.c ****     return uxReturn;
 468:../src/FreeRTOS/event_groups.c **** }
 469:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 470:../src/FreeRTOS/event_groups.c **** 
 471:../src/FreeRTOS/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
 472:../src/FreeRTOS/event_groups.c ****                                   const EventBits_t uxBitsToClear )
 473:../src/FreeRTOS/event_groups.c **** {
 474:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 475:../src/FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 476:../src/FreeRTOS/event_groups.c **** 
 477:../src/FreeRTOS/event_groups.c ****     /* Check the user is not attempting to clear the bits used by the kernel
 478:../src/FreeRTOS/event_groups.c ****      * itself. */
 479:../src/FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 480:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 481:../src/FreeRTOS/event_groups.c **** 
 482:../src/FreeRTOS/event_groups.c ****     taskENTER_CRITICAL();
 483:../src/FreeRTOS/event_groups.c ****     {
 484:../src/FreeRTOS/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 485:../src/FreeRTOS/event_groups.c **** 
 486:../src/FreeRTOS/event_groups.c ****         /* The value returned is the event group value prior to the bits being
 487:../src/FreeRTOS/event_groups.c ****          * cleared. */
 488:../src/FreeRTOS/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 489:../src/FreeRTOS/event_groups.c **** 
 490:../src/FreeRTOS/event_groups.c ****         /* Clear the bits. */
 491:../src/FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 492:../src/FreeRTOS/event_groups.c ****     }
 493:../src/FreeRTOS/event_groups.c ****     taskEXIT_CRITICAL();
 494:../src/FreeRTOS/event_groups.c **** 
 495:../src/FreeRTOS/event_groups.c ****     return uxReturn;
 496:../src/FreeRTOS/event_groups.c **** }
 497:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 498:../src/FreeRTOS/event_groups.c **** 
 499:../src/FreeRTOS/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 500:../src/FreeRTOS/event_groups.c **** 
 501:../src/FreeRTOS/event_groups.c ****     BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
 502:../src/FreeRTOS/event_groups.c ****                                             const EventBits_t uxBitsToClear )
 503:../src/FreeRTOS/event_groups.c ****     {
 504:../src/FreeRTOS/event_groups.c ****         BaseType_t xReturn;
 505:../src/FreeRTOS/event_groups.c **** 
 506:../src/FreeRTOS/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 507:../src/FreeRTOS/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGro
 508:../src/FreeRTOS/event_groups.c **** 
 509:../src/FreeRTOS/event_groups.c ****         return xReturn;
 510:../src/FreeRTOS/event_groups.c ****     }
 511:../src/FreeRTOS/event_groups.c **** 
 512:../src/FreeRTOS/event_groups.c **** #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( co
 513:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 514:../src/FreeRTOS/event_groups.c **** 
 515:../src/FreeRTOS/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 516:../src/FreeRTOS/event_groups.c **** {
 517:../src/FreeRTOS/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 518:../src/FreeRTOS/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 519:../src/FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 520:../src/FreeRTOS/event_groups.c **** 
 521:../src/FreeRTOS/event_groups.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 522:../src/FreeRTOS/event_groups.c ****     {
 523:../src/FreeRTOS/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 524:../src/FreeRTOS/event_groups.c ****     }
 525:../src/FreeRTOS/event_groups.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 526:../src/FreeRTOS/event_groups.c **** 
 527:../src/FreeRTOS/event_groups.c ****     return uxReturn;
 528:../src/FreeRTOS/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 529:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 530:../src/FreeRTOS/event_groups.c **** 
 531:../src/FreeRTOS/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
 532:../src/FreeRTOS/event_groups.c ****                                 const EventBits_t uxBitsToSet )
 533:../src/FreeRTOS/event_groups.c **** {
 534:../src/FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 535:../src/FreeRTOS/event_groups.c ****     ListItem_t const * pxListEnd;
 536:../src/FreeRTOS/event_groups.c ****     List_t const * pxList;
 537:../src/FreeRTOS/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 538:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 539:../src/FreeRTOS/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 540:../src/FreeRTOS/event_groups.c **** 
 541:../src/FreeRTOS/event_groups.c ****     /* Check the user is not attempting to set the bits used by the kernel
 542:../src/FreeRTOS/event_groups.c ****      * itself. */
 543:../src/FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 544:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 545:../src/FreeRTOS/event_groups.c **** 
 546:../src/FreeRTOS/event_groups.c ****     pxList = &( pxEventBits->xTasksWaitingForBits );
 547:../src/FreeRTOS/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 548:../src/FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 549:../src/FreeRTOS/event_groups.c ****     {
 550:../src/FreeRTOS/event_groups.c ****         traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 551:../src/FreeRTOS/event_groups.c **** 
 552:../src/FreeRTOS/event_groups.c ****         pxListItem = listGET_HEAD_ENTRY( pxList );
 553:../src/FreeRTOS/event_groups.c **** 
 554:../src/FreeRTOS/event_groups.c ****         /* Set the bits. */
 555:../src/FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits |= uxBitsToSet;
 556:../src/FreeRTOS/event_groups.c **** 
 557:../src/FreeRTOS/event_groups.c ****         /* See if the new bit value should unblock any tasks. */
 558:../src/FreeRTOS/event_groups.c ****         while( pxListItem != pxListEnd )
 559:../src/FreeRTOS/event_groups.c ****         {
 560:../src/FreeRTOS/event_groups.c ****             pxNext = listGET_NEXT( pxListItem );
 561:../src/FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 562:../src/FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 563:../src/FreeRTOS/event_groups.c **** 
 564:../src/FreeRTOS/event_groups.c ****             /* Split the bits waited for from the control bits. */
 565:../src/FreeRTOS/event_groups.c ****             uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 566:../src/FreeRTOS/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 567:../src/FreeRTOS/event_groups.c **** 
 568:../src/FreeRTOS/event_groups.c ****             if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 569:../src/FreeRTOS/event_groups.c ****             {
 570:../src/FreeRTOS/event_groups.c ****                 /* Just looking for single bit being set. */
 571:../src/FreeRTOS/event_groups.c ****                 if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 572:../src/FreeRTOS/event_groups.c ****                 {
 573:../src/FreeRTOS/event_groups.c ****                     xMatchFound = pdTRUE;
 574:../src/FreeRTOS/event_groups.c ****                 }
 575:../src/FreeRTOS/event_groups.c ****                 else
 576:../src/FreeRTOS/event_groups.c ****                 {
 577:../src/FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 578:../src/FreeRTOS/event_groups.c ****                 }
 579:../src/FreeRTOS/event_groups.c ****             }
 580:../src/FreeRTOS/event_groups.c ****             else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 581:../src/FreeRTOS/event_groups.c ****             {
 582:../src/FreeRTOS/event_groups.c ****                 /* All bits are set. */
 583:../src/FreeRTOS/event_groups.c ****                 xMatchFound = pdTRUE;
 584:../src/FreeRTOS/event_groups.c ****             }
 585:../src/FreeRTOS/event_groups.c ****             else
 586:../src/FreeRTOS/event_groups.c ****             {
 587:../src/FreeRTOS/event_groups.c ****                 /* Need all bits to be set, but not all the bits were set. */
 588:../src/FreeRTOS/event_groups.c ****             }
 589:../src/FreeRTOS/event_groups.c **** 
 590:../src/FreeRTOS/event_groups.c ****             if( xMatchFound != pdFALSE )
 591:../src/FreeRTOS/event_groups.c ****             {
 592:../src/FreeRTOS/event_groups.c ****                 /* The bits match.  Should the bits be cleared on exit? */
 593:../src/FreeRTOS/event_groups.c ****                 if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 594:../src/FreeRTOS/event_groups.c ****                 {
 595:../src/FreeRTOS/event_groups.c ****                     uxBitsToClear |= uxBitsWaitedFor;
 596:../src/FreeRTOS/event_groups.c ****                 }
 597:../src/FreeRTOS/event_groups.c ****                 else
 598:../src/FreeRTOS/event_groups.c ****                 {
 599:../src/FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 600:../src/FreeRTOS/event_groups.c ****                 }
 601:../src/FreeRTOS/event_groups.c **** 
 602:../src/FreeRTOS/event_groups.c ****                 /* Store the actual event flag value in the task's event list
 603:../src/FreeRTOS/event_groups.c ****                  * item before removing the task from the event list.  The
 604:../src/FreeRTOS/event_groups.c ****                  * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 605:../src/FreeRTOS/event_groups.c ****                  * that is was unblocked due to its required bits matching, rather
 606:../src/FreeRTOS/event_groups.c ****                  * than because it timed out. */
 607:../src/FreeRTOS/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBL
 608:../src/FreeRTOS/event_groups.c ****             }
 609:../src/FreeRTOS/event_groups.c **** 
 610:../src/FreeRTOS/event_groups.c ****             /* Move onto the next list item.  Note pxListItem->pxNext is not
 611:../src/FreeRTOS/event_groups.c ****              * used here as the list item may have been removed from the event list
 612:../src/FreeRTOS/event_groups.c ****              * and inserted into the ready/pending reading list. */
 613:../src/FreeRTOS/event_groups.c ****             pxListItem = pxNext;
 614:../src/FreeRTOS/event_groups.c ****         }
 615:../src/FreeRTOS/event_groups.c **** 
 616:../src/FreeRTOS/event_groups.c ****         /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 617:../src/FreeRTOS/event_groups.c ****          * bit was set in the control word. */
 618:../src/FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 619:../src/FreeRTOS/event_groups.c ****     }
 620:../src/FreeRTOS/event_groups.c ****     ( void ) xTaskResumeAll();
 621:../src/FreeRTOS/event_groups.c **** 
 622:../src/FreeRTOS/event_groups.c ****     return pxEventBits->uxEventBits;
 623:../src/FreeRTOS/event_groups.c **** }
 624:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 625:../src/FreeRTOS/event_groups.c **** 
 626:../src/FreeRTOS/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 627:../src/FreeRTOS/event_groups.c **** {
 628:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 629:../src/FreeRTOS/event_groups.c ****     const List_t * pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 630:../src/FreeRTOS/event_groups.c **** 
 631:../src/FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 632:../src/FreeRTOS/event_groups.c ****     {
 633:../src/FreeRTOS/event_groups.c ****         traceEVENT_GROUP_DELETE( xEventGroup );
 634:../src/FreeRTOS/event_groups.c **** 
 635:../src/FreeRTOS/event_groups.c ****         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 636:../src/FreeRTOS/event_groups.c ****         {
 637:../src/FreeRTOS/event_groups.c ****             /* Unblock the task, returning 0 as the event list is being deleted
 638:../src/FreeRTOS/event_groups.c ****              * and cannot therefore have any bits set. */
 639:../src/FreeRTOS/event_groups.c ****             configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTas
 640:../src/FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 641:../src/FreeRTOS/event_groups.c ****         }
 642:../src/FreeRTOS/event_groups.c **** 
 643:../src/FreeRTOS/event_groups.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
 644:../src/FreeRTOS/event_groups.c ****             {
 645:../src/FreeRTOS/event_groups.c ****                 /* The event group can only have been allocated dynamically - free
 646:../src/FreeRTOS/event_groups.c ****                  * it again. */
 647:../src/FreeRTOS/event_groups.c ****                 vPortFree( pxEventBits );
 648:../src/FreeRTOS/event_groups.c ****             }
 649:../src/FreeRTOS/event_groups.c ****         #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1
 650:../src/FreeRTOS/event_groups.c ****             {
 651:../src/FreeRTOS/event_groups.c ****                 /* The event group could have been allocated statically or
 652:../src/FreeRTOS/event_groups.c ****                  * dynamically, so check before attempting to free the memory. */
 653:../src/FreeRTOS/event_groups.c ****                 if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 654:../src/FreeRTOS/event_groups.c ****                 {
 655:../src/FreeRTOS/event_groups.c ****                     vPortFree( pxEventBits );
 656:../src/FreeRTOS/event_groups.c ****                 }
 657:../src/FreeRTOS/event_groups.c ****                 else
 658:../src/FreeRTOS/event_groups.c ****                 {
 659:../src/FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 660:../src/FreeRTOS/event_groups.c ****                 }
 661:../src/FreeRTOS/event_groups.c ****             }
 662:../src/FreeRTOS/event_groups.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 663:../src/FreeRTOS/event_groups.c ****     }
 664:../src/FreeRTOS/event_groups.c ****     ( void ) xTaskResumeAll();
 665:../src/FreeRTOS/event_groups.c **** }
 666:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 667:../src/FreeRTOS/event_groups.c **** 
 668:../src/FreeRTOS/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 669:../src/FreeRTOS/event_groups.c ****  * an interrupt. */
 670:../src/FreeRTOS/event_groups.c **** void vEventGroupSetBitsCallback( void * pvEventGroup,
 671:../src/FreeRTOS/event_groups.c ****                                  const uint32_t ulBitsToSet )
 672:../src/FreeRTOS/event_groups.c **** {
 673:../src/FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 674:../src/FreeRTOS/event_groups.c **** }
 675:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 676:../src/FreeRTOS/event_groups.c **** 
 677:../src/FreeRTOS/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 678:../src/FreeRTOS/event_groups.c ****  * an interrupt. */
 679:../src/FreeRTOS/event_groups.c **** void vEventGroupClearBitsCallback( void * pvEventGroup,
 680:../src/FreeRTOS/event_groups.c ****                                    const uint32_t ulBitsToClear )
 681:../src/FreeRTOS/event_groups.c **** {
 682:../src/FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 683:../src/FreeRTOS/event_groups.c **** }
 684:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 685:../src/FreeRTOS/event_groups.c **** 
 686:../src/FreeRTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
 687:../src/FreeRTOS/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
 688:../src/FreeRTOS/event_groups.c ****                                         const BaseType_t xWaitForAllBits )
 689:../src/FreeRTOS/event_groups.c **** {
  29              		.loc 1 689 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 690:../src/FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet = pdFALSE;
  34              		.loc 1 690 5 view .LVU1
 691:../src/FreeRTOS/event_groups.c **** 
 692:../src/FreeRTOS/event_groups.c ****     if( xWaitForAllBits == pdFALSE )
  35              		.loc 1 692 5 view .LVU2
  36              		.loc 1 692 7 is_stmt 0 view .LVU3
  37 0000 000052E3 		cmp	r2, #0
  38              		.loc 1 692 7 view .LVU4
  39 0004 0300001A 		bne	.L2
 693:../src/FreeRTOS/event_groups.c ****     {
 694:../src/FreeRTOS/event_groups.c ****         /* Task only has to wait for one bit within uxBitsToWaitFor to be
 695:../src/FreeRTOS/event_groups.c ****          * set.  Is one already set? */
 696:../src/FreeRTOS/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  40              		.loc 1 696 9 is_stmt 1 view .LVU5
  41              		.loc 1 696 11 is_stmt 0 view .LVU6
  42 0008 010010E1 		tst	r0, r1
  43 000c 0500001A 		bne	.L4
 690:../src/FreeRTOS/event_groups.c **** 
  44              		.loc 1 690 16 view .LVU7
  45 0010 0200A0E1 		mov	r0, r2
  46              	.LVL1:
 690:../src/FreeRTOS/event_groups.c **** 
  47              		.loc 1 690 16 view .LVU8
  48 0014 1EFF2FE1 		bx	lr
  49              	.LVL2:
  50              	.L2:
 697:../src/FreeRTOS/event_groups.c ****         {
 698:../src/FreeRTOS/event_groups.c ****             xWaitConditionMet = pdTRUE;
 699:../src/FreeRTOS/event_groups.c ****         }
 700:../src/FreeRTOS/event_groups.c ****         else
 701:../src/FreeRTOS/event_groups.c ****         {
 702:../src/FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 703:../src/FreeRTOS/event_groups.c ****         }
 704:../src/FreeRTOS/event_groups.c ****     }
 705:../src/FreeRTOS/event_groups.c ****     else
 706:../src/FreeRTOS/event_groups.c ****     {
 707:../src/FreeRTOS/event_groups.c ****         /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 708:../src/FreeRTOS/event_groups.c ****          * Are they set already? */
 709:../src/FreeRTOS/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  51              		.loc 1 709 9 is_stmt 1 view .LVU9
  52              		.loc 1 709 11 is_stmt 0 view .LVU10
  53 0018 0030D1E1 		bics	r3, r1, r0
  54 001c 0300000A 		beq	.L5
 690:../src/FreeRTOS/event_groups.c **** 
  55              		.loc 1 690 16 view .LVU11
  56 0020 0000A0E3 		mov	r0, #0
  57              	.LVL3:
 690:../src/FreeRTOS/event_groups.c **** 
  58              		.loc 1 690 16 view .LVU12
  59 0024 1EFF2FE1 		bx	lr
  60              	.LVL4:
  61              	.L4:
 698:../src/FreeRTOS/event_groups.c ****         }
  62              		.loc 1 698 31 view .LVU13
  63 0028 0100A0E3 		mov	r0, #1
  64              	.LVL5:
 698:../src/FreeRTOS/event_groups.c ****         }
  65              		.loc 1 698 31 view .LVU14
  66 002c 1EFF2FE1 		bx	lr
  67              	.LVL6:
  68              	.L5:
 710:../src/FreeRTOS/event_groups.c ****         {
 711:../src/FreeRTOS/event_groups.c ****             xWaitConditionMet = pdTRUE;
  69              		.loc 1 711 31 view .LVU15
  70 0030 0100A0E3 		mov	r0, #1
  71              	.LVL7:
 712:../src/FreeRTOS/event_groups.c ****         }
 713:../src/FreeRTOS/event_groups.c ****         else
 714:../src/FreeRTOS/event_groups.c ****         {
 715:../src/FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
  72              		.loc 1 715 37 is_stmt 1 view .LVU16
 716:../src/FreeRTOS/event_groups.c ****         }
 717:../src/FreeRTOS/event_groups.c ****     }
 718:../src/FreeRTOS/event_groups.c **** 
 719:../src/FreeRTOS/event_groups.c ****     return xWaitConditionMet;
  73              		.loc 1 719 5 view .LVU17
 720:../src/FreeRTOS/event_groups.c **** }
  74              		.loc 1 720 1 is_stmt 0 view .LVU18
  75 0034 1EFF2FE1 		bx	lr
  76              		.cfi_endproc
  77              	.LFE10:
  79              		.section	.text.xEventGroupCreate,"ax",%progbits
  80              		.align	2
  81              		.global	xEventGroupCreate
  82              		.syntax unified
  83              		.arm
  84              		.fpu neon
  86              	xEventGroupCreate:
  87              	.LFB0:
 147:../src/FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
  88              		.loc 1 147 5 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92 0000 10402DE9 		push	{r4, lr}
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 4, -8
  95              		.cfi_offset 14, -4
 148:../src/FreeRTOS/event_groups.c **** 
  96              		.loc 1 148 9 view .LVU20
 163:../src/FreeRTOS/event_groups.c **** 
  97              		.loc 1 163 9 view .LVU21
 163:../src/FreeRTOS/event_groups.c **** 
  98              		.loc 1 163 42 is_stmt 0 view .LVU22
  99 0004 1C00A0E3 		mov	r0, #28
 100 0008 FEFFFFEB 		bl	pvPortMalloc
 101              	.LVL8:
 165:../src/FreeRTOS/event_groups.c ****         {
 102              		.loc 1 165 9 is_stmt 1 view .LVU23
 165:../src/FreeRTOS/event_groups.c ****         {
 103              		.loc 1 165 11 is_stmt 0 view .LVU24
 104 000c 004050E2 		subs	r4, r0, #0
 105 0010 0300000A 		beq	.L6
 167:../src/FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 106              		.loc 1 167 13 is_stmt 1 view .LVU25
 167:../src/FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 107              		.loc 1 167 38 is_stmt 0 view .LVU26
 108 0014 0400A0E1 		mov	r0, r4
 167:../src/FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 109              		.loc 1 167 38 view .LVU27
 110 0018 0030A0E3 		mov	r3, #0
 111 001c 043080E4 		str	r3, [r0], #4
 112              	.LVL9:
 168:../src/FreeRTOS/event_groups.c **** 
 113              		.loc 1 168 13 is_stmt 1 view .LVU28
 114 0020 FEFFFFEB 		bl	vListInitialise
 115              	.LVL10:
 179:../src/FreeRTOS/event_groups.c ****         }
 116              		.loc 1 179 51 view .LVU29
 183:../src/FreeRTOS/event_groups.c ****         }
 117              		.loc 1 183 45 view .LVU30
 186:../src/FreeRTOS/event_groups.c ****     }
 118              		.loc 1 186 9 view .LVU31
 119              	.L6:
 187:../src/FreeRTOS/event_groups.c **** 
 120              		.loc 1 187 5 is_stmt 0 view .LVU32
 121 0024 0400A0E1 		mov	r0, r4
 122 0028 1080BDE8 		pop	{r4, pc}
 123              		.cfi_endproc
 124              	.LFE0:
 126              		.section	.rodata.xEventGroupWaitBits.str1.4,"aMS",%progbits,1
 127              		.align	2
 128              	.LC0:
 129 0000 2E2E2F73 		.ascii	"../src/FreeRTOS/event_groups.c\000"
 129      72632F46 
 129      72656552 
 129      544F532F 
 129      6576656E 
 130              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 131              		.align	2
 132              		.global	xEventGroupWaitBits
 133              		.syntax unified
 134              		.arm
 135              		.fpu neon
 137              	xEventGroupWaitBits:
 138              	.LVL11:
 139              	.LFB2:
 320:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 140              		.loc 1 320 1 is_stmt 1 view -0
 141              		.cfi_startproc
 142              		@ args = 4, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 320:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 144              		.loc 1 320 1 is_stmt 0 view .LVU34
 145 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 146              		.cfi_def_cfa_offset 32
 147              		.cfi_offset 4, -32
 148              		.cfi_offset 5, -28
 149              		.cfi_offset 6, -24
 150              		.cfi_offset 7, -20
 151              		.cfi_offset 8, -16
 152              		.cfi_offset 9, -12
 153              		.cfi_offset 10, -8
 154              		.cfi_offset 14, -4
 155 0004 0150A0E1 		mov	r5, r1
 156 0008 0280A0E1 		mov	r8, r2
 157 000c 0370A0E1 		mov	r7, r3
 158 0010 20909DE5 		ldr	r9, [sp, #32]
 321:../src/FreeRTOS/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
 159              		.loc 1 321 5 is_stmt 1 view .LVU35
 160              	.LVL12:
 322:../src/FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 161              		.loc 1 322 5 view .LVU36
 323:../src/FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 162              		.loc 1 323 5 view .LVU37
 324:../src/FreeRTOS/event_groups.c **** 
 163              		.loc 1 324 5 view .LVU38
 328:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 164              		.loc 1 328 5 view .LVU39
 165 0014 006050E2 		subs	r6, r0, #0
 166 0018 1600000A 		beq	.L25
 167              	.LVL13:
 168              	.L10:
 328:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 169              		.loc 1 328 32 discriminator 3 view .LVU40
 329:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 170              		.loc 1 329 5 discriminator 3 view .LVU41
 171 001c FF0415E3 		tst	r5, #-16777216
 172 0020 1900001A 		bne	.L26
 173              	.L11:
 329:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 174              		.loc 1 329 77 discriminator 3 view .LVU42
 330:../src/FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 175              		.loc 1 330 5 discriminator 3 view .LVU43
 176 0024 000055E3 		cmp	r5, #0
 177 0028 1C00000A 		beq	.L27
 178              	.L12:
 330:../src/FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 179              		.loc 1 330 41 discriminator 3 view .LVU44
 333:../src/FreeRTOS/event_groups.c ****         }
 180              		.loc 1 333 13 discriminator 3 view .LVU45
 181 002c FEFFFFEB 		bl	xTaskGetSchedulerState
 182              	.LVL14:
 183 0030 000050E3 		cmp	r0, #0
 184 0034 0100001A 		bne	.L13
 333:../src/FreeRTOS/event_groups.c ****         }
 185              		.loc 1 333 13 is_stmt 0 discriminator 2 view .LVU46
 186 0038 000059E3 		cmp	r9, #0
 187 003c 1C00001A 		bne	.L28
 188              	.L13:
 333:../src/FreeRTOS/event_groups.c ****         }
 189              		.loc 1 333 114 is_stmt 1 discriminator 9 view .LVU47
 337:../src/FreeRTOS/event_groups.c ****     {
 190              		.loc 1 337 5 discriminator 9 view .LVU48
 191 0040 FEFFFFEB 		bl	vTaskSuspendAll
 192              	.LVL15:
 193              	.LBB2:
 339:../src/FreeRTOS/event_groups.c **** 
 194              		.loc 1 339 9 discriminator 9 view .LVU49
 339:../src/FreeRTOS/event_groups.c **** 
 195              		.loc 1 339 27 is_stmt 0 discriminator 9 view .LVU50
 196 0044 004096E5 		ldr	r4, [r6]
 197              	.LVL16:
 342:../src/FreeRTOS/event_groups.c **** 
 198              		.loc 1 342 9 is_stmt 1 discriminator 9 view .LVU51
 342:../src/FreeRTOS/event_groups.c **** 
 199              		.loc 1 342 29 is_stmt 0 discriminator 9 view .LVU52
 200 0048 0720A0E1 		mov	r2, r7
 201 004c 0510A0E1 		mov	r1, r5
 202 0050 0400A0E1 		mov	r0, r4
 203 0054 FEFFFFEB 		bl	prvTestWaitCondition
 204              	.LVL17:
 344:../src/FreeRTOS/event_groups.c ****         {
 205              		.loc 1 344 9 is_stmt 1 discriminator 9 view .LVU53
 344:../src/FreeRTOS/event_groups.c ****         {
 206              		.loc 1 344 11 is_stmt 0 discriminator 9 view .LVU54
 207 0058 000050E3 		cmp	r0, #0
 208 005c 1900000A 		beq	.L14
 348:../src/FreeRTOS/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 209              		.loc 1 348 13 is_stmt 1 view .LVU55
 210              	.LVL18:
 349:../src/FreeRTOS/event_groups.c **** 
 211              		.loc 1 349 13 view .LVU56
 352:../src/FreeRTOS/event_groups.c ****             {
 212              		.loc 1 352 13 view .LVU57
 352:../src/FreeRTOS/event_groups.c ****             {
 213              		.loc 1 352 15 is_stmt 0 view .LVU58
 214 0060 000058E3 		cmp	r8, #0
 215 0064 2600000A 		beq	.L22
 354:../src/FreeRTOS/event_groups.c ****             }
 216              		.loc 1 354 17 is_stmt 1 view .LVU59
 354:../src/FreeRTOS/event_groups.c ****             }
 217              		.loc 1 354 42 is_stmt 0 view .LVU60
 218 0068 0530C4E1 		bic	r3, r4, r5
 219 006c 003086E5 		str	r3, [r6]
 349:../src/FreeRTOS/event_groups.c **** 
 220              		.loc 1 349 26 view .LVU61
 221 0070 0090A0E3 		mov	r9, #0
 222 0074 230000EA 		b	.L15
 223              	.LVL19:
 224              	.L25:
 349:../src/FreeRTOS/event_groups.c **** 
 225              		.loc 1 349 26 view .LVU62
 226              	.LBE2:
 328:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 227              		.loc 1 328 5 is_stmt 1 discriminator 1 view .LVU63
 228 0078 521FA0E3 		mov	r1, #328
 229              	.LVL20:
 328:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 230              		.loc 1 328 5 is_stmt 0 discriminator 1 view .LVU64
 231 007c 000000E3 		movw	r0, #:lower16:.LC0
 232              	.LVL21:
 328:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 233              		.loc 1 328 5 discriminator 1 view .LVU65
 234 0080 000040E3 		movt	r0, #:upper16:.LC0
 235 0084 FEFFFFEB 		bl	R_OS_AssertCalled
 236              	.LVL22:
 328:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 237              		.loc 1 328 5 discriminator 1 view .LVU66
 238 0088 E3FFFFEA 		b	.L10
 239              	.L26:
 329:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 240              		.loc 1 329 5 is_stmt 1 discriminator 1 view .LVU67
 241 008c 491100E3 		movw	r1, #329
 242 0090 000000E3 		movw	r0, #:lower16:.LC0
 243 0094 000040E3 		movt	r0, #:upper16:.LC0
 244 0098 FEFFFFEB 		bl	R_OS_AssertCalled
 245              	.LVL23:
 246 009c E0FFFFEA 		b	.L11
 247              	.L27:
 330:../src/FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 248              		.loc 1 330 5 discriminator 1 view .LVU68
 249 00a0 4A1100E3 		movw	r1, #330
 250 00a4 000000E3 		movw	r0, #:lower16:.LC0
 251 00a8 000040E3 		movt	r0, #:upper16:.LC0
 252 00ac FEFFFFEB 		bl	R_OS_AssertCalled
 253              	.LVL24:
 254 00b0 DDFFFFEA 		b	.L12
 255              	.L28:
 333:../src/FreeRTOS/event_groups.c ****         }
 256              		.loc 1 333 13 view .LVU69
 257 00b4 4D1100E3 		movw	r1, #333
 258 00b8 000000E3 		movw	r0, #:lower16:.LC0
 259 00bc 000040E3 		movt	r0, #:upper16:.LC0
 260 00c0 FEFFFFEB 		bl	R_OS_AssertCalled
 261              	.LVL25:
 262 00c4 DDFFFFEA 		b	.L13
 263              	.LVL26:
 264              	.L14:
 265              	.LBB3:
 361:../src/FreeRTOS/event_groups.c ****         {
 266              		.loc 1 361 14 view .LVU70
 361:../src/FreeRTOS/event_groups.c ****         {
 267              		.loc 1 361 16 is_stmt 0 view .LVU71
 268 00c8 000059E3 		cmp	r9, #0
 269 00cc 0D00000A 		beq	.L15
 374:../src/FreeRTOS/event_groups.c ****             {
 270              		.loc 1 374 13 is_stmt 1 view .LVU72
 374:../src/FreeRTOS/event_groups.c ****             {
 271              		.loc 1 374 15 is_stmt 0 view .LVU73
 272 00d0 000058E3 		cmp	r8, #0
 273 00d4 0800001A 		bne	.L23
 274              	.LBE3:
 322:../src/FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 275              		.loc 1 322 27 view .LVU74
 276 00d8 0010A0E3 		mov	r1, #0
 277              	.L16:
 278              	.LVL27:
 279              	.LBB4:
 380:../src/FreeRTOS/event_groups.c ****             }
 280              		.loc 1 380 41 is_stmt 1 view .LVU75
 383:../src/FreeRTOS/event_groups.c ****             {
 281              		.loc 1 383 13 view .LVU76
 383:../src/FreeRTOS/event_groups.c ****             {
 282              		.loc 1 383 15 is_stmt 0 view .LVU77
 283 00dc 000057E3 		cmp	r7, #0
 385:../src/FreeRTOS/event_groups.c ****             }
 284              		.loc 1 385 17 is_stmt 1 view .LVU78
 385:../src/FreeRTOS/event_groups.c ****             }
 285              		.loc 1 385 31 is_stmt 0 view .LVU79
 286 00e0 01138113 		orrne	r1, r1, #67108864
 287              	.LVL28:
 288              	.L17:
 389:../src/FreeRTOS/event_groups.c ****             }
 289              		.loc 1 389 41 is_stmt 1 view .LVU80
 395:../src/FreeRTOS/event_groups.c **** 
 290              		.loc 1 395 13 view .LVU81
 291 00e4 0920A0E1 		mov	r2, r9
 292 00e8 051081E1 		orr	r1, r1, r5
 293              	.LVL29:
 395:../src/FreeRTOS/event_groups.c **** 
 294              		.loc 1 395 13 is_stmt 0 view .LVU82
 295 00ec 040086E2 		add	r0, r6, #4
 296              	.LVL30:
 395:../src/FreeRTOS/event_groups.c **** 
 297              		.loc 1 395 13 view .LVU83
 298 00f0 FEFFFFEB 		bl	vTaskPlaceOnUnorderedEventList
 299              	.LVL31:
 400:../src/FreeRTOS/event_groups.c **** 
 300              		.loc 1 400 13 is_stmt 1 view .LVU84
 400:../src/FreeRTOS/event_groups.c **** 
 301              		.loc 1 400 22 is_stmt 0 view .LVU85
 302 00f4 0040A0E3 		mov	r4, #0
 303              	.LVL32:
 400:../src/FreeRTOS/event_groups.c **** 
 304              		.loc 1 400 22 view .LVU86
 305 00f8 020000EA 		b	.L15
 306              	.LVL33:
 307              	.L23:
 376:../src/FreeRTOS/event_groups.c ****             }
 308              		.loc 1 376 31 view .LVU87
 309 00fc 0114A0E3 		mov	r1, #16777216
 310 0100 F5FFFFEA 		b	.L16
 311              	.LVL34:
 312              	.L22:
 349:../src/FreeRTOS/event_groups.c **** 
 313              		.loc 1 349 26 view .LVU88
 314 0104 0090A0E3 		mov	r9, #0
 315              	.LVL35:
 316              	.L15:
 402:../src/FreeRTOS/event_groups.c ****         }
 317              		.loc 1 402 77 is_stmt 1 view .LVU89
 318              	.LBE4:
 405:../src/FreeRTOS/event_groups.c **** 
 319              		.loc 1 405 5 view .LVU90
 405:../src/FreeRTOS/event_groups.c **** 
 320              		.loc 1 405 23 is_stmt 0 view .LVU91
 321 0108 FEFFFFEB 		bl	xTaskResumeAll
 322              	.LVL36:
 407:../src/FreeRTOS/event_groups.c ****     {
 323              		.loc 1 407 5 is_stmt 1 view .LVU92
 407:../src/FreeRTOS/event_groups.c ****     {
 324              		.loc 1 407 7 is_stmt 0 view .LVU93
 325 010c 000059E3 		cmp	r9, #0
 326 0110 0700000A 		beq	.L9
 409:../src/FreeRTOS/event_groups.c ****         {
 327              		.loc 1 409 9 is_stmt 1 view .LVU94
 409:../src/FreeRTOS/event_groups.c ****         {
 328              		.loc 1 409 11 is_stmt 0 view .LVU95
 329 0114 000050E3 		cmp	r0, #0
 330 0118 0000001A 		bne	.L19
 411:../src/FreeRTOS/event_groups.c ****         }
 331              		.loc 1 411 13 is_stmt 1 view .LVU96
 332              		.syntax divided
 333              	@ 411 "../src/FreeRTOS/event_groups.c" 1
 334 011c 000000EF 		SWI 0
 335              	@ 0 "" 2
 411:../src/FreeRTOS/event_groups.c ****         }
 336              		.loc 1 411 35 view .LVU97
 337              		.arm
 338              		.syntax unified
 339              	.L19:
 415:../src/FreeRTOS/event_groups.c ****         }
 340              		.loc 1 415 37 view .LVU98
 422:../src/FreeRTOS/event_groups.c **** 
 341              		.loc 1 422 9 view .LVU99
 422:../src/FreeRTOS/event_groups.c **** 
 342              		.loc 1 422 20 is_stmt 0 view .LVU100
 343 0120 FEFFFFEB 		bl	uxTaskResetEventItemValue
 344              	.LVL37:
 422:../src/FreeRTOS/event_groups.c **** 
 345              		.loc 1 422 20 view .LVU101
 346 0124 0040A0E1 		mov	r4, r0
 347              	.LVL38:
 424:../src/FreeRTOS/event_groups.c ****         {
 348              		.loc 1 424 9 is_stmt 1 view .LVU102
 424:../src/FreeRTOS/event_groups.c ****         {
 349              		.loc 1 424 11 is_stmt 0 view .LVU103
 350 0128 020410E3 		tst	r0, #33554432
 351 012c 0200000A 		beq	.L29
 352              	.LVL39:
 353              	.L20:
 456:../src/FreeRTOS/event_groups.c **** 
 354              		.loc 1 456 9 is_stmt 1 view .LVU104
 459:../src/FreeRTOS/event_groups.c ****     }
 355              		.loc 1 459 9 view .LVU105
 459:../src/FreeRTOS/event_groups.c ****     }
 356              		.loc 1 459 18 is_stmt 0 view .LVU106
 357 0130 FF44C4E3 		bic	r4, r4, #-16777216
 358              	.LVL40:
 462:../src/FreeRTOS/event_groups.c **** 
 359              		.loc 1 462 5 is_stmt 1 view .LVU107
 465:../src/FreeRTOS/event_groups.c **** 
 360              		.loc 1 465 5 view .LVU108
 467:../src/FreeRTOS/event_groups.c **** }
 361              		.loc 1 467 5 view .LVU109
 362              	.L9:
 468:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 363              		.loc 1 468 1 is_stmt 0 view .LVU110
 364 0134 0400A0E1 		mov	r0, r4
 365 0138 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 366              	.LVL41:
 367              	.L29:
 426:../src/FreeRTOS/event_groups.c ****             {
 368              		.loc 1 426 13 is_stmt 1 view .LVU111
 369 013c FEFFFFEB 		bl	vPortEnterCritical
 370              	.LVL42:
 426:../src/FreeRTOS/event_groups.c ****             {
 371              		.loc 1 426 33 view .LVU112
 429:../src/FreeRTOS/event_groups.c **** 
 372              		.loc 1 429 17 view .LVU113
 429:../src/FreeRTOS/event_groups.c **** 
 373              		.loc 1 429 26 is_stmt 0 view .LVU114
 374 0140 004096E5 		ldr	r4, [r6]
 375              	.LVL43:
 433:../src/FreeRTOS/event_groups.c ****                 {
 376              		.loc 1 433 17 is_stmt 1 view .LVU115
 433:../src/FreeRTOS/event_groups.c ****                 {
 377              		.loc 1 433 21 is_stmt 0 view .LVU116
 378 0144 0720A0E1 		mov	r2, r7
 379 0148 0510A0E1 		mov	r1, r5
 380 014c 0400A0E1 		mov	r0, r4
 381 0150 FEFFFFEB 		bl	prvTestWaitCondition
 382              	.LVL44:
 433:../src/FreeRTOS/event_groups.c ****                 {
 383              		.loc 1 433 19 view .LVU117
 384 0154 000050E3 		cmp	r0, #0
 385 0158 0200000A 		beq	.L21
 435:../src/FreeRTOS/event_groups.c ****                     {
 386              		.loc 1 435 21 is_stmt 1 view .LVU118
 435:../src/FreeRTOS/event_groups.c ****                     {
 387              		.loc 1 435 23 is_stmt 0 view .LVU119
 388 015c 000058E3 		cmp	r8, #0
 437:../src/FreeRTOS/event_groups.c ****                     }
 389              		.loc 1 437 25 is_stmt 1 view .LVU120
 437:../src/FreeRTOS/event_groups.c ****                     }
 390              		.loc 1 437 50 is_stmt 0 view .LVU121
 391 0160 0550C411 		bicne	r5, r4, r5
 392              	.LVL45:
 437:../src/FreeRTOS/event_groups.c ****                     }
 393              		.loc 1 437 50 view .LVU122
 394 0164 00508615 		strne	r5, [r6]
 395              	.L21:
 446:../src/FreeRTOS/event_groups.c ****                 }
 396              		.loc 1 446 45 is_stmt 1 view .LVU123
 449:../src/FreeRTOS/event_groups.c ****             }
 397              		.loc 1 449 17 view .LVU124
 398              	.LVL46:
 451:../src/FreeRTOS/event_groups.c ****         }
 399              		.loc 1 451 13 view .LVU125
 400 0168 FEFFFFEB 		bl	vPortExitCritical
 401              	.LVL47:
 451:../src/FreeRTOS/event_groups.c ****         }
 402              		.loc 1 451 32 view .LVU126
 403 016c EFFFFFEA 		b	.L20
 404              		.cfi_endproc
 405              	.LFE2:
 407              		.section	.text.xEventGroupClearBits,"ax",%progbits
 408              		.align	2
 409              		.global	xEventGroupClearBits
 410              		.syntax unified
 411              		.arm
 412              		.fpu neon
 414              	xEventGroupClearBits:
 415              	.LVL48:
 416              	.LFB3:
 473:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 417              		.loc 1 473 1 view -0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 473:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 421              		.loc 1 473 1 is_stmt 0 view .LVU128
 422 0000 70402DE9 		push	{r4, r5, r6, lr}
 423              		.cfi_def_cfa_offset 16
 424              		.cfi_offset 4, -16
 425              		.cfi_offset 5, -12
 426              		.cfi_offset 6, -8
 427              		.cfi_offset 14, -4
 428 0004 0140A0E1 		mov	r4, r1
 474:../src/FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 429              		.loc 1 474 5 is_stmt 1 view .LVU129
 430              	.LVL49:
 475:../src/FreeRTOS/event_groups.c **** 
 431              		.loc 1 475 5 view .LVU130
 479:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 432              		.loc 1 479 5 view .LVU131
 433 0008 005050E2 		subs	r5, r0, #0
 434 000c 0800000A 		beq	.L34
 435              	.LVL50:
 436              	.L31:
 479:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 437              		.loc 1 479 32 discriminator 3 view .LVU132
 480:../src/FreeRTOS/event_groups.c **** 
 438              		.loc 1 480 5 discriminator 3 view .LVU133
 439 0010 FF0414E3 		tst	r4, #-16777216
 440 0014 0B00001A 		bne	.L35
 441              	.L32:
 480:../src/FreeRTOS/event_groups.c **** 
 442              		.loc 1 480 75 discriminator 3 view .LVU134
 482:../src/FreeRTOS/event_groups.c ****     {
 443              		.loc 1 482 5 discriminator 3 view .LVU135
 444 0018 FEFFFFEB 		bl	vPortEnterCritical
 445              	.LVL51:
 482:../src/FreeRTOS/event_groups.c ****     {
 446              		.loc 1 482 25 discriminator 3 view .LVU136
 484:../src/FreeRTOS/event_groups.c **** 
 447              		.loc 1 484 66 discriminator 3 view .LVU137
 488:../src/FreeRTOS/event_groups.c **** 
 448              		.loc 1 488 9 discriminator 3 view .LVU138
 488:../src/FreeRTOS/event_groups.c **** 
 449              		.loc 1 488 18 is_stmt 0 discriminator 3 view .LVU139
 450 001c 006095E5 		ldr	r6, [r5]
 451              	.LVL52:
 491:../src/FreeRTOS/event_groups.c ****     }
 452              		.loc 1 491 9 is_stmt 1 discriminator 3 view .LVU140
 491:../src/FreeRTOS/event_groups.c ****     }
 453              		.loc 1 491 34 is_stmt 0 discriminator 3 view .LVU141
 454 0020 0440C6E1 		bic	r4, r6, r4
 455              	.LVL53:
 491:../src/FreeRTOS/event_groups.c ****     }
 456              		.loc 1 491 34 discriminator 3 view .LVU142
 457 0024 004085E5 		str	r4, [r5]
 493:../src/FreeRTOS/event_groups.c **** 
 458              		.loc 1 493 5 is_stmt 1 discriminator 3 view .LVU143
 459 0028 FEFFFFEB 		bl	vPortExitCritical
 460              	.LVL54:
 493:../src/FreeRTOS/event_groups.c **** 
 461              		.loc 1 493 24 discriminator 3 view .LVU144
 495:../src/FreeRTOS/event_groups.c **** }
 462              		.loc 1 495 5 discriminator 3 view .LVU145
 496:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 463              		.loc 1 496 1 is_stmt 0 discriminator 3 view .LVU146
 464 002c 0600A0E1 		mov	r0, r6
 465 0030 7080BDE8 		pop	{r4, r5, r6, pc}
 466              	.LVL55:
 467              	.L34:
 479:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 468              		.loc 1 479 5 is_stmt 1 discriminator 1 view .LVU147
 469 0034 DF1100E3 		movw	r1, #479
 470              	.LVL56:
 479:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 471              		.loc 1 479 5 is_stmt 0 discriminator 1 view .LVU148
 472 0038 000000E3 		movw	r0, #:lower16:.LC0
 473              	.LVL57:
 479:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 474              		.loc 1 479 5 discriminator 1 view .LVU149
 475 003c 000040E3 		movt	r0, #:upper16:.LC0
 476 0040 FEFFFFEB 		bl	R_OS_AssertCalled
 477              	.LVL58:
 478 0044 F1FFFFEA 		b	.L31
 479              	.L35:
 480:../src/FreeRTOS/event_groups.c **** 
 480              		.loc 1 480 5 is_stmt 1 discriminator 1 view .LVU150
 481 0048 1E1EA0E3 		mov	r1, #480
 482 004c 000000E3 		movw	r0, #:lower16:.LC0
 483 0050 000040E3 		movt	r0, #:upper16:.LC0
 484 0054 FEFFFFEB 		bl	R_OS_AssertCalled
 485              	.LVL59:
 486 0058 EEFFFFEA 		b	.L32
 487              		.cfi_endproc
 488              	.LFE3:
 490              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 491              		.align	2
 492              		.global	vEventGroupClearBitsCallback
 493              		.syntax unified
 494              		.arm
 495              		.fpu neon
 497              	vEventGroupClearBitsCallback:
 498              	.LVL60:
 499              	.LFB9:
 681:../src/FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 500              		.loc 1 681 1 view -0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 0, uses_anonymous_args = 0
 681:../src/FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 504              		.loc 1 681 1 is_stmt 0 view .LVU152
 505 0000 10402DE9 		push	{r4, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 4, -8
 508              		.cfi_offset 14, -4
 682:../src/FreeRTOS/event_groups.c **** }
 509              		.loc 1 682 5 is_stmt 1 view .LVU153
 682:../src/FreeRTOS/event_groups.c **** }
 510              		.loc 1 682 14 is_stmt 0 view .LVU154
 511 0004 FEFFFFEB 		bl	xEventGroupClearBits
 512              	.LVL61:
 683:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 513              		.loc 1 683 1 view .LVU155
 514 0008 1080BDE8 		pop	{r4, pc}
 515              		.cfi_endproc
 516              	.LFE9:
 518              		.section	.text.xEventGroupClearBitsFromISR,"ax",%progbits
 519              		.align	2
 520              		.global	xEventGroupClearBitsFromISR
 521              		.syntax unified
 522              		.arm
 523              		.fpu neon
 525              	xEventGroupClearBitsFromISR:
 526              	.LVL62:
 527              	.LFB4:
 503:../src/FreeRTOS/event_groups.c ****         BaseType_t xReturn;
 528              		.loc 1 503 5 is_stmt 1 view -0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 503:../src/FreeRTOS/event_groups.c ****         BaseType_t xReturn;
 532              		.loc 1 503 5 is_stmt 0 view .LVU157
 533 0000 10402DE9 		push	{r4, lr}
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 4, -8
 536              		.cfi_offset 14, -4
 537 0004 0120A0E1 		mov	r2, r1
 504:../src/FreeRTOS/event_groups.c **** 
 538              		.loc 1 504 9 is_stmt 1 view .LVU158
 506:../src/FreeRTOS/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGro
 539              		.loc 1 506 75 view .LVU159
 507:../src/FreeRTOS/event_groups.c **** 
 540              		.loc 1 507 9 view .LVU160
 507:../src/FreeRTOS/event_groups.c **** 
 541              		.loc 1 507 19 is_stmt 0 view .LVU161
 542 0008 0030A0E3 		mov	r3, #0
 543 000c 0010A0E1 		mov	r1, r0
 544              	.LVL63:
 507:../src/FreeRTOS/event_groups.c **** 
 545              		.loc 1 507 19 view .LVU162
 546 0010 000000E3 		movw	r0, #:lower16:vEventGroupClearBitsCallback
 547              	.LVL64:
 507:../src/FreeRTOS/event_groups.c **** 
 548              		.loc 1 507 19 view .LVU163
 549 0014 000040E3 		movt	r0, #:upper16:vEventGroupClearBitsCallback
 550 0018 FEFFFFEB 		bl	xTimerPendFunctionCallFromISR
 551              	.LVL65:
 509:../src/FreeRTOS/event_groups.c ****     }
 552              		.loc 1 509 9 is_stmt 1 view .LVU164
 510:../src/FreeRTOS/event_groups.c **** 
 553              		.loc 1 510 5 is_stmt 0 view .LVU165
 554 001c 1080BDE8 		pop	{r4, pc}
 555              		.cfi_endproc
 556              	.LFE4:
 558              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 559              		.align	2
 560              		.global	xEventGroupGetBitsFromISR
 561              		.syntax unified
 562              		.arm
 563              		.fpu neon
 565              	xEventGroupGetBitsFromISR:
 566              	.LVL66:
 567              	.LFB5:
 516:../src/FreeRTOS/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 568              		.loc 1 516 1 is_stmt 1 view -0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 516:../src/FreeRTOS/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 572              		.loc 1 516 1 is_stmt 0 view .LVU167
 573 0000 10402DE9 		push	{r4, lr}
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 4, -8
 576              		.cfi_offset 14, -4
 577 0004 0040A0E1 		mov	r4, r0
 517:../src/FreeRTOS/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 578              		.loc 1 517 5 is_stmt 1 view .LVU168
 518:../src/FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 579              		.loc 1 518 5 view .LVU169
 580              	.LVL67:
 519:../src/FreeRTOS/event_groups.c **** 
 581              		.loc 1 519 5 view .LVU170
 521:../src/FreeRTOS/event_groups.c ****     {
 582              		.loc 1 521 5 view .LVU171
 521:../src/FreeRTOS/event_groups.c ****     {
 583              		.loc 1 521 30 is_stmt 0 view .LVU172
 584 0008 FEFFFFEB 		bl	ulPortSetInterruptMask
 585              	.LVL68:
 523:../src/FreeRTOS/event_groups.c ****     }
 586              		.loc 1 523 9 is_stmt 1 view .LVU173
 523:../src/FreeRTOS/event_groups.c ****     }
 587              		.loc 1 523 18 is_stmt 0 view .LVU174
 588 000c 004094E5 		ldr	r4, [r4]
 589              	.LVL69:
 525:../src/FreeRTOS/event_groups.c **** 
 590              		.loc 1 525 5 is_stmt 1 view .LVU175
 591 0010 FEFFFFEB 		bl	vPortClearInterruptMask
 592              	.LVL70:
 527:../src/FreeRTOS/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 593              		.loc 1 527 5 view .LVU176
 528:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 594              		.loc 1 528 1 is_stmt 0 view .LVU177
 595 0014 0400A0E1 		mov	r0, r4
 596 0018 1080BDE8 		pop	{r4, pc}
 597              		.cfi_endproc
 598              	.LFE5:
 600              		.section	.text.xEventGroupSetBits,"ax",%progbits
 601              		.align	2
 602              		.global	xEventGroupSetBits
 603              		.syntax unified
 604              		.arm
 605              		.fpu neon
 607              	xEventGroupSetBits:
 608              	.LVL71:
 609              	.LFB6:
 533:../src/FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 610              		.loc 1 533 1 is_stmt 1 view -0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 533:../src/FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 614              		.loc 1 533 1 is_stmt 0 view .LVU179
 615 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 616              		.cfi_def_cfa_offset 24
 617              		.cfi_offset 4, -24
 618              		.cfi_offset 5, -20
 619              		.cfi_offset 6, -16
 620              		.cfi_offset 7, -12
 621              		.cfi_offset 8, -8
 622              		.cfi_offset 14, -4
 623 0004 0150A0E1 		mov	r5, r1
 534:../src/FreeRTOS/event_groups.c ****     ListItem_t const * pxListEnd;
 624              		.loc 1 534 5 is_stmt 1 view .LVU180
 535:../src/FreeRTOS/event_groups.c ****     List_t const * pxList;
 625              		.loc 1 535 5 view .LVU181
 536:../src/FreeRTOS/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 626              		.loc 1 536 5 view .LVU182
 537:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 627              		.loc 1 537 5 view .LVU183
 628              	.LVL72:
 538:../src/FreeRTOS/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 629              		.loc 1 538 5 view .LVU184
 539:../src/FreeRTOS/event_groups.c **** 
 630              		.loc 1 539 5 view .LVU185
 543:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 631              		.loc 1 543 5 view .LVU186
 632 0008 004050E2 		subs	r4, r0, #0
 633 000c 0900000A 		beq	.L52
 634              	.LVL73:
 635              	.L43:
 543:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 636              		.loc 1 543 32 discriminator 3 view .LVU187
 544:../src/FreeRTOS/event_groups.c **** 
 637              		.loc 1 544 5 discriminator 3 view .LVU188
 638 0010 FF0415E3 		tst	r5, #-16777216
 639 0014 0C00001A 		bne	.L53
 640              	.L44:
 544:../src/FreeRTOS/event_groups.c **** 
 641              		.loc 1 544 73 discriminator 3 view .LVU189
 546:../src/FreeRTOS/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 642              		.loc 1 546 5 discriminator 3 view .LVU190
 643              	.LVL74:
 547:../src/FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 644              		.loc 1 547 5 discriminator 3 view .LVU191
 547:../src/FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 645              		.loc 1 547 15 is_stmt 0 discriminator 3 view .LVU192
 646 0018 0C6084E2 		add	r6, r4, #12
 647              	.LVL75:
 548:../src/FreeRTOS/event_groups.c ****     {
 648              		.loc 1 548 5 is_stmt 1 discriminator 3 view .LVU193
 649 001c FEFFFFEB 		bl	vTaskSuspendAll
 650              	.LVL76:
 550:../src/FreeRTOS/event_groups.c **** 
 651              		.loc 1 550 62 discriminator 3 view .LVU194
 552:../src/FreeRTOS/event_groups.c **** 
 652              		.loc 1 552 9 discriminator 3 view .LVU195
 552:../src/FreeRTOS/event_groups.c **** 
 653              		.loc 1 552 20 is_stmt 0 discriminator 3 view .LVU196
 654 0020 100094E5 		ldr	r0, [r4, #16]
 655              	.LVL77:
 555:../src/FreeRTOS/event_groups.c **** 
 656              		.loc 1 555 9 is_stmt 1 discriminator 3 view .LVU197
 555:../src/FreeRTOS/event_groups.c **** 
 657              		.loc 1 555 34 is_stmt 0 discriminator 3 view .LVU198
 658 0024 001094E5 		ldr	r1, [r4]
 659 0028 055081E1 		orr	r5, r1, r5
 660              	.LVL78:
 555:../src/FreeRTOS/event_groups.c **** 
 661              		.loc 1 555 34 discriminator 3 view .LVU199
 662 002c 005084E5 		str	r5, [r4]
 558:../src/FreeRTOS/event_groups.c ****         {
 663              		.loc 1 558 9 is_stmt 1 discriminator 3 view .LVU200
 537:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 664              		.loc 1 537 17 is_stmt 0 discriminator 3 view .LVU201
 665 0030 0070A0E3 		mov	r7, #0
 558:../src/FreeRTOS/event_groups.c ****         {
 666              		.loc 1 558 14 discriminator 3 view .LVU202
 667 0034 110000EA 		b	.L45
 668              	.LVL79:
 669              	.L52:
 543:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 670              		.loc 1 543 5 is_stmt 1 discriminator 1 view .LVU203
 671 0038 1F1200E3 		movw	r1, #543
 672              	.LVL80:
 543:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 673              		.loc 1 543 5 is_stmt 0 discriminator 1 view .LVU204
 674 003c 000000E3 		movw	r0, #:lower16:.LC0
 675              	.LVL81:
 543:../src/FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 676              		.loc 1 543 5 discriminator 1 view .LVU205
 677 0040 000040E3 		movt	r0, #:upper16:.LC0
 678 0044 FEFFFFEB 		bl	R_OS_AssertCalled
 679              	.LVL82:
 680 0048 F0FFFFEA 		b	.L43
 681              	.L53:
 544:../src/FreeRTOS/event_groups.c **** 
 682              		.loc 1 544 5 is_stmt 1 discriminator 1 view .LVU206
 683 004c 221EA0E3 		mov	r1, #544
 684 0050 000000E3 		movw	r0, #:lower16:.LC0
 685 0054 000040E3 		movt	r0, #:upper16:.LC0
 686 0058 FEFFFFEB 		bl	R_OS_AssertCalled
 687              	.LVL83:
 688 005c EDFFFFEA 		b	.L44
 689              	.LVL84:
 690              	.L46:
 580:../src/FreeRTOS/event_groups.c ****             {
 691              		.loc 1 580 18 view .LVU207
 580:../src/FreeRTOS/event_groups.c ****             {
 692              		.loc 1 580 53 is_stmt 0 view .LVU208
 693 0060 001094E5 		ldr	r1, [r4]
 580:../src/FreeRTOS/event_groups.c ****             {
 694              		.loc 1 580 20 view .LVU209
 695 0064 0110D2E1 		bics	r1, r2, r1
 696 0068 0300001A 		bne	.L48
 580:../src/FreeRTOS/event_groups.c ****             {
 697              		.loc 1 580 20 view .LVU210
 698 006c 0D0000EA 		b	.L47
 699              	.LVL85:
 700              	.L49:
 599:../src/FreeRTOS/event_groups.c ****                 }
 701              		.loc 1 599 45 is_stmt 1 view .LVU211
 607:../src/FreeRTOS/event_groups.c ****             }
 702              		.loc 1 607 17 view .LVU212
 607:../src/FreeRTOS/event_groups.c ****             }
 703              		.loc 1 607 75 is_stmt 0 view .LVU213
 704 0070 001094E5 		ldr	r1, [r4]
 607:../src/FreeRTOS/event_groups.c ****             }
 705              		.loc 1 607 17 view .LVU214
 706 0074 021481E3 		orr	r1, r1, #33554432
 707 0078 FEFFFFEB 		bl	vTaskRemoveFromUnorderedEventList
 708              	.LVL86:
 709              	.L48:
 533:../src/FreeRTOS/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 710              		.loc 1 533 1 view .LVU215
 711 007c 0500A0E1 		mov	r0, r5
 712              	.LVL87:
 713              	.L45:
 558:../src/FreeRTOS/event_groups.c ****         {
 714              		.loc 1 558 14 is_stmt 1 view .LVU216
 715 0080 060050E1 		cmp	r0, r6
 716 0084 0A00000A 		beq	.L54
 560:../src/FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 717              		.loc 1 560 13 view .LVU217
 560:../src/FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 718              		.loc 1 560 20 is_stmt 0 view .LVU218
 719 0088 045090E5 		ldr	r5, [r0, #4]
 720              	.LVL88:
 561:../src/FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 721              		.loc 1 561 13 is_stmt 1 view .LVU219
 561:../src/FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 722              		.loc 1 561 29 is_stmt 0 view .LVU220
 723 008c 003090E5 		ldr	r3, [r0]
 724              	.LVL89:
 562:../src/FreeRTOS/event_groups.c **** 
 725              		.loc 1 562 13 is_stmt 1 view .LVU221
 565:../src/FreeRTOS/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 726              		.loc 1 565 13 view .LVU222
 566:../src/FreeRTOS/event_groups.c **** 
 727              		.loc 1 566 13 view .LVU223
 566:../src/FreeRTOS/event_groups.c **** 
 728              		.loc 1 566 29 is_stmt 0 view .LVU224
 729 0090 FF24C3E3 		bic	r2, r3, #-16777216
 730              	.LVL90:
 568:../src/FreeRTOS/event_groups.c ****             {
 731              		.loc 1 568 13 is_stmt 1 view .LVU225
 568:../src/FreeRTOS/event_groups.c ****             {
 732              		.loc 1 568 15 is_stmt 0 view .LVU226
 733 0094 010313E3 		tst	r3, #67108864
 734 0098 F0FFFF1A 		bne	.L46
 571:../src/FreeRTOS/event_groups.c ****                 {
 735              		.loc 1 571 17 is_stmt 1 view .LVU227
 571:../src/FreeRTOS/event_groups.c ****                 {
 736              		.loc 1 571 52 is_stmt 0 view .LVU228
 737 009c 001094E5 		ldr	r1, [r4]
 571:../src/FreeRTOS/event_groups.c ****                 {
 738              		.loc 1 571 19 view .LVU229
 739 00a0 020011E1 		tst	r1, r2
 740 00a4 F4FFFF0A 		beq	.L48
 741              	.L47:
 742              	.LVL91:
 593:../src/FreeRTOS/event_groups.c ****                 {
 743              		.loc 1 593 17 is_stmt 1 view .LVU230
 593:../src/FreeRTOS/event_groups.c ****                 {
 744              		.loc 1 593 19 is_stmt 0 view .LVU231
 745 00a8 010413E3 		tst	r3, #16777216
 595:../src/FreeRTOS/event_groups.c ****                 }
 746              		.loc 1 595 21 is_stmt 1 view .LVU232
 595:../src/FreeRTOS/event_groups.c ****                 }
 747              		.loc 1 595 35 is_stmt 0 view .LVU233
 748 00ac 02708711 		orrne	r7, r7, r2
 749              	.LVL92:
 595:../src/FreeRTOS/event_groups.c ****                 }
 750              		.loc 1 595 35 view .LVU234
 751 00b0 EEFFFFEA 		b	.L49
 752              	.LVL93:
 753              	.L54:
 618:../src/FreeRTOS/event_groups.c ****     }
 754              		.loc 1 618 9 is_stmt 1 view .LVU235
 618:../src/FreeRTOS/event_groups.c ****     }
 755              		.loc 1 618 34 is_stmt 0 view .LVU236
 756 00b4 003094E5 		ldr	r3, [r4]
 757 00b8 0770C3E1 		bic	r7, r3, r7
 758              	.LVL94:
 618:../src/FreeRTOS/event_groups.c ****     }
 759              		.loc 1 618 34 view .LVU237
 760 00bc 007084E5 		str	r7, [r4]
 620:../src/FreeRTOS/event_groups.c **** 
 761              		.loc 1 620 5 is_stmt 1 view .LVU238
 620:../src/FreeRTOS/event_groups.c **** 
 762              		.loc 1 620 14 is_stmt 0 view .LVU239
 763 00c0 FEFFFFEB 		bl	xTaskResumeAll
 764              	.LVL95:
 622:../src/FreeRTOS/event_groups.c **** }
 765              		.loc 1 622 5 is_stmt 1 view .LVU240
 623:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 766              		.loc 1 623 1 is_stmt 0 view .LVU241
 767 00c4 000094E5 		ldr	r0, [r4]
 768 00c8 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 769              		.cfi_endproc
 770              	.LFE6:
 772              		.section	.text.xEventGroupSync,"ax",%progbits
 773              		.align	2
 774              		.global	xEventGroupSync
 775              		.syntax unified
 776              		.arm
 777              		.fpu neon
 779              	xEventGroupSync:
 780              	.LVL96:
 781              	.LFB1:
 196:../src/FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 782              		.loc 1 196 1 is_stmt 1 view -0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 196:../src/FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 786              		.loc 1 196 1 is_stmt 0 view .LVU243
 787 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 788              		.cfi_def_cfa_offset 24
 789              		.cfi_offset 4, -24
 790              		.cfi_offset 5, -20
 791              		.cfi_offset 6, -16
 792              		.cfi_offset 7, -12
 793              		.cfi_offset 8, -8
 794              		.cfi_offset 14, -4
 795 0004 0060A0E1 		mov	r6, r0
 796 0008 0180A0E1 		mov	r8, r1
 797 000c 0250A0E1 		mov	r5, r2
 798 0010 0370A0E1 		mov	r7, r3
 197:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 799              		.loc 1 197 5 is_stmt 1 view .LVU244
 198:../src/FreeRTOS/event_groups.c ****     BaseType_t xAlreadyYielded;
 800              		.loc 1 198 5 view .LVU245
 801              	.LVL97:
 199:../src/FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 802              		.loc 1 199 5 view .LVU246
 200:../src/FreeRTOS/event_groups.c **** 
 803              		.loc 1 200 5 view .LVU247
 202:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 804              		.loc 1 202 5 view .LVU248
 805 0014 FF0412E3 		tst	r2, #-16777216
 806 0018 1E00001A 		bne	.L67
 807              	.LVL98:
 808              	.L56:
 202:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 809              		.loc 1 202 77 discriminator 3 view .LVU249
 203:../src/FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 810              		.loc 1 203 5 discriminator 3 view .LVU250
 811 001c 000055E3 		cmp	r5, #0
 812 0020 2100000A 		beq	.L68
 813              	.L57:
 203:../src/FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 814              		.loc 1 203 41 discriminator 3 view .LVU251
 206:../src/FreeRTOS/event_groups.c ****         }
 815              		.loc 1 206 13 discriminator 3 view .LVU252
 816 0024 FEFFFFEB 		bl	xTaskGetSchedulerState
 817              	.LVL99:
 818 0028 000050E3 		cmp	r0, #0
 819 002c 0100001A 		bne	.L58
 206:../src/FreeRTOS/event_groups.c ****         }
 820              		.loc 1 206 13 is_stmt 0 discriminator 2 view .LVU253
 821 0030 000057E3 		cmp	r7, #0
 822 0034 2100001A 		bne	.L69
 823              	.L58:
 206:../src/FreeRTOS/event_groups.c ****         }
 824              		.loc 1 206 114 is_stmt 1 discriminator 9 view .LVU254
 210:../src/FreeRTOS/event_groups.c ****     {
 825              		.loc 1 210 5 discriminator 9 view .LVU255
 826 0038 FEFFFFEB 		bl	vTaskSuspendAll
 827              	.LVL100:
 212:../src/FreeRTOS/event_groups.c **** 
 828              		.loc 1 212 9 discriminator 9 view .LVU256
 212:../src/FreeRTOS/event_groups.c **** 
 829              		.loc 1 212 28 is_stmt 0 discriminator 9 view .LVU257
 830 003c 004096E5 		ldr	r4, [r6]
 831              	.LVL101:
 214:../src/FreeRTOS/event_groups.c **** 
 832              		.loc 1 214 9 is_stmt 1 discriminator 9 view .LVU258
 214:../src/FreeRTOS/event_groups.c **** 
 833              		.loc 1 214 18 is_stmt 0 discriminator 9 view .LVU259
 834 0040 0810A0E1 		mov	r1, r8
 835 0044 0600A0E1 		mov	r0, r6
 836 0048 FEFFFFEB 		bl	xEventGroupSetBits
 837              	.LVL102:
 216:../src/FreeRTOS/event_groups.c ****         {
 838              		.loc 1 216 9 is_stmt 1 discriminator 9 view .LVU260
 216:../src/FreeRTOS/event_groups.c ****         {
 839              		.loc 1 216 36 is_stmt 0 discriminator 9 view .LVU261
 840 004c 084084E1 		orr	r4, r4, r8
 841              	.LVL103:
 216:../src/FreeRTOS/event_groups.c ****         {
 842              		.loc 1 216 11 discriminator 9 view .LVU262
 843 0050 0430D5E1 		bics	r3, r5, r4
 844 0054 1E00000A 		beq	.L70
 229:../src/FreeRTOS/event_groups.c ****             {
 845              		.loc 1 229 13 is_stmt 1 view .LVU263
 229:../src/FreeRTOS/event_groups.c ****             {
 846              		.loc 1 229 15 is_stmt 0 view .LVU264
 847 0058 000057E3 		cmp	r7, #0
 848 005c 2100001A 		bne	.L71
 248:../src/FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 849              		.loc 1 248 17 is_stmt 1 view .LVU265
 248:../src/FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 850              		.loc 1 248 26 is_stmt 0 view .LVU266
 851 0060 004096E5 		ldr	r4, [r6]
 852              	.LVL104:
 249:../src/FreeRTOS/event_groups.c ****             }
 853              		.loc 1 249 17 is_stmt 1 view .LVU267
 854              	.L60:
 253:../src/FreeRTOS/event_groups.c **** 
 855              		.loc 1 253 5 view .LVU268
 253:../src/FreeRTOS/event_groups.c **** 
 856              		.loc 1 253 23 is_stmt 0 view .LVU269
 857 0064 FEFFFFEB 		bl	xTaskResumeAll
 858              	.LVL105:
 255:../src/FreeRTOS/event_groups.c ****     {
 859              		.loc 1 255 5 is_stmt 1 view .LVU270
 255:../src/FreeRTOS/event_groups.c ****     {
 860              		.loc 1 255 7 is_stmt 0 view .LVU271
 861 0068 000057E3 		cmp	r7, #0
 862 006c 0700000A 		beq	.L55
 257:../src/FreeRTOS/event_groups.c ****         {
 863              		.loc 1 257 9 is_stmt 1 view .LVU272
 257:../src/FreeRTOS/event_groups.c ****         {
 864              		.loc 1 257 11 is_stmt 0 view .LVU273
 865 0070 000050E3 		cmp	r0, #0
 866 0074 0000001A 		bne	.L63
 259:../src/FreeRTOS/event_groups.c ****         }
 867              		.loc 1 259 13 is_stmt 1 view .LVU274
 868              		.syntax divided
 869              	@ 259 "../src/FreeRTOS/event_groups.c" 1
 870 0078 000000EF 		SWI 0
 871              	@ 0 "" 2
 259:../src/FreeRTOS/event_groups.c ****         }
 872              		.loc 1 259 35 view .LVU275
 873              		.arm
 874              		.syntax unified
 875              	.L63:
 263:../src/FreeRTOS/event_groups.c ****         }
 876              		.loc 1 263 37 view .LVU276
 270:../src/FreeRTOS/event_groups.c **** 
 877              		.loc 1 270 9 view .LVU277
 270:../src/FreeRTOS/event_groups.c **** 
 878              		.loc 1 270 20 is_stmt 0 view .LVU278
 879 007c FEFFFFEB 		bl	uxTaskResetEventItemValue
 880              	.LVL106:
 270:../src/FreeRTOS/event_groups.c **** 
 881              		.loc 1 270 20 view .LVU279
 882 0080 0040A0E1 		mov	r4, r0
 883              	.LVL107:
 272:../src/FreeRTOS/event_groups.c ****         {
 884              		.loc 1 272 9 is_stmt 1 view .LVU280
 272:../src/FreeRTOS/event_groups.c ****         {
 885              		.loc 1 272 11 is_stmt 0 view .LVU281
 886 0084 020410E3 		tst	r0, #33554432
 887 0088 1C00000A 		beq	.L72
 888              	.LVL108:
 889              	.L64:
 299:../src/FreeRTOS/event_groups.c **** 
 890              		.loc 1 299 9 is_stmt 1 view .LVU282
 303:../src/FreeRTOS/event_groups.c ****     }
 891              		.loc 1 303 9 view .LVU283
 303:../src/FreeRTOS/event_groups.c ****     }
 892              		.loc 1 303 18 is_stmt 0 view .LVU284
 893 008c FF44C4E3 		bic	r4, r4, #-16777216
 894              	.LVL109:
 306:../src/FreeRTOS/event_groups.c **** 
 895              		.loc 1 306 5 is_stmt 1 view .LVU285
 309:../src/FreeRTOS/event_groups.c **** 
 896              		.loc 1 309 5 view .LVU286
 311:../src/FreeRTOS/event_groups.c **** }
 897              		.loc 1 311 5 view .LVU287
 898              	.L55:
 312:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 899              		.loc 1 312 1 is_stmt 0 view .LVU288
 900 0090 0400A0E1 		mov	r0, r4
 901 0094 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 902              	.LVL110:
 903              	.L67:
 202:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 904              		.loc 1 202 5 is_stmt 1 discriminator 1 view .LVU289
 905 0098 CA10A0E3 		mov	r1, #202
 906              	.LVL111:
 202:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 907              		.loc 1 202 5 is_stmt 0 discriminator 1 view .LVU290
 908 009c 000000E3 		movw	r0, #:lower16:.LC0
 909              	.LVL112:
 202:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 910              		.loc 1 202 5 discriminator 1 view .LVU291
 911 00a0 000040E3 		movt	r0, #:upper16:.LC0
 912 00a4 FEFFFFEB 		bl	R_OS_AssertCalled
 913              	.LVL113:
 202:../src/FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 914              		.loc 1 202 5 discriminator 1 view .LVU292
 915 00a8 DBFFFFEA 		b	.L56
 916              	.L68:
 203:../src/FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 917              		.loc 1 203 5 is_stmt 1 discriminator 1 view .LVU293
 918 00ac CB10A0E3 		mov	r1, #203
 919 00b0 000000E3 		movw	r0, #:lower16:.LC0
 920 00b4 000040E3 		movt	r0, #:upper16:.LC0
 921 00b8 FEFFFFEB 		bl	R_OS_AssertCalled
 922              	.LVL114:
 923 00bc D8FFFFEA 		b	.L57
 924              	.L69:
 206:../src/FreeRTOS/event_groups.c ****         }
 925              		.loc 1 206 13 view .LVU294
 926 00c0 CE10A0E3 		mov	r1, #206
 927 00c4 000000E3 		movw	r0, #:lower16:.LC0
 928 00c8 000040E3 		movt	r0, #:upper16:.LC0
 929 00cc FEFFFFEB 		bl	R_OS_AssertCalled
 930              	.LVL115:
 931 00d0 D8FFFFEA 		b	.L58
 932              	.L70:
 219:../src/FreeRTOS/event_groups.c **** 
 933              		.loc 1 219 13 view .LVU295
 934              	.LVL116:
 223:../src/FreeRTOS/event_groups.c **** 
 935              		.loc 1 223 13 view .LVU296
 223:../src/FreeRTOS/event_groups.c **** 
 936              		.loc 1 223 38 is_stmt 0 view .LVU297
 937 00d4 003096E5 		ldr	r3, [r6]
 938 00d8 0530C3E1 		bic	r3, r3, r5
 939 00dc 003086E5 		str	r3, [r6]
 225:../src/FreeRTOS/event_groups.c ****         }
 940              		.loc 1 225 13 is_stmt 1 view .LVU298
 941              	.LVL117:
 225:../src/FreeRTOS/event_groups.c ****         }
 942              		.loc 1 225 26 is_stmt 0 view .LVU299
 943 00e0 0070A0E3 		mov	r7, #0
 944 00e4 DEFFFFEA 		b	.L60
 945              	.LVL118:
 946              	.L71:
 231:../src/FreeRTOS/event_groups.c **** 
 947              		.loc 1 231 89 is_stmt 1 view .LVU300
 236:../src/FreeRTOS/event_groups.c **** 
 948              		.loc 1 236 17 view .LVU301
 949 00e8 0720A0E1 		mov	r2, r7
 950 00ec 051485E3 		orr	r1, r5, #83886080
 951 00f0 040086E2 		add	r0, r6, #4
 952 00f4 FEFFFFEB 		bl	vTaskPlaceOnUnorderedEventList
 953              	.LVL119:
 242:../src/FreeRTOS/event_groups.c ****             }
 954              		.loc 1 242 17 view .LVU302
 242:../src/FreeRTOS/event_groups.c ****             }
 955              		.loc 1 242 26 is_stmt 0 view .LVU303
 956 00f8 0040A0E3 		mov	r4, #0
 957 00fc D8FFFFEA 		b	.L60
 958              	.LVL120:
 959              	.L72:
 275:../src/FreeRTOS/event_groups.c ****             {
 960              		.loc 1 275 13 is_stmt 1 view .LVU304
 961 0100 FEFFFFEB 		bl	vPortEnterCritical
 962              	.LVL121:
 275:../src/FreeRTOS/event_groups.c ****             {
 963              		.loc 1 275 33 view .LVU305
 277:../src/FreeRTOS/event_groups.c **** 
 964              		.loc 1 277 17 view .LVU306
 277:../src/FreeRTOS/event_groups.c **** 
 965              		.loc 1 277 26 is_stmt 0 view .LVU307
 966 0104 004096E5 		ldr	r4, [r6]
 967              	.LVL122:
 283:../src/FreeRTOS/event_groups.c ****                 {
 968              		.loc 1 283 17 is_stmt 1 view .LVU308
 283:../src/FreeRTOS/event_groups.c ****                 {
 969              		.loc 1 283 19 is_stmt 0 view .LVU309
 970 0108 0430D5E1 		bics	r3, r5, r4
 971 010c 0100000A 		beq	.L73
 972              	.LVL123:
 973              	.L65:
 289:../src/FreeRTOS/event_groups.c ****                 }
 974              		.loc 1 289 45 is_stmt 1 view .LVU310
 292:../src/FreeRTOS/event_groups.c **** 
 975              		.loc 1 292 13 view .LVU311
 976 0110 FEFFFFEB 		bl	vPortExitCritical
 977              	.LVL124:
 292:../src/FreeRTOS/event_groups.c **** 
 978              		.loc 1 292 32 view .LVU312
 294:../src/FreeRTOS/event_groups.c ****         }
 979              		.loc 1 294 13 view .LVU313
 294:../src/FreeRTOS/event_groups.c ****         }
 980              		.loc 1 294 13 is_stmt 0 view .LVU314
 981 0114 DCFFFFEA 		b	.L64
 982              	.LVL125:
 983              	.L73:
 285:../src/FreeRTOS/event_groups.c ****                 }
 984              		.loc 1 285 21 is_stmt 1 view .LVU315
 285:../src/FreeRTOS/event_groups.c ****                 }
 985              		.loc 1 285 46 is_stmt 0 view .LVU316
 986 0118 0550C4E1 		bic	r5, r4, r5
 987              	.LVL126:
 285:../src/FreeRTOS/event_groups.c ****                 }
 988              		.loc 1 285 46 view .LVU317
 989 011c 005086E5 		str	r5, [r6]
 990 0120 FAFFFFEA 		b	.L65
 991              		.cfi_endproc
 992              	.LFE1:
 994              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 995              		.align	2
 996              		.global	vEventGroupSetBitsCallback
 997              		.syntax unified
 998              		.arm
 999              		.fpu neon
 1001              	vEventGroupSetBitsCallback:
 1002              	.LVL127:
 1003              	.LFB8:
 672:../src/FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 1004              		.loc 1 672 1 is_stmt 1 view -0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 0
 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 672:../src/FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 1008              		.loc 1 672 1 is_stmt 0 view .LVU319
 1009 0000 10402DE9 		push	{r4, lr}
 1010              		.cfi_def_cfa_offset 8
 1011              		.cfi_offset 4, -8
 1012              		.cfi_offset 14, -4
 673:../src/FreeRTOS/event_groups.c **** }
 1013              		.loc 1 673 5 is_stmt 1 view .LVU320
 673:../src/FreeRTOS/event_groups.c **** }
 1014              		.loc 1 673 14 is_stmt 0 view .LVU321
 1015 0004 FEFFFFEB 		bl	xEventGroupSetBits
 1016              	.LVL128:
 674:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 1017              		.loc 1 674 1 view .LVU322
 1018 0008 1080BDE8 		pop	{r4, pc}
 1019              		.cfi_endproc
 1020              	.LFE8:
 1022              		.section	.text.vEventGroupDelete,"ax",%progbits
 1023              		.align	2
 1024              		.global	vEventGroupDelete
 1025              		.syntax unified
 1026              		.arm
 1027              		.fpu neon
 1029              	vEventGroupDelete:
 1030              	.LVL129:
 1031              	.LFB7:
 627:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 1032              		.loc 1 627 1 is_stmt 1 view -0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 0
 1035              		@ frame_needed = 0, uses_anonymous_args = 0
 627:../src/FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 1036              		.loc 1 627 1 is_stmt 0 view .LVU324
 1037 0000 10402DE9 		push	{r4, lr}
 1038              		.cfi_def_cfa_offset 8
 1039              		.cfi_offset 4, -8
 1040              		.cfi_offset 14, -4
 1041 0004 0040A0E1 		mov	r4, r0
 628:../src/FreeRTOS/event_groups.c ****     const List_t * pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 1042              		.loc 1 628 5 is_stmt 1 view .LVU325
 1043              	.LVL130:
 629:../src/FreeRTOS/event_groups.c **** 
 1044              		.loc 1 629 5 view .LVU326
 631:../src/FreeRTOS/event_groups.c ****     {
 1045              		.loc 1 631 5 view .LVU327
 1046 0008 FEFFFFEB 		bl	vTaskSuspendAll
 1047              	.LVL131:
 633:../src/FreeRTOS/event_groups.c **** 
 1048              		.loc 1 633 47 view .LVU328
 635:../src/FreeRTOS/event_groups.c ****         {
 1049              		.loc 1 635 9 view .LVU329
 635:../src/FreeRTOS/event_groups.c ****         {
 1050              		.loc 1 635 14 is_stmt 0 view .LVU330
 1051 000c 020000EA 		b	.L77
 1052              	.L78:
 639:../src/FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1053              		.loc 1 639 130 is_stmt 1 discriminator 3 view .LVU331
 640:../src/FreeRTOS/event_groups.c ****         }
 1054              		.loc 1 640 13 discriminator 3 view .LVU332
 1055 0010 0214A0E3 		mov	r1, #33554432
 1056 0014 100094E5 		ldr	r0, [r4, #16]
 1057 0018 FEFFFFEB 		bl	vTaskRemoveFromUnorderedEventList
 1058              	.LVL132:
 1059              	.L77:
 635:../src/FreeRTOS/event_groups.c ****         {
 1060              		.loc 1 635 14 view .LVU333
 635:../src/FreeRTOS/event_groups.c ****         {
 1061              		.loc 1 635 16 is_stmt 0 view .LVU334
 1062 001c 043094E5 		ldr	r3, [r4, #4]
 635:../src/FreeRTOS/event_groups.c ****         {
 1063              		.loc 1 635 14 view .LVU335
 1064 0020 000053E3 		cmp	r3, #0
 1065 0024 0800000A 		beq	.L81
 639:../src/FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1066              		.loc 1 639 13 is_stmt 1 view .LVU336
 1067 0028 102094E5 		ldr	r2, [r4, #16]
 1068 002c 0C3084E2 		add	r3, r4, #12
 1069 0030 030052E1 		cmp	r2, r3
 1070 0034 F5FFFF1A 		bne	.L78
 639:../src/FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1071              		.loc 1 639 13 discriminator 1 view .LVU337
 1072 0038 7F1200E3 		movw	r1, #639
 1073 003c 000000E3 		movw	r0, #:lower16:.LC0
 1074 0040 000040E3 		movt	r0, #:upper16:.LC0
 1075 0044 FEFFFFEB 		bl	R_OS_AssertCalled
 1076              	.LVL133:
 1077 0048 F0FFFFEA 		b	.L78
 1078              	.L81:
 647:../src/FreeRTOS/event_groups.c ****             }
 1079              		.loc 1 647 17 view .LVU338
 1080 004c 0400A0E1 		mov	r0, r4
 1081 0050 FEFFFFEB 		bl	vPortFree
 1082              	.LVL134:
 664:../src/FreeRTOS/event_groups.c **** }
 1083              		.loc 1 664 5 view .LVU339
 664:../src/FreeRTOS/event_groups.c **** }
 1084              		.loc 1 664 14 is_stmt 0 view .LVU340
 1085 0054 FEFFFFEB 		bl	xTaskResumeAll
 1086              	.LVL135:
 665:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 1087              		.loc 1 665 1 view .LVU341
 1088 0058 1080BDE8 		pop	{r4, pc}
 1089              		.cfi_endproc
 1090              	.LFE7:
 1092              		.section	.text.xEventGroupSetBitsFromISR,"ax",%progbits
 1093              		.align	2
 1094              		.global	xEventGroupSetBitsFromISR
 1095              		.syntax unified
 1096              		.arm
 1097              		.fpu neon
 1099              	xEventGroupSetBitsFromISR:
 1100              	.LVL136:
 1101              	.LFB11:
 721:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 722:../src/FreeRTOS/event_groups.c **** 
 723:../src/FreeRTOS/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 724:../src/FreeRTOS/event_groups.c **** 
 725:../src/FreeRTOS/event_groups.c ****     BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
 726:../src/FreeRTOS/event_groups.c ****                                           const EventBits_t uxBitsToSet,
 727:../src/FreeRTOS/event_groups.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
 728:../src/FreeRTOS/event_groups.c ****     {
 1102              		.loc 1 728 5 is_stmt 1 view -0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 0
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 1106              		.loc 1 728 5 is_stmt 0 view .LVU343
 1107 0000 10402DE9 		push	{r4, lr}
 1108              		.cfi_def_cfa_offset 8
 1109              		.cfi_offset 4, -8
 1110              		.cfi_offset 14, -4
 1111 0004 0230A0E1 		mov	r3, r2
 729:../src/FreeRTOS/event_groups.c ****         BaseType_t xReturn;
 1112              		.loc 1 729 9 is_stmt 1 view .LVU344
 730:../src/FreeRTOS/event_groups.c **** 
 731:../src/FreeRTOS/event_groups.c ****         traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 1113              		.loc 1 731 71 view .LVU345
 732:../src/FreeRTOS/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup
 1114              		.loc 1 732 9 view .LVU346
 1115              		.loc 1 732 19 is_stmt 0 view .LVU347
 1116 0008 0120A0E1 		mov	r2, r1
 1117              	.LVL137:
 1118              		.loc 1 732 19 view .LVU348
 1119 000c 0010A0E1 		mov	r1, r0
 1120              	.LVL138:
 1121              		.loc 1 732 19 view .LVU349
 1122 0010 000000E3 		movw	r0, #:lower16:vEventGroupSetBitsCallback
 1123              	.LVL139:
 1124              		.loc 1 732 19 view .LVU350
 1125 0014 000040E3 		movt	r0, #:upper16:vEventGroupSetBitsCallback
 1126 0018 FEFFFFEB 		bl	xTimerPendFunctionCallFromISR
 1127              	.LVL140:
 733:../src/FreeRTOS/event_groups.c **** 
 734:../src/FreeRTOS/event_groups.c ****         return xReturn;
 1128              		.loc 1 734 9 is_stmt 1 view .LVU351
 735:../src/FreeRTOS/event_groups.c ****     }
 1129              		.loc 1 735 5 is_stmt 0 view .LVU352
 1130 001c 1080BDE8 		pop	{r4, pc}
 1131              		.cfi_endproc
 1132              	.LFE11:
 1134              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1135              		.align	2
 1136              		.global	uxEventGroupGetNumber
 1137              		.syntax unified
 1138              		.arm
 1139              		.fpu neon
 1141              	uxEventGroupGetNumber:
 1142              	.LVL141:
 1143              	.LFB12:
 736:../src/FreeRTOS/event_groups.c **** 
 737:../src/FreeRTOS/event_groups.c **** #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( co
 738:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 739:../src/FreeRTOS/event_groups.c **** 
 740:../src/FreeRTOS/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 741:../src/FreeRTOS/event_groups.c **** 
 742:../src/FreeRTOS/event_groups.c ****     UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
 743:../src/FreeRTOS/event_groups.c ****     {
 1144              		.loc 1 743 5 is_stmt 1 view -0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 0
 1147              		@ frame_needed = 0, uses_anonymous_args = 0
 1148              		@ link register save eliminated.
 744:../src/FreeRTOS/event_groups.c ****         UBaseType_t xReturn;
 1149              		.loc 1 744 9 view .LVU354
 745:../src/FreeRTOS/event_groups.c ****         EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 Eve
 1150              		.loc 1 745 9 view .LVU355
 746:../src/FreeRTOS/event_groups.c **** 
 747:../src/FreeRTOS/event_groups.c ****         if( xEventGroup == NULL )
 1151              		.loc 1 747 9 view .LVU356
 1152              		.loc 1 747 11 is_stmt 0 view .LVU357
 1153 0000 000050E3 		cmp	r0, #0
 1154              		.loc 1 747 11 view .LVU358
 1155 0004 0100000A 		beq	.L86
 748:../src/FreeRTOS/event_groups.c ****         {
 749:../src/FreeRTOS/event_groups.c ****             xReturn = 0;
 750:../src/FreeRTOS/event_groups.c ****         }
 751:../src/FreeRTOS/event_groups.c ****         else
 752:../src/FreeRTOS/event_groups.c ****         {
 753:../src/FreeRTOS/event_groups.c ****             xReturn = pxEventBits->uxEventGroupNumber;
 1156              		.loc 1 753 13 is_stmt 1 view .LVU359
 1157              		.loc 1 753 21 is_stmt 0 view .LVU360
 1158 0008 180090E5 		ldr	r0, [r0, #24]
 1159              	.LVL142:
 1160              		.loc 1 753 21 view .LVU361
 1161 000c 1EFF2FE1 		bx	lr
 1162              	.LVL143:
 1163              	.L86:
 749:../src/FreeRTOS/event_groups.c ****         }
 1164              		.loc 1 749 21 view .LVU362
 1165 0010 0000A0E3 		mov	r0, #0
 1166              	.LVL144:
 754:../src/FreeRTOS/event_groups.c ****         }
 755:../src/FreeRTOS/event_groups.c **** 
 756:../src/FreeRTOS/event_groups.c ****         return xReturn;
 1167              		.loc 1 756 9 is_stmt 1 view .LVU363
 757:../src/FreeRTOS/event_groups.c ****     }
 1168              		.loc 1 757 5 is_stmt 0 view .LVU364
 1169 0014 1EFF2FE1 		bx	lr
 1170              		.cfi_endproc
 1171              	.LFE12:
 1173              		.section	.text.vEventGroupSetNumber,"ax",%progbits
 1174              		.align	2
 1175              		.global	vEventGroupSetNumber
 1176              		.syntax unified
 1177              		.arm
 1178              		.fpu neon
 1180              	vEventGroupSetNumber:
 1181              	.LVL145:
 1182              	.LFB13:
 758:../src/FreeRTOS/event_groups.c **** 
 759:../src/FreeRTOS/event_groups.c **** #endif /* configUSE_TRACE_FACILITY */
 760:../src/FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 761:../src/FreeRTOS/event_groups.c **** 
 762:../src/FreeRTOS/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 763:../src/FreeRTOS/event_groups.c **** 
 764:../src/FreeRTOS/event_groups.c ****     void vEventGroupSetNumber( void * xEventGroup,
 765:../src/FreeRTOS/event_groups.c ****                                UBaseType_t uxEventGroupNumber )
 766:../src/FreeRTOS/event_groups.c ****     {
 1183              		.loc 1 766 5 is_stmt 1 view -0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              		@ link register save eliminated.
 767:../src/FreeRTOS/event_groups.c ****         ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 
 1188              		.loc 1 767 9 view .LVU366
 1189              		.loc 1 767 64 is_stmt 0 view .LVU367
 1190 0000 181080E5 		str	r1, [r0, #24]
 768:../src/FreeRTOS/event_groups.c ****     }
 1191              		.loc 1 768 5 view .LVU368
 1192 0004 1EFF2FE1 		bx	lr
 1193              		.cfi_endproc
 1194              	.LFE13:
 1196              		.text
 1197              	.Letext0:
 1198              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 1199              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1200              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1201              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1202              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1203              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1204              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1205              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1206              		.file 10 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\p
 1207              		.file 11 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 1208              		.file 12 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 1209              		.file 13 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 1210              		.file 14 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 1211              		.file 15 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\config_file
 1212              		.file 16 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
DEFINED SYMBOLS
                            *ABS*:00000000 event_groups.c
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:17     .text.prvTestWaitCondition:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:25     .text.prvTestWaitCondition:00000000 prvTestWaitCondition
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:80     .text.xEventGroupCreate:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:86     .text.xEventGroupCreate:00000000 xEventGroupCreate
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:127    .rodata.xEventGroupWaitBits.str1.4:00000000 $d
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:128    .rodata.xEventGroupWaitBits.str1.4:00000000 .LC0
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:131    .text.xEventGroupWaitBits:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:137    .text.xEventGroupWaitBits:00000000 xEventGroupWaitBits
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:408    .text.xEventGroupClearBits:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:414    .text.xEventGroupClearBits:00000000 xEventGroupClearBits
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:491    .text.vEventGroupClearBitsCallback:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:497    .text.vEventGroupClearBitsCallback:00000000 vEventGroupClearBitsCallback
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:519    .text.xEventGroupClearBitsFromISR:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:525    .text.xEventGroupClearBitsFromISR:00000000 xEventGroupClearBitsFromISR
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:559    .text.xEventGroupGetBitsFromISR:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:565    .text.xEventGroupGetBitsFromISR:00000000 xEventGroupGetBitsFromISR
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:601    .text.xEventGroupSetBits:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:607    .text.xEventGroupSetBits:00000000 xEventGroupSetBits
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:773    .text.xEventGroupSync:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:779    .text.xEventGroupSync:00000000 xEventGroupSync
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:995    .text.vEventGroupSetBitsCallback:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:1001   .text.vEventGroupSetBitsCallback:00000000 vEventGroupSetBitsCallback
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:1023   .text.vEventGroupDelete:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:1029   .text.vEventGroupDelete:00000000 vEventGroupDelete
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:1093   .text.xEventGroupSetBitsFromISR:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:1099   .text.xEventGroupSetBitsFromISR:00000000 xEventGroupSetBitsFromISR
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:1135   .text.uxEventGroupGetNumber:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:1141   .text.uxEventGroupGetNumber:00000000 uxEventGroupGetNumber
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:1174   .text.vEventGroupSetNumber:00000000 $a
C:\Users\ryota\AppData\Local\Temp\cccxgSqs.s:1180   .text.vEventGroupSetNumber:00000000 vEventGroupSetNumber
                           .group:00000000 wm4.0.3d5c910ebb40df6df78b28e37cd67f3d
                           .group:00000000 wm4.ieeefp.h.77.3f06799abf5dd88bdddee084775a1223
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:00000000 wm4.stddef.h.39.cf3ebec0bc8c9e3d2f276a64e0fe5e7a
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.cdefs.h.49.6260d97adb8d27534cbdc0f868b8ea87
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.r_task_priority.h.26.416bb98a222bf391200df359bd0318d1
                           .group:00000000 wm4.FreeRTOSConfig.h.79.b5458a5c31689ea246b5d3a5f655ce5b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.math.h.13.97100c05caf9f40dd9f5a3cda48ccc01
                           .group:00000000 wm4.r_typedefs.h.38.e90d9de5300d9ae020e5db8c5af88b3e
                           .group:00000000 wm4.portmacro.h.32.440d21c040186908c7273660706c6bca
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.768974478c42e424045182d5a8740d87
                           .group:00000000 wm4.FreeRTOS.h.67.5b4462ac037a881bffd21a8fce4c91ce
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236
                           .group:00000000 wm4.task.h.47.5632d4e651ed85e40d7d5c5d13006d85
                           .group:00000000 wm4.timers.h.55.1df3af254715f59cef2c5320dd2873df

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
R_OS_AssertCalled
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
xTimerPendFunctionCallFromISR
ulPortSetInterruptMask
vPortClearInterruptMask
vTaskRemoveFromUnorderedEventList
vPortFree
