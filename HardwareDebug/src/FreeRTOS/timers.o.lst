   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"timers.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvGetNextExpireTime,"ax",%progbits
  17              		.align	2
  18              		.arch armv7-a
  19              		.arch_extension mp
  20              		.arch_extension sec
  21              		.syntax unified
  22              		.arm
  23              		.fpu neon
  25              	prvGetNextExpireTime:
  26              	.LVL0:
  27              	.LFB13:
  28              		.file 1 "../src/FreeRTOS/timers.c"
   1:../src/FreeRTOS/timers.c **** /*
   2:../src/FreeRTOS/timers.c ****  * FreeRTOS Kernel V10.4.3 LTS Patch 1
   3:../src/FreeRTOS/timers.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../src/FreeRTOS/timers.c ****  *
   5:../src/FreeRTOS/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../src/FreeRTOS/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../src/FreeRTOS/timers.c ****  * the Software without restriction, including without limitation the rights to
   8:../src/FreeRTOS/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../src/FreeRTOS/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../src/FreeRTOS/timers.c ****  * subject to the following conditions:
  11:../src/FreeRTOS/timers.c ****  *
  12:../src/FreeRTOS/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../src/FreeRTOS/timers.c ****  * copies or substantial portions of the Software.
  14:../src/FreeRTOS/timers.c ****  *
  15:../src/FreeRTOS/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../src/FreeRTOS/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../src/FreeRTOS/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../src/FreeRTOS/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../src/FreeRTOS/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../src/FreeRTOS/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../src/FreeRTOS/timers.c ****  *
  22:../src/FreeRTOS/timers.c ****  * https://www.FreeRTOS.org
  23:../src/FreeRTOS/timers.c ****  * https://github.com/FreeRTOS
  24:../src/FreeRTOS/timers.c ****  *
  25:../src/FreeRTOS/timers.c ****  */
  26:../src/FreeRTOS/timers.c **** 
  27:../src/FreeRTOS/timers.c **** /* Standard includes. */
  28:../src/FreeRTOS/timers.c **** #include <stdlib.h>
  29:../src/FreeRTOS/timers.c **** 
  30:../src/FreeRTOS/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  31:../src/FreeRTOS/timers.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:../src/FreeRTOS/timers.c ****  * task.h is included from an application file. */
  33:../src/FreeRTOS/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:../src/FreeRTOS/timers.c **** 
  35:../src/FreeRTOS/timers.c **** #include "FreeRTOS.h"
  36:../src/FreeRTOS/timers.c **** #include "task.h"
  37:../src/FreeRTOS/timers.c **** #include "queue.h"
  38:../src/FreeRTOS/timers.c **** #include "timers.h"
  39:../src/FreeRTOS/timers.c **** 
  40:../src/FreeRTOS/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  41:../src/FreeRTOS/timers.c ****     #error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function availabl
  42:../src/FreeRTOS/timers.c **** #endif
  43:../src/FreeRTOS/timers.c **** 
  44:../src/FreeRTOS/timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:../src/FreeRTOS/timers.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:../src/FreeRTOS/timers.c ****  * for the header files above, but not in this file, in order to generate the
  47:../src/FreeRTOS/timers.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:../src/FreeRTOS/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
  49:../src/FreeRTOS/timers.c **** 
  50:../src/FreeRTOS/timers.c **** 
  51:../src/FreeRTOS/timers.c **** /* This entire source file will be skipped if the application is not configured
  52:../src/FreeRTOS/timers.c ****  * to include software timer functionality.  This #if is closed at the very bottom
  53:../src/FreeRTOS/timers.c ****  * of this file.  If you want to include software timer functionality then ensure
  54:../src/FreeRTOS/timers.c ****  * configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  55:../src/FreeRTOS/timers.c **** #if ( configUSE_TIMERS == 1 )
  56:../src/FreeRTOS/timers.c **** 
  57:../src/FreeRTOS/timers.c **** /* Misc definitions. */
  58:../src/FreeRTOS/timers.c ****     #define tmrNO_DELAY    ( TickType_t ) 0U
  59:../src/FreeRTOS/timers.c **** 
  60:../src/FreeRTOS/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  61:../src/FreeRTOS/timers.c ****  * defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  62:../src/FreeRTOS/timers.c ****     #ifndef configTIMER_SERVICE_TASK_NAME
  63:../src/FreeRTOS/timers.c ****         #define configTIMER_SERVICE_TASK_NAME    "Tmr Svc"
  64:../src/FreeRTOS/timers.c ****     #endif
  65:../src/FreeRTOS/timers.c **** 
  66:../src/FreeRTOS/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  67:../src/FreeRTOS/timers.c ****     #define tmrSTATUS_IS_ACTIVE                  ( ( uint8_t ) 0x01 )
  68:../src/FreeRTOS/timers.c ****     #define tmrSTATUS_IS_STATICALLY_ALLOCATED    ( ( uint8_t ) 0x02 )
  69:../src/FreeRTOS/timers.c ****     #define tmrSTATUS_IS_AUTORELOAD              ( ( uint8_t ) 0x04 )
  70:../src/FreeRTOS/timers.c **** 
  71:../src/FreeRTOS/timers.c **** /* The definition of the timers themselves. */
  72:../src/FreeRTOS/timers.c ****     typedef struct tmrTimerControl                  /* The old naming convention is used to prevent
  73:../src/FreeRTOS/timers.c ****     {
  74:../src/FreeRTOS/timers.c ****         const char * pcTimerName;                   /*<< Text name.  This is not used by the kernel
  75:../src/FreeRTOS/timers.c ****         ListItem_t xTimerListItem;                  /*<< Standard linked list item as used by all k
  76:../src/FreeRTOS/timers.c ****         TickType_t xTimerPeriodInTicks;             /*<< How quickly and often the timer expires. *
  77:../src/FreeRTOS/timers.c ****         void * pvTimerID;                           /*<< An ID to identify the timer.  This allows 
  78:../src/FreeRTOS/timers.c ****         TimerCallbackFunction_t pxCallbackFunction; /*<< The function that will be called when the 
  79:../src/FreeRTOS/timers.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
  80:../src/FreeRTOS/timers.c ****             UBaseType_t uxTimerNumber;              /*<< An ID assigned by trace tools such as Free
  81:../src/FreeRTOS/timers.c ****         #endif
  82:../src/FreeRTOS/timers.c ****         uint8_t ucStatus;                           /*<< Holds bits to say if the timer was statica
  83:../src/FreeRTOS/timers.c ****     } xTIMER;
  84:../src/FreeRTOS/timers.c **** 
  85:../src/FreeRTOS/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  86:../src/FreeRTOS/timers.c ****  * name below to enable the use of older kernel aware debuggers. */
  87:../src/FreeRTOS/timers.c ****     typedef xTIMER Timer_t;
  88:../src/FreeRTOS/timers.c **** 
  89:../src/FreeRTOS/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  90:../src/FreeRTOS/timers.c ****  * Two types of message can be queued - messages that manipulate a software timer,
  91:../src/FreeRTOS/timers.c ****  * and messages that request the execution of a non-timer related callback.  The
  92:../src/FreeRTOS/timers.c ****  * two message types are defined in two separate structures, xTimerParametersType
  93:../src/FreeRTOS/timers.c ****  * and xCallbackParametersType respectively. */
  94:../src/FreeRTOS/timers.c ****     typedef struct tmrTimerParameters
  95:../src/FreeRTOS/timers.c ****     {
  96:../src/FreeRTOS/timers.c ****         TickType_t xMessageValue; /*<< An optional value used by a subset of commands, for example,
  97:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer;        /*<< The timer to which the command will be applied. */
  98:../src/FreeRTOS/timers.c ****     } TimerParameter_t;
  99:../src/FreeRTOS/timers.c **** 
 100:../src/FreeRTOS/timers.c **** 
 101:../src/FreeRTOS/timers.c ****     typedef struct tmrCallbackParameters
 102:../src/FreeRTOS/timers.c ****     {
 103:../src/FreeRTOS/timers.c ****         PendedFunction_t pxCallbackFunction; /* << The callback function to execute. */
 104:../src/FreeRTOS/timers.c ****         void * pvParameter1;                 /* << The value that will be used as the callback func
 105:../src/FreeRTOS/timers.c ****         uint32_t ulParameter2;               /* << The value that will be used as the callback func
 106:../src/FreeRTOS/timers.c ****     } CallbackParameters_t;
 107:../src/FreeRTOS/timers.c **** 
 108:../src/FreeRTOS/timers.c **** /* The structure that contains the two message types, along with an identifier
 109:../src/FreeRTOS/timers.c ****  * that is used to determine which message type is valid. */
 110:../src/FreeRTOS/timers.c ****     typedef struct tmrTimerQueueMessage
 111:../src/FreeRTOS/timers.c ****     {
 112:../src/FreeRTOS/timers.c ****         BaseType_t xMessageID; /*<< The command being sent to the timer service task. */
 113:../src/FreeRTOS/timers.c ****         union
 114:../src/FreeRTOS/timers.c ****         {
 115:../src/FreeRTOS/timers.c ****             TimerParameter_t xTimerParameters;
 116:../src/FreeRTOS/timers.c **** 
 117:../src/FreeRTOS/timers.c ****             /* Don't include xCallbackParameters if it is not going to be used as
 118:../src/FreeRTOS/timers.c ****              * it makes the structure (and therefore the timer queue) larger. */
 119:../src/FreeRTOS/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 120:../src/FreeRTOS/timers.c ****                 CallbackParameters_t xCallbackParameters;
 121:../src/FreeRTOS/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 122:../src/FreeRTOS/timers.c ****         } u;
 123:../src/FreeRTOS/timers.c ****     } DaemonTaskMessage_t;
 124:../src/FreeRTOS/timers.c **** 
 125:../src/FreeRTOS/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 126:../src/FreeRTOS/timers.c ****  * which static variables must be declared volatile. */
 127:../src/FreeRTOS/timers.c **** 
 128:../src/FreeRTOS/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 129:../src/FreeRTOS/timers.c ****  * time order, with the nearest expiry time at the front of the list.  Only the
 130:../src/FreeRTOS/timers.c ****  * timer service task is allowed to access these lists.
 131:../src/FreeRTOS/timers.c ****  * xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 132:../src/FreeRTOS/timers.c ****  * breaks some kernel aware debuggers, and debuggers that reply on removing the
 133:../src/FreeRTOS/timers.c ****  * static qualifier. */
 134:../src/FreeRTOS/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList1;
 135:../src/FreeRTOS/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList2;
 136:../src/FreeRTOS/timers.c ****     PRIVILEGED_DATA static List_t * pxCurrentTimerList;
 137:../src/FreeRTOS/timers.c ****     PRIVILEGED_DATA static List_t * pxOverflowTimerList;
 138:../src/FreeRTOS/timers.c **** 
 139:../src/FreeRTOS/timers.c **** /* A queue that is used to send commands to the timer service task. */
 140:../src/FreeRTOS/timers.c ****     PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 141:../src/FreeRTOS/timers.c ****     PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 142:../src/FreeRTOS/timers.c **** 
 143:../src/FreeRTOS/timers.c **** /*lint -restore */
 144:../src/FreeRTOS/timers.c **** 
 145:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 146:../src/FreeRTOS/timers.c **** 
 147:../src/FreeRTOS/timers.c **** /*
 148:../src/FreeRTOS/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 149:../src/FreeRTOS/timers.c ****  * been initialised already.
 150:../src/FreeRTOS/timers.c ****  */
 151:../src/FreeRTOS/timers.c ****     static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 152:../src/FreeRTOS/timers.c **** 
 153:../src/FreeRTOS/timers.c **** /*
 154:../src/FreeRTOS/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 155:../src/FreeRTOS/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 156:../src/FreeRTOS/timers.c ****  * xTimerQueue queue.
 157:../src/FreeRTOS/timers.c ****  */
 158:../src/FreeRTOS/timers.c ****     static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 159:../src/FreeRTOS/timers.c **** 
 160:../src/FreeRTOS/timers.c **** /*
 161:../src/FreeRTOS/timers.c ****  * Called by the timer service task to interpret and process a command it
 162:../src/FreeRTOS/timers.c ****  * received on the timer queue.
 163:../src/FreeRTOS/timers.c ****  */
 164:../src/FreeRTOS/timers.c ****     static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 165:../src/FreeRTOS/timers.c **** 
 166:../src/FreeRTOS/timers.c **** /*
 167:../src/FreeRTOS/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 168:../src/FreeRTOS/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 169:../src/FreeRTOS/timers.c ****  */
 170:../src/FreeRTOS/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 171:../src/FreeRTOS/timers.c ****                                                   const TickType_t xNextExpiryTime,
 172:../src/FreeRTOS/timers.c ****                                                   const TickType_t xTimeNow,
 173:../src/FreeRTOS/timers.c ****                                                   const TickType_t xCommandTime ) PRIVILEGED_FUNCTI
 174:../src/FreeRTOS/timers.c **** 
 175:../src/FreeRTOS/timers.c **** /*
 176:../src/FreeRTOS/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 177:../src/FreeRTOS/timers.c ****  * auto-reload timer, then call its callback.
 178:../src/FreeRTOS/timers.c ****  */
 179:../src/FreeRTOS/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 180:../src/FreeRTOS/timers.c ****                                         const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 181:../src/FreeRTOS/timers.c **** 
 182:../src/FreeRTOS/timers.c **** /*
 183:../src/FreeRTOS/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 184:../src/FreeRTOS/timers.c ****  * current timer list does not still reference some timers.
 185:../src/FreeRTOS/timers.c ****  */
 186:../src/FreeRTOS/timers.c ****     static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 187:../src/FreeRTOS/timers.c **** 
 188:../src/FreeRTOS/timers.c **** /*
 189:../src/FreeRTOS/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 190:../src/FreeRTOS/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 191:../src/FreeRTOS/timers.c ****  */
 192:../src/FreeRTOS/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FU
 193:../src/FreeRTOS/timers.c **** 
 194:../src/FreeRTOS/timers.c **** /*
 195:../src/FreeRTOS/timers.c ****  * If the timer list contains any active timers then return the expire time of
 196:../src/FreeRTOS/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 197:../src/FreeRTOS/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 198:../src/FreeRTOS/timers.c ****  * to pdTRUE.
 199:../src/FreeRTOS/timers.c ****  */
 200:../src/FreeRTOS/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION
 201:../src/FreeRTOS/timers.c **** 
 202:../src/FreeRTOS/timers.c **** /*
 203:../src/FreeRTOS/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 204:../src/FreeRTOS/timers.c ****  * until either a timer does expire or a command is received.
 205:../src/FreeRTOS/timers.c ****  */
 206:../src/FreeRTOS/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 207:../src/FreeRTOS/timers.c ****                                             BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;
 208:../src/FreeRTOS/timers.c **** 
 209:../src/FreeRTOS/timers.c **** /*
 210:../src/FreeRTOS/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 211:../src/FreeRTOS/timers.c ****  * dynamically to fill in the structure's members.
 212:../src/FreeRTOS/timers.c ****  */
 213:../src/FreeRTOS/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 214:../src/FreeRTOS/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 215:../src/FreeRTOS/timers.c ****                                        const UBaseType_t uxAutoReload,
 216:../src/FreeRTOS/timers.c ****                                        void * const pvTimerID,
 217:../src/FreeRTOS/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 218:../src/FreeRTOS/timers.c ****                                        Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
 219:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 220:../src/FreeRTOS/timers.c **** 
 221:../src/FreeRTOS/timers.c ****     BaseType_t xTimerCreateTimerTask( void )
 222:../src/FreeRTOS/timers.c ****     {
 223:../src/FreeRTOS/timers.c ****         BaseType_t xReturn = pdFAIL;
 224:../src/FreeRTOS/timers.c **** 
 225:../src/FreeRTOS/timers.c ****         /* This function is called when the scheduler is started if
 226:../src/FreeRTOS/timers.c ****          * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 227:../src/FreeRTOS/timers.c ****          * timer service task has been created/initialised.  If timers have already
 228:../src/FreeRTOS/timers.c ****          * been created then the initialisation will already have been performed. */
 229:../src/FreeRTOS/timers.c ****         prvCheckForValidListAndQueue();
 230:../src/FreeRTOS/timers.c **** 
 231:../src/FreeRTOS/timers.c ****         if( xTimerQueue != NULL )
 232:../src/FreeRTOS/timers.c ****         {
 233:../src/FreeRTOS/timers.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 234:../src/FreeRTOS/timers.c ****                 {
 235:../src/FreeRTOS/timers.c ****                     StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 236:../src/FreeRTOS/timers.c ****                     StackType_t * pxTimerTaskStackBuffer = NULL;
 237:../src/FreeRTOS/timers.c ****                     uint32_t ulTimerTaskStackSize;
 238:../src/FreeRTOS/timers.c **** 
 239:../src/FreeRTOS/timers.c ****                     vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer,
 240:../src/FreeRTOS/timers.c ****                     xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 241:../src/FreeRTOS/timers.c ****                                                           configTIMER_SERVICE_TASK_NAME,
 242:../src/FreeRTOS/timers.c ****                                                           ulTimerTaskStackSize,
 243:../src/FreeRTOS/timers.c ****                                                           NULL,
 244:../src/FreeRTOS/timers.c ****                                                           ( ( UBaseType_t ) configTIMER_TASK_PRIORI
 245:../src/FreeRTOS/timers.c ****                                                           pxTimerTaskStackBuffer,
 246:../src/FreeRTOS/timers.c ****                                                           pxTimerTaskTCBBuffer );
 247:../src/FreeRTOS/timers.c **** 
 248:../src/FreeRTOS/timers.c ****                     if( xTimerTaskHandle != NULL )
 249:../src/FreeRTOS/timers.c ****                     {
 250:../src/FreeRTOS/timers.c ****                         xReturn = pdPASS;
 251:../src/FreeRTOS/timers.c ****                     }
 252:../src/FreeRTOS/timers.c ****                 }
 253:../src/FreeRTOS/timers.c ****             #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 254:../src/FreeRTOS/timers.c ****                 {
 255:../src/FreeRTOS/timers.c ****                     xReturn = xTaskCreate( prvTimerTask,
 256:../src/FreeRTOS/timers.c ****                                            configTIMER_SERVICE_TASK_NAME,
 257:../src/FreeRTOS/timers.c ****                                            configTIMER_TASK_STACK_DEPTH,
 258:../src/FreeRTOS/timers.c ****                                            NULL,
 259:../src/FreeRTOS/timers.c ****                                            ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIV
 260:../src/FreeRTOS/timers.c ****                                            &xTimerTaskHandle );
 261:../src/FreeRTOS/timers.c ****                 }
 262:../src/FreeRTOS/timers.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 263:../src/FreeRTOS/timers.c ****         }
 264:../src/FreeRTOS/timers.c ****         else
 265:../src/FreeRTOS/timers.c ****         {
 266:../src/FreeRTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 267:../src/FreeRTOS/timers.c ****         }
 268:../src/FreeRTOS/timers.c **** 
 269:../src/FreeRTOS/timers.c ****         configASSERT( xReturn );
 270:../src/FreeRTOS/timers.c ****         return xReturn;
 271:../src/FreeRTOS/timers.c ****     }
 272:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 273:../src/FreeRTOS/timers.c **** 
 274:../src/FreeRTOS/timers.c ****     #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 275:../src/FreeRTOS/timers.c **** 
 276:../src/FreeRTOS/timers.c ****         TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char t
 277:../src/FreeRTOS/timers.c ****                                     const TickType_t xTimerPeriodInTicks,
 278:../src/FreeRTOS/timers.c ****                                     const UBaseType_t uxAutoReload,
 279:../src/FreeRTOS/timers.c ****                                     void * const pvTimerID,
 280:../src/FreeRTOS/timers.c ****                                     TimerCallbackFunction_t pxCallbackFunction )
 281:../src/FreeRTOS/timers.c ****         {
 282:../src/FreeRTOS/timers.c ****             Timer_t * pxNewTimer;
 283:../src/FreeRTOS/timers.c **** 
 284:../src/FreeRTOS/timers.c ****             pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All 
 285:../src/FreeRTOS/timers.c **** 
 286:../src/FreeRTOS/timers.c ****             if( pxNewTimer != NULL )
 287:../src/FreeRTOS/timers.c ****             {
 288:../src/FreeRTOS/timers.c ****                 /* Status is thus far zero as the timer is not created statically
 289:../src/FreeRTOS/timers.c ****                  * and has not been started.  The auto-reload bit may get set in
 290:../src/FreeRTOS/timers.c ****                  * prvInitialiseNewTimer. */
 291:../src/FreeRTOS/timers.c ****                 pxNewTimer->ucStatus = 0x00;
 292:../src/FreeRTOS/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, p
 293:../src/FreeRTOS/timers.c ****             }
 294:../src/FreeRTOS/timers.c **** 
 295:../src/FreeRTOS/timers.c ****             return pxNewTimer;
 296:../src/FreeRTOS/timers.c ****         }
 297:../src/FreeRTOS/timers.c **** 
 298:../src/FreeRTOS/timers.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 299:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 300:../src/FreeRTOS/timers.c **** 
 301:../src/FreeRTOS/timers.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 302:../src/FreeRTOS/timers.c **** 
 303:../src/FreeRTOS/timers.c ****         TimerHandle_t xTimerCreateStatic( const char * const pcTimerName, /*lint !e971 Unqualified 
 304:../src/FreeRTOS/timers.c ****                                           const TickType_t xTimerPeriodInTicks,
 305:../src/FreeRTOS/timers.c ****                                           const UBaseType_t uxAutoReload,
 306:../src/FreeRTOS/timers.c ****                                           void * const pvTimerID,
 307:../src/FreeRTOS/timers.c ****                                           TimerCallbackFunction_t pxCallbackFunction,
 308:../src/FreeRTOS/timers.c ****                                           StaticTimer_t * pxTimerBuffer )
 309:../src/FreeRTOS/timers.c ****         {
 310:../src/FreeRTOS/timers.c ****             Timer_t * pxNewTimer;
 311:../src/FreeRTOS/timers.c **** 
 312:../src/FreeRTOS/timers.c ****             #if ( configASSERT_DEFINED == 1 )
 313:../src/FreeRTOS/timers.c ****                 {
 314:../src/FreeRTOS/timers.c ****                     /* Sanity check that the size of the structure used to declare a
 315:../src/FreeRTOS/timers.c ****                      * variable of type StaticTimer_t equals the size of the real timer
 316:../src/FreeRTOS/timers.c ****                      * structure. */
 317:../src/FreeRTOS/timers.c ****                     volatile size_t xSize = sizeof( StaticTimer_t );
 318:../src/FreeRTOS/timers.c ****                     configASSERT( xSize == sizeof( Timer_t ) );
 319:../src/FreeRTOS/timers.c ****                     ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 320:../src/FreeRTOS/timers.c ****                 }
 321:../src/FreeRTOS/timers.c ****             #endif /* configASSERT_DEFINED */
 322:../src/FreeRTOS/timers.c **** 
 323:../src/FreeRTOS/timers.c ****             /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 324:../src/FreeRTOS/timers.c ****             configASSERT( pxTimerBuffer );
 325:../src/FreeRTOS/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 326:../src/FreeRTOS/timers.c **** 
 327:../src/FreeRTOS/timers.c ****             if( pxNewTimer != NULL )
 328:../src/FreeRTOS/timers.c ****             {
 329:../src/FreeRTOS/timers.c ****                 /* Timers can be created statically or dynamically so note this
 330:../src/FreeRTOS/timers.c ****                  * timer was created statically in case it is later deleted.  The
 331:../src/FreeRTOS/timers.c ****                  * auto-reload bit may get set in prvInitialiseNewTimer(). */
 332:../src/FreeRTOS/timers.c ****                 pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 333:../src/FreeRTOS/timers.c **** 
 334:../src/FreeRTOS/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, p
 335:../src/FreeRTOS/timers.c ****             }
 336:../src/FreeRTOS/timers.c **** 
 337:../src/FreeRTOS/timers.c ****             return pxNewTimer;
 338:../src/FreeRTOS/timers.c ****         }
 339:../src/FreeRTOS/timers.c **** 
 340:../src/FreeRTOS/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 341:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 342:../src/FreeRTOS/timers.c **** 
 343:../src/FreeRTOS/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 344:../src/FreeRTOS/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 345:../src/FreeRTOS/timers.c ****                                        const UBaseType_t uxAutoReload,
 346:../src/FreeRTOS/timers.c ****                                        void * const pvTimerID,
 347:../src/FreeRTOS/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 348:../src/FreeRTOS/timers.c ****                                        Timer_t * pxNewTimer )
 349:../src/FreeRTOS/timers.c ****     {
 350:../src/FreeRTOS/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 351:../src/FreeRTOS/timers.c ****         configASSERT( ( xTimerPeriodInTicks > 0 ) );
 352:../src/FreeRTOS/timers.c **** 
 353:../src/FreeRTOS/timers.c ****         if( pxNewTimer != NULL )
 354:../src/FreeRTOS/timers.c ****         {
 355:../src/FreeRTOS/timers.c ****             /* Ensure the infrastructure used by the timer service task has been
 356:../src/FreeRTOS/timers.c ****              * created/initialised. */
 357:../src/FreeRTOS/timers.c ****             prvCheckForValidListAndQueue();
 358:../src/FreeRTOS/timers.c **** 
 359:../src/FreeRTOS/timers.c ****             /* Initialise the timer structure members using the function
 360:../src/FreeRTOS/timers.c ****              * parameters. */
 361:../src/FreeRTOS/timers.c ****             pxNewTimer->pcTimerName = pcTimerName;
 362:../src/FreeRTOS/timers.c ****             pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 363:../src/FreeRTOS/timers.c ****             pxNewTimer->pvTimerID = pvTimerID;
 364:../src/FreeRTOS/timers.c ****             pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 365:../src/FreeRTOS/timers.c ****             vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 366:../src/FreeRTOS/timers.c **** 
 367:../src/FreeRTOS/timers.c ****             if( uxAutoReload != pdFALSE )
 368:../src/FreeRTOS/timers.c ****             {
 369:../src/FreeRTOS/timers.c ****                 pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 370:../src/FreeRTOS/timers.c ****             }
 371:../src/FreeRTOS/timers.c **** 
 372:../src/FreeRTOS/timers.c ****             traceTIMER_CREATE( pxNewTimer );
 373:../src/FreeRTOS/timers.c ****         }
 374:../src/FreeRTOS/timers.c ****     }
 375:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 376:../src/FreeRTOS/timers.c **** 
 377:../src/FreeRTOS/timers.c ****     BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
 378:../src/FreeRTOS/timers.c ****                                      const BaseType_t xCommandID,
 379:../src/FreeRTOS/timers.c ****                                      const TickType_t xOptionalValue,
 380:../src/FreeRTOS/timers.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
 381:../src/FreeRTOS/timers.c ****                                      const TickType_t xTicksToWait )
 382:../src/FreeRTOS/timers.c ****     {
 383:../src/FreeRTOS/timers.c ****         BaseType_t xReturn = pdFAIL;
 384:../src/FreeRTOS/timers.c ****         DaemonTaskMessage_t xMessage;
 385:../src/FreeRTOS/timers.c **** 
 386:../src/FreeRTOS/timers.c ****         configASSERT( xTimer );
 387:../src/FreeRTOS/timers.c **** 
 388:../src/FreeRTOS/timers.c ****         /* Send a message to the timer service task to perform a particular action
 389:../src/FreeRTOS/timers.c ****          * on a particular timer definition. */
 390:../src/FreeRTOS/timers.c ****         if( xTimerQueue != NULL )
 391:../src/FreeRTOS/timers.c ****         {
 392:../src/FreeRTOS/timers.c ****             /* Send a command to the timer service task to start the xTimer timer. */
 393:../src/FreeRTOS/timers.c ****             xMessage.xMessageID = xCommandID;
 394:../src/FreeRTOS/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 395:../src/FreeRTOS/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 396:../src/FreeRTOS/timers.c **** 
 397:../src/FreeRTOS/timers.c ****             if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 398:../src/FreeRTOS/timers.c ****             {
 399:../src/FreeRTOS/timers.c ****                 if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 400:../src/FreeRTOS/timers.c ****                 {
 401:../src/FreeRTOS/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 402:../src/FreeRTOS/timers.c ****                 }
 403:../src/FreeRTOS/timers.c ****                 else
 404:../src/FreeRTOS/timers.c ****                 {
 405:../src/FreeRTOS/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 406:../src/FreeRTOS/timers.c ****                 }
 407:../src/FreeRTOS/timers.c ****             }
 408:../src/FreeRTOS/timers.c ****             else
 409:../src/FreeRTOS/timers.c ****             {
 410:../src/FreeRTOS/timers.c ****                 xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoke
 411:../src/FreeRTOS/timers.c ****             }
 412:../src/FreeRTOS/timers.c **** 
 413:../src/FreeRTOS/timers.c ****             traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 414:../src/FreeRTOS/timers.c ****         }
 415:../src/FreeRTOS/timers.c ****         else
 416:../src/FreeRTOS/timers.c ****         {
 417:../src/FreeRTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 418:../src/FreeRTOS/timers.c ****         }
 419:../src/FreeRTOS/timers.c **** 
 420:../src/FreeRTOS/timers.c ****         return xReturn;
 421:../src/FreeRTOS/timers.c ****     }
 422:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 423:../src/FreeRTOS/timers.c **** 
 424:../src/FreeRTOS/timers.c ****     TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 425:../src/FreeRTOS/timers.c ****     {
 426:../src/FreeRTOS/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 427:../src/FreeRTOS/timers.c ****          * started, then xTimerTaskHandle will be NULL. */
 428:../src/FreeRTOS/timers.c ****         configASSERT( ( xTimerTaskHandle != NULL ) );
 429:../src/FreeRTOS/timers.c ****         return xTimerTaskHandle;
 430:../src/FreeRTOS/timers.c ****     }
 431:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 432:../src/FreeRTOS/timers.c **** 
 433:../src/FreeRTOS/timers.c ****     TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 434:../src/FreeRTOS/timers.c ****     {
 435:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 436:../src/FreeRTOS/timers.c **** 
 437:../src/FreeRTOS/timers.c ****         configASSERT( xTimer );
 438:../src/FreeRTOS/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 439:../src/FreeRTOS/timers.c ****     }
 440:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 441:../src/FreeRTOS/timers.c **** 
 442:../src/FreeRTOS/timers.c ****     void vTimerSetReloadMode( TimerHandle_t xTimer,
 443:../src/FreeRTOS/timers.c ****                               const UBaseType_t uxAutoReload )
 444:../src/FreeRTOS/timers.c ****     {
 445:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 446:../src/FreeRTOS/timers.c **** 
 447:../src/FreeRTOS/timers.c ****         configASSERT( xTimer );
 448:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 449:../src/FreeRTOS/timers.c ****         {
 450:../src/FreeRTOS/timers.c ****             if( uxAutoReload != pdFALSE )
 451:../src/FreeRTOS/timers.c ****             {
 452:../src/FreeRTOS/timers.c ****                 pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 453:../src/FreeRTOS/timers.c ****             }
 454:../src/FreeRTOS/timers.c ****             else
 455:../src/FreeRTOS/timers.c ****             {
 456:../src/FreeRTOS/timers.c ****                 pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 457:../src/FreeRTOS/timers.c ****             }
 458:../src/FreeRTOS/timers.c ****         }
 459:../src/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 460:../src/FreeRTOS/timers.c ****     }
 461:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 462:../src/FreeRTOS/timers.c **** 
 463:../src/FreeRTOS/timers.c ****     UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
 464:../src/FreeRTOS/timers.c ****     {
 465:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 466:../src/FreeRTOS/timers.c ****         UBaseType_t uxReturn;
 467:../src/FreeRTOS/timers.c **** 
 468:../src/FreeRTOS/timers.c ****         configASSERT( xTimer );
 469:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 470:../src/FreeRTOS/timers.c ****         {
 471:../src/FreeRTOS/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 472:../src/FreeRTOS/timers.c ****             {
 473:../src/FreeRTOS/timers.c ****                 /* Not an auto-reload timer. */
 474:../src/FreeRTOS/timers.c ****                 uxReturn = ( UBaseType_t ) pdFALSE;
 475:../src/FreeRTOS/timers.c ****             }
 476:../src/FreeRTOS/timers.c ****             else
 477:../src/FreeRTOS/timers.c ****             {
 478:../src/FreeRTOS/timers.c ****                 /* Is an auto-reload timer. */
 479:../src/FreeRTOS/timers.c ****                 uxReturn = ( UBaseType_t ) pdTRUE;
 480:../src/FreeRTOS/timers.c ****             }
 481:../src/FreeRTOS/timers.c ****         }
 482:../src/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 483:../src/FreeRTOS/timers.c **** 
 484:../src/FreeRTOS/timers.c ****         return uxReturn;
 485:../src/FreeRTOS/timers.c ****     }
 486:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 487:../src/FreeRTOS/timers.c **** 
 488:../src/FreeRTOS/timers.c ****     TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 489:../src/FreeRTOS/timers.c ****     {
 490:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 491:../src/FreeRTOS/timers.c ****         TickType_t xReturn;
 492:../src/FreeRTOS/timers.c **** 
 493:../src/FreeRTOS/timers.c ****         configASSERT( xTimer );
 494:../src/FreeRTOS/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 495:../src/FreeRTOS/timers.c ****         return xReturn;
 496:../src/FreeRTOS/timers.c ****     }
 497:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 498:../src/FreeRTOS/timers.c **** 
 499:../src/FreeRTOS/timers.c ****     const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are all
 500:../src/FreeRTOS/timers.c ****     {
 501:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 502:../src/FreeRTOS/timers.c **** 
 503:../src/FreeRTOS/timers.c ****         configASSERT( xTimer );
 504:../src/FreeRTOS/timers.c ****         return pxTimer->pcTimerName;
 505:../src/FreeRTOS/timers.c ****     }
 506:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 507:../src/FreeRTOS/timers.c **** 
 508:../src/FreeRTOS/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 509:../src/FreeRTOS/timers.c ****                                         const TickType_t xTimeNow )
 510:../src/FreeRTOS/timers.c ****     {
 511:../src/FreeRTOS/timers.c ****         BaseType_t xResult;
 512:../src/FreeRTOS/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 513:../src/FreeRTOS/timers.c **** 
 514:../src/FreeRTOS/timers.c ****         /* Remove the timer from the list of active timers.  A check has already
 515:../src/FreeRTOS/timers.c ****          * been performed to ensure the list is not empty. */
 516:../src/FreeRTOS/timers.c **** 
 517:../src/FreeRTOS/timers.c ****         ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 518:../src/FreeRTOS/timers.c ****         traceTIMER_EXPIRED( pxTimer );
 519:../src/FreeRTOS/timers.c **** 
 520:../src/FreeRTOS/timers.c ****         /* If the timer is an auto-reload timer then calculate the next
 521:../src/FreeRTOS/timers.c ****          * expiry time and re-insert the timer in the list of active timers. */
 522:../src/FreeRTOS/timers.c ****         if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 523:../src/FreeRTOS/timers.c ****         {
 524:../src/FreeRTOS/timers.c ****             /* The timer is inserted into a list using a time relative to anything
 525:../src/FreeRTOS/timers.c ****              * other than the current time.  It will therefore be inserted into the
 526:../src/FreeRTOS/timers.c ****              * correct list relative to the time this task thinks it is now. */
 527:../src/FreeRTOS/timers.c ****             if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTic
 528:../src/FreeRTOS/timers.c ****             {
 529:../src/FreeRTOS/timers.c ****                 /* The timer expired before it was added to the active timer
 530:../src/FreeRTOS/timers.c ****                  * list.  Reload it now.  */
 531:../src/FreeRTOS/timers.c ****                 xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTi
 532:../src/FreeRTOS/timers.c ****                 configASSERT( xResult );
 533:../src/FreeRTOS/timers.c ****                 ( void ) xResult;
 534:../src/FreeRTOS/timers.c ****             }
 535:../src/FreeRTOS/timers.c ****             else
 536:../src/FreeRTOS/timers.c ****             {
 537:../src/FreeRTOS/timers.c ****                 mtCOVERAGE_TEST_MARKER();
 538:../src/FreeRTOS/timers.c ****             }
 539:../src/FreeRTOS/timers.c ****         }
 540:../src/FreeRTOS/timers.c ****         else
 541:../src/FreeRTOS/timers.c ****         {
 542:../src/FreeRTOS/timers.c ****             pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 543:../src/FreeRTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 544:../src/FreeRTOS/timers.c ****         }
 545:../src/FreeRTOS/timers.c **** 
 546:../src/FreeRTOS/timers.c ****         /* Call the timer callback. */
 547:../src/FreeRTOS/timers.c ****         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 548:../src/FreeRTOS/timers.c ****     }
 549:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 550:../src/FreeRTOS/timers.c **** 
 551:../src/FreeRTOS/timers.c ****     static portTASK_FUNCTION( prvTimerTask, pvParameters )
 552:../src/FreeRTOS/timers.c ****     {
 553:../src/FreeRTOS/timers.c ****         TickType_t xNextExpireTime;
 554:../src/FreeRTOS/timers.c ****         BaseType_t xListWasEmpty;
 555:../src/FreeRTOS/timers.c **** 
 556:../src/FreeRTOS/timers.c ****         /* Just to avoid compiler warnings. */
 557:../src/FreeRTOS/timers.c ****         ( void ) pvParameters;
 558:../src/FreeRTOS/timers.c **** 
 559:../src/FreeRTOS/timers.c ****         #if ( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 560:../src/FreeRTOS/timers.c ****             {
 561:../src/FreeRTOS/timers.c ****                 extern void vApplicationDaemonTaskStartupHook( void );
 562:../src/FreeRTOS/timers.c **** 
 563:../src/FreeRTOS/timers.c ****                 /* Allow the application writer to execute some code in the context of
 564:../src/FreeRTOS/timers.c ****                  * this task at the point the task starts executing.  This is useful if the
 565:../src/FreeRTOS/timers.c ****                  * application includes initialisation code that would benefit from
 566:../src/FreeRTOS/timers.c ****                  * executing after the scheduler has been started. */
 567:../src/FreeRTOS/timers.c ****                 vApplicationDaemonTaskStartupHook();
 568:../src/FreeRTOS/timers.c ****             }
 569:../src/FreeRTOS/timers.c ****         #endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 570:../src/FreeRTOS/timers.c **** 
 571:../src/FreeRTOS/timers.c ****         for( ; ; )
 572:../src/FreeRTOS/timers.c ****         {
 573:../src/FreeRTOS/timers.c ****             /* Query the timers list to see if it contains any timers, and if so,
 574:../src/FreeRTOS/timers.c ****              * obtain the time at which the next timer will expire. */
 575:../src/FreeRTOS/timers.c ****             xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 576:../src/FreeRTOS/timers.c **** 
 577:../src/FreeRTOS/timers.c ****             /* If a timer has expired, process it.  Otherwise, block this task
 578:../src/FreeRTOS/timers.c ****              * until either a timer does expire, or a command is received. */
 579:../src/FreeRTOS/timers.c ****             prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 580:../src/FreeRTOS/timers.c **** 
 581:../src/FreeRTOS/timers.c ****             /* Empty the command queue. */
 582:../src/FreeRTOS/timers.c ****             prvProcessReceivedCommands();
 583:../src/FreeRTOS/timers.c ****         }
 584:../src/FreeRTOS/timers.c ****     }
 585:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 586:../src/FreeRTOS/timers.c **** 
 587:../src/FreeRTOS/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 588:../src/FreeRTOS/timers.c ****                                             BaseType_t xListWasEmpty )
 589:../src/FreeRTOS/timers.c ****     {
 590:../src/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 591:../src/FreeRTOS/timers.c ****         BaseType_t xTimerListsWereSwitched;
 592:../src/FreeRTOS/timers.c **** 
 593:../src/FreeRTOS/timers.c ****         vTaskSuspendAll();
 594:../src/FreeRTOS/timers.c ****         {
 595:../src/FreeRTOS/timers.c ****             /* Obtain the time now to make an assessment as to whether the timer
 596:../src/FreeRTOS/timers.c ****              * has expired or not.  If obtaining the time causes the lists to switch
 597:../src/FreeRTOS/timers.c ****              * then don't process this timer as any timers that remained in the list
 598:../src/FreeRTOS/timers.c ****              * when the lists were switched will have been processed within the
 599:../src/FreeRTOS/timers.c ****              * prvSampleTimeNow() function. */
 600:../src/FreeRTOS/timers.c ****             xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 601:../src/FreeRTOS/timers.c **** 
 602:../src/FreeRTOS/timers.c ****             if( xTimerListsWereSwitched == pdFALSE )
 603:../src/FreeRTOS/timers.c ****             {
 604:../src/FreeRTOS/timers.c ****                 /* The tick count has not overflowed, has the timer expired? */
 605:../src/FreeRTOS/timers.c ****                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 606:../src/FreeRTOS/timers.c ****                 {
 607:../src/FreeRTOS/timers.c ****                     ( void ) xTaskResumeAll();
 608:../src/FreeRTOS/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 609:../src/FreeRTOS/timers.c ****                 }
 610:../src/FreeRTOS/timers.c ****                 else
 611:../src/FreeRTOS/timers.c ****                 {
 612:../src/FreeRTOS/timers.c ****                     /* The tick count has not overflowed, and the next expire
 613:../src/FreeRTOS/timers.c ****                      * time has not been reached yet.  This task should therefore
 614:../src/FreeRTOS/timers.c ****                      * block to wait for the next expire time or a command to be
 615:../src/FreeRTOS/timers.c ****                      * received - whichever comes first.  The following line cannot
 616:../src/FreeRTOS/timers.c ****                      * be reached unless xNextExpireTime > xTimeNow, except in the
 617:../src/FreeRTOS/timers.c ****                      * case when the current timer list is empty. */
 618:../src/FreeRTOS/timers.c ****                     if( xListWasEmpty != pdFALSE )
 619:../src/FreeRTOS/timers.c ****                     {
 620:../src/FreeRTOS/timers.c ****                         /* The current timer list is empty - is the overflow list
 621:../src/FreeRTOS/timers.c ****                          * also empty? */
 622:../src/FreeRTOS/timers.c ****                         xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 623:../src/FreeRTOS/timers.c ****                     }
 624:../src/FreeRTOS/timers.c **** 
 625:../src/FreeRTOS/timers.c ****                     vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xL
 626:../src/FreeRTOS/timers.c **** 
 627:../src/FreeRTOS/timers.c ****                     if( xTaskResumeAll() == pdFALSE )
 628:../src/FreeRTOS/timers.c ****                     {
 629:../src/FreeRTOS/timers.c ****                         /* Yield to wait for either a command to arrive, or the
 630:../src/FreeRTOS/timers.c ****                          * block time to expire.  If a command arrived between the
 631:../src/FreeRTOS/timers.c ****                          * critical section being exited and this yield then the yield
 632:../src/FreeRTOS/timers.c ****                          * will not cause the task to block. */
 633:../src/FreeRTOS/timers.c ****                         portYIELD_WITHIN_API();
 634:../src/FreeRTOS/timers.c ****                     }
 635:../src/FreeRTOS/timers.c ****                     else
 636:../src/FreeRTOS/timers.c ****                     {
 637:../src/FreeRTOS/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 638:../src/FreeRTOS/timers.c ****                     }
 639:../src/FreeRTOS/timers.c ****                 }
 640:../src/FreeRTOS/timers.c ****             }
 641:../src/FreeRTOS/timers.c ****             else
 642:../src/FreeRTOS/timers.c ****             {
 643:../src/FreeRTOS/timers.c ****                 ( void ) xTaskResumeAll();
 644:../src/FreeRTOS/timers.c ****             }
 645:../src/FreeRTOS/timers.c ****         }
 646:../src/FreeRTOS/timers.c ****     }
 647:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 648:../src/FreeRTOS/timers.c **** 
 649:../src/FreeRTOS/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 650:../src/FreeRTOS/timers.c ****     {
  29              		.loc 1 650 5 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 651:../src/FreeRTOS/timers.c ****         TickType_t xNextExpireTime;
  34              		.loc 1 651 9 view .LVU1
 652:../src/FreeRTOS/timers.c **** 
 653:../src/FreeRTOS/timers.c ****         /* Timers are listed in expiry time order, with the head of the list
 654:../src/FreeRTOS/timers.c ****          * referencing the task that will expire first.  Obtain the time at which
 655:../src/FreeRTOS/timers.c ****          * the timer with the nearest expiry time will expire.  If there are no
 656:../src/FreeRTOS/timers.c ****          * active timers then just set the next expire time to 0.  That will cause
 657:../src/FreeRTOS/timers.c ****          * this task to unblock when the tick count overflows, at which point the
 658:../src/FreeRTOS/timers.c ****          * timer lists will be switched and the next expiry time can be
 659:../src/FreeRTOS/timers.c ****          * re-assessed.  */
 660:../src/FreeRTOS/timers.c ****         *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  35              		.loc 1 660 9 view .LVU2
  36              		.loc 1 660 27 is_stmt 0 view .LVU3
  37 0000 003000E3 		movw	r3, #:lower16:.LANCHOR0
  38 0004 003040E3 		movt	r3, #:upper16:.LANCHOR0
  39 0008 002093E5 		ldr	r2, [r3]
  40 000c 003092E5 		ldr	r3, [r2]
  41 0010 000053E3 		cmp	r3, #0
  42 0014 0600001A 		bne	.L4
  43 0018 0130A0E3 		mov	r3, #1
  44              	.L2:
  45              		.loc 1 660 25 discriminator 4 view .LVU4
  46 001c 003080E5 		str	r3, [r0]
 661:../src/FreeRTOS/timers.c **** 
 662:../src/FreeRTOS/timers.c ****         if( *pxListWasEmpty == pdFALSE )
  47              		.loc 1 662 9 is_stmt 1 discriminator 4 view .LVU5
  48              		.loc 1 662 11 is_stmt 0 discriminator 4 view .LVU6
  49 0020 000053E3 		cmp	r3, #0
  50 0024 0400001A 		bne	.L5
 663:../src/FreeRTOS/timers.c ****         {
 664:../src/FreeRTOS/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  51              		.loc 1 664 13 is_stmt 1 view .LVU7
  52              		.loc 1 664 31 is_stmt 0 view .LVU8
  53 0028 0C3092E5 		ldr	r3, [r2, #12]
  54              		.loc 1 664 29 view .LVU9
  55 002c 000093E5 		ldr	r0, [r3]
  56              	.LVL1:
  57              		.loc 1 664 29 view .LVU10
  58 0030 1EFF2FE1 		bx	lr
  59              	.LVL2:
  60              	.L4:
 660:../src/FreeRTOS/timers.c **** 
  61              		.loc 1 660 27 view .LVU11
  62 0034 0030A0E3 		mov	r3, #0
  63 0038 F7FFFFEA 		b	.L2
  64              	.L5:
 665:../src/FreeRTOS/timers.c ****         }
 666:../src/FreeRTOS/timers.c ****         else
 667:../src/FreeRTOS/timers.c ****         {
 668:../src/FreeRTOS/timers.c ****             /* Ensure the task unblocks when the tick count rolls over. */
 669:../src/FreeRTOS/timers.c ****             xNextExpireTime = ( TickType_t ) 0U;
  65              		.loc 1 669 29 view .LVU12
  66 003c 0000A0E3 		mov	r0, #0
  67              	.LVL3:
 670:../src/FreeRTOS/timers.c ****         }
 671:../src/FreeRTOS/timers.c **** 
 672:../src/FreeRTOS/timers.c ****         return xNextExpireTime;
  68              		.loc 1 672 9 is_stmt 1 view .LVU13
 673:../src/FreeRTOS/timers.c ****     }
  69              		.loc 1 673 5 is_stmt 0 view .LVU14
  70 0040 1EFF2FE1 		bx	lr
  71              		.cfi_endproc
  72              	.LFE13:
  74              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
  75              		.align	2
  76              		.syntax unified
  77              		.arm
  78              		.fpu neon
  80              	prvInsertTimerInActiveList:
  81              	.LVL4:
  82              	.LFB15:
 674:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 675:../src/FreeRTOS/timers.c **** 
 676:../src/FreeRTOS/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 677:../src/FreeRTOS/timers.c ****     {
 678:../src/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 679:../src/FreeRTOS/timers.c ****         PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is o
 680:../src/FreeRTOS/timers.c **** 
 681:../src/FreeRTOS/timers.c ****         xTimeNow = xTaskGetTickCount();
 682:../src/FreeRTOS/timers.c **** 
 683:../src/FreeRTOS/timers.c ****         if( xTimeNow < xLastTime )
 684:../src/FreeRTOS/timers.c ****         {
 685:../src/FreeRTOS/timers.c ****             prvSwitchTimerLists();
 686:../src/FreeRTOS/timers.c ****             *pxTimerListsWereSwitched = pdTRUE;
 687:../src/FreeRTOS/timers.c ****         }
 688:../src/FreeRTOS/timers.c ****         else
 689:../src/FreeRTOS/timers.c ****         {
 690:../src/FreeRTOS/timers.c ****             *pxTimerListsWereSwitched = pdFALSE;
 691:../src/FreeRTOS/timers.c ****         }
 692:../src/FreeRTOS/timers.c **** 
 693:../src/FreeRTOS/timers.c ****         xLastTime = xTimeNow;
 694:../src/FreeRTOS/timers.c **** 
 695:../src/FreeRTOS/timers.c ****         return xTimeNow;
 696:../src/FreeRTOS/timers.c ****     }
 697:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 698:../src/FreeRTOS/timers.c **** 
 699:../src/FreeRTOS/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 700:../src/FreeRTOS/timers.c ****                                                   const TickType_t xNextExpiryTime,
 701:../src/FreeRTOS/timers.c ****                                                   const TickType_t xTimeNow,
 702:../src/FreeRTOS/timers.c ****                                                   const TickType_t xCommandTime )
 703:../src/FreeRTOS/timers.c ****     {
  83              		.loc 1 703 5 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		.loc 1 703 5 is_stmt 0 view .LVU16
  88 0000 10402DE9 		push	{r4, lr}
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 4, -8
  91              		.cfi_offset 14, -4
 704:../src/FreeRTOS/timers.c ****         BaseType_t xProcessTimerNow = pdFALSE;
  92              		.loc 1 704 9 is_stmt 1 view .LVU17
  93              	.LVL5:
 705:../src/FreeRTOS/timers.c **** 
 706:../src/FreeRTOS/timers.c ****         listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  94              		.loc 1 706 9 view .LVU18
  95 0004 041080E5 		str	r1, [r0, #4]
 707:../src/FreeRTOS/timers.c ****         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  96              		.loc 1 707 9 view .LVU19
  97 0008 100080E5 		str	r0, [r0, #16]
 708:../src/FreeRTOS/timers.c **** 
 709:../src/FreeRTOS/timers.c ****         if( xNextExpiryTime <= xTimeNow )
  98              		.loc 1 709 9 view .LVU20
  99              		.loc 1 709 11 is_stmt 0 view .LVU21
 100 000c 020051E1 		cmp	r1, r2
 101 0010 0C00008A 		bhi	.L7
 710:../src/FreeRTOS/timers.c ****         {
 711:../src/FreeRTOS/timers.c ****             /* Has the expiry time elapsed between the command to start/reset a
 712:../src/FreeRTOS/timers.c ****              * timer was issued, and the time the command was processed? */
 713:../src/FreeRTOS/timers.c ****             if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*
 102              		.loc 1 713 13 is_stmt 1 view .LVU22
 103              		.loc 1 713 19 is_stmt 0 view .LVU23
 104 0014 032042E0 		sub	r2, r2, r3
 105              	.LVL6:
 106              		.loc 1 713 74 view .LVU24
 107 0018 183090E5 		ldr	r3, [r0, #24]
 108              	.LVL7:
 109              		.loc 1 713 15 view .LVU25
 110 001c 030052E1 		cmp	r2, r3
 111 0020 0100003A 		bcc	.L12
 714:../src/FreeRTOS/timers.c ****             {
 715:../src/FreeRTOS/timers.c ****                 /* The time between a command being issued and the command being
 716:../src/FreeRTOS/timers.c ****                  * processed actually exceeds the timers period.  */
 717:../src/FreeRTOS/timers.c ****                 xProcessTimerNow = pdTRUE;
 112              		.loc 1 717 34 view .LVU26
 113 0024 0100A0E3 		mov	r0, #1
 114              	.LVL8:
 115              		.loc 1 717 34 view .LVU27
 116 0028 1080BDE8 		pop	{r4, pc}
 117              	.LVL9:
 118              	.L12:
 718:../src/FreeRTOS/timers.c ****             }
 719:../src/FreeRTOS/timers.c ****             else
 720:../src/FreeRTOS/timers.c ****             {
 721:../src/FreeRTOS/timers.c ****                 vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 119              		.loc 1 721 17 is_stmt 1 view .LVU28
 120 002c 003000E3 		movw	r3, #:lower16:.LANCHOR1
 121 0030 003040E3 		movt	r3, #:upper16:.LANCHOR1
 122 0034 041080E2 		add	r1, r0, #4
 123              	.LVL10:
 124              		.loc 1 721 17 is_stmt 0 view .LVU29
 125 0038 000093E5 		ldr	r0, [r3]
 126              	.LVL11:
 127              		.loc 1 721 17 view .LVU30
 128 003c FEFFFFEB 		bl	vListInsert
 129              	.LVL12:
 704:../src/FreeRTOS/timers.c **** 
 130              		.loc 1 704 20 view .LVU31
 131 0040 0000A0E3 		mov	r0, #0
 132 0044 1080BDE8 		pop	{r4, pc}
 133              	.LVL13:
 134              	.L7:
 722:../src/FreeRTOS/timers.c ****             }
 723:../src/FreeRTOS/timers.c ****         }
 724:../src/FreeRTOS/timers.c ****         else
 725:../src/FreeRTOS/timers.c ****         {
 726:../src/FreeRTOS/timers.c ****             if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 135              		.loc 1 726 13 is_stmt 1 view .LVU32
 136              		.loc 1 726 45 is_stmt 0 view .LVU33
 137 0048 030052E1 		cmp	r2, r3
 138 004c 0020A023 		movcs	r2, #0
 139              	.LVL14:
 140              		.loc 1 726 45 view .LVU34
 141 0050 0120A033 		movcc	r2, #1
 142 0054 030051E1 		cmp	r1, r3
 143 0058 0020A033 		movcc	r2, #0
 144              		.loc 1 726 15 view .LVU35
 145 005c 000052E3 		cmp	r2, #0
 146 0060 0100000A 		beq	.L13
 727:../src/FreeRTOS/timers.c ****             {
 728:../src/FreeRTOS/timers.c ****                 /* If, since the command was issued, the tick count has overflowed
 729:../src/FreeRTOS/timers.c ****                  * but the expiry time has not, then the timer must have already passed
 730:../src/FreeRTOS/timers.c ****                  * its expiry time and should be processed immediately. */
 731:../src/FreeRTOS/timers.c ****                 xProcessTimerNow = pdTRUE;
 147              		.loc 1 731 34 view .LVU36
 148 0064 0100A0E3 		mov	r0, #1
 149              	.LVL15:
 732:../src/FreeRTOS/timers.c ****             }
 733:../src/FreeRTOS/timers.c ****             else
 734:../src/FreeRTOS/timers.c ****             {
 735:../src/FreeRTOS/timers.c ****                 vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 736:../src/FreeRTOS/timers.c ****             }
 737:../src/FreeRTOS/timers.c ****         }
 738:../src/FreeRTOS/timers.c **** 
 739:../src/FreeRTOS/timers.c ****         return xProcessTimerNow;
 150              		.loc 1 739 9 is_stmt 1 view .LVU37
 740:../src/FreeRTOS/timers.c ****     }
 151              		.loc 1 740 5 is_stmt 0 view .LVU38
 152 0068 1080BDE8 		pop	{r4, pc}
 153              	.LVL16:
 154              	.L13:
 735:../src/FreeRTOS/timers.c ****             }
 155              		.loc 1 735 17 is_stmt 1 view .LVU39
 156 006c 003000E3 		movw	r3, #:lower16:.LANCHOR0
 157              	.LVL17:
 735:../src/FreeRTOS/timers.c ****             }
 158              		.loc 1 735 17 is_stmt 0 view .LVU40
 159 0070 003040E3 		movt	r3, #:upper16:.LANCHOR0
 160 0074 041080E2 		add	r1, r0, #4
 161              	.LVL18:
 735:../src/FreeRTOS/timers.c ****             }
 162              		.loc 1 735 17 view .LVU41
 163 0078 000093E5 		ldr	r0, [r3]
 164              	.LVL19:
 735:../src/FreeRTOS/timers.c ****             }
 165              		.loc 1 735 17 view .LVU42
 166 007c FEFFFFEB 		bl	vListInsert
 167              	.LVL20:
 704:../src/FreeRTOS/timers.c **** 
 168              		.loc 1 704 20 view .LVU43
 169 0080 0000A0E3 		mov	r0, #0
 170 0084 1080BDE8 		pop	{r4, pc}
 171              		.cfi_endproc
 172              	.LFE15:
 174              		.section	.rodata.prvCheckForValidListAndQueue.str1.4,"aMS",%progbits,1
 175              		.align	2
 176              	.LC0:
 177 0000 546D7251 		.ascii	"TmrQ\000"
 177      00
 178              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 179              		.align	2
 180              		.syntax unified
 181              		.arm
 182              		.fpu neon
 184              	prvCheckForValidListAndQueue:
 185              	.LFB18:
 741:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 742:../src/FreeRTOS/timers.c **** 
 743:../src/FreeRTOS/timers.c ****     static void prvProcessReceivedCommands( void )
 744:../src/FreeRTOS/timers.c ****     {
 745:../src/FreeRTOS/timers.c ****         DaemonTaskMessage_t xMessage;
 746:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer;
 747:../src/FreeRTOS/timers.c ****         BaseType_t xTimerListsWereSwitched, xResult;
 748:../src/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 749:../src/FreeRTOS/timers.c **** 
 750:../src/FreeRTOS/timers.c ****         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessa
 751:../src/FreeRTOS/timers.c ****         {
 752:../src/FreeRTOS/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 753:../src/FreeRTOS/timers.c ****                 {
 754:../src/FreeRTOS/timers.c ****                     /* Negative commands are pended function calls rather than timer
 755:../src/FreeRTOS/timers.c ****                      * commands. */
 756:../src/FreeRTOS/timers.c ****                     if( xMessage.xMessageID < ( BaseType_t ) 0 )
 757:../src/FreeRTOS/timers.c ****                     {
 758:../src/FreeRTOS/timers.c ****                         const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackPara
 759:../src/FreeRTOS/timers.c **** 
 760:../src/FreeRTOS/timers.c ****                         /* The timer uses the xCallbackParameters member to request a
 761:../src/FreeRTOS/timers.c ****                          * callback be executed.  Check the callback is not NULL. */
 762:../src/FreeRTOS/timers.c ****                         configASSERT( pxCallback );
 763:../src/FreeRTOS/timers.c **** 
 764:../src/FreeRTOS/timers.c ****                         /* Call the function. */
 765:../src/FreeRTOS/timers.c ****                         pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulPar
 766:../src/FreeRTOS/timers.c ****                     }
 767:../src/FreeRTOS/timers.c ****                     else
 768:../src/FreeRTOS/timers.c ****                     {
 769:../src/FreeRTOS/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 770:../src/FreeRTOS/timers.c ****                     }
 771:../src/FreeRTOS/timers.c ****                 }
 772:../src/FreeRTOS/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 773:../src/FreeRTOS/timers.c **** 
 774:../src/FreeRTOS/timers.c ****             /* Commands that are positive are timer commands rather than pended
 775:../src/FreeRTOS/timers.c ****              * function calls. */
 776:../src/FreeRTOS/timers.c ****             if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 777:../src/FreeRTOS/timers.c ****             {
 778:../src/FreeRTOS/timers.c ****                 /* The messages uses the xTimerParameters member to work on a
 779:../src/FreeRTOS/timers.c ****                  * software timer. */
 780:../src/FreeRTOS/timers.c ****                 pxTimer = xMessage.u.xTimerParameters.pxTimer;
 781:../src/FreeRTOS/timers.c **** 
 782:../src/FreeRTOS/timers.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*li
 783:../src/FreeRTOS/timers.c ****                 {
 784:../src/FreeRTOS/timers.c ****                     /* The timer is in a list, remove it. */
 785:../src/FreeRTOS/timers.c ****                     ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 786:../src/FreeRTOS/timers.c ****                 }
 787:../src/FreeRTOS/timers.c ****                 else
 788:../src/FreeRTOS/timers.c ****                 {
 789:../src/FreeRTOS/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 790:../src/FreeRTOS/timers.c ****                 }
 791:../src/FreeRTOS/timers.c **** 
 792:../src/FreeRTOS/timers.c ****                 traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParamet
 793:../src/FreeRTOS/timers.c **** 
 794:../src/FreeRTOS/timers.c ****                 /* In this case the xTimerListsWereSwitched parameter is not used, but
 795:../src/FreeRTOS/timers.c ****                  *  it must be present in the function call.  prvSampleTimeNow() must be
 796:../src/FreeRTOS/timers.c ****                  *  called after the message is received from xTimerQueue so there is no
 797:../src/FreeRTOS/timers.c ****                  *  possibility of a higher priority task adding a message to the message
 798:../src/FreeRTOS/timers.c ****                  *  queue with a time that is ahead of the timer daemon task (because it
 799:../src/FreeRTOS/timers.c ****                  *  pre-empted the timer daemon task after the xTimeNow value was set). */
 800:../src/FreeRTOS/timers.c ****                 xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801:../src/FreeRTOS/timers.c **** 
 802:../src/FreeRTOS/timers.c ****                 switch( xMessage.xMessageID )
 803:../src/FreeRTOS/timers.c ****                 {
 804:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_START:
 805:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_START_FROM_ISR:
 806:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_RESET:
 807:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_RESET_FROM_ISR:
 808:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_START_DONT_TRACE:
 809:../src/FreeRTOS/timers.c ****                         /* Start or restart a timer. */
 810:../src/FreeRTOS/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 811:../src/FreeRTOS/timers.c **** 
 812:../src/FreeRTOS/timers.c ****                         if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessa
 813:../src/FreeRTOS/timers.c ****                         {
 814:../src/FreeRTOS/timers.c ****                             /* The timer expired before it was added to the active
 815:../src/FreeRTOS/timers.c ****                              * timer list.  Process it now. */
 816:../src/FreeRTOS/timers.c ****                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 817:../src/FreeRTOS/timers.c ****                             traceTIMER_EXPIRED( pxTimer );
 818:../src/FreeRTOS/timers.c **** 
 819:../src/FreeRTOS/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 820:../src/FreeRTOS/timers.c ****                             {
 821:../src/FreeRTOS/timers.c ****                                 xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRAC
 822:../src/FreeRTOS/timers.c ****                                 configASSERT( xResult );
 823:../src/FreeRTOS/timers.c ****                                 ( void ) xResult;
 824:../src/FreeRTOS/timers.c ****                             }
 825:../src/FreeRTOS/timers.c ****                             else
 826:../src/FreeRTOS/timers.c ****                             {
 827:../src/FreeRTOS/timers.c ****                                 mtCOVERAGE_TEST_MARKER();
 828:../src/FreeRTOS/timers.c ****                             }
 829:../src/FreeRTOS/timers.c ****                         }
 830:../src/FreeRTOS/timers.c ****                         else
 831:../src/FreeRTOS/timers.c ****                         {
 832:../src/FreeRTOS/timers.c ****                             mtCOVERAGE_TEST_MARKER();
 833:../src/FreeRTOS/timers.c ****                         }
 834:../src/FreeRTOS/timers.c **** 
 835:../src/FreeRTOS/timers.c ****                         break;
 836:../src/FreeRTOS/timers.c **** 
 837:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_STOP:
 838:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_STOP_FROM_ISR:
 839:../src/FreeRTOS/timers.c ****                         /* The timer has already been removed from the active list. */
 840:../src/FreeRTOS/timers.c ****                         pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 841:../src/FreeRTOS/timers.c ****                         break;
 842:../src/FreeRTOS/timers.c **** 
 843:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD:
 844:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
 845:../src/FreeRTOS/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 846:../src/FreeRTOS/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 847:../src/FreeRTOS/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 848:../src/FreeRTOS/timers.c **** 
 849:../src/FreeRTOS/timers.c ****                         /* The new period does not really have a reference, and can
 850:../src/FreeRTOS/timers.c ****                          * be longer or shorter than the old one.  The command time is
 851:../src/FreeRTOS/timers.c ****                          * therefore set to the current time, and as the period cannot
 852:../src/FreeRTOS/timers.c ****                          * be zero the next expiry time can only be in the future,
 853:../src/FreeRTOS/timers.c ****                          * meaning (unlike for the xTimerStart() case above) there is
 854:../src/FreeRTOS/timers.c ****                          * no fail case that needs to be handled here. */
 855:../src/FreeRTOS/timers.c ****                         ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerP
 856:../src/FreeRTOS/timers.c ****                         break;
 857:../src/FreeRTOS/timers.c **** 
 858:../src/FreeRTOS/timers.c ****                     case tmrCOMMAND_DELETE:
 859:../src/FreeRTOS/timers.c ****                         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 860:../src/FreeRTOS/timers.c ****                             {
 861:../src/FreeRTOS/timers.c ****                                 /* The timer has already been removed from the active list,
 862:../src/FreeRTOS/timers.c ****                                  * just free up the memory if the memory was dynamically
 863:../src/FreeRTOS/timers.c ****                                  * allocated. */
 864:../src/FreeRTOS/timers.c ****                                 if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( 
 865:../src/FreeRTOS/timers.c ****                                 {
 866:../src/FreeRTOS/timers.c ****                                     vPortFree( pxTimer );
 867:../src/FreeRTOS/timers.c ****                                 }
 868:../src/FreeRTOS/timers.c ****                                 else
 869:../src/FreeRTOS/timers.c ****                                 {
 870:../src/FreeRTOS/timers.c ****                                     pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 871:../src/FreeRTOS/timers.c ****                                 }
 872:../src/FreeRTOS/timers.c ****                             }
 873:../src/FreeRTOS/timers.c ****                         #else /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
 874:../src/FreeRTOS/timers.c ****                             {
 875:../src/FreeRTOS/timers.c ****                                 /* If dynamic allocation is not enabled, the memory
 876:../src/FreeRTOS/timers.c ****                                  * could not have been dynamically allocated. So there is
 877:../src/FreeRTOS/timers.c ****                                  * no need to free the memory - just mark the timer as
 878:../src/FreeRTOS/timers.c ****                                  * "not active". */
 879:../src/FreeRTOS/timers.c ****                                 pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 880:../src/FreeRTOS/timers.c ****                             }
 881:../src/FreeRTOS/timers.c ****                         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 882:../src/FreeRTOS/timers.c ****                         break;
 883:../src/FreeRTOS/timers.c **** 
 884:../src/FreeRTOS/timers.c ****                     default:
 885:../src/FreeRTOS/timers.c ****                         /* Don't expect to get here. */
 886:../src/FreeRTOS/timers.c ****                         break;
 887:../src/FreeRTOS/timers.c ****                 }
 888:../src/FreeRTOS/timers.c ****             }
 889:../src/FreeRTOS/timers.c ****         }
 890:../src/FreeRTOS/timers.c ****     }
 891:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 892:../src/FreeRTOS/timers.c **** 
 893:../src/FreeRTOS/timers.c ****     static void prvSwitchTimerLists( void )
 894:../src/FreeRTOS/timers.c ****     {
 895:../src/FreeRTOS/timers.c ****         TickType_t xNextExpireTime, xReloadTime;
 896:../src/FreeRTOS/timers.c ****         List_t * pxTemp;
 897:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer;
 898:../src/FreeRTOS/timers.c ****         BaseType_t xResult;
 899:../src/FreeRTOS/timers.c **** 
 900:../src/FreeRTOS/timers.c ****         /* The tick count has overflowed.  The timer lists must be switched.
 901:../src/FreeRTOS/timers.c ****          * If there are any timers still referenced from the current timer list
 902:../src/FreeRTOS/timers.c ****          * then they must have expired and should be processed before the lists
 903:../src/FreeRTOS/timers.c ****          * are switched. */
 904:../src/FreeRTOS/timers.c ****         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 905:../src/FreeRTOS/timers.c ****         {
 906:../src/FreeRTOS/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 907:../src/FreeRTOS/timers.c **** 
 908:../src/FreeRTOS/timers.c ****             /* Remove the timer from the list. */
 909:../src/FreeRTOS/timers.c ****             pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e908
 910:../src/FreeRTOS/timers.c ****             ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 911:../src/FreeRTOS/timers.c ****             traceTIMER_EXPIRED( pxTimer );
 912:../src/FreeRTOS/timers.c **** 
 913:../src/FreeRTOS/timers.c ****             /* Execute its callback, then send a command to restart the timer if
 914:../src/FreeRTOS/timers.c ****              * it is an auto-reload timer.  It cannot be restarted here as the lists
 915:../src/FreeRTOS/timers.c ****              * have not yet been switched. */
 916:../src/FreeRTOS/timers.c ****             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 917:../src/FreeRTOS/timers.c **** 
 918:../src/FreeRTOS/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 919:../src/FreeRTOS/timers.c ****             {
 920:../src/FreeRTOS/timers.c ****                 /* Calculate the reload value, and if the reload value results in
 921:../src/FreeRTOS/timers.c ****                  * the timer going into the same timer list then it has already expired
 922:../src/FreeRTOS/timers.c ****                  * and the timer should be re-inserted into the current list so it is
 923:../src/FreeRTOS/timers.c ****                  * processed again within this loop.  Otherwise a command should be sent
 924:../src/FreeRTOS/timers.c ****                  * to restart the timer to ensure it is only inserted into a list after
 925:../src/FreeRTOS/timers.c ****                  * the lists have been swapped. */
 926:../src/FreeRTOS/timers.c ****                 xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 927:../src/FreeRTOS/timers.c **** 
 928:../src/FreeRTOS/timers.c ****                 if( xReloadTime > xNextExpireTime )
 929:../src/FreeRTOS/timers.c ****                 {
 930:../src/FreeRTOS/timers.c ****                     listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 931:../src/FreeRTOS/timers.c ****                     listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 932:../src/FreeRTOS/timers.c ****                     vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 933:../src/FreeRTOS/timers.c ****                 }
 934:../src/FreeRTOS/timers.c ****                 else
 935:../src/FreeRTOS/timers.c ****                 {
 936:../src/FreeRTOS/timers.c ****                     xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpi
 937:../src/FreeRTOS/timers.c ****                     configASSERT( xResult );
 938:../src/FreeRTOS/timers.c ****                     ( void ) xResult;
 939:../src/FreeRTOS/timers.c ****                 }
 940:../src/FreeRTOS/timers.c ****             }
 941:../src/FreeRTOS/timers.c ****             else
 942:../src/FreeRTOS/timers.c ****             {
 943:../src/FreeRTOS/timers.c ****                 mtCOVERAGE_TEST_MARKER();
 944:../src/FreeRTOS/timers.c ****             }
 945:../src/FreeRTOS/timers.c ****         }
 946:../src/FreeRTOS/timers.c **** 
 947:../src/FreeRTOS/timers.c ****         pxTemp = pxCurrentTimerList;
 948:../src/FreeRTOS/timers.c ****         pxCurrentTimerList = pxOverflowTimerList;
 949:../src/FreeRTOS/timers.c ****         pxOverflowTimerList = pxTemp;
 950:../src/FreeRTOS/timers.c ****     }
 951:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 952:../src/FreeRTOS/timers.c **** 
 953:../src/FreeRTOS/timers.c ****     static void prvCheckForValidListAndQueue( void )
 954:../src/FreeRTOS/timers.c ****     {
 186              		.loc 1 954 5 is_stmt 1 view -0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190 0000 70402DE9 		push	{r4, r5, r6, lr}
 191              		.cfi_def_cfa_offset 16
 192              		.cfi_offset 4, -16
 193              		.cfi_offset 5, -12
 194              		.cfi_offset 6, -8
 195              		.cfi_offset 14, -4
 955:../src/FreeRTOS/timers.c ****         /* Check that the list from which active timers are referenced, and the
 956:../src/FreeRTOS/timers.c ****          * queue used to communicate with the timer service, have been
 957:../src/FreeRTOS/timers.c ****          * initialised. */
 958:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 196              		.loc 1 958 9 view .LVU45
 197 0004 FEFFFFEB 		bl	vPortEnterCritical
 198              	.LVL21:
 199              		.loc 1 958 29 view .LVU46
 959:../src/FreeRTOS/timers.c ****         {
 960:../src/FreeRTOS/timers.c ****             if( xTimerQueue == NULL )
 200              		.loc 1 960 13 view .LVU47
 201              		.loc 1 960 29 is_stmt 0 view .LVU48
 202 0008 003000E3 		movw	r3, #:lower16:.LANCHOR2
 203 000c 003040E3 		movt	r3, #:upper16:.LANCHOR2
 204 0010 003093E5 		ldr	r3, [r3]
 205              		.loc 1 960 15 view .LVU49
 206 0014 000053E3 		cmp	r3, #0
 207 0018 0100000A 		beq	.L17
 208              	.L15:
 961:../src/FreeRTOS/timers.c ****             {
 962:../src/FreeRTOS/timers.c ****                 vListInitialise( &xActiveTimerList1 );
 963:../src/FreeRTOS/timers.c ****                 vListInitialise( &xActiveTimerList2 );
 964:../src/FreeRTOS/timers.c ****                 pxCurrentTimerList = &xActiveTimerList1;
 965:../src/FreeRTOS/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 966:../src/FreeRTOS/timers.c **** 
 967:../src/FreeRTOS/timers.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 968:../src/FreeRTOS/timers.c ****                     {
 969:../src/FreeRTOS/timers.c ****                         /* The timer queue is allocated statically in case
 970:../src/FreeRTOS/timers.c ****                          * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 971:../src/FreeRTOS/timers.c ****                         PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                    
 972:../src/FreeRTOS/timers.c ****                         PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) config
 973:../src/FreeRTOS/timers.c **** 
 974:../src/FreeRTOS/timers.c ****                         xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH,
 975:../src/FreeRTOS/timers.c ****                     }
 976:../src/FreeRTOS/timers.c ****                 #else
 977:../src/FreeRTOS/timers.c ****                     {
 978:../src/FreeRTOS/timers.c ****                         xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeo
 979:../src/FreeRTOS/timers.c ****                     }
 980:../src/FreeRTOS/timers.c ****                 #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 981:../src/FreeRTOS/timers.c **** 
 982:../src/FreeRTOS/timers.c ****                 #if ( configQUEUE_REGISTRY_SIZE > 0 )
 983:../src/FreeRTOS/timers.c ****                     {
 984:../src/FreeRTOS/timers.c ****                         if( xTimerQueue != NULL )
 985:../src/FreeRTOS/timers.c ****                         {
 986:../src/FreeRTOS/timers.c ****                             vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 987:../src/FreeRTOS/timers.c ****                         }
 988:../src/FreeRTOS/timers.c ****                         else
 989:../src/FreeRTOS/timers.c ****                         {
 990:../src/FreeRTOS/timers.c ****                             mtCOVERAGE_TEST_MARKER();
 991:../src/FreeRTOS/timers.c ****                         }
 992:../src/FreeRTOS/timers.c ****                     }
 993:../src/FreeRTOS/timers.c ****                 #endif /* configQUEUE_REGISTRY_SIZE */
 994:../src/FreeRTOS/timers.c ****             }
 995:../src/FreeRTOS/timers.c ****             else
 996:../src/FreeRTOS/timers.c ****             {
 997:../src/FreeRTOS/timers.c ****                 mtCOVERAGE_TEST_MARKER();
 209              		.loc 1 997 41 is_stmt 1 view .LVU50
 998:../src/FreeRTOS/timers.c ****             }
 999:../src/FreeRTOS/timers.c ****         }
1000:../src/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 210              		.loc 1 1000 9 view .LVU51
 211 001c FEFFFFEB 		bl	vPortExitCritical
 212              	.LVL22:
 213              		.loc 1 1000 28 view .LVU52
1001:../src/FreeRTOS/timers.c ****     }
 214              		.loc 1 1001 5 is_stmt 0 view .LVU53
 215 0020 7080BDE8 		pop	{r4, r5, r6, pc}
 216              	.L17:
 962:../src/FreeRTOS/timers.c ****                 vListInitialise( &xActiveTimerList2 );
 217              		.loc 1 962 17 is_stmt 1 view .LVU54
 218 0024 005000E3 		movw	r5, #:lower16:.LANCHOR3
 219 0028 005040E3 		movt	r5, #:upper16:.LANCHOR3
 220 002c 0500A0E1 		mov	r0, r5
 221 0030 FEFFFFEB 		bl	vListInitialise
 222              	.LVL23:
 963:../src/FreeRTOS/timers.c ****                 pxCurrentTimerList = &xActiveTimerList1;
 223              		.loc 1 963 17 view .LVU55
 224 0034 004000E3 		movw	r4, #:lower16:.LANCHOR4
 225 0038 004040E3 		movt	r4, #:upper16:.LANCHOR4
 226 003c 0400A0E1 		mov	r0, r4
 227 0040 FEFFFFEB 		bl	vListInitialise
 228              	.LVL24:
 964:../src/FreeRTOS/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 229              		.loc 1 964 17 view .LVU56
 964:../src/FreeRTOS/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 230              		.loc 1 964 36 is_stmt 0 view .LVU57
 231 0044 003000E3 		movw	r3, #:lower16:.LANCHOR0
 232 0048 003040E3 		movt	r3, #:upper16:.LANCHOR0
 233 004c 005083E5 		str	r5, [r3]
 965:../src/FreeRTOS/timers.c **** 
 234              		.loc 1 965 17 is_stmt 1 view .LVU58
 965:../src/FreeRTOS/timers.c **** 
 235              		.loc 1 965 37 is_stmt 0 view .LVU59
 236 0050 003000E3 		movw	r3, #:lower16:.LANCHOR1
 237 0054 003040E3 		movt	r3, #:upper16:.LANCHOR1
 238 0058 004083E5 		str	r4, [r3]
 978:../src/FreeRTOS/timers.c ****                     }
 239              		.loc 1 978 25 is_stmt 1 view .LVU60
 978:../src/FreeRTOS/timers.c ****                     }
 240              		.loc 1 978 39 is_stmt 0 view .LVU61
 241 005c 0020A0E3 		mov	r2, #0
 242 0060 1010A0E3 		mov	r1, #16
 243 0064 0500A0E3 		mov	r0, #5
 244 0068 FEFFFFEB 		bl	xQueueGenericCreate
 245              	.LVL25:
 978:../src/FreeRTOS/timers.c ****                     }
 246              		.loc 1 978 37 view .LVU62
 247 006c 003000E3 		movw	r3, #:lower16:.LANCHOR2
 248 0070 003040E3 		movt	r3, #:upper16:.LANCHOR2
 249 0074 000083E5 		str	r0, [r3]
 984:../src/FreeRTOS/timers.c ****                         {
 250              		.loc 1 984 25 is_stmt 1 view .LVU63
 984:../src/FreeRTOS/timers.c ****                         {
 251              		.loc 1 984 27 is_stmt 0 view .LVU64
 252 0078 000050E3 		cmp	r0, #0
 253 007c E6FFFF0A 		beq	.L15
 986:../src/FreeRTOS/timers.c ****                         }
 254              		.loc 1 986 29 is_stmt 1 view .LVU65
 255 0080 001000E3 		movw	r1, #:lower16:.LC0
 256 0084 001040E3 		movt	r1, #:upper16:.LC0
 257 0088 FEFFFFEB 		bl	vQueueAddToRegistry
 258              	.LVL26:
 259 008c E2FFFFEA 		b	.L15
 260              		.cfi_endproc
 261              	.LFE18:
 263              		.section	.rodata.prvInitialiseNewTimer.str1.4,"aMS",%progbits,1
 264              		.align	2
 265              	.LC1:
 266 0000 2E2E2F73 		.ascii	"../src/FreeRTOS/timers.c\000"
 266      72632F46 
 266      72656552 
 266      544F532F 
 266      74696D65 
 267              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 268              		.align	2
 269              		.syntax unified
 270              		.arm
 271              		.fpu neon
 273              	prvInitialiseNewTimer:
 274              	.LVL27:
 275              	.LFB2:
 349:../src/FreeRTOS/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 276              		.loc 1 349 5 view -0
 277              		.cfi_startproc
 278              		@ args = 8, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 349:../src/FreeRTOS/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 280              		.loc 1 349 5 is_stmt 0 view .LVU67
 281 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 282              		.cfi_def_cfa_offset 24
 283              		.cfi_offset 4, -24
 284              		.cfi_offset 5, -20
 285              		.cfi_offset 6, -16
 286              		.cfi_offset 7, -12
 287              		.cfi_offset 8, -8
 288              		.cfi_offset 14, -4
 289 0004 0080A0E1 		mov	r8, r0
 290 0008 0260A0E1 		mov	r6, r2
 291 000c 0370A0E1 		mov	r7, r3
 292 0010 1C409DE5 		ldr	r4, [sp, #28]
 351:../src/FreeRTOS/timers.c **** 
 293              		.loc 1 351 9 is_stmt 1 view .LVU68
 294 0014 005051E2 		subs	r5, r1, #0
 295 0018 0E00000A 		beq	.L22
 296              	.LVL28:
 297              	.L19:
 351:../src/FreeRTOS/timers.c **** 
 298              		.loc 1 351 52 discriminator 3 view .LVU69
 353:../src/FreeRTOS/timers.c ****         {
 299              		.loc 1 353 9 discriminator 3 view .LVU70
 353:../src/FreeRTOS/timers.c ****         {
 300              		.loc 1 353 11 is_stmt 0 discriminator 3 view .LVU71
 301 001c 000054E3 		cmp	r4, #0
 302 0020 F081BD08 		popeq	{r4, r5, r6, r7, r8, pc}
 357:../src/FreeRTOS/timers.c **** 
 303              		.loc 1 357 13 is_stmt 1 view .LVU72
 304 0024 FEFFFFEB 		bl	prvCheckForValidListAndQueue
 305              	.LVL29:
 361:../src/FreeRTOS/timers.c ****             pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 306              		.loc 1 361 13 view .LVU73
 361:../src/FreeRTOS/timers.c ****             pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 307              		.loc 1 361 37 is_stmt 0 view .LVU74
 308 0028 008084E5 		str	r8, [r4]
 362:../src/FreeRTOS/timers.c ****             pxNewTimer->pvTimerID = pvTimerID;
 309              		.loc 1 362 13 is_stmt 1 view .LVU75
 362:../src/FreeRTOS/timers.c ****             pxNewTimer->pvTimerID = pvTimerID;
 310              		.loc 1 362 45 is_stmt 0 view .LVU76
 311 002c 185084E5 		str	r5, [r4, #24]
 363:../src/FreeRTOS/timers.c ****             pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 312              		.loc 1 363 13 is_stmt 1 view .LVU77
 363:../src/FreeRTOS/timers.c ****             pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 313              		.loc 1 363 35 is_stmt 0 view .LVU78
 314 0030 1C7084E5 		str	r7, [r4, #28]
 364:../src/FreeRTOS/timers.c ****             vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 315              		.loc 1 364 13 is_stmt 1 view .LVU79
 364:../src/FreeRTOS/timers.c ****             vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 316              		.loc 1 364 44 is_stmt 0 view .LVU80
 317 0034 18309DE5 		ldr	r3, [sp, #24]
 318 0038 203084E5 		str	r3, [r4, #32]
 365:../src/FreeRTOS/timers.c **** 
 319              		.loc 1 365 13 is_stmt 1 view .LVU81
 320 003c 040084E2 		add	r0, r4, #4
 321 0040 FEFFFFEB 		bl	vListInitialiseItem
 322              	.LVL30:
 367:../src/FreeRTOS/timers.c ****             {
 323              		.loc 1 367 13 view .LVU82
 367:../src/FreeRTOS/timers.c ****             {
 324              		.loc 1 367 15 is_stmt 0 view .LVU83
 325 0044 000056E3 		cmp	r6, #0
 369:../src/FreeRTOS/timers.c ****             }
 326              		.loc 1 369 17 is_stmt 1 view .LVU84
 369:../src/FreeRTOS/timers.c ****             }
 327              		.loc 1 369 38 is_stmt 0 view .LVU85
 328 0048 2830D415 		ldrbne	r3, [r4, #40]	@ zero_extendqisi2
 329 004c 04308313 		orrne	r3, r3, #4
 330 0050 2830C415 		strbne	r3, [r4, #40]
 372:../src/FreeRTOS/timers.c ****         }
 331              		.loc 1 372 44 is_stmt 1 view .LVU86
 374:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 332              		.loc 1 374 5 is_stmt 0 view .LVU87
 333 0054 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 334              	.LVL31:
 335              	.L22:
 351:../src/FreeRTOS/timers.c **** 
 336              		.loc 1 351 9 is_stmt 1 discriminator 1 view .LVU88
 337 0058 5F1100E3 		movw	r1, #351
 338              	.LVL32:
 351:../src/FreeRTOS/timers.c **** 
 339              		.loc 1 351 9 is_stmt 0 discriminator 1 view .LVU89
 340 005c 000000E3 		movw	r0, #:lower16:.LC1
 341              	.LVL33:
 351:../src/FreeRTOS/timers.c **** 
 342              		.loc 1 351 9 discriminator 1 view .LVU90
 343 0060 000040E3 		movt	r0, #:upper16:.LC1
 344 0064 FEFFFFEB 		bl	R_OS_AssertCalled
 345              	.LVL34:
 351:../src/FreeRTOS/timers.c **** 
 346              		.loc 1 351 9 discriminator 1 view .LVU91
 347 0068 EBFFFFEA 		b	.L19
 348              		.cfi_endproc
 349              	.LFE2:
 351              		.section	.rodata.xTimerCreateTimerTask.str1.4,"aMS",%progbits,1
 352              		.align	2
 353              	.LC2:
 354 0000 546D7220 		.ascii	"Tmr Svc\000"
 354      53766300 
 355              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 356              		.align	2
 357              		.global	xTimerCreateTimerTask
 358              		.syntax unified
 359              		.arm
 360              		.fpu neon
 362              	xTimerCreateTimerTask:
 363              	.LFB0:
 222:../src/FreeRTOS/timers.c ****         BaseType_t xReturn = pdFAIL;
 364              		.loc 1 222 5 is_stmt 1 view -0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368 0000 10402DE9 		push	{r4, lr}
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 4, -8
 371              		.cfi_offset 14, -4
 372 0004 08D04DE2 		sub	sp, sp, #8
 373              		.cfi_def_cfa_offset 16
 223:../src/FreeRTOS/timers.c **** 
 374              		.loc 1 223 9 view .LVU93
 375              	.LVL35:
 229:../src/FreeRTOS/timers.c **** 
 376              		.loc 1 229 9 view .LVU94
 377 0008 FEFFFFEB 		bl	prvCheckForValidListAndQueue
 378              	.LVL36:
 231:../src/FreeRTOS/timers.c ****         {
 379              		.loc 1 231 9 view .LVU95
 231:../src/FreeRTOS/timers.c ****         {
 380              		.loc 1 231 25 is_stmt 0 view .LVU96
 381 000c 003000E3 		movw	r3, #:lower16:.LANCHOR2
 382 0010 003040E3 		movt	r3, #:upper16:.LANCHOR2
 383 0014 003093E5 		ldr	r3, [r3]
 231:../src/FreeRTOS/timers.c ****         {
 384              		.loc 1 231 11 view .LVU97
 385 0018 000053E3 		cmp	r3, #0
 386 001c 1400000A 		beq	.L26
 255:../src/FreeRTOS/timers.c ****                                            configTIMER_SERVICE_TASK_NAME,
 387              		.loc 1 255 21 is_stmt 1 view .LVU98
 255:../src/FreeRTOS/timers.c ****                                            configTIMER_SERVICE_TASK_NAME,
 388              		.loc 1 255 31 is_stmt 0 view .LVU99
 389 0020 003000E3 		movw	r3, #:lower16:.LANCHOR5
 390 0024 003040E3 		movt	r3, #:upper16:.LANCHOR5
 391 0028 04308DE5 		str	r3, [sp, #4]
 392 002c 1330A0E3 		mov	r3, #19
 393 0030 00308DE5 		str	r3, [sp]
 394 0034 0030A0E3 		mov	r3, #0
 395 0038 052DA0E3 		mov	r2, #320
 396 003c 001000E3 		movw	r1, #:lower16:.LC2
 397 0040 001040E3 		movt	r1, #:upper16:.LC2
 398 0044 000000E3 		movw	r0, #:lower16:prvTimerTask
 399 0048 000040E3 		movt	r0, #:upper16:prvTimerTask
 400 004c FEFFFFEB 		bl	xTaskCreate
 401              	.LVL37:
 266:../src/FreeRTOS/timers.c ****         }
 402              		.loc 1 266 37 is_stmt 1 view .LVU100
 269:../src/FreeRTOS/timers.c ****         return xReturn;
 403              		.loc 1 269 9 view .LVU101
 404 0050 004050E2 		subs	r4, r0, #0
 405 0054 0300001A 		bne	.L23
 406              	.LVL38:
 407              	.L24:
 269:../src/FreeRTOS/timers.c ****         return xReturn;
 408              		.loc 1 269 9 discriminator 1 view .LVU102
 409 0058 0D1100E3 		movw	r1, #269
 410 005c 000000E3 		movw	r0, #:lower16:.LC1
 411 0060 000040E3 		movt	r0, #:upper16:.LC1
 412 0064 FEFFFFEB 		bl	R_OS_AssertCalled
 413              	.LVL39:
 269:../src/FreeRTOS/timers.c ****         return xReturn;
 414              		.loc 1 269 32 discriminator 1 view .LVU103
 270:../src/FreeRTOS/timers.c ****     }
 415              		.loc 1 270 9 discriminator 1 view .LVU104
 416              	.L23:
 271:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 417              		.loc 1 271 5 is_stmt 0 view .LVU105
 418 0068 0400A0E1 		mov	r0, r4
 419 006c 08D08DE2 		add	sp, sp, #8
 420              		.cfi_remember_state
 421              		.cfi_def_cfa_offset 8
 422              		@ sp needed
 423 0070 1080BDE8 		pop	{r4, pc}
 424              	.LVL40:
 425              	.L26:
 426              		.cfi_restore_state
 223:../src/FreeRTOS/timers.c **** 
 427              		.loc 1 223 20 view .LVU106
 428 0074 0040A0E3 		mov	r4, #0
 429 0078 F6FFFFEA 		b	.L24
 430              		.cfi_endproc
 431              	.LFE0:
 433              		.section	.text.xTimerCreate,"ax",%progbits
 434              		.align	2
 435              		.global	xTimerCreate
 436              		.syntax unified
 437              		.arm
 438              		.fpu neon
 440              	xTimerCreate:
 441              	.LVL41:
 442              	.LFB1:
 281:../src/FreeRTOS/timers.c ****             Timer_t * pxNewTimer;
 443              		.loc 1 281 9 is_stmt 1 view -0
 444              		.cfi_startproc
 445              		@ args = 4, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 281:../src/FreeRTOS/timers.c ****             Timer_t * pxNewTimer;
 447              		.loc 1 281 9 is_stmt 0 view .LVU108
 448 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 449              		.cfi_def_cfa_offset 24
 450              		.cfi_offset 4, -24
 451              		.cfi_offset 5, -20
 452              		.cfi_offset 6, -16
 453              		.cfi_offset 7, -12
 454              		.cfi_offset 8, -8
 455              		.cfi_offset 14, -4
 456 0004 08D04DE2 		sub	sp, sp, #8
 457              		.cfi_def_cfa_offset 32
 458 0008 0050A0E1 		mov	r5, r0
 459 000c 0180A0E1 		mov	r8, r1
 460 0010 0270A0E1 		mov	r7, r2
 461 0014 0360A0E1 		mov	r6, r3
 282:../src/FreeRTOS/timers.c **** 
 462              		.loc 1 282 13 is_stmt 1 view .LVU109
 284:../src/FreeRTOS/timers.c **** 
 463              		.loc 1 284 13 view .LVU110
 284:../src/FreeRTOS/timers.c **** 
 464              		.loc 1 284 40 is_stmt 0 view .LVU111
 465 0018 2C00A0E3 		mov	r0, #44
 466              	.LVL42:
 284:../src/FreeRTOS/timers.c **** 
 467              		.loc 1 284 40 view .LVU112
 468 001c FEFFFFEB 		bl	pvPortMalloc
 469              	.LVL43:
 286:../src/FreeRTOS/timers.c ****             {
 470              		.loc 1 286 13 is_stmt 1 view .LVU113
 286:../src/FreeRTOS/timers.c ****             {
 471              		.loc 1 286 15 is_stmt 0 view .LVU114
 472 0020 004050E2 		subs	r4, r0, #0
 473 0024 0900000A 		beq	.L28
 291:../src/FreeRTOS/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, p
 474              		.loc 1 291 17 is_stmt 1 view .LVU115
 291:../src/FreeRTOS/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, p
 475              		.loc 1 291 38 is_stmt 0 view .LVU116
 476 0028 0030A0E3 		mov	r3, #0
 477 002c 2830C4E5 		strb	r3, [r4, #40]
 292:../src/FreeRTOS/timers.c ****             }
 478              		.loc 1 292 17 is_stmt 1 view .LVU117
 479 0030 04408DE5 		str	r4, [sp, #4]
 480 0034 20309DE5 		ldr	r3, [sp, #32]
 481 0038 00308DE5 		str	r3, [sp]
 482 003c 0630A0E1 		mov	r3, r6
 483 0040 0720A0E1 		mov	r2, r7
 484 0044 0810A0E1 		mov	r1, r8
 485 0048 0500A0E1 		mov	r0, r5
 486              	.LVL44:
 292:../src/FreeRTOS/timers.c ****             }
 487              		.loc 1 292 17 is_stmt 0 view .LVU118
 488 004c FEFFFFEB 		bl	prvInitialiseNewTimer
 489              	.LVL45:
 295:../src/FreeRTOS/timers.c ****         }
 490              		.loc 1 295 13 is_stmt 1 view .LVU119
 491              	.L28:
 296:../src/FreeRTOS/timers.c **** 
 492              		.loc 1 296 9 is_stmt 0 view .LVU120
 493 0050 0400A0E1 		mov	r0, r4
 494 0054 08D08DE2 		add	sp, sp, #8
 495              		.cfi_def_cfa_offset 24
 496              		@ sp needed
 497 0058 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 296:../src/FreeRTOS/timers.c **** 
 498              		.loc 1 296 9 view .LVU121
 499              		.cfi_endproc
 500              	.LFE1:
 502              		.section	.text.xTimerGenericCommand,"ax",%progbits
 503              		.align	2
 504              		.global	xTimerGenericCommand
 505              		.syntax unified
 506              		.arm
 507              		.fpu neon
 509              	xTimerGenericCommand:
 510              	.LVL46:
 511              	.LFB3:
 382:../src/FreeRTOS/timers.c ****         BaseType_t xReturn = pdFAIL;
 512              		.loc 1 382 5 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 4, pretend = 0, frame = 16
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 382:../src/FreeRTOS/timers.c ****         BaseType_t xReturn = pdFAIL;
 516              		.loc 1 382 5 is_stmt 0 view .LVU123
 517 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 518              		.cfi_def_cfa_offset 20
 519              		.cfi_offset 4, -20
 520              		.cfi_offset 5, -16
 521              		.cfi_offset 6, -12
 522              		.cfi_offset 7, -8
 523              		.cfi_offset 14, -4
 524 0004 14D04DE2 		sub	sp, sp, #20
 525              		.cfi_def_cfa_offset 40
 526 0008 0150A0E1 		mov	r5, r1
 527 000c 0260A0E1 		mov	r6, r2
 528 0010 0370A0E1 		mov	r7, r3
 383:../src/FreeRTOS/timers.c ****         DaemonTaskMessage_t xMessage;
 529              		.loc 1 383 9 is_stmt 1 view .LVU124
 530              	.LVL47:
 384:../src/FreeRTOS/timers.c **** 
 531              		.loc 1 384 9 view .LVU125
 386:../src/FreeRTOS/timers.c **** 
 532              		.loc 1 386 9 view .LVU126
 533 0014 004050E2 		subs	r4, r0, #0
 534 0018 1400000A 		beq	.L38
 535              	.LVL48:
 536              	.L32:
 386:../src/FreeRTOS/timers.c **** 
 537              		.loc 1 386 31 discriminator 3 view .LVU127
 390:../src/FreeRTOS/timers.c ****         {
 538              		.loc 1 390 9 discriminator 3 view .LVU128
 390:../src/FreeRTOS/timers.c ****         {
 539              		.loc 1 390 25 is_stmt 0 discriminator 3 view .LVU129
 540 001c 001000E3 		movw	r1, #:lower16:.LANCHOR2
 541 0020 001040E3 		movt	r1, #:upper16:.LANCHOR2
 542 0024 000091E5 		ldr	r0, [r1]
 390:../src/FreeRTOS/timers.c ****         {
 543              		.loc 1 390 11 discriminator 3 view .LVU130
 544 0028 000050E3 		cmp	r0, #0
 545 002c 2200000A 		beq	.L36
 393:../src/FreeRTOS/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 546              		.loc 1 393 13 is_stmt 1 view .LVU131
 393:../src/FreeRTOS/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 547              		.loc 1 393 33 is_stmt 0 view .LVU132
 548 0030 00508DE5 		str	r5, [sp]
 394:../src/FreeRTOS/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 549              		.loc 1 394 13 is_stmt 1 view .LVU133
 394:../src/FreeRTOS/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 550              		.loc 1 394 55 is_stmt 0 view .LVU134
 551 0034 04608DE5 		str	r6, [sp, #4]
 395:../src/FreeRTOS/timers.c **** 
 552              		.loc 1 395 13 is_stmt 1 view .LVU135
 395:../src/FreeRTOS/timers.c **** 
 553              		.loc 1 395 49 is_stmt 0 view .LVU136
 554 0038 08408DE5 		str	r4, [sp, #8]
 397:../src/FreeRTOS/timers.c ****             {
 555              		.loc 1 397 13 is_stmt 1 view .LVU137
 397:../src/FreeRTOS/timers.c ****             {
 556              		.loc 1 397 15 is_stmt 0 view .LVU138
 557 003c 050055E3 		cmp	r5, #5
 558 0040 170000CA 		bgt	.L34
 399:../src/FreeRTOS/timers.c ****                 {
 559              		.loc 1 399 17 is_stmt 1 view .LVU139
 399:../src/FreeRTOS/timers.c ****                 {
 560              		.loc 1 399 21 is_stmt 0 view .LVU140
 561 0044 FEFFFFEB 		bl	xTaskGetSchedulerState
 562              	.LVL49:
 399:../src/FreeRTOS/timers.c ****                 {
 563              		.loc 1 399 19 view .LVU141
 564 0048 020050E3 		cmp	r0, #2
 565 004c 0C00000A 		beq	.L39
 405:../src/FreeRTOS/timers.c ****                 }
 566              		.loc 1 405 21 is_stmt 1 view .LVU142
 405:../src/FreeRTOS/timers.c ****                 }
 567              		.loc 1 405 31 is_stmt 0 view .LVU143
 568 0050 000000E3 		movw	r0, #:lower16:.LANCHOR2
 569 0054 000040E3 		movt	r0, #:upper16:.LANCHOR2
 570 0058 0030A0E3 		mov	r3, #0
 571 005c 0320A0E1 		mov	r2, r3
 572 0060 0D10A0E1 		mov	r1, sp
 573 0064 000090E5 		ldr	r0, [r0]
 574 0068 FEFFFFEB 		bl	xQueueGenericSend
 575              	.LVL50:
 405:../src/FreeRTOS/timers.c ****                 }
 576              		.loc 1 405 31 view .LVU144
 577 006c 100000EA 		b	.L31
 578              	.LVL51:
 579              	.L38:
 386:../src/FreeRTOS/timers.c **** 
 580              		.loc 1 386 9 is_stmt 1 discriminator 1 view .LVU145
 581 0070 821100E3 		movw	r1, #386
 582              	.LVL52:
 386:../src/FreeRTOS/timers.c **** 
 583              		.loc 1 386 9 is_stmt 0 discriminator 1 view .LVU146
 584 0074 000000E3 		movw	r0, #:lower16:.LC1
 585              	.LVL53:
 386:../src/FreeRTOS/timers.c **** 
 586              		.loc 1 386 9 discriminator 1 view .LVU147
 587 0078 000040E3 		movt	r0, #:upper16:.LC1
 588 007c FEFFFFEB 		bl	R_OS_AssertCalled
 589              	.LVL54:
 386:../src/FreeRTOS/timers.c **** 
 590              		.loc 1 386 9 discriminator 1 view .LVU148
 591 0080 E5FFFFEA 		b	.L32
 592              	.L39:
 401:../src/FreeRTOS/timers.c ****                 }
 593              		.loc 1 401 21 is_stmt 1 view .LVU149
 401:../src/FreeRTOS/timers.c ****                 }
 594              		.loc 1 401 31 is_stmt 0 view .LVU150
 595 0084 000000E3 		movw	r0, #:lower16:.LANCHOR2
 596 0088 000040E3 		movt	r0, #:upper16:.LANCHOR2
 597 008c 0030A0E3 		mov	r3, #0
 598 0090 28209DE5 		ldr	r2, [sp, #40]
 599 0094 0D10A0E1 		mov	r1, sp
 600 0098 000090E5 		ldr	r0, [r0]
 601 009c FEFFFFEB 		bl	xQueueGenericSend
 602              	.LVL55:
 401:../src/FreeRTOS/timers.c ****                 }
 603              		.loc 1 401 31 view .LVU151
 604 00a0 030000EA 		b	.L31
 605              	.LVL56:
 606              	.L34:
 410:../src/FreeRTOS/timers.c ****             }
 607              		.loc 1 410 17 is_stmt 1 view .LVU152
 410:../src/FreeRTOS/timers.c ****             }
 608              		.loc 1 410 27 is_stmt 0 view .LVU153
 609 00a4 0030A0E3 		mov	r3, #0
 610 00a8 0720A0E1 		mov	r2, r7
 611 00ac 0D10A0E1 		mov	r1, sp
 612 00b0 FEFFFFEB 		bl	xQueueGenericSendFromISR
 613              	.LVL57:
 614              	.L31:
 421:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 615              		.loc 1 421 5 view .LVU154
 616 00b4 14D08DE2 		add	sp, sp, #20
 617              		.cfi_remember_state
 618              		.cfi_def_cfa_offset 20
 619              		@ sp needed
 620 00b8 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 621              	.LVL58:
 622              	.L36:
 623              		.cfi_restore_state
 383:../src/FreeRTOS/timers.c ****         DaemonTaskMessage_t xMessage;
 624              		.loc 1 383 20 view .LVU155
 625 00bc 0000A0E3 		mov	r0, #0
 417:../src/FreeRTOS/timers.c ****         }
 626              		.loc 1 417 37 is_stmt 1 view .LVU156
 420:../src/FreeRTOS/timers.c ****     }
 627              		.loc 1 420 9 view .LVU157
 420:../src/FreeRTOS/timers.c ****     }
 628              		.loc 1 420 16 is_stmt 0 view .LVU158
 629 00c0 FBFFFFEA 		b	.L31
 630              		.cfi_endproc
 631              	.LFE3:
 633              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 634              		.align	2
 635              		.syntax unified
 636              		.arm
 637              		.fpu neon
 639              	prvSwitchTimerLists:
 640              	.LFB17:
 894:../src/FreeRTOS/timers.c ****         TickType_t xNextExpireTime, xReloadTime;
 641              		.loc 1 894 5 is_stmt 1 view -0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645 0000 70402DE9 		push	{r4, r5, r6, lr}
 646              		.cfi_def_cfa_offset 16
 647              		.cfi_offset 4, -16
 648              		.cfi_offset 5, -12
 649              		.cfi_offset 6, -8
 650              		.cfi_offset 14, -4
 651 0004 08D04DE2 		sub	sp, sp, #8
 652              		.cfi_def_cfa_offset 24
 895:../src/FreeRTOS/timers.c ****         List_t * pxTemp;
 653              		.loc 1 895 9 view .LVU160
 896:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer;
 654              		.loc 1 896 9 view .LVU161
 897:../src/FreeRTOS/timers.c ****         BaseType_t xResult;
 655              		.loc 1 897 9 view .LVU162
 898:../src/FreeRTOS/timers.c **** 
 656              		.loc 1 898 9 view .LVU163
 904:../src/FreeRTOS/timers.c ****         {
 657              		.loc 1 904 9 view .LVU164
 658              	.L42:
 943:../src/FreeRTOS/timers.c ****             }
 659              		.loc 1 943 41 view .LVU165
 904:../src/FreeRTOS/timers.c ****         {
 660              		.loc 1 904 14 view .LVU166
 904:../src/FreeRTOS/timers.c ****         {
 661              		.loc 1 904 16 is_stmt 0 view .LVU167
 662 0008 003000E3 		movw	r3, #:lower16:.LANCHOR0
 663 000c 003040E3 		movt	r3, #:upper16:.LANCHOR0
 664 0010 003093E5 		ldr	r3, [r3]
 665 0014 002093E5 		ldr	r2, [r3]
 904:../src/FreeRTOS/timers.c ****         {
 666              		.loc 1 904 14 view .LVU168
 667 0018 000052E3 		cmp	r2, #0
 668 001c 2400000A 		beq	.L47
 906:../src/FreeRTOS/timers.c **** 
 669              		.loc 1 906 13 is_stmt 1 view .LVU169
 906:../src/FreeRTOS/timers.c **** 
 670              		.loc 1 906 31 is_stmt 0 view .LVU170
 671 0020 0C3093E5 		ldr	r3, [r3, #12]
 906:../src/FreeRTOS/timers.c **** 
 672              		.loc 1 906 29 view .LVU171
 673 0024 006093E5 		ldr	r6, [r3]
 674              	.LVL59:
 909:../src/FreeRTOS/timers.c ****             ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 675              		.loc 1 909 13 is_stmt 1 view .LVU172
 909:../src/FreeRTOS/timers.c ****             ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 676              		.loc 1 909 21 is_stmt 0 view .LVU173
 677 0028 0C4093E5 		ldr	r4, [r3, #12]
 678              	.LVL60:
 910:../src/FreeRTOS/timers.c ****             traceTIMER_EXPIRED( pxTimer );
 679              		.loc 1 910 13 is_stmt 1 view .LVU174
 910:../src/FreeRTOS/timers.c ****             traceTIMER_EXPIRED( pxTimer );
 680              		.loc 1 910 22 is_stmt 0 view .LVU175
 681 002c 045084E2 		add	r5, r4, #4
 682 0030 0500A0E1 		mov	r0, r5
 683 0034 FEFFFFEB 		bl	uxListRemove
 684              	.LVL61:
 911:../src/FreeRTOS/timers.c **** 
 685              		.loc 1 911 42 is_stmt 1 view .LVU176
 916:../src/FreeRTOS/timers.c **** 
 686              		.loc 1 916 13 view .LVU177
 916:../src/FreeRTOS/timers.c **** 
 687              		.loc 1 916 20 is_stmt 0 view .LVU178
 688 0038 203094E5 		ldr	r3, [r4, #32]
 916:../src/FreeRTOS/timers.c **** 
 689              		.loc 1 916 13 view .LVU179
 690 003c 0400A0E1 		mov	r0, r4
 691 0040 33FF2FE1 		blx	r3
 692              	.LVL62:
 918:../src/FreeRTOS/timers.c ****             {
 693              		.loc 1 918 13 is_stmt 1 view .LVU180
 918:../src/FreeRTOS/timers.c ****             {
 694              		.loc 1 918 26 is_stmt 0 view .LVU181
 695 0044 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 918:../src/FreeRTOS/timers.c ****             {
 696              		.loc 1 918 15 view .LVU182
 697 0048 040013E3 		tst	r3, #4
 698 004c EDFFFF0A 		beq	.L42
 926:../src/FreeRTOS/timers.c **** 
 699              		.loc 1 926 17 is_stmt 1 view .LVU183
 926:../src/FreeRTOS/timers.c **** 
 700              		.loc 1 926 58 is_stmt 0 view .LVU184
 701 0050 183094E5 		ldr	r3, [r4, #24]
 926:../src/FreeRTOS/timers.c **** 
 702              		.loc 1 926 29 view .LVU185
 703 0054 063083E0 		add	r3, r3, r6
 704              	.LVL63:
 928:../src/FreeRTOS/timers.c ****                 {
 705              		.loc 1 928 17 is_stmt 1 view .LVU186
 928:../src/FreeRTOS/timers.c ****                 {
 706              		.loc 1 928 19 is_stmt 0 view .LVU187
 707 0058 030056E1 		cmp	r6, r3
 708 005c 0700002A 		bcs	.L43
 930:../src/FreeRTOS/timers.c ****                     listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 709              		.loc 1 930 21 is_stmt 1 view .LVU188
 710 0060 043084E5 		str	r3, [r4, #4]
 931:../src/FreeRTOS/timers.c ****                     vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 711              		.loc 1 931 21 view .LVU189
 712 0064 104084E5 		str	r4, [r4, #16]
 932:../src/FreeRTOS/timers.c ****                 }
 713              		.loc 1 932 21 view .LVU190
 714 0068 003000E3 		movw	r3, #:lower16:.LANCHOR0
 715              	.LVL64:
 932:../src/FreeRTOS/timers.c ****                 }
 716              		.loc 1 932 21 is_stmt 0 view .LVU191
 717 006c 003040E3 		movt	r3, #:upper16:.LANCHOR0
 718 0070 0510A0E1 		mov	r1, r5
 719 0074 000093E5 		ldr	r0, [r3]
 720 0078 FEFFFFEB 		bl	vListInsert
 721              	.LVL65:
 932:../src/FreeRTOS/timers.c ****                 }
 722              		.loc 1 932 21 view .LVU192
 723 007c E1FFFFEA 		b	.L42
 724              	.LVL66:
 725              	.L43:
 936:../src/FreeRTOS/timers.c ****                     configASSERT( xResult );
 726              		.loc 1 936 21 is_stmt 1 view .LVU193
 936:../src/FreeRTOS/timers.c ****                     configASSERT( xResult );
 727              		.loc 1 936 31 is_stmt 0 view .LVU194
 728 0080 0010A0E3 		mov	r1, #0
 729 0084 00108DE5 		str	r1, [sp]
 730 0088 0130A0E1 		mov	r3, r1
 731              	.LVL67:
 936:../src/FreeRTOS/timers.c ****                     configASSERT( xResult );
 732              		.loc 1 936 31 view .LVU195
 733 008c 0620A0E1 		mov	r2, r6
 734 0090 0400A0E1 		mov	r0, r4
 735 0094 FEFFFFEB 		bl	xTimerGenericCommand
 736              	.LVL68:
 937:../src/FreeRTOS/timers.c ****                     ( void ) xResult;
 737              		.loc 1 937 21 is_stmt 1 view .LVU196
 738 0098 000050E3 		cmp	r0, #0
 739 009c D9FFFF1A 		bne	.L42
 937:../src/FreeRTOS/timers.c ****                     ( void ) xResult;
 740              		.loc 1 937 21 discriminator 1 view .LVU197
 741 00a0 A91300E3 		movw	r1, #937
 742 00a4 000000E3 		movw	r0, #:lower16:.LC1
 743              	.LVL69:
 937:../src/FreeRTOS/timers.c ****                     ( void ) xResult;
 744              		.loc 1 937 21 is_stmt 0 discriminator 1 view .LVU198
 745 00a8 000040E3 		movt	r0, #:upper16:.LC1
 746 00ac FEFFFFEB 		bl	R_OS_AssertCalled
 747              	.LVL70:
 748 00b0 D4FFFFEA 		b	.L42
 749              	.LVL71:
 750              	.L47:
 947:../src/FreeRTOS/timers.c ****         pxCurrentTimerList = pxOverflowTimerList;
 751              		.loc 1 947 9 is_stmt 1 view .LVU199
 948:../src/FreeRTOS/timers.c ****         pxOverflowTimerList = pxTemp;
 752              		.loc 1 948 9 view .LVU200
 948:../src/FreeRTOS/timers.c ****         pxOverflowTimerList = pxTemp;
 753              		.loc 1 948 28 is_stmt 0 view .LVU201
 754 00b4 001000E3 		movw	r1, #:lower16:.LANCHOR0
 755 00b8 001040E3 		movt	r1, #:upper16:.LANCHOR0
 756 00bc 002000E3 		movw	r2, #:lower16:.LANCHOR1
 757 00c0 002040E3 		movt	r2, #:upper16:.LANCHOR1
 758 00c4 000092E5 		ldr	r0, [r2]
 759 00c8 000081E5 		str	r0, [r1]
 949:../src/FreeRTOS/timers.c ****     }
 760              		.loc 1 949 9 is_stmt 1 view .LVU202
 949:../src/FreeRTOS/timers.c ****     }
 761              		.loc 1 949 29 is_stmt 0 view .LVU203
 762 00cc 003082E5 		str	r3, [r2]
 950:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 763              		.loc 1 950 5 view .LVU204
 764 00d0 08D08DE2 		add	sp, sp, #8
 765              		.cfi_def_cfa_offset 16
 766              		@ sp needed
 767 00d4 7080BDE8 		pop	{r4, r5, r6, pc}
 768              		.cfi_endproc
 769              	.LFE17:
 771              		.section	.text.prvSampleTimeNow,"ax",%progbits
 772              		.align	2
 773              		.syntax unified
 774              		.arm
 775              		.fpu neon
 777              	prvSampleTimeNow:
 778              	.LVL72:
 779              	.LFB14:
 677:../src/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 780              		.loc 1 677 5 is_stmt 1 view -0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 677:../src/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 784              		.loc 1 677 5 is_stmt 0 view .LVU206
 785 0000 70402DE9 		push	{r4, r5, r6, lr}
 786              		.cfi_def_cfa_offset 16
 787              		.cfi_offset 4, -16
 788              		.cfi_offset 5, -12
 789              		.cfi_offset 6, -8
 790              		.cfi_offset 14, -4
 791 0004 0050A0E1 		mov	r5, r0
 678:../src/FreeRTOS/timers.c ****         PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is o
 792              		.loc 1 678 9 is_stmt 1 view .LVU207
 679:../src/FreeRTOS/timers.c **** 
 793              		.loc 1 679 25 view .LVU208
 681:../src/FreeRTOS/timers.c **** 
 794              		.loc 1 681 9 view .LVU209
 681:../src/FreeRTOS/timers.c **** 
 795              		.loc 1 681 20 is_stmt 0 view .LVU210
 796 0008 FEFFFFEB 		bl	xTaskGetTickCount
 797              	.LVL73:
 681:../src/FreeRTOS/timers.c **** 
 798              		.loc 1 681 20 view .LVU211
 799 000c 0040A0E1 		mov	r4, r0
 800              	.LVL74:
 683:../src/FreeRTOS/timers.c ****         {
 801              		.loc 1 683 9 is_stmt 1 view .LVU212
 683:../src/FreeRTOS/timers.c ****         {
 802              		.loc 1 683 22 is_stmt 0 view .LVU213
 803 0010 003000E3 		movw	r3, #:lower16:.LANCHOR6
 804 0014 003040E3 		movt	r3, #:upper16:.LANCHOR6
 805 0018 003093E5 		ldr	r3, [r3]
 683:../src/FreeRTOS/timers.c ****         {
 806              		.loc 1 683 11 view .LVU214
 807 001c 000053E1 		cmp	r3, r0
 808 0020 0600008A 		bhi	.L52
 690:../src/FreeRTOS/timers.c ****         }
 809              		.loc 1 690 13 is_stmt 1 view .LVU215
 690:../src/FreeRTOS/timers.c ****         }
 810              		.loc 1 690 39 is_stmt 0 view .LVU216
 811 0024 0030A0E3 		mov	r3, #0
 812 0028 003085E5 		str	r3, [r5]
 813              	.LVL75:
 814              	.L50:
 693:../src/FreeRTOS/timers.c **** 
 815              		.loc 1 693 9 is_stmt 1 view .LVU217
 693:../src/FreeRTOS/timers.c **** 
 816              		.loc 1 693 19 is_stmt 0 view .LVU218
 817 002c 003000E3 		movw	r3, #:lower16:.LANCHOR6
 818 0030 003040E3 		movt	r3, #:upper16:.LANCHOR6
 819 0034 004083E5 		str	r4, [r3]
 695:../src/FreeRTOS/timers.c ****     }
 820              		.loc 1 695 9 is_stmt 1 view .LVU219
 696:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 821              		.loc 1 696 5 is_stmt 0 view .LVU220
 822 0038 0400A0E1 		mov	r0, r4
 823 003c 7080BDE8 		pop	{r4, r5, r6, pc}
 824              	.LVL76:
 825              	.L52:
 685:../src/FreeRTOS/timers.c ****             *pxTimerListsWereSwitched = pdTRUE;
 826              		.loc 1 685 13 is_stmt 1 view .LVU221
 827 0040 FEFFFFEB 		bl	prvSwitchTimerLists
 828              	.LVL77:
 686:../src/FreeRTOS/timers.c ****         }
 829              		.loc 1 686 13 view .LVU222
 686:../src/FreeRTOS/timers.c ****         }
 830              		.loc 1 686 39 is_stmt 0 view .LVU223
 831 0044 0130A0E3 		mov	r3, #1
 832 0048 003085E5 		str	r3, [r5]
 833 004c F6FFFFEA 		b	.L50
 834              		.cfi_endproc
 835              	.LFE14:
 837              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 838              		.align	2
 839              		.syntax unified
 840              		.arm
 841              		.fpu neon
 843              	prvProcessExpiredTimer:
 844              	.LVL78:
 845              	.LFB10:
 510:../src/FreeRTOS/timers.c ****         BaseType_t xResult;
 846              		.loc 1 510 5 is_stmt 1 view -0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 510:../src/FreeRTOS/timers.c ****         BaseType_t xResult;
 850              		.loc 1 510 5 is_stmt 0 view .LVU225
 851 0000 70402DE9 		push	{r4, r5, r6, lr}
 852              		.cfi_def_cfa_offset 16
 853              		.cfi_offset 4, -16
 854              		.cfi_offset 5, -12
 855              		.cfi_offset 6, -8
 856              		.cfi_offset 14, -4
 857 0004 08D04DE2 		sub	sp, sp, #8
 858              		.cfi_def_cfa_offset 24
 859 0008 0060A0E1 		mov	r6, r0
 860 000c 0150A0E1 		mov	r5, r1
 511:../src/FreeRTOS/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 861              		.loc 1 511 9 is_stmt 1 view .LVU226
 512:../src/FreeRTOS/timers.c **** 
 862              		.loc 1 512 9 view .LVU227
 512:../src/FreeRTOS/timers.c **** 
 863              		.loc 1 512 49 is_stmt 0 view .LVU228
 864 0010 003000E3 		movw	r3, #:lower16:.LANCHOR0
 865 0014 003040E3 		movt	r3, #:upper16:.LANCHOR0
 866 0018 003093E5 		ldr	r3, [r3]
 867 001c 0C3093E5 		ldr	r3, [r3, #12]
 512:../src/FreeRTOS/timers.c **** 
 868              		.loc 1 512 25 view .LVU229
 869 0020 0C4093E5 		ldr	r4, [r3, #12]
 870              	.LVL79:
 517:../src/FreeRTOS/timers.c ****         traceTIMER_EXPIRED( pxTimer );
 871              		.loc 1 517 9 is_stmt 1 view .LVU230
 517:../src/FreeRTOS/timers.c ****         traceTIMER_EXPIRED( pxTimer );
 872              		.loc 1 517 18 is_stmt 0 view .LVU231
 873 0024 040084E2 		add	r0, r4, #4
 874              	.LVL80:
 517:../src/FreeRTOS/timers.c ****         traceTIMER_EXPIRED( pxTimer );
 875              		.loc 1 517 18 view .LVU232
 876 0028 FEFFFFEB 		bl	uxListRemove
 877              	.LVL81:
 518:../src/FreeRTOS/timers.c **** 
 878              		.loc 1 518 38 is_stmt 1 view .LVU233
 522:../src/FreeRTOS/timers.c ****         {
 879              		.loc 1 522 9 view .LVU234
 522:../src/FreeRTOS/timers.c ****         {
 880              		.loc 1 522 22 is_stmt 0 view .LVU235
 881 002c 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 522:../src/FreeRTOS/timers.c ****         {
 882              		.loc 1 522 11 view .LVU236
 883 0030 040013E3 		tst	r3, #4
 884 0034 0600001A 		bne	.L57
 542:../src/FreeRTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 885              		.loc 1 542 13 is_stmt 1 view .LVU237
 542:../src/FreeRTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 886              		.loc 1 542 31 is_stmt 0 view .LVU238
 887 0038 0130C3E3 		bic	r3, r3, #1
 888 003c 2830C4E5 		strb	r3, [r4, #40]
 889              	.L55:
 543:../src/FreeRTOS/timers.c ****         }
 890              		.loc 1 543 37 is_stmt 1 view .LVU239
 547:../src/FreeRTOS/timers.c ****     }
 891              		.loc 1 547 9 view .LVU240
 547:../src/FreeRTOS/timers.c ****     }
 892              		.loc 1 547 16 is_stmt 0 view .LVU241
 893 0040 203094E5 		ldr	r3, [r4, #32]
 547:../src/FreeRTOS/timers.c ****     }
 894              		.loc 1 547 9 view .LVU242
 895 0044 0400A0E1 		mov	r0, r4
 896 0048 33FF2FE1 		blx	r3
 897              	.LVL82:
 548:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 898              		.loc 1 548 5 view .LVU243
 899 004c 08D08DE2 		add	sp, sp, #8
 900              		.cfi_remember_state
 901              		.cfi_def_cfa_offset 16
 902              		@ sp needed
 903 0050 7080BDE8 		pop	{r4, r5, r6, pc}
 904              	.LVL83:
 905              	.L57:
 906              		.cfi_restore_state
 527:../src/FreeRTOS/timers.c ****             {
 907              		.loc 1 527 13 is_stmt 1 view .LVU244
 527:../src/FreeRTOS/timers.c ****             {
 908              		.loc 1 527 81 is_stmt 0 view .LVU245
 909 0054 181094E5 		ldr	r1, [r4, #24]
 527:../src/FreeRTOS/timers.c ****             {
 910              		.loc 1 527 17 view .LVU246
 911 0058 0630A0E1 		mov	r3, r6
 912 005c 0520A0E1 		mov	r2, r5
 913 0060 061081E0 		add	r1, r1, r6
 914 0064 0400A0E1 		mov	r0, r4
 915 0068 FEFFFFEB 		bl	prvInsertTimerInActiveList
 916              	.LVL84:
 527:../src/FreeRTOS/timers.c ****             {
 917              		.loc 1 527 15 view .LVU247
 918 006c 000050E3 		cmp	r0, #0
 919 0070 F2FFFF0A 		beq	.L55
 531:../src/FreeRTOS/timers.c ****                 configASSERT( xResult );
 920              		.loc 1 531 17 is_stmt 1 view .LVU248
 531:../src/FreeRTOS/timers.c ****                 configASSERT( xResult );
 921              		.loc 1 531 27 is_stmt 0 view .LVU249
 922 0074 0010A0E3 		mov	r1, #0
 923 0078 00108DE5 		str	r1, [sp]
 924 007c 0130A0E1 		mov	r3, r1
 925 0080 0620A0E1 		mov	r2, r6
 926 0084 0400A0E1 		mov	r0, r4
 927 0088 FEFFFFEB 		bl	xTimerGenericCommand
 928              	.LVL85:
 532:../src/FreeRTOS/timers.c ****                 ( void ) xResult;
 929              		.loc 1 532 17 is_stmt 1 view .LVU250
 930 008c 000050E3 		cmp	r0, #0
 931 0090 EAFFFF1A 		bne	.L55
 532:../src/FreeRTOS/timers.c ****                 ( void ) xResult;
 932              		.loc 1 532 17 discriminator 1 view .LVU251
 933 0094 851FA0E3 		mov	r1, #532
 934 0098 000000E3 		movw	r0, #:lower16:.LC1
 935              	.LVL86:
 532:../src/FreeRTOS/timers.c ****                 ( void ) xResult;
 936              		.loc 1 532 17 is_stmt 0 discriminator 1 view .LVU252
 937 009c 000040E3 		movt	r0, #:upper16:.LC1
 938 00a0 FEFFFFEB 		bl	R_OS_AssertCalled
 939              	.LVL87:
 940 00a4 E5FFFFEA 		b	.L55
 941              		.cfi_endproc
 942              	.LFE10:
 944              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 945              		.align	2
 946              		.syntax unified
 947              		.arm
 948              		.fpu neon
 950              	prvProcessTimerOrBlockTask:
 951              	.LVL88:
 952              	.LFB12:
 589:../src/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 953              		.loc 1 589 5 is_stmt 1 view -0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 8
 956              		@ frame_needed = 0, uses_anonymous_args = 0
 589:../src/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 957              		.loc 1 589 5 is_stmt 0 view .LVU254
 958 0000 70402DE9 		push	{r4, r5, r6, lr}
 959              		.cfi_def_cfa_offset 16
 960              		.cfi_offset 4, -16
 961              		.cfi_offset 5, -12
 962              		.cfi_offset 6, -8
 963              		.cfi_offset 14, -4
 964 0004 08D04DE2 		sub	sp, sp, #8
 965              		.cfi_def_cfa_offset 24
 966 0008 0060A0E1 		mov	r6, r0
 967 000c 0140A0E1 		mov	r4, r1
 590:../src/FreeRTOS/timers.c ****         BaseType_t xTimerListsWereSwitched;
 968              		.loc 1 590 9 is_stmt 1 view .LVU255
 591:../src/FreeRTOS/timers.c **** 
 969              		.loc 1 591 9 view .LVU256
 593:../src/FreeRTOS/timers.c ****         {
 970              		.loc 1 593 9 view .LVU257
 971 0010 FEFFFFEB 		bl	vTaskSuspendAll
 972              	.LVL89:
 600:../src/FreeRTOS/timers.c **** 
 973              		.loc 1 600 13 view .LVU258
 600:../src/FreeRTOS/timers.c **** 
 974              		.loc 1 600 24 is_stmt 0 view .LVU259
 975 0014 04008DE2 		add	r0, sp, #4
 976 0018 FEFFFFEB 		bl	prvSampleTimeNow
 977              	.LVL90:
 602:../src/FreeRTOS/timers.c ****             {
 978              		.loc 1 602 13 is_stmt 1 view .LVU260
 602:../src/FreeRTOS/timers.c ****             {
 979              		.loc 1 602 41 is_stmt 0 view .LVU261
 980 001c 04209DE5 		ldr	r2, [sp, #4]
 602:../src/FreeRTOS/timers.c ****             {
 981              		.loc 1 602 15 view .LVU262
 982 0020 000052E3 		cmp	r2, #0
 983 0024 2200001A 		bne	.L59
 984 0028 0050A0E1 		mov	r5, r0
 605:../src/FreeRTOS/timers.c ****                 {
 985              		.loc 1 605 17 is_stmt 1 view .LVU263
 605:../src/FreeRTOS/timers.c ****                 {
 986              		.loc 1 605 71 is_stmt 0 view .LVU264
 987 002c 060050E1 		cmp	r0, r6
 988 0030 0030A033 		movcc	r3, #0
 989 0034 0130A023 		movcs	r3, #1
 605:../src/FreeRTOS/timers.c ****                 {
 990              		.loc 1 605 50 view .LVU265
 991 0038 000054E3 		cmp	r4, #0
 992 003c 0030A013 		movne	r3, #0
 605:../src/FreeRTOS/timers.c ****                 {
 993              		.loc 1 605 19 view .LVU266
 994 0040 000053E3 		cmp	r3, #0
 995 0044 1300001A 		bne	.L65
 618:../src/FreeRTOS/timers.c ****                     {
 996              		.loc 1 618 21 is_stmt 1 view .LVU267
 618:../src/FreeRTOS/timers.c ****                     {
 997              		.loc 1 618 23 is_stmt 0 view .LVU268
 998 0048 000054E3 		cmp	r4, #0
 999 004c 0600000A 		beq	.L62
 622:../src/FreeRTOS/timers.c ****                     }
 1000              		.loc 1 622 25 is_stmt 1 view .LVU269
 622:../src/FreeRTOS/timers.c ****                     }
 1001              		.loc 1 622 41 is_stmt 0 view .LVU270
 1002 0050 003000E3 		movw	r3, #:lower16:.LANCHOR1
 1003 0054 003040E3 		movt	r3, #:upper16:.LANCHOR1
 1004 0058 003093E5 		ldr	r3, [r3]
 1005 005c 003093E5 		ldr	r3, [r3]
 1006 0060 000053E3 		cmp	r3, #0
 1007 0064 1000001A 		bne	.L63
 1008 0068 0140A0E3 		mov	r4, #1
 1009              	.LVL91:
 1010              	.L62:
 625:../src/FreeRTOS/timers.c **** 
 1011              		.loc 1 625 21 is_stmt 1 view .LVU271
 1012 006c 003000E3 		movw	r3, #:lower16:.LANCHOR2
 1013 0070 003040E3 		movt	r3, #:upper16:.LANCHOR2
 1014 0074 0420A0E1 		mov	r2, r4
 1015 0078 051046E0 		sub	r1, r6, r5
 1016 007c 000093E5 		ldr	r0, [r3]
 1017              	.LVL92:
 625:../src/FreeRTOS/timers.c **** 
 1018              		.loc 1 625 21 is_stmt 0 view .LVU272
 1019 0080 FEFFFFEB 		bl	vQueueWaitForMessageRestricted
 1020              	.LVL93:
 627:../src/FreeRTOS/timers.c ****                     {
 1021              		.loc 1 627 21 is_stmt 1 view .LVU273
 627:../src/FreeRTOS/timers.c ****                     {
 1022              		.loc 1 627 25 is_stmt 0 view .LVU274
 1023 0084 FEFFFFEB 		bl	xTaskResumeAll
 1024              	.LVL94:
 627:../src/FreeRTOS/timers.c ****                     {
 1025              		.loc 1 627 23 view .LVU275
 1026 0088 000050E3 		cmp	r0, #0
 1027 008c 0900001A 		bne	.L58
 633:../src/FreeRTOS/timers.c ****                     }
 1028              		.loc 1 633 25 is_stmt 1 view .LVU276
 1029              		.syntax divided
 1030              	@ 633 "../src/FreeRTOS/timers.c" 1
 1031 0090 000000EF 		SWI 0
 1032              	@ 0 "" 2
 633:../src/FreeRTOS/timers.c ****                     }
 1033              		.loc 1 633 47 view .LVU277
 1034              		.arm
 1035              		.syntax unified
 1036 0094 070000EA 		b	.L58
 1037              	.LVL95:
 1038              	.L65:
 607:../src/FreeRTOS/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1039              		.loc 1 607 21 view .LVU278
 607:../src/FreeRTOS/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1040              		.loc 1 607 30 is_stmt 0 view .LVU279
 1041 0098 FEFFFFEB 		bl	xTaskResumeAll
 1042              	.LVL96:
 608:../src/FreeRTOS/timers.c ****                 }
 1043              		.loc 1 608 21 is_stmt 1 view .LVU280
 1044 009c 0510A0E1 		mov	r1, r5
 1045 00a0 0600A0E1 		mov	r0, r6
 1046 00a4 FEFFFFEB 		bl	prvProcessExpiredTimer
 1047              	.LVL97:
 1048 00a8 020000EA 		b	.L58
 1049              	.LVL98:
 1050              	.L63:
 622:../src/FreeRTOS/timers.c ****                     }
 1051              		.loc 1 622 41 is_stmt 0 view .LVU281
 1052 00ac 0240A0E1 		mov	r4, r2
 1053              	.LVL99:
 622:../src/FreeRTOS/timers.c ****                     }
 1054              		.loc 1 622 41 view .LVU282
 1055 00b0 EDFFFFEA 		b	.L62
 1056              	.LVL100:
 1057              	.L59:
 643:../src/FreeRTOS/timers.c ****             }
 1058              		.loc 1 643 17 is_stmt 1 view .LVU283
 643:../src/FreeRTOS/timers.c ****             }
 1059              		.loc 1 643 26 is_stmt 0 view .LVU284
 1060 00b4 FEFFFFEB 		bl	xTaskResumeAll
 1061              	.LVL101:
 1062              	.L58:
 646:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1063              		.loc 1 646 5 view .LVU285
 1064 00b8 08D08DE2 		add	sp, sp, #8
 1065              		.cfi_def_cfa_offset 16
 1066              		@ sp needed
 1067 00bc 7080BDE8 		pop	{r4, r5, r6, pc}
 646:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1068              		.loc 1 646 5 view .LVU286
 1069              		.cfi_endproc
 1070              	.LFE12:
 1072              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 1073              		.align	2
 1074              		.syntax unified
 1075              		.arm
 1076              		.fpu neon
 1078              	prvProcessReceivedCommands:
 1079              	.LFB16:
 744:../src/FreeRTOS/timers.c ****         DaemonTaskMessage_t xMessage;
 1080              		.loc 1 744 5 is_stmt 1 view -0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 24
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084 0000 30402DE9 		push	{r4, r5, lr}
 1085              		.cfi_def_cfa_offset 12
 1086              		.cfi_offset 4, -12
 1087              		.cfi_offset 5, -8
 1088              		.cfi_offset 14, -4
 1089 0004 24D04DE2 		sub	sp, sp, #36
 1090              		.cfi_def_cfa_offset 48
 745:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer;
 1091              		.loc 1 745 9 view .LVU288
 746:../src/FreeRTOS/timers.c ****         BaseType_t xTimerListsWereSwitched, xResult;
 1092              		.loc 1 746 9 view .LVU289
 747:../src/FreeRTOS/timers.c ****         TickType_t xTimeNow;
 1093              		.loc 1 747 9 view .LVU290
 748:../src/FreeRTOS/timers.c **** 
 1094              		.loc 1 748 9 view .LVU291
 750:../src/FreeRTOS/timers.c ****         {
 1095              		.loc 1 750 9 view .LVU292
 750:../src/FreeRTOS/timers.c ****         {
 1096              		.loc 1 750 14 is_stmt 0 view .LVU293
 1097 0008 060000EA 		b	.L69
 1098              	.L84:
 1099              	.LBB2:
 758:../src/FreeRTOS/timers.c **** 
 1100              		.loc 1 758 25 is_stmt 1 discriminator 3 view .LVU294
 1101              	.LVL102:
 762:../src/FreeRTOS/timers.c **** 
 1102              		.loc 1 762 25 discriminator 3 view .LVU295
 762:../src/FreeRTOS/timers.c **** 
 1103              		.loc 1 762 51 discriminator 3 view .LVU296
 765:../src/FreeRTOS/timers.c ****                     }
 1104              		.loc 1 765 25 discriminator 3 view .LVU297
 1105 000c 1C109DE5 		ldr	r1, [sp, #28]
 1106 0010 18009DE5 		ldr	r0, [sp, #24]
 1107 0014 14309DE5 		ldr	r3, [sp, #20]
 1108 0018 33FF2FE1 		blx	r3
 1109              	.LVL103:
 1110              	.L68:
 765:../src/FreeRTOS/timers.c ****                     }
 1111              		.loc 1 765 25 is_stmt 0 discriminator 3 view .LVU298
 1112              	.LBE2:
 769:../src/FreeRTOS/timers.c ****                     }
 1113              		.loc 1 769 49 is_stmt 1 view .LVU299
 776:../src/FreeRTOS/timers.c ****             {
 1114              		.loc 1 776 13 view .LVU300
 776:../src/FreeRTOS/timers.c ****             {
 1115              		.loc 1 776 25 is_stmt 0 view .LVU301
 1116 001c 10309DE5 		ldr	r3, [sp, #16]
 776:../src/FreeRTOS/timers.c ****             {
 1117              		.loc 1 776 15 view .LVU302
 1118 0020 000053E3 		cmp	r3, #0
 1119 0024 0B0000AA 		bge	.L82
 1120              	.L69:
 750:../src/FreeRTOS/timers.c ****         {
 1121              		.loc 1 750 14 is_stmt 1 view .LVU303
 750:../src/FreeRTOS/timers.c ****         {
 1122              		.loc 1 750 16 is_stmt 0 view .LVU304
 1123 0028 003000E3 		movw	r3, #:lower16:.LANCHOR2
 1124 002c 003040E3 		movt	r3, #:upper16:.LANCHOR2
 1125 0030 0020A0E3 		mov	r2, #0
 1126 0034 10108DE2 		add	r1, sp, #16
 1127 0038 000093E5 		ldr	r0, [r3]
 1128 003c FEFFFFEB 		bl	xQueueReceive
 1129              	.LVL104:
 750:../src/FreeRTOS/timers.c ****         {
 1130              		.loc 1 750 14 view .LVU305
 1131 0040 000050E3 		cmp	r0, #0
 1132 0044 5900000A 		beq	.L83
 756:../src/FreeRTOS/timers.c ****                     {
 1133              		.loc 1 756 21 is_stmt 1 view .LVU306
 756:../src/FreeRTOS/timers.c ****                     {
 1134              		.loc 1 756 33 is_stmt 0 view .LVU307
 1135 0048 10309DE5 		ldr	r3, [sp, #16]
 756:../src/FreeRTOS/timers.c ****                     {
 1136              		.loc 1 756 23 view .LVU308
 1137 004c 000053E3 		cmp	r3, #0
 1138 0050 F1FFFFAA 		bge	.L68
 1139 0054 ECFFFFEA 		b	.L84
 1140              	.L82:
 780:../src/FreeRTOS/timers.c **** 
 1141              		.loc 1 780 17 is_stmt 1 view .LVU309
 780:../src/FreeRTOS/timers.c **** 
 1142              		.loc 1 780 25 is_stmt 0 view .LVU310
 1143 0058 18409DE5 		ldr	r4, [sp, #24]
 1144              	.LVL105:
 782:../src/FreeRTOS/timers.c ****                 {
 1145              		.loc 1 782 17 is_stmt 1 view .LVU311
 782:../src/FreeRTOS/timers.c ****                 {
 1146              		.loc 1 782 21 is_stmt 0 view .LVU312
 1147 005c 143094E5 		ldr	r3, [r4, #20]
 782:../src/FreeRTOS/timers.c ****                 {
 1148              		.loc 1 782 19 view .LVU313
 1149 0060 000053E3 		cmp	r3, #0
 1150 0064 0100000A 		beq	.L70
 785:../src/FreeRTOS/timers.c ****                 }
 1151              		.loc 1 785 21 is_stmt 1 view .LVU314
 785:../src/FreeRTOS/timers.c ****                 }
 1152              		.loc 1 785 30 is_stmt 0 view .LVU315
 1153 0068 040084E2 		add	r0, r4, #4
 1154 006c FEFFFFEB 		bl	uxListRemove
 1155              	.LVL106:
 1156              	.L70:
 789:../src/FreeRTOS/timers.c ****                 }
 1157              		.loc 1 789 45 is_stmt 1 view .LVU316
 792:../src/FreeRTOS/timers.c **** 
 1158              		.loc 1 792 119 view .LVU317
 800:../src/FreeRTOS/timers.c **** 
 1159              		.loc 1 800 17 view .LVU318
 800:../src/FreeRTOS/timers.c **** 
 1160              		.loc 1 800 28 is_stmt 0 view .LVU319
 1161 0070 0C008DE2 		add	r0, sp, #12
 1162 0074 FEFFFFEB 		bl	prvSampleTimeNow
 1163              	.LVL107:
 1164 0078 0050A0E1 		mov	r5, r0
 1165              	.LVL108:
 802:../src/FreeRTOS/timers.c ****                 {
 1166              		.loc 1 802 17 is_stmt 1 view .LVU320
 802:../src/FreeRTOS/timers.c ****                 {
 1167              		.loc 1 802 33 is_stmt 0 view .LVU321
 1168 007c 10309DE5 		ldr	r3, [sp, #16]
 1169 0080 090053E3 		cmp	r3, #9
 1170 0084 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1171 0088 E6FFFFEA 		b	.L69
 1172              	.L73:
 1173 008c B4000000 		.word	.L75
 1174 0090 B4000000 		.word	.L75
 1175 0094 B4000000 		.word	.L75
 1176 0098 34010000 		.word	.L74
 1177 009c 44010000 		.word	.L72
 1178 00a0 90010000 		.word	.L76
 1179 00a4 B4000000 		.word	.L75
 1180 00a8 B4000000 		.word	.L75
 1181 00ac 34010000 		.word	.L74
 1182 00b0 44010000 		.word	.L72
 1183              	.L75:
 810:../src/FreeRTOS/timers.c **** 
 1184              		.loc 1 810 25 is_stmt 1 view .LVU322
 810:../src/FreeRTOS/timers.c **** 
 1185              		.loc 1 810 43 is_stmt 0 view .LVU323
 1186 00b4 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1187 00b8 013083E3 		orr	r3, r3, #1
 1188 00bc 2830C4E5 		strb	r3, [r4, #40]
 812:../src/FreeRTOS/timers.c ****                         {
 1189              		.loc 1 812 25 is_stmt 1 view .LVU324
 812:../src/FreeRTOS/timers.c ****                         {
 1190              		.loc 1 812 93 is_stmt 0 view .LVU325
 1191 00c0 14309DE5 		ldr	r3, [sp, #20]
 812:../src/FreeRTOS/timers.c ****                         {
 1192              		.loc 1 812 117 view .LVU326
 1193 00c4 181094E5 		ldr	r1, [r4, #24]
 812:../src/FreeRTOS/timers.c ****                         {
 1194              		.loc 1 812 29 view .LVU327
 1195 00c8 0020A0E1 		mov	r2, r0
 1196 00cc 011083E0 		add	r1, r3, r1
 1197 00d0 0400A0E1 		mov	r0, r4
 1198              	.LVL109:
 812:../src/FreeRTOS/timers.c ****                         {
 1199              		.loc 1 812 29 view .LVU328
 1200 00d4 FEFFFFEB 		bl	prvInsertTimerInActiveList
 1201              	.LVL110:
 812:../src/FreeRTOS/timers.c ****                         {
 1202              		.loc 1 812 27 view .LVU329
 1203 00d8 000050E3 		cmp	r0, #0
 1204 00dc D1FFFF0A 		beq	.L69
 816:../src/FreeRTOS/timers.c ****                             traceTIMER_EXPIRED( pxTimer );
 1205              		.loc 1 816 29 is_stmt 1 view .LVU330
 816:../src/FreeRTOS/timers.c ****                             traceTIMER_EXPIRED( pxTimer );
 1206              		.loc 1 816 36 is_stmt 0 view .LVU331
 1207 00e0 203094E5 		ldr	r3, [r4, #32]
 816:../src/FreeRTOS/timers.c ****                             traceTIMER_EXPIRED( pxTimer );
 1208              		.loc 1 816 29 view .LVU332
 1209 00e4 0400A0E1 		mov	r0, r4
 1210 00e8 33FF2FE1 		blx	r3
 1211              	.LVL111:
 817:../src/FreeRTOS/timers.c **** 
 1212              		.loc 1 817 58 is_stmt 1 view .LVU333
 819:../src/FreeRTOS/timers.c ****                             {
 1213              		.loc 1 819 29 view .LVU334
 819:../src/FreeRTOS/timers.c ****                             {
 1214              		.loc 1 819 42 is_stmt 0 view .LVU335
 1215 00ec 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 819:../src/FreeRTOS/timers.c ****                             {
 1216              		.loc 1 819 31 view .LVU336
 1217 00f0 040013E3 		tst	r3, #4
 1218 00f4 CBFFFF0A 		beq	.L69
 821:../src/FreeRTOS/timers.c ****                                 configASSERT( xResult );
 1219              		.loc 1 821 33 is_stmt 1 view .LVU337
 821:../src/FreeRTOS/timers.c ****                                 configASSERT( xResult );
 1220              		.loc 1 821 154 is_stmt 0 view .LVU338
 1221 00f8 182094E5 		ldr	r2, [r4, #24]
 821:../src/FreeRTOS/timers.c ****                                 configASSERT( xResult );
 1222              		.loc 1 821 43 view .LVU339
 1223 00fc 0010A0E3 		mov	r1, #0
 1224 0100 00108DE5 		str	r1, [sp]
 1225 0104 0130A0E1 		mov	r3, r1
 1226 0108 14009DE5 		ldr	r0, [sp, #20]
 1227 010c 022080E0 		add	r2, r0, r2
 1228 0110 0400A0E1 		mov	r0, r4
 1229 0114 FEFFFFEB 		bl	xTimerGenericCommand
 1230              	.LVL112:
 822:../src/FreeRTOS/timers.c ****                                 ( void ) xResult;
 1231              		.loc 1 822 33 is_stmt 1 view .LVU340
 1232 0118 000050E3 		cmp	r0, #0
 1233 011c C1FFFF1A 		bne	.L69
 822:../src/FreeRTOS/timers.c ****                                 ( void ) xResult;
 1234              		.loc 1 822 33 discriminator 1 view .LVU341
 1235 0120 361300E3 		movw	r1, #822
 1236 0124 000000E3 		movw	r0, #:lower16:.LC1
 1237              	.LVL113:
 822:../src/FreeRTOS/timers.c ****                                 ( void ) xResult;
 1238              		.loc 1 822 33 is_stmt 0 discriminator 1 view .LVU342
 1239 0128 000040E3 		movt	r0, #:upper16:.LC1
 1240 012c FEFFFFEB 		bl	R_OS_AssertCalled
 1241              	.LVL114:
 1242 0130 BCFFFFEA 		b	.L69
 1243              	.LVL115:
 1244              	.L74:
 840:../src/FreeRTOS/timers.c ****                         break;
 1245              		.loc 1 840 25 is_stmt 1 view .LVU343
 840:../src/FreeRTOS/timers.c ****                         break;
 1246              		.loc 1 840 43 is_stmt 0 view .LVU344
 1247 0134 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1248 0138 0130C3E3 		bic	r3, r3, #1
 1249 013c 2830C4E5 		strb	r3, [r4, #40]
 841:../src/FreeRTOS/timers.c **** 
 1250              		.loc 1 841 25 is_stmt 1 view .LVU345
 1251 0140 B8FFFFEA 		b	.L69
 1252              	.L72:
 845:../src/FreeRTOS/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1253              		.loc 1 845 25 view .LVU346
 845:../src/FreeRTOS/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1254              		.loc 1 845 43 is_stmt 0 view .LVU347
 1255 0144 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1256 0148 013083E3 		orr	r3, r3, #1
 1257 014c 2830C4E5 		strb	r3, [r4, #40]
 846:../src/FreeRTOS/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1258              		.loc 1 846 25 is_stmt 1 view .LVU348
 846:../src/FreeRTOS/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1259              		.loc 1 846 83 is_stmt 0 view .LVU349
 1260 0150 14309DE5 		ldr	r3, [sp, #20]
 846:../src/FreeRTOS/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1261              		.loc 1 846 54 view .LVU350
 1262 0154 183084E5 		str	r3, [r4, #24]
 847:../src/FreeRTOS/timers.c **** 
 1263              		.loc 1 847 25 is_stmt 1 view .LVU351
 1264 0158 000053E3 		cmp	r3, #0
 1265 015c 0600000A 		beq	.L85
 1266              	.LVL116:
 1267              	.L78:
 847:../src/FreeRTOS/timers.c **** 
 1268              		.loc 1 847 77 discriminator 3 view .LVU352
 855:../src/FreeRTOS/timers.c ****                         break;
 1269              		.loc 1 855 25 discriminator 3 view .LVU353
 855:../src/FreeRTOS/timers.c ****                         break;
 1270              		.loc 1 855 91 is_stmt 0 discriminator 3 view .LVU354
 1271 0160 181094E5 		ldr	r1, [r4, #24]
 855:../src/FreeRTOS/timers.c ****                         break;
 1272              		.loc 1 855 34 discriminator 3 view .LVU355
 1273 0164 0530A0E1 		mov	r3, r5
 1274 0168 0520A0E1 		mov	r2, r5
 1275 016c 051081E0 		add	r1, r1, r5
 1276 0170 0400A0E1 		mov	r0, r4
 1277 0174 FEFFFFEB 		bl	prvInsertTimerInActiveList
 1278              	.LVL117:
 856:../src/FreeRTOS/timers.c **** 
 1279              		.loc 1 856 25 is_stmt 1 discriminator 3 view .LVU356
 1280 0178 AAFFFFEA 		b	.L69
 1281              	.LVL118:
 1282              	.L85:
 847:../src/FreeRTOS/timers.c **** 
 1283              		.loc 1 847 25 discriminator 1 view .LVU357
 1284 017c 4F1300E3 		movw	r1, #847
 1285 0180 000000E3 		movw	r0, #:lower16:.LC1
 1286              	.LVL119:
 847:../src/FreeRTOS/timers.c **** 
 1287              		.loc 1 847 25 is_stmt 0 discriminator 1 view .LVU358
 1288 0184 000040E3 		movt	r0, #:upper16:.LC1
 1289 0188 FEFFFFEB 		bl	R_OS_AssertCalled
 1290              	.LVL120:
 1291 018c F3FFFFEA 		b	.L78
 1292              	.LVL121:
 1293              	.L76:
 864:../src/FreeRTOS/timers.c ****                                 {
 1294              		.loc 1 864 33 is_stmt 1 view .LVU359
 864:../src/FreeRTOS/timers.c ****                                 {
 1295              		.loc 1 864 46 is_stmt 0 view .LVU360
 1296 0190 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 864:../src/FreeRTOS/timers.c ****                                 {
 1297              		.loc 1 864 35 view .LVU361
 1298 0194 020013E3 		tst	r3, #2
 870:../src/FreeRTOS/timers.c ****                                 }
 1299              		.loc 1 870 37 is_stmt 1 view .LVU362
 870:../src/FreeRTOS/timers.c ****                                 }
 1300              		.loc 1 870 55 is_stmt 0 view .LVU363
 1301 0198 0130C313 		bicne	r3, r3, #1
 1302 019c 2830C415 		strbne	r3, [r4, #40]
 1303 01a0 A0FFFF1A 		bne	.L69
 1304              	.L86:
 866:../src/FreeRTOS/timers.c ****                                 }
 1305              		.loc 1 866 37 is_stmt 1 view .LVU364
 1306 01a4 0400A0E1 		mov	r0, r4
 1307              	.LVL122:
 866:../src/FreeRTOS/timers.c ****                                 }
 1308              		.loc 1 866 37 is_stmt 0 view .LVU365
 1309 01a8 FEFFFFEB 		bl	vPortFree
 1310              	.LVL123:
 1311 01ac 9DFFFFEA 		b	.L69
 1312              	.LVL124:
 1313              	.L83:
 890:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1314              		.loc 1 890 5 view .LVU366
 1315 01b0 24D08DE2 		add	sp, sp, #36
 1316              		.cfi_def_cfa_offset 12
 1317              		@ sp needed
 1318 01b4 3080BDE8 		pop	{r4, r5, pc}
 1319              		.cfi_endproc
 1320              	.LFE16:
 1322              		.section	.text.prvTimerTask,"ax",%progbits
 1323              		.align	2
 1324              		.syntax unified
 1325              		.arm
 1326              		.fpu neon
 1328              	prvTimerTask:
 1329              	.LFB11:
 552:../src/FreeRTOS/timers.c ****         TickType_t xNextExpireTime;
 1330              		.loc 1 552 5 is_stmt 1 view -0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 8
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334              	.LVL125:
 552:../src/FreeRTOS/timers.c ****         TickType_t xNextExpireTime;
 1335              		.loc 1 552 5 is_stmt 0 view .LVU368
 1336 0000 04E02DE5 		str	lr, [sp, #-4]!
 1337              		.cfi_def_cfa_offset 4
 1338              		.cfi_offset 14, -4
 1339 0004 0CD04DE2 		sub	sp, sp, #12
 1340              		.cfi_def_cfa_offset 16
 1341              	.LVL126:
 1342              	.L88:
 553:../src/FreeRTOS/timers.c ****         BaseType_t xListWasEmpty;
 1343              		.loc 1 553 9 is_stmt 1 discriminator 1 view .LVU369
 554:../src/FreeRTOS/timers.c **** 
 1344              		.loc 1 554 9 discriminator 1 view .LVU370
 557:../src/FreeRTOS/timers.c **** 
 1345              		.loc 1 557 9 discriminator 1 view .LVU371
 571:../src/FreeRTOS/timers.c ****         {
 1346              		.loc 1 571 9 discriminator 1 view .LVU372
 575:../src/FreeRTOS/timers.c **** 
 1347              		.loc 1 575 13 discriminator 1 view .LVU373
 575:../src/FreeRTOS/timers.c **** 
 1348              		.loc 1 575 31 is_stmt 0 discriminator 1 view .LVU374
 1349 0008 04008DE2 		add	r0, sp, #4
 1350 000c FEFFFFEB 		bl	prvGetNextExpireTime
 1351              	.LVL127:
 579:../src/FreeRTOS/timers.c **** 
 1352              		.loc 1 579 13 is_stmt 1 discriminator 1 view .LVU375
 1353 0010 04109DE5 		ldr	r1, [sp, #4]
 1354 0014 FEFFFFEB 		bl	prvProcessTimerOrBlockTask
 1355              	.LVL128:
 582:../src/FreeRTOS/timers.c ****         }
 1356              		.loc 1 582 13 discriminator 1 view .LVU376
 1357 0018 FEFFFFEB 		bl	prvProcessReceivedCommands
 1358              	.LVL129:
 571:../src/FreeRTOS/timers.c ****         {
 1359              		.loc 1 571 16 discriminator 1 view .LVU377
 1360 001c F9FFFFEA 		b	.L88
 1361              		.cfi_endproc
 1362              	.LFE11:
 1364              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1365              		.align	2
 1366              		.global	xTimerGetTimerDaemonTaskHandle
 1367              		.syntax unified
 1368              		.arm
 1369              		.fpu neon
 1371              	xTimerGetTimerDaemonTaskHandle:
 1372              	.LFB4:
 425:../src/FreeRTOS/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1373              		.loc 1 425 5 view -0
 1374              		.cfi_startproc
 1375              		@ args = 0, pretend = 0, frame = 0
 1376              		@ frame_needed = 0, uses_anonymous_args = 0
 428:../src/FreeRTOS/timers.c ****         return xTimerTaskHandle;
 1377              		.loc 1 428 9 view .LVU379
 1378 0000 003000E3 		movw	r3, #:lower16:.LANCHOR5
 1379 0004 003040E3 		movt	r3, #:upper16:.LANCHOR5
 1380 0008 003093E5 		ldr	r3, [r3]
 1381 000c 000053E3 		cmp	r3, #0
 1382 0010 0300000A 		beq	.L96
 428:../src/FreeRTOS/timers.c ****         return xTimerTaskHandle;
 1383              		.loc 1 428 53 view .LVU380
 429:../src/FreeRTOS/timers.c ****     }
 1384              		.loc 1 429 9 view .LVU381
 429:../src/FreeRTOS/timers.c ****     }
 1385              		.loc 1 429 16 is_stmt 0 view .LVU382
 1386 0014 003000E3 		movw	r3, #:lower16:.LANCHOR5
 1387 0018 003040E3 		movt	r3, #:upper16:.LANCHOR5
 430:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1388              		.loc 1 430 5 view .LVU383
 1389 001c 000093E5 		ldr	r0, [r3]
 1390 0020 1EFF2FE1 		bx	lr
 1391              	.L96:
 425:../src/FreeRTOS/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1392              		.loc 1 425 5 discriminator 1 view .LVU384
 1393 0024 10402DE9 		push	{r4, lr}
 1394              		.cfi_def_cfa_offset 8
 1395              		.cfi_offset 4, -8
 1396              		.cfi_offset 14, -4
 428:../src/FreeRTOS/timers.c ****         return xTimerTaskHandle;
 1397              		.loc 1 428 9 is_stmt 1 discriminator 1 view .LVU385
 1398 0028 6B1FA0E3 		mov	r1, #428
 1399 002c 000000E3 		movw	r0, #:lower16:.LC1
 1400 0030 000040E3 		movt	r0, #:upper16:.LC1
 1401 0034 FEFFFFEB 		bl	R_OS_AssertCalled
 1402              	.LVL130:
 428:../src/FreeRTOS/timers.c ****         return xTimerTaskHandle;
 1403              		.loc 1 428 53 discriminator 1 view .LVU386
 429:../src/FreeRTOS/timers.c ****     }
 1404              		.loc 1 429 9 discriminator 1 view .LVU387
 429:../src/FreeRTOS/timers.c ****     }
 1405              		.loc 1 429 16 is_stmt 0 discriminator 1 view .LVU388
 1406 0038 003000E3 		movw	r3, #:lower16:.LANCHOR5
 1407 003c 003040E3 		movt	r3, #:upper16:.LANCHOR5
 430:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1408              		.loc 1 430 5 discriminator 1 view .LVU389
 1409 0040 000093E5 		ldr	r0, [r3]
 1410 0044 1080BDE8 		pop	{r4, pc}
 1411              		.cfi_endproc
 1412              	.LFE4:
 1414              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1415              		.align	2
 1416              		.global	xTimerGetPeriod
 1417              		.syntax unified
 1418              		.arm
 1419              		.fpu neon
 1421              	xTimerGetPeriod:
 1422              	.LVL131:
 1423              	.LFB5:
 434:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1424              		.loc 1 434 5 is_stmt 1 view -0
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 0
 1427              		@ frame_needed = 0, uses_anonymous_args = 0
 434:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1428              		.loc 1 434 5 is_stmt 0 view .LVU391
 1429 0000 10402DE9 		push	{r4, lr}
 1430              		.cfi_def_cfa_offset 8
 1431              		.cfi_offset 4, -8
 1432              		.cfi_offset 14, -4
 435:../src/FreeRTOS/timers.c **** 
 1433              		.loc 1 435 9 is_stmt 1 view .LVU392
 1434              	.LVL132:
 437:../src/FreeRTOS/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 1435              		.loc 1 437 9 view .LVU393
 1436 0004 004050E2 		subs	r4, r0, #0
 1437 0008 0100000A 		beq	.L100
 1438              	.LVL133:
 1439              	.L98:
 437:../src/FreeRTOS/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 1440              		.loc 1 437 31 discriminator 3 view .LVU394
 438:../src/FreeRTOS/timers.c ****     }
 1441              		.loc 1 438 9 discriminator 3 view .LVU395
 439:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1442              		.loc 1 439 5 is_stmt 0 discriminator 3 view .LVU396
 1443 000c 180094E5 		ldr	r0, [r4, #24]
 1444 0010 1080BDE8 		pop	{r4, pc}
 1445              	.LVL134:
 1446              	.L100:
 437:../src/FreeRTOS/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 1447              		.loc 1 437 9 is_stmt 1 discriminator 1 view .LVU397
 1448 0014 B51100E3 		movw	r1, #437
 1449 0018 000000E3 		movw	r0, #:lower16:.LC1
 1450              	.LVL135:
 437:../src/FreeRTOS/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 1451              		.loc 1 437 9 is_stmt 0 discriminator 1 view .LVU398
 1452 001c 000040E3 		movt	r0, #:upper16:.LC1
 1453 0020 FEFFFFEB 		bl	R_OS_AssertCalled
 1454              	.LVL136:
 1455 0024 F8FFFFEA 		b	.L98
 1456              		.cfi_endproc
 1457              	.LFE5:
 1459              		.section	.text.vTimerSetReloadMode,"ax",%progbits
 1460              		.align	2
 1461              		.global	vTimerSetReloadMode
 1462              		.syntax unified
 1463              		.arm
 1464              		.fpu neon
 1466              	vTimerSetReloadMode:
 1467              	.LVL137:
 1468              	.LFB6:
 444:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1469              		.loc 1 444 5 is_stmt 1 view -0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 444:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1473              		.loc 1 444 5 is_stmt 0 view .LVU400
 1474 0000 70402DE9 		push	{r4, r5, r6, lr}
 1475              		.cfi_def_cfa_offset 16
 1476              		.cfi_offset 4, -16
 1477              		.cfi_offset 5, -12
 1478              		.cfi_offset 6, -8
 1479              		.cfi_offset 14, -4
 1480 0004 0150A0E1 		mov	r5, r1
 445:../src/FreeRTOS/timers.c **** 
 1481              		.loc 1 445 9 is_stmt 1 view .LVU401
 1482              	.LVL138:
 447:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1483              		.loc 1 447 9 view .LVU402
 1484 0008 004050E2 		subs	r4, r0, #0
 1485 000c 0700000A 		beq	.L106
 1486              	.LVL139:
 1487              	.L102:
 447:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1488              		.loc 1 447 31 discriminator 3 view .LVU403
 448:../src/FreeRTOS/timers.c ****         {
 1489              		.loc 1 448 9 discriminator 3 view .LVU404
 1490 0010 FEFFFFEB 		bl	vPortEnterCritical
 1491              	.LVL140:
 448:../src/FreeRTOS/timers.c ****         {
 1492              		.loc 1 448 29 discriminator 3 view .LVU405
 450:../src/FreeRTOS/timers.c ****             {
 1493              		.loc 1 450 13 discriminator 3 view .LVU406
 450:../src/FreeRTOS/timers.c ****             {
 1494              		.loc 1 450 15 is_stmt 0 discriminator 3 view .LVU407
 1495 0014 000055E3 		cmp	r5, #0
 1496 0018 0900000A 		beq	.L103
 452:../src/FreeRTOS/timers.c ****             }
 1497              		.loc 1 452 17 is_stmt 1 view .LVU408
 452:../src/FreeRTOS/timers.c ****             }
 1498              		.loc 1 452 35 is_stmt 0 view .LVU409
 1499 001c 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1500 0020 043083E3 		orr	r3, r3, #4
 1501 0024 2830C4E5 		strb	r3, [r4, #40]
 1502              	.L104:
 459:../src/FreeRTOS/timers.c ****     }
 1503              		.loc 1 459 9 is_stmt 1 view .LVU410
 1504 0028 FEFFFFEB 		bl	vPortExitCritical
 1505              	.LVL141:
 459:../src/FreeRTOS/timers.c ****     }
 1506              		.loc 1 459 28 view .LVU411
 460:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1507              		.loc 1 460 5 is_stmt 0 view .LVU412
 1508 002c 7080BDE8 		pop	{r4, r5, r6, pc}
 1509              	.LVL142:
 1510              	.L106:
 447:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1511              		.loc 1 447 9 is_stmt 1 discriminator 1 view .LVU413
 1512 0030 BF1100E3 		movw	r1, #447
 1513              	.LVL143:
 447:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1514              		.loc 1 447 9 is_stmt 0 discriminator 1 view .LVU414
 1515 0034 000000E3 		movw	r0, #:lower16:.LC1
 1516              	.LVL144:
 447:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1517              		.loc 1 447 9 discriminator 1 view .LVU415
 1518 0038 000040E3 		movt	r0, #:upper16:.LC1
 1519 003c FEFFFFEB 		bl	R_OS_AssertCalled
 1520              	.LVL145:
 1521 0040 F2FFFFEA 		b	.L102
 1522              	.L103:
 456:../src/FreeRTOS/timers.c ****             }
 1523              		.loc 1 456 17 is_stmt 1 view .LVU416
 456:../src/FreeRTOS/timers.c ****             }
 1524              		.loc 1 456 35 is_stmt 0 view .LVU417
 1525 0044 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1526 0048 0430C3E3 		bic	r3, r3, #4
 1527 004c 2830C4E5 		strb	r3, [r4, #40]
 1528 0050 F4FFFFEA 		b	.L104
 1529              		.cfi_endproc
 1530              	.LFE6:
 1532              		.section	.text.uxTimerGetReloadMode,"ax",%progbits
 1533              		.align	2
 1534              		.global	uxTimerGetReloadMode
 1535              		.syntax unified
 1536              		.arm
 1537              		.fpu neon
 1539              	uxTimerGetReloadMode:
 1540              	.LVL146:
 1541              	.LFB7:
 464:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1542              		.loc 1 464 5 is_stmt 1 view -0
 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 0
 1545              		@ frame_needed = 0, uses_anonymous_args = 0
 464:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1546              		.loc 1 464 5 is_stmt 0 view .LVU419
 1547 0000 10402DE9 		push	{r4, lr}
 1548              		.cfi_def_cfa_offset 8
 1549              		.cfi_offset 4, -8
 1550              		.cfi_offset 14, -4
 465:../src/FreeRTOS/timers.c ****         UBaseType_t uxReturn;
 1551              		.loc 1 465 9 is_stmt 1 view .LVU420
 1552              	.LVL147:
 466:../src/FreeRTOS/timers.c **** 
 1553              		.loc 1 466 9 view .LVU421
 468:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1554              		.loc 1 468 9 view .LVU422
 1555 0004 004050E2 		subs	r4, r0, #0
 1556 0008 0700000A 		beq	.L112
 1557              	.LVL148:
 1558              	.L108:
 468:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1559              		.loc 1 468 31 discriminator 3 view .LVU423
 469:../src/FreeRTOS/timers.c ****         {
 1560              		.loc 1 469 9 discriminator 3 view .LVU424
 1561 000c FEFFFFEB 		bl	vPortEnterCritical
 1562              	.LVL149:
 469:../src/FreeRTOS/timers.c ****         {
 1563              		.loc 1 469 29 discriminator 3 view .LVU425
 471:../src/FreeRTOS/timers.c ****             {
 1564              		.loc 1 471 13 discriminator 3 view .LVU426
 471:../src/FreeRTOS/timers.c ****             {
 1565              		.loc 1 471 26 is_stmt 0 discriminator 3 view .LVU427
 1566 0010 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 471:../src/FreeRTOS/timers.c ****             {
 1567              		.loc 1 471 15 discriminator 3 view .LVU428
 1568 0014 040013E3 		tst	r3, #4
 1569 0018 0800001A 		bne	.L110
 474:../src/FreeRTOS/timers.c ****             }
 1570              		.loc 1 474 26 view .LVU429
 1571 001c 0040A0E3 		mov	r4, #0
 1572              	.LVL150:
 1573              	.L109:
 482:../src/FreeRTOS/timers.c **** 
 1574              		.loc 1 482 9 is_stmt 1 view .LVU430
 1575 0020 FEFFFFEB 		bl	vPortExitCritical
 1576              	.LVL151:
 482:../src/FreeRTOS/timers.c **** 
 1577              		.loc 1 482 28 view .LVU431
 484:../src/FreeRTOS/timers.c ****     }
 1578              		.loc 1 484 9 view .LVU432
 485:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1579              		.loc 1 485 5 is_stmt 0 view .LVU433
 1580 0024 0400A0E1 		mov	r0, r4
 1581 0028 1080BDE8 		pop	{r4, pc}
 1582              	.LVL152:
 1583              	.L112:
 468:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1584              		.loc 1 468 9 is_stmt 1 discriminator 1 view .LVU434
 1585 002c 751FA0E3 		mov	r1, #468
 1586 0030 000000E3 		movw	r0, #:lower16:.LC1
 1587              	.LVL153:
 468:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1588              		.loc 1 468 9 is_stmt 0 discriminator 1 view .LVU435
 1589 0034 000040E3 		movt	r0, #:upper16:.LC1
 1590 0038 FEFFFFEB 		bl	R_OS_AssertCalled
 1591              	.LVL154:
 1592 003c F2FFFFEA 		b	.L108
 1593              	.L110:
 479:../src/FreeRTOS/timers.c ****             }
 1594              		.loc 1 479 26 view .LVU436
 1595 0040 0140A0E3 		mov	r4, #1
 1596              	.LVL155:
 479:../src/FreeRTOS/timers.c ****             }
 1597              		.loc 1 479 26 view .LVU437
 1598 0044 F5FFFFEA 		b	.L109
 1599              		.cfi_endproc
 1600              	.LFE7:
 1602              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1603              		.align	2
 1604              		.global	xTimerGetExpiryTime
 1605              		.syntax unified
 1606              		.arm
 1607              		.fpu neon
 1609              	xTimerGetExpiryTime:
 1610              	.LVL156:
 1611              	.LFB8:
 489:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1612              		.loc 1 489 5 is_stmt 1 view -0
 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 0
 1615              		@ frame_needed = 0, uses_anonymous_args = 0
 489:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1616              		.loc 1 489 5 is_stmt 0 view .LVU439
 1617 0000 10402DE9 		push	{r4, lr}
 1618              		.cfi_def_cfa_offset 8
 1619              		.cfi_offset 4, -8
 1620              		.cfi_offset 14, -4
 490:../src/FreeRTOS/timers.c ****         TickType_t xReturn;
 1621              		.loc 1 490 9 is_stmt 1 view .LVU440
 1622              	.LVL157:
 491:../src/FreeRTOS/timers.c **** 
 1623              		.loc 1 491 9 view .LVU441
 493:../src/FreeRTOS/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1624              		.loc 1 493 9 view .LVU442
 1625 0004 004050E2 		subs	r4, r0, #0
 1626 0008 0100000A 		beq	.L116
 1627              	.LVL158:
 1628              	.L114:
 493:../src/FreeRTOS/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1629              		.loc 1 493 31 discriminator 3 view .LVU443
 494:../src/FreeRTOS/timers.c ****         return xReturn;
 1630              		.loc 1 494 9 discriminator 3 view .LVU444
 495:../src/FreeRTOS/timers.c ****     }
 1631              		.loc 1 495 9 discriminator 3 view .LVU445
 496:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1632              		.loc 1 496 5 is_stmt 0 discriminator 3 view .LVU446
 1633 000c 040094E5 		ldr	r0, [r4, #4]
 1634 0010 1080BDE8 		pop	{r4, pc}
 1635              	.LVL159:
 1636              	.L116:
 493:../src/FreeRTOS/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1637              		.loc 1 493 9 is_stmt 1 discriminator 1 view .LVU447
 1638 0014 ED1100E3 		movw	r1, #493
 1639 0018 000000E3 		movw	r0, #:lower16:.LC1
 1640              	.LVL160:
 493:../src/FreeRTOS/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1641              		.loc 1 493 9 is_stmt 0 discriminator 1 view .LVU448
 1642 001c 000040E3 		movt	r0, #:upper16:.LC1
 1643 0020 FEFFFFEB 		bl	R_OS_AssertCalled
 1644              	.LVL161:
 1645 0024 F8FFFFEA 		b	.L114
 1646              		.cfi_endproc
 1647              	.LFE8:
 1649              		.section	.text.pcTimerGetName,"ax",%progbits
 1650              		.align	2
 1651              		.global	pcTimerGetName
 1652              		.syntax unified
 1653              		.arm
 1654              		.fpu neon
 1656              	pcTimerGetName:
 1657              	.LVL162:
 1658              	.LFB9:
 500:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1659              		.loc 1 500 5 is_stmt 1 view -0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 500:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1663              		.loc 1 500 5 is_stmt 0 view .LVU450
 1664 0000 10402DE9 		push	{r4, lr}
 1665              		.cfi_def_cfa_offset 8
 1666              		.cfi_offset 4, -8
 1667              		.cfi_offset 14, -4
 501:../src/FreeRTOS/timers.c **** 
 1668              		.loc 1 501 9 is_stmt 1 view .LVU451
 1669              	.LVL163:
 503:../src/FreeRTOS/timers.c ****         return pxTimer->pcTimerName;
 1670              		.loc 1 503 9 view .LVU452
 1671 0004 004050E2 		subs	r4, r0, #0
 1672 0008 0100000A 		beq	.L120
 1673              	.LVL164:
 1674              	.L118:
 503:../src/FreeRTOS/timers.c ****         return pxTimer->pcTimerName;
 1675              		.loc 1 503 31 discriminator 3 view .LVU453
 504:../src/FreeRTOS/timers.c ****     }
 1676              		.loc 1 504 9 discriminator 3 view .LVU454
 505:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
 1677              		.loc 1 505 5 is_stmt 0 discriminator 3 view .LVU455
 1678 000c 000094E5 		ldr	r0, [r4]
 1679 0010 1080BDE8 		pop	{r4, pc}
 1680              	.LVL165:
 1681              	.L120:
 503:../src/FreeRTOS/timers.c ****         return pxTimer->pcTimerName;
 1682              		.loc 1 503 9 is_stmt 1 discriminator 1 view .LVU456
 1683 0014 F71100E3 		movw	r1, #503
 1684 0018 000000E3 		movw	r0, #:lower16:.LC1
 1685              	.LVL166:
 503:../src/FreeRTOS/timers.c ****         return pxTimer->pcTimerName;
 1686              		.loc 1 503 9 is_stmt 0 discriminator 1 view .LVU457
 1687 001c 000040E3 		movt	r0, #:upper16:.LC1
 1688 0020 FEFFFFEB 		bl	R_OS_AssertCalled
 1689              	.LVL167:
 1690 0024 F8FFFFEA 		b	.L118
 1691              		.cfi_endproc
 1692              	.LFE9:
 1694              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1695              		.align	2
 1696              		.global	xTimerIsTimerActive
 1697              		.syntax unified
 1698              		.arm
 1699              		.fpu neon
 1701              	xTimerIsTimerActive:
 1702              	.LVL168:
 1703              	.LFB19:
1002:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1003:../src/FreeRTOS/timers.c **** 
1004:../src/FreeRTOS/timers.c ****     BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
1005:../src/FreeRTOS/timers.c ****     {
 1704              		.loc 1 1005 5 is_stmt 1 view -0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708              		.loc 1 1005 5 is_stmt 0 view .LVU459
 1709 0000 10402DE9 		push	{r4, lr}
 1710              		.cfi_def_cfa_offset 8
 1711              		.cfi_offset 4, -8
 1712              		.cfi_offset 14, -4
1006:../src/FreeRTOS/timers.c ****         BaseType_t xReturn;
 1713              		.loc 1 1006 9 is_stmt 1 view .LVU460
1007:../src/FreeRTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1714              		.loc 1 1007 9 view .LVU461
 1715              	.LVL169:
1008:../src/FreeRTOS/timers.c **** 
1009:../src/FreeRTOS/timers.c ****         configASSERT( xTimer );
 1716              		.loc 1 1009 9 view .LVU462
 1717 0004 004050E2 		subs	r4, r0, #0
 1718 0008 0700000A 		beq	.L126
 1719              	.LVL170:
 1720              	.L122:
 1721              		.loc 1 1009 31 discriminator 3 view .LVU463
1010:../src/FreeRTOS/timers.c **** 
1011:../src/FreeRTOS/timers.c ****         /* Is the timer in the list of active timers? */
1012:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1722              		.loc 1 1012 9 discriminator 3 view .LVU464
 1723 000c FEFFFFEB 		bl	vPortEnterCritical
 1724              	.LVL171:
 1725              		.loc 1 1012 29 discriminator 3 view .LVU465
1013:../src/FreeRTOS/timers.c ****         {
1014:../src/FreeRTOS/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 1726              		.loc 1 1014 13 discriminator 3 view .LVU466
 1727              		.loc 1 1014 26 is_stmt 0 discriminator 3 view .LVU467
 1728 0010 2830D4E5 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1729              		.loc 1 1014 15 discriminator 3 view .LVU468
 1730 0014 010013E3 		tst	r3, #1
 1731 0018 0800001A 		bne	.L124
1015:../src/FreeRTOS/timers.c ****             {
1016:../src/FreeRTOS/timers.c ****                 xReturn = pdFALSE;
 1732              		.loc 1 1016 25 view .LVU469
 1733 001c 0040A0E3 		mov	r4, #0
 1734              	.LVL172:
 1735              	.L123:
1017:../src/FreeRTOS/timers.c ****             }
1018:../src/FreeRTOS/timers.c ****             else
1019:../src/FreeRTOS/timers.c ****             {
1020:../src/FreeRTOS/timers.c ****                 xReturn = pdTRUE;
1021:../src/FreeRTOS/timers.c ****             }
1022:../src/FreeRTOS/timers.c ****         }
1023:../src/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 1736              		.loc 1 1023 9 is_stmt 1 view .LVU470
 1737 0020 FEFFFFEB 		bl	vPortExitCritical
 1738              	.LVL173:
 1739              		.loc 1 1023 28 view .LVU471
1024:../src/FreeRTOS/timers.c **** 
1025:../src/FreeRTOS/timers.c ****         return xReturn;
 1740              		.loc 1 1025 9 view .LVU472
1026:../src/FreeRTOS/timers.c ****     } /*lint !e818 Can't be pointer to const due to the typedef. */
 1741              		.loc 1 1026 5 is_stmt 0 view .LVU473
 1742 0024 0400A0E1 		mov	r0, r4
 1743 0028 1080BDE8 		pop	{r4, pc}
 1744              	.LVL174:
 1745              	.L126:
1009:../src/FreeRTOS/timers.c **** 
 1746              		.loc 1 1009 9 is_stmt 1 discriminator 1 view .LVU474
 1747 002c F11300E3 		movw	r1, #1009
 1748 0030 000000E3 		movw	r0, #:lower16:.LC1
 1749              	.LVL175:
1009:../src/FreeRTOS/timers.c **** 
 1750              		.loc 1 1009 9 is_stmt 0 discriminator 1 view .LVU475
 1751 0034 000040E3 		movt	r0, #:upper16:.LC1
 1752 0038 FEFFFFEB 		bl	R_OS_AssertCalled
 1753              	.LVL176:
 1754 003c F2FFFFEA 		b	.L122
 1755              	.L124:
1020:../src/FreeRTOS/timers.c ****             }
 1756              		.loc 1 1020 25 view .LVU476
 1757 0040 0140A0E3 		mov	r4, #1
 1758              	.LVL177:
1020:../src/FreeRTOS/timers.c ****             }
 1759              		.loc 1 1020 25 view .LVU477
 1760 0044 F5FFFFEA 		b	.L123
 1761              		.cfi_endproc
 1762              	.LFE19:
 1764              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1765              		.align	2
 1766              		.global	pvTimerGetTimerID
 1767              		.syntax unified
 1768              		.arm
 1769              		.fpu neon
 1771              	pvTimerGetTimerID:
 1772              	.LVL178:
 1773              	.LFB20:
1027:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1028:../src/FreeRTOS/timers.c **** 
1029:../src/FreeRTOS/timers.c ****     void * pvTimerGetTimerID( const TimerHandle_t xTimer )
1030:../src/FreeRTOS/timers.c ****     {
 1774              		.loc 1 1030 5 is_stmt 1 view -0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
 1778              		.loc 1 1030 5 is_stmt 0 view .LVU479
 1779 0000 10402DE9 		push	{r4, lr}
 1780              		.cfi_def_cfa_offset 8
 1781              		.cfi_offset 4, -8
 1782              		.cfi_offset 14, -4
1031:../src/FreeRTOS/timers.c ****         Timer_t * const pxTimer = xTimer;
 1783              		.loc 1 1031 9 is_stmt 1 view .LVU480
 1784              	.LVL179:
1032:../src/FreeRTOS/timers.c ****         void * pvReturn;
 1785              		.loc 1 1032 9 view .LVU481
1033:../src/FreeRTOS/timers.c **** 
1034:../src/FreeRTOS/timers.c ****         configASSERT( xTimer );
 1786              		.loc 1 1034 9 view .LVU482
 1787 0004 004050E2 		subs	r4, r0, #0
 1788 0008 0400000A 		beq	.L130
 1789              	.LVL180:
 1790              	.L128:
 1791              		.loc 1 1034 31 discriminator 3 view .LVU483
1035:../src/FreeRTOS/timers.c **** 
1036:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1792              		.loc 1 1036 9 discriminator 3 view .LVU484
 1793 000c FEFFFFEB 		bl	vPortEnterCritical
 1794              	.LVL181:
 1795              		.loc 1 1036 29 discriminator 3 view .LVU485
1037:../src/FreeRTOS/timers.c ****         {
1038:../src/FreeRTOS/timers.c ****             pvReturn = pxTimer->pvTimerID;
 1796              		.loc 1 1038 13 discriminator 3 view .LVU486
 1797              		.loc 1 1038 22 is_stmt 0 discriminator 3 view .LVU487
 1798 0010 1C4094E5 		ldr	r4, [r4, #28]
 1799              	.LVL182:
1039:../src/FreeRTOS/timers.c ****         }
1040:../src/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 1800              		.loc 1 1040 9 is_stmt 1 discriminator 3 view .LVU488
 1801 0014 FEFFFFEB 		bl	vPortExitCritical
 1802              	.LVL183:
 1803              		.loc 1 1040 28 discriminator 3 view .LVU489
1041:../src/FreeRTOS/timers.c **** 
1042:../src/FreeRTOS/timers.c ****         return pvReturn;
 1804              		.loc 1 1042 9 discriminator 3 view .LVU490
1043:../src/FreeRTOS/timers.c ****     }
 1805              		.loc 1 1043 5 is_stmt 0 discriminator 3 view .LVU491
 1806 0018 0400A0E1 		mov	r0, r4
 1807 001c 1080BDE8 		pop	{r4, pc}
 1808              	.LVL184:
 1809              	.L130:
1034:../src/FreeRTOS/timers.c **** 
 1810              		.loc 1 1034 9 is_stmt 1 discriminator 1 view .LVU492
 1811 0020 0A1400E3 		movw	r1, #1034
 1812 0024 000000E3 		movw	r0, #:lower16:.LC1
 1813              	.LVL185:
1034:../src/FreeRTOS/timers.c **** 
 1814              		.loc 1 1034 9 is_stmt 0 discriminator 1 view .LVU493
 1815 0028 000040E3 		movt	r0, #:upper16:.LC1
 1816 002c FEFFFFEB 		bl	R_OS_AssertCalled
 1817              	.LVL186:
 1818 0030 F5FFFFEA 		b	.L128
 1819              		.cfi_endproc
 1820              	.LFE20:
 1822              		.section	.text.vTimerSetTimerID,"ax",%progbits
 1823              		.align	2
 1824              		.global	vTimerSetTimerID
 1825              		.syntax unified
 1826              		.arm
 1827              		.fpu neon
 1829              	vTimerSetTimerID:
 1830              	.LVL187:
 1831              	.LFB21:
1044:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1045:../src/FreeRTOS/timers.c **** 
1046:../src/FreeRTOS/timers.c ****     void vTimerSetTimerID( TimerHandle_t xTimer,
1047:../src/FreeRTOS/timers.c ****                            void * pvNewID )
1048:../src/FreeRTOS/timers.c ****     {
 1832              		.loc 1 1048 5 is_stmt 1 view -0
 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 1836              		.loc 1 1048 5 is_stmt 0 view .LVU495
 1837 0000 70402DE9 		push	{r4, r5, r6, lr}
 1838              		.cfi_def_cfa_offset 16
 1839              		.cfi_offset 4, -16
 1840              		.cfi_offset 5, -12
 1841              		.cfi_offset 6, -8
 1842              		.cfi_offset 14, -4
 1843 0004 0150A0E1 		mov	r5, r1
1049:../src/FreeRTOS/timers.c ****         Timer_t * const pxTimer = xTimer;
 1844              		.loc 1 1049 9 is_stmt 1 view .LVU496
 1845              	.LVL188:
1050:../src/FreeRTOS/timers.c **** 
1051:../src/FreeRTOS/timers.c ****         configASSERT( xTimer );
 1846              		.loc 1 1051 9 view .LVU497
 1847 0008 004050E2 		subs	r4, r0, #0
 1848 000c 0300000A 		beq	.L134
 1849              	.LVL189:
 1850              	.L132:
 1851              		.loc 1 1051 31 discriminator 3 view .LVU498
1052:../src/FreeRTOS/timers.c **** 
1053:../src/FreeRTOS/timers.c ****         taskENTER_CRITICAL();
 1852              		.loc 1 1053 9 discriminator 3 view .LVU499
 1853 0010 FEFFFFEB 		bl	vPortEnterCritical
 1854              	.LVL190:
 1855              		.loc 1 1053 29 discriminator 3 view .LVU500
1054:../src/FreeRTOS/timers.c ****         {
1055:../src/FreeRTOS/timers.c ****             pxTimer->pvTimerID = pvNewID;
 1856              		.loc 1 1055 13 discriminator 3 view .LVU501
 1857              		.loc 1 1055 32 is_stmt 0 discriminator 3 view .LVU502
 1858 0014 1C5084E5 		str	r5, [r4, #28]
1056:../src/FreeRTOS/timers.c ****         }
1057:../src/FreeRTOS/timers.c ****         taskEXIT_CRITICAL();
 1859              		.loc 1 1057 9 is_stmt 1 discriminator 3 view .LVU503
 1860 0018 FEFFFFEB 		bl	vPortExitCritical
 1861              	.LVL191:
 1862              		.loc 1 1057 28 discriminator 3 view .LVU504
1058:../src/FreeRTOS/timers.c ****     }
 1863              		.loc 1 1058 5 is_stmt 0 discriminator 3 view .LVU505
 1864 001c 7080BDE8 		pop	{r4, r5, r6, pc}
 1865              	.LVL192:
 1866              	.L134:
1051:../src/FreeRTOS/timers.c **** 
 1867              		.loc 1 1051 9 is_stmt 1 discriminator 1 view .LVU506
 1868 0020 1B1400E3 		movw	r1, #1051
 1869              	.LVL193:
1051:../src/FreeRTOS/timers.c **** 
 1870              		.loc 1 1051 9 is_stmt 0 discriminator 1 view .LVU507
 1871 0024 000000E3 		movw	r0, #:lower16:.LC1
 1872              	.LVL194:
1051:../src/FreeRTOS/timers.c **** 
 1873              		.loc 1 1051 9 discriminator 1 view .LVU508
 1874 0028 000040E3 		movt	r0, #:upper16:.LC1
 1875 002c FEFFFFEB 		bl	R_OS_AssertCalled
 1876              	.LVL195:
 1877 0030 F6FFFFEA 		b	.L132
 1878              		.cfi_endproc
 1879              	.LFE21:
 1881              		.section	.text.xTimerPendFunctionCallFromISR,"ax",%progbits
 1882              		.align	2
 1883              		.global	xTimerPendFunctionCallFromISR
 1884              		.syntax unified
 1885              		.arm
 1886              		.fpu neon
 1888              	xTimerPendFunctionCallFromISR:
 1889              	.LVL196:
 1890              	.LFB22:
1059:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1060:../src/FreeRTOS/timers.c **** 
1061:../src/FreeRTOS/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1062:../src/FreeRTOS/timers.c **** 
1063:../src/FreeRTOS/timers.c ****         BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
1064:../src/FreeRTOS/timers.c ****                                                   void * pvParameter1,
1065:../src/FreeRTOS/timers.c ****                                                   uint32_t ulParameter2,
1066:../src/FreeRTOS/timers.c ****                                                   BaseType_t * pxHigherPriorityTaskWoken )
1067:../src/FreeRTOS/timers.c ****         {
 1891              		.loc 1 1067 9 is_stmt 1 view -0
 1892              		.cfi_startproc
 1893              		@ args = 0, pretend = 0, frame = 16
 1894              		@ frame_needed = 0, uses_anonymous_args = 0
 1895              		.loc 1 1067 9 is_stmt 0 view .LVU510
 1896 0000 04E02DE5 		str	lr, [sp, #-4]!
 1897              		.cfi_def_cfa_offset 4
 1898              		.cfi_offset 14, -4
 1899 0004 14D04DE2 		sub	sp, sp, #20
 1900              		.cfi_def_cfa_offset 24
 1901 0008 02C0A0E1 		mov	ip, r2
 1902 000c 0320A0E1 		mov	r2, r3
 1903              	.LVL197:
1068:../src/FreeRTOS/timers.c ****             DaemonTaskMessage_t xMessage;
 1904              		.loc 1 1068 13 is_stmt 1 view .LVU511
1069:../src/FreeRTOS/timers.c ****             BaseType_t xReturn;
 1905              		.loc 1 1069 13 view .LVU512
1070:../src/FreeRTOS/timers.c **** 
1071:../src/FreeRTOS/timers.c ****             /* Complete the message with the function parameters and post it to the
1072:../src/FreeRTOS/timers.c ****              * daemon task. */
1073:../src/FreeRTOS/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 1906              		.loc 1 1073 13 view .LVU513
 1907              		.loc 1 1073 33 is_stmt 0 view .LVU514
 1908 0010 0130E0E3 		mvn	r3, #1
 1909              	.LVL198:
 1910              		.loc 1 1073 33 view .LVU515
 1911 0014 00308DE5 		str	r3, [sp]
1074:../src/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1912              		.loc 1 1074 13 is_stmt 1 view .LVU516
 1913              		.loc 1 1074 63 is_stmt 0 view .LVU517
 1914 0018 04008DE5 		str	r0, [sp, #4]
1075:../src/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1915              		.loc 1 1075 13 is_stmt 1 view .LVU518
 1916              		.loc 1 1075 57 is_stmt 0 view .LVU519
 1917 001c 08108DE5 		str	r1, [sp, #8]
1076:../src/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1918              		.loc 1 1076 13 is_stmt 1 view .LVU520
 1919              		.loc 1 1076 57 is_stmt 0 view .LVU521
 1920 0020 0CC08DE5 		str	ip, [sp, #12]
1077:../src/FreeRTOS/timers.c **** 
1078:../src/FreeRTOS/timers.c ****             xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1921              		.loc 1 1078 13 is_stmt 1 view .LVU522
 1922              		.loc 1 1078 23 is_stmt 0 view .LVU523
 1923 0024 000000E3 		movw	r0, #:lower16:.LANCHOR2
 1924              	.LVL199:
 1925              		.loc 1 1078 23 view .LVU524
 1926 0028 000040E3 		movt	r0, #:upper16:.LANCHOR2
 1927 002c 0030A0E3 		mov	r3, #0
 1928 0030 0D10A0E1 		mov	r1, sp
 1929              	.LVL200:
 1930              		.loc 1 1078 23 view .LVU525
 1931 0034 000090E5 		ldr	r0, [r0]
 1932 0038 FEFFFFEB 		bl	xQueueGenericSendFromISR
 1933              	.LVL201:
1079:../src/FreeRTOS/timers.c **** 
1080:../src/FreeRTOS/timers.c ****             tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 1934              		.loc 1 1080 97 is_stmt 1 view .LVU526
1081:../src/FreeRTOS/timers.c **** 
1082:../src/FreeRTOS/timers.c ****             return xReturn;
 1935              		.loc 1 1082 13 view .LVU527
1083:../src/FreeRTOS/timers.c ****         }
 1936              		.loc 1 1083 9 is_stmt 0 view .LVU528
 1937 003c 14D08DE2 		add	sp, sp, #20
 1938              		.cfi_def_cfa_offset 4
 1939              		@ sp needed
 1940 0040 04F09DE4 		ldr	pc, [sp], #4
 1941              		.cfi_endproc
 1942              	.LFE22:
 1944              		.section	.text.xTimerPendFunctionCall,"ax",%progbits
 1945              		.align	2
 1946              		.global	xTimerPendFunctionCall
 1947              		.syntax unified
 1948              		.arm
 1949              		.fpu neon
 1951              	xTimerPendFunctionCall:
 1952              	.LVL202:
 1953              	.LFB23:
1084:../src/FreeRTOS/timers.c **** 
1085:../src/FreeRTOS/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1086:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1087:../src/FreeRTOS/timers.c **** 
1088:../src/FreeRTOS/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1089:../src/FreeRTOS/timers.c **** 
1090:../src/FreeRTOS/timers.c ****         BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
1091:../src/FreeRTOS/timers.c ****                                            void * pvParameter1,
1092:../src/FreeRTOS/timers.c ****                                            uint32_t ulParameter2,
1093:../src/FreeRTOS/timers.c ****                                            TickType_t xTicksToWait )
1094:../src/FreeRTOS/timers.c ****         {
 1954              		.loc 1 1094 9 is_stmt 1 view -0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 16
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958              		.loc 1 1094 9 is_stmt 0 view .LVU530
 1959 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 1960              		.cfi_def_cfa_offset 20
 1961              		.cfi_offset 4, -20
 1962              		.cfi_offset 5, -16
 1963              		.cfi_offset 6, -12
 1964              		.cfi_offset 7, -8
 1965              		.cfi_offset 14, -4
 1966 0004 14D04DE2 		sub	sp, sp, #20
 1967              		.cfi_def_cfa_offset 40
 1968 0008 0070A0E1 		mov	r7, r0
 1969 000c 0160A0E1 		mov	r6, r1
 1970 0010 0250A0E1 		mov	r5, r2
 1971 0014 0340A0E1 		mov	r4, r3
1095:../src/FreeRTOS/timers.c ****             DaemonTaskMessage_t xMessage;
 1972              		.loc 1 1095 13 is_stmt 1 view .LVU531
1096:../src/FreeRTOS/timers.c ****             BaseType_t xReturn;
 1973              		.loc 1 1096 13 view .LVU532
1097:../src/FreeRTOS/timers.c **** 
1098:../src/FreeRTOS/timers.c ****             /* This function can only be called after a timer has been created or
1099:../src/FreeRTOS/timers.c ****              * after the scheduler has been started because, until then, the timer
1100:../src/FreeRTOS/timers.c ****              * queue does not exist. */
1101:../src/FreeRTOS/timers.c ****             configASSERT( xTimerQueue );
 1974              		.loc 1 1101 13 view .LVU533
 1975 0018 003000E3 		movw	r3, #:lower16:.LANCHOR2
 1976              	.LVL203:
 1977              		.loc 1 1101 13 is_stmt 0 view .LVU534
 1978 001c 003040E3 		movt	r3, #:upper16:.LANCHOR2
 1979 0020 003093E5 		ldr	r3, [r3]
 1980 0024 000053E3 		cmp	r3, #0
 1981 0028 0D00000A 		beq	.L140
 1982              	.LVL204:
 1983              	.L138:
 1984              		.loc 1 1101 40 is_stmt 1 discriminator 3 view .LVU535
1102:../src/FreeRTOS/timers.c **** 
1103:../src/FreeRTOS/timers.c ****             /* Complete the message with the function parameters and post it to the
1104:../src/FreeRTOS/timers.c ****              * daemon task. */
1105:../src/FreeRTOS/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 1985              		.loc 1 1105 13 discriminator 3 view .LVU536
 1986              		.loc 1 1105 33 is_stmt 0 discriminator 3 view .LVU537
 1987 002c 0030E0E3 		mvn	r3, #0
 1988 0030 00308DE5 		str	r3, [sp]
1106:../src/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1989              		.loc 1 1106 13 is_stmt 1 discriminator 3 view .LVU538
 1990              		.loc 1 1106 63 is_stmt 0 discriminator 3 view .LVU539
 1991 0034 04708DE5 		str	r7, [sp, #4]
1107:../src/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1992              		.loc 1 1107 13 is_stmt 1 discriminator 3 view .LVU540
 1993              		.loc 1 1107 57 is_stmt 0 discriminator 3 view .LVU541
 1994 0038 08608DE5 		str	r6, [sp, #8]
1108:../src/FreeRTOS/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1995              		.loc 1 1108 13 is_stmt 1 discriminator 3 view .LVU542
 1996              		.loc 1 1108 57 is_stmt 0 discriminator 3 view .LVU543
 1997 003c 0C508DE5 		str	r5, [sp, #12]
1109:../src/FreeRTOS/timers.c **** 
1110:../src/FreeRTOS/timers.c ****             xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 1998              		.loc 1 1110 13 is_stmt 1 discriminator 3 view .LVU544
 1999              		.loc 1 1110 23 is_stmt 0 discriminator 3 view .LVU545
 2000 0040 000000E3 		movw	r0, #:lower16:.LANCHOR2
 2001 0044 000040E3 		movt	r0, #:upper16:.LANCHOR2
 2002 0048 0030A0E3 		mov	r3, #0
 2003 004c 0420A0E1 		mov	r2, r4
 2004 0050 0D10A0E1 		mov	r1, sp
 2005 0054 000090E5 		ldr	r0, [r0]
 2006 0058 FEFFFFEB 		bl	xQueueGenericSend
 2007              	.LVL205:
1111:../src/FreeRTOS/timers.c **** 
1112:../src/FreeRTOS/timers.c ****             tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 2008              		.loc 1 1112 88 is_stmt 1 discriminator 3 view .LVU546
1113:../src/FreeRTOS/timers.c **** 
1114:../src/FreeRTOS/timers.c ****             return xReturn;
 2009              		.loc 1 1114 13 discriminator 3 view .LVU547
1115:../src/FreeRTOS/timers.c ****         }
 2010              		.loc 1 1115 9 is_stmt 0 discriminator 3 view .LVU548
 2011 005c 14D08DE2 		add	sp, sp, #20
 2012              		.cfi_remember_state
 2013              		.cfi_def_cfa_offset 20
 2014              		@ sp needed
 2015 0060 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 2016              	.LVL206:
 2017              	.L140:
 2018              		.cfi_restore_state
1101:../src/FreeRTOS/timers.c **** 
 2019              		.loc 1 1101 13 is_stmt 1 discriminator 1 view .LVU549
 2020 0064 4D1400E3 		movw	r1, #1101
 2021              	.LVL207:
1101:../src/FreeRTOS/timers.c **** 
 2022              		.loc 1 1101 13 is_stmt 0 discriminator 1 view .LVU550
 2023 0068 000000E3 		movw	r0, #:lower16:.LC1
 2024              	.LVL208:
1101:../src/FreeRTOS/timers.c **** 
 2025              		.loc 1 1101 13 discriminator 1 view .LVU551
 2026 006c 000040E3 		movt	r0, #:upper16:.LC1
 2027 0070 FEFFFFEB 		bl	R_OS_AssertCalled
 2028              	.LVL209:
1101:../src/FreeRTOS/timers.c **** 
 2029              		.loc 1 1101 13 discriminator 1 view .LVU552
 2030 0074 ECFFFFEA 		b	.L138
 2031              		.cfi_endproc
 2032              	.LFE23:
 2034              		.section	.text.uxTimerGetTimerNumber,"ax",%progbits
 2035              		.align	2
 2036              		.global	uxTimerGetTimerNumber
 2037              		.syntax unified
 2038              		.arm
 2039              		.fpu neon
 2041              	uxTimerGetTimerNumber:
 2042              	.LVL210:
 2043              	.LFB24:
1116:../src/FreeRTOS/timers.c **** 
1117:../src/FreeRTOS/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1118:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1119:../src/FreeRTOS/timers.c **** 
1120:../src/FreeRTOS/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1121:../src/FreeRTOS/timers.c **** 
1122:../src/FreeRTOS/timers.c ****         UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1123:../src/FreeRTOS/timers.c ****         {
 2044              		.loc 1 1123 9 is_stmt 1 view -0
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 0
 2047              		@ frame_needed = 0, uses_anonymous_args = 0
 2048              		@ link register save eliminated.
1124:../src/FreeRTOS/timers.c ****             return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 2049              		.loc 1 1124 13 view .LVU554
1125:../src/FreeRTOS/timers.c ****         }
 2050              		.loc 1 1125 9 is_stmt 0 view .LVU555
 2051 0000 240090E5 		ldr	r0, [r0, #36]
 2052              	.LVL211:
 2053              		.loc 1 1125 9 view .LVU556
 2054 0004 1EFF2FE1 		bx	lr
 2055              		.cfi_endproc
 2056              	.LFE24:
 2058              		.section	.text.vTimerSetTimerNumber,"ax",%progbits
 2059              		.align	2
 2060              		.global	vTimerSetTimerNumber
 2061              		.syntax unified
 2062              		.arm
 2063              		.fpu neon
 2065              	vTimerSetTimerNumber:
 2066              	.LVL212:
 2067              	.LFB25:
1126:../src/FreeRTOS/timers.c **** 
1127:../src/FreeRTOS/timers.c ****     #endif /* configUSE_TRACE_FACILITY */
1128:../src/FreeRTOS/timers.c **** /*-----------------------------------------------------------*/
1129:../src/FreeRTOS/timers.c **** 
1130:../src/FreeRTOS/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1131:../src/FreeRTOS/timers.c **** 
1132:../src/FreeRTOS/timers.c ****         void vTimerSetTimerNumber( TimerHandle_t xTimer,
1133:../src/FreeRTOS/timers.c ****                                    UBaseType_t uxTimerNumber )
1134:../src/FreeRTOS/timers.c ****         {
 2068              		.loc 1 1134 9 is_stmt 1 view -0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 0
 2071              		@ frame_needed = 0, uses_anonymous_args = 0
 2072              		@ link register save eliminated.
1135:../src/FreeRTOS/timers.c ****             ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2073              		.loc 1 1135 13 view .LVU558
 2074              		.loc 1 1135 53 is_stmt 0 view .LVU559
 2075 0000 241080E5 		str	r1, [r0, #36]
1136:../src/FreeRTOS/timers.c ****         }
 2076              		.loc 1 1136 9 view .LVU560
 2077 0004 1EFF2FE1 		bx	lr
 2078              		.cfi_endproc
 2079              	.LFE25:
 2081              		.section	.bss.pxCurrentTimerList,"aw",%nobits
 2082              		.align	2
 2083              		.set	.LANCHOR0,. + 0
 2086              	pxCurrentTimerList:
 2087 0000 00000000 		.space	4
 2088              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 2089              		.align	2
 2090              		.set	.LANCHOR1,. + 0
 2093              	pxOverflowTimerList:
 2094 0000 00000000 		.space	4
 2095              		.section	.bss.xActiveTimerList1,"aw",%nobits
 2096              		.align	2
 2097              		.set	.LANCHOR3,. + 0
 2100              	xActiveTimerList1:
 2101 0000 00000000 		.space	20
 2101      00000000 
 2101      00000000 
 2101      00000000 
 2101      00000000 
 2102              		.section	.bss.xActiveTimerList2,"aw",%nobits
 2103              		.align	2
 2104              		.set	.LANCHOR4,. + 0
 2107              	xActiveTimerList2:
 2108 0000 00000000 		.space	20
 2108      00000000 
 2108      00000000 
 2108      00000000 
 2108      00000000 
 2109              		.section	.bss.xLastTime.7386,"aw",%nobits
 2110              		.align	2
 2111              		.set	.LANCHOR6,. + 0
 2114              	xLastTime.7386:
 2115 0000 00000000 		.space	4
 2116              		.section	.bss.xTimerQueue,"aw",%nobits
 2117              		.align	2
 2118              		.set	.LANCHOR2,. + 0
 2121              	xTimerQueue:
 2122 0000 00000000 		.space	4
 2123              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 2124              		.align	2
 2125              		.set	.LANCHOR5,. + 0
 2128              	xTimerTaskHandle:
 2129 0000 00000000 		.space	4
 2130              		.text
 2131              	.Letext0:
 2132              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 2133              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 2134              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 2135              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 2136              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 2137              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 2138              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 2139              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 2140              		.file 10 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\p
 2141              		.file 11 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 2142              		.file 12 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 2143              		.file 13 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 2144              		.file 14 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
 2145              		.file 15 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\config_file
 2146              		.file 16 "C:\\Users\\ryota\\e2_studio\\workspace\\rza2m_ssif_sample_freertos_gcc\\src\\FreeRTOS\\i
DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:17     .text.prvGetNextExpireTime:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:25     .text.prvGetNextExpireTime:00000000 prvGetNextExpireTime
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2083   .bss.pxCurrentTimerList:00000000 .LANCHOR0
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:75     .text.prvInsertTimerInActiveList:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:80     .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2090   .bss.pxOverflowTimerList:00000000 .LANCHOR1
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:175    .rodata.prvCheckForValidListAndQueue.str1.4:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:176    .rodata.prvCheckForValidListAndQueue.str1.4:00000000 .LC0
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:179    .text.prvCheckForValidListAndQueue:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:184    .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2118   .bss.xTimerQueue:00000000 .LANCHOR2
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2097   .bss.xActiveTimerList1:00000000 .LANCHOR3
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2104   .bss.xActiveTimerList2:00000000 .LANCHOR4
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:264    .rodata.prvInitialiseNewTimer.str1.4:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:265    .rodata.prvInitialiseNewTimer.str1.4:00000000 .LC1
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:268    .text.prvInitialiseNewTimer:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:273    .text.prvInitialiseNewTimer:00000000 prvInitialiseNewTimer
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:352    .rodata.xTimerCreateTimerTask.str1.4:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:353    .rodata.xTimerCreateTimerTask.str1.4:00000000 .LC2
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:356    .text.xTimerCreateTimerTask:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:362    .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2125   .bss.xTimerTaskHandle:00000000 .LANCHOR5
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1328   .text.prvTimerTask:00000000 prvTimerTask
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:434    .text.xTimerCreate:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:440    .text.xTimerCreate:00000000 xTimerCreate
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:503    .text.xTimerGenericCommand:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:509    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:634    .text.prvSwitchTimerLists:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:639    .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:772    .text.prvSampleTimeNow:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:777    .text.prvSampleTimeNow:00000000 prvSampleTimeNow
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2111   .bss.xLastTime.7386:00000000 .LANCHOR6
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:838    .text.prvProcessExpiredTimer:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:843    .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:945    .text.prvProcessTimerOrBlockTask:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:950    .text.prvProcessTimerOrBlockTask:00000000 prvProcessTimerOrBlockTask
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1073   .text.prvProcessReceivedCommands:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1078   .text.prvProcessReceivedCommands:00000000 prvProcessReceivedCommands
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1173   .text.prvProcessReceivedCommands:0000008c $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1186   .text.prvProcessReceivedCommands:000000b4 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1323   .text.prvTimerTask:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1365   .text.xTimerGetTimerDaemonTaskHandle:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1371   .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1415   .text.xTimerGetPeriod:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1421   .text.xTimerGetPeriod:00000000 xTimerGetPeriod
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1460   .text.vTimerSetReloadMode:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1466   .text.vTimerSetReloadMode:00000000 vTimerSetReloadMode
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1533   .text.uxTimerGetReloadMode:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1539   .text.uxTimerGetReloadMode:00000000 uxTimerGetReloadMode
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1603   .text.xTimerGetExpiryTime:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1609   .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1650   .text.pcTimerGetName:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1656   .text.pcTimerGetName:00000000 pcTimerGetName
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1695   .text.xTimerIsTimerActive:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1701   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1765   .text.pvTimerGetTimerID:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1771   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1823   .text.vTimerSetTimerID:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1829   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1882   .text.xTimerPendFunctionCallFromISR:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1888   .text.xTimerPendFunctionCallFromISR:00000000 xTimerPendFunctionCallFromISR
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1945   .text.xTimerPendFunctionCall:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:1951   .text.xTimerPendFunctionCall:00000000 xTimerPendFunctionCall
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2035   .text.uxTimerGetTimerNumber:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2041   .text.uxTimerGetTimerNumber:00000000 uxTimerGetTimerNumber
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2059   .text.vTimerSetTimerNumber:00000000 $a
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2065   .text.vTimerSetTimerNumber:00000000 vTimerSetTimerNumber
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2082   .bss.pxCurrentTimerList:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2086   .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2089   .bss.pxOverflowTimerList:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2093   .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2096   .bss.xActiveTimerList1:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2100   .bss.xActiveTimerList1:00000000 xActiveTimerList1
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2103   .bss.xActiveTimerList2:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2107   .bss.xActiveTimerList2:00000000 xActiveTimerList2
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2110   .bss.xLastTime.7386:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2114   .bss.xLastTime.7386:00000000 xLastTime.7386
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2117   .bss.xTimerQueue:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2121   .bss.xTimerQueue:00000000 xTimerQueue
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2124   .bss.xTimerTaskHandle:00000000 $d
C:\Users\ryota\AppData\Local\Temp\ccODYkIp.s:2128   .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
                           .group:00000000 wm4.0.3d5c910ebb40df6df78b28e37cd67f3d
                           .group:00000000 wm4.ieeefp.h.77.3f06799abf5dd88bdddee084775a1223
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:00000000 wm4.stddef.h.39.cf3ebec0bc8c9e3d2f276a64e0fe5e7a
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.cdefs.h.49.6260d97adb8d27534cbdc0f868b8ea87
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.r_task_priority.h.26.416bb98a222bf391200df359bd0318d1
                           .group:00000000 wm4.FreeRTOSConfig.h.79.b5458a5c31689ea246b5d3a5f655ce5b
                           .group:00000000 wm4.projdefs.h.28.d6a7c9061b707820f2fcf4c2ff5d9f24
                           .group:00000000 wm4.math.h.13.97100c05caf9f40dd9f5a3cda48ccc01
                           .group:00000000 wm4.r_typedefs.h.38.e90d9de5300d9ae020e5db8c5af88b3e
                           .group:00000000 wm4.portmacro.h.32.440d21c040186908c7273660706c6bca
                           .group:00000000 wm4.portable.h.63.e9cc508c3850f44ce542149380c67812
                           .group:00000000 wm4.mpu_wrappers.h.28.768974478c42e424045182d5a8740d87
                           .group:00000000 wm4.FreeRTOS.h.67.5b4462ac037a881bffd21a8fce4c91ce
                           .group:00000000 wm4.list.h.57.02ec67e07eacffe5ca7cfb7326896236
                           .group:00000000 wm4.task.h.47.5632d4e651ed85e40d7d5c5d13006d85
                           .group:00000000 wm4.queue.h.66.45d4a3cf5de24cde7e732f8dad25383c
                           .group:00000000 wm4.timers.h.29.33f1013a12aa671006432a196ef2b690

UNDEFINED SYMBOLS
vListInsert
vPortEnterCritical
vPortExitCritical
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
vListInitialiseItem
R_OS_AssertCalled
xTaskCreate
pvPortMalloc
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
vQueueWaitForMessageRestricted
xTaskResumeAll
xQueueReceive
vPortFree
